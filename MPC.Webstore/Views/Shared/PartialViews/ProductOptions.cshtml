@model MPC.Webstore.Models.ItemCartViewModel
@using MPC.Webstore.Common;
@using Newtonsoft.Json;
@using System;
@using System.Globalization;
@{
    int StockCount = 1;
    int PriceBackgroundCount = 0;
    string priceMatrixBackground = "";
    string imagePath = "Thumb.png";
 
}
@{
    Layout = null;
}
<script src="~/Scripts/Designer/p55.js"></script>
<script src="~/Scripts/Designer/p55-ease.js"></script>
<link href="~/Scripts/Designer/a12/a66.css" rel="stylesheet" />

<div id="FormulaMatrixLayer">
</div>
<div class="container content_area" id="all-productOption-pg">
    <div class="left_right_padding">
        <div class="BreadCrumbMenu left_align col-xs-12">
            <h1>

                <a id="aLinkItem" href="@ViewBag.CategoryHRef" class="crumb_notActive left_align">
                    @ViewBag.CategoryName
                </a>
                <label id="lblVerticalLine" class="crumb_notActive">&nbsp;&nbsp;&raquo;&nbsp;&nbsp;</label>
                <a id="aLinkItem" href="#" class="crumb_Active left_align">
                    @ViewBag.ItemModel.ProductName
                </a>


            </h1>
            <div class="clearBoth"></div>
        </div>
        <div class="StocksDelivryContainer col-md-8 col-lg-8 col-xs-12 col-sm-12">
            <div id="divStockOptions" class="float_left_simple LGBC rounded_corners width730" style="padding: 5px;">
                <div id="lbl_Options" class="SelectQtyContainer textAlignLeft">
                    @Html.Raw(Html.GetKeyValueFromResourceFile("lnkltrlSelectQty", UserCookieManager.WBStoreId))
                </div>
                <div class="white_background rounded_corners divStk">
                    <div class="float_left_simple Width100Percent">
                        <div class="spacer10pxtop">

                            @foreach (var stock in ViewData["StckOptions"] as List<MPC.Models.DomainModels.ItemStockOption>)
                            {
                                if (ViewBag.SelectedStockItemId != null)
                                {
                                    string stockClassName = "rbStockType" + StockCount;
                                    if (ViewBag.SelectedStockItemId == stock.ItemStockOptionId)
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper checked data-id="@stock.ItemStockOptionId" data-stockid="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper data-id="@stock.ItemStockOptionId" data-stockid="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    string stockClassName = "rbStockType" + StockCount;
                                    if (StockCount == 1)
                                    {

                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper checked data-id="@stock.ItemStockOptionId" data-stockid="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper data-id="@stock.ItemStockOptionId" data-stockid="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                }
                                StockCount++;
                            }
                        </div>
                        <div class="clearBoth">
                            &nbsp;
                        </div>
                        <br />
                        @if (ViewData["CostCenters"] != null)
                        {
                            <div class="Fsize19 template_designing margnTop10 LandPage-Heading-Cs">
                                <label id="lbl_RefiningOptions">@Html.Raw(Html.GetKeyValueFromResourceFile("lblRefinngOpt", UserCookieManager.WBStoreId))</label>
                            </div>


                            <div class="width365pxM250p">
                                @foreach (var costcenter in ViewData["CostCenters"] as List<MPC.Models.Common.AddOnCostsCenter>)
                                {
                                        <div class="CostCenterItems" data-ismandatory="@costcenter.IsMandatory" data-stockid="@costcenter.ItemStockOptionId" style="display:none; margin:10px;">
                                            <div class="float_left_simple spacerbottom CcImageContainer">
                                                <img class="RfgImgCs" src=/@costcenter.AddOnImage />
                                            </div>
                                            <div class="extra_item float_left_simple">

                                                <input id="@costcenter.ProductAddOnID" type="checkbox" name="addOnChecks" class="checkBoxAdOnPriceCheckBox backgroundIMg" />

                                                <label class="margin5 colorBlack">@costcenter.AddOnName</label>
                                                <div class="extra_pricing float_right">
                                                    @*@if (costcenter.Type != 4)@ViewBag.Currency@costcenter.AddOnPrice
                                                        {*@
                                                    <label id="lblAddOnPrice"> </label>
                                                    @*}*@
                                                </div>
                                                <label class="checkBoxAdOnDesc marginLeft">@costcenter.WebStoreDesc</label>
                                                <div class="clearBoth">
                                                    &nbsp;
                                                </div>
                                            </div>
                                            <div class="clearBoth">
                                                &nbsp;
                                            </div>
                                            <div class="BorderLG_LP">
                                                &nbsp;
                                            </div>

                                        </div>

                                }
                        </div>
                        }
                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                </div>

            </div>
            <div class="float_left_simple UploadContainerCs LGBC rounded_corners">
                <div class="SelectQtyContainer textAlignLeft">@Html.Raw(Html.GetKeyValueFromResourceFile("btnProductDetails", UserCookieManager.WBStoreId))</div>
                <div style="background: white; padding: 10px; text-align: left;" class="rounded_corners">
                    <div class="boxCatDes">
                        <label id="lbl_CategroyCode" class="marginall5"></label>
                        <p class="marginall5">
                            <label style="font-weight:normal;width:100%;">@Html.Raw(ViewBag.ItemModel.WebDescription)</label>
                        </p>
                    </div>
                    <div class=" clear">
                    </div>
                </div>
            </div>
            @if (ViewBag.ShowUploadArkworkPanel == true)
            {
                <div class="signin_heading_div float_left_simple UploadContainerCs LGBC rounded_corners upload-panel-margin">


                    @if (ViewData["Templates"] == null)
                    {
                        <div id="lbl_Options" class="SelectQtyContainer textAlignLeft">Upload Artwork </div>


                    }
                    else
                    {
                        <div id="lbl_Options" class="SelectQtyContainer textAlignLeft"> Your approved design(s)</div>

                    }




                    <div class="float_left_simple white_background paddingLeft5px H4B UplodArkworkContainer">
                        <div class="white_background rounded_corners padding10 SidesContainerCS">

                            @if (ViewData["ArtworkAttachments"] != null)
                            {

                                <div id="attachmentUploadContainer" class="rptContainers">

                                    @foreach (var artworkFile in ViewData["ArtworkAttachments"] as List<MPC.Models.DomainModels.ItemAttachment>)
                                    {
                                        Random random = new Random();
                                        string randonNumber = "?r=" + random.Next();
                                      
                                            <div id="DivSide1" class="LGBC BD_PCS rounded_corners">
                                                <div class="DeleteIconPP">
                                                    <button type="button" class="delete_icon_img" onclick="ConfirmDeleteArtWorkPopUP(@artworkFile.ItemAttachmentId, @artworkFile.ItemId);"></button>
                                                </div>
                                                <a id="hlSide1">
                                                    <div class="PDTC_LP FI_PCS">

                                                        <img class="full_img_ThumbnailPath_LP" src="/@artworkFile.FolderPath/@artworkFile.FileName@imagePath@randonNumber" />
                                                    </div>
                                                </a>
                                                <div class="confirm_design LGBC height40_LP ">
                                                    <label id="lblFront" class="">@artworkFile.FileName</label>
                                                </div>
                                            </div>
                                    }


                                    <div class="clearBoth">
                                        &nbsp;
                                    </div>
                            </div>
                                <div class="cntuploadfilebtns">
                                    <input type="button" class="btn_upload_files_Prod_Land rounded_corners5" onclick="ShowArtworkPanel();" value="Upload File" />

                                </div>



                            }
                            else if (ViewData["Templates"] != null)
                            {
                                <div class="rptContainers">
                                    @foreach (var templateItem in ViewData["Templates"] as List<MPC.Webstore.Models.TemplateViewData>)
                                    {
                                        Random random = new Random();
                                        string randonNumber = "?r=" + random.Next();
                              
                                            <div class="LGBC BD_PCS rounded_corners">
                                                <a id="hlSide1">
                                                    <div class="PDTC_LP FI_PCS">
                                                        <img class="full_img_ThumbnailPath_LP" src="/@templateItem.FolderPath/@templateItem.FileName@imagePath" />

                                                    </div>
                                                </a>
                                                <div class="confirm_design LGBC" style="display: none;">
                                                    <label id="lblFront" class="ProdtPricedisplayNoneCs DisplayNoneCSS6"></label>
                                                </div>
                                                <div class="modify_button_container" style="position: absolute; padding: 0px; margin-top: -34px;">
                                                    <div>
                                                        <input type="button" class="btn_brown_small" value="Modify" onclick="RediredToDesigner('@templateItem.TemplateName',@templateItem.TemplateId,@templateItem.ItemId,@templateItem.CustomerId,@templateItem.ContactId,@templateItem.isCalledFrom,@templateItem.OrganisationID,@templateItem.printCropMarks.ToString().ToLower(),@templateItem.printWaterMark.ToString().ToLower(),@templateItem.isEmbedded.ToString().ToLower(),@templateItem.CategoryId);" />

                                                    </div>
                                                </div>
                                            </div>
                                    }
                            </div>
                                <div id="MoreSidesCont" class="ViewTemSidesCS" style="display:none;">
                                    <label id="lbl_ViewMore">@Html.Raw(Html.GetKeyValueFromResourceFile("lblViewMore", UserCookieManager.WBStoreId))</label><br />
                                    <label id="lbl_DesignerMode">@Html.Raw(Html.GetKeyValueFromResourceFile("lblDesignerMode", UserCookieManager.WBStoreId))</label>
                                </div>
                            }
                        </div>
                    </div>


                </div>
            }
        </div>
        <div class="float_left_simple PriceTableCs col-md-3 col-lg-3 col-xs-12">
            <div class="LGBC rounded_corners Pad5px">
                <div id="lbl_SelectQuantity" class="SelectQtyContainer">
                    @Html.Raw(Html.GetKeyValueFromResourceFile("ltrlLSelectYourQ", UserCookieManager.WBStoreId))
                </div>
                <div class="white_background rounded_corners padding10">
                    @if (ViewBag.FinishedGoodProduct != null)
                    {
                        <div class="textAlignLeft Mleft10 spacer10pxbottom">
                            <img id="FinishedGoodImg" class="full_img_ThumbnailPath" src="/@ViewBag.FinishedGoodProduct" />

                        </div>
                    }

                    <div>
                        @if (ViewBag.ItemModel.IsQtyRanged == true)
                        {
                            if (ViewBag.SelectedQuantity != null && ViewBag.SelectedQuantity != 0)
                            {
                                <input type="text" id="rangedQuantityOrdered" class="dropdownBorderCS Width60pixel  Fsize17" onblur="CalculatePriceBaseOnRangedQuantity();" value="@ViewBag.SelectedQuantity" />
                            }
                            else
                            {
                                <input type="text" id="rangedQuantityOrdered" class="dropdownBorderCS Width60pixel  Fsize17" onblur="CalculatePriceBaseOnRangedQuantity();" />
                            }

                            <input type="button" onclick="CalculatePriceBaseOnRangedQuantity(); return false;" class="go_button rounded_corners5 width35pix"
                                   value="Go" />
                        }
                        else
                        {
                            <select class="dropdownBorderCS dropdown190 rounded_corners5 template_designing float_right dropdownQtyListClass clearRight ">
                                @foreach (var quantity in ViewBag.ItemModel.ItemPriceMatrices as List<MPC.Models.DomainModels.ItemPriceMatrix>)
                                {
                                    if (ViewBag.SelectedQuantity != null)
                                    {
                                        if (ViewBag.SelectedQuantity == quantity.Quantity)
                                        {
                                                <option value="@quantity.PriceMatrixId" selected>@quantity.Quantity</option>
                                        }
                                        else
                                        {
                                            <option value="@quantity.PriceMatrixId">@quantity.Quantity</option>
                                        }

                                    }
                                    else
                                    {
                                        <option value="@quantity.PriceMatrixId">@quantity.Quantity</option>
                                    }

                                }

                        </select>
                        }

                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <br />
                    <div class=" left_align productStockDesc">
                        <label class="Fsize15 colorBlack left_align colorDGry">@ViewBag.ItemModel.ProductName</label>
                        <br />
                        <label id="lblStock" class="LightGrayLabels"></label><br />
                        <label id="lblExtra" class="LightGrayLabels"></label>
                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <div class="float_left_simple grossTotaldiv">
                        <label id="lbl_Total" class="float_left_simple">@Html.Raw(Html.GetKeyValueFromResourceFile("lblTotalHeadingText", UserCookieManager.WBStoreId)):</label>

                        <label id="lblTaxLabel" class="Fsize13 float_right marginLeft" style="margin-top:8px;">@ViewBag.VATLabel</label>

                        <label id="lblGrossTotal" class="float_right"> 0.00</label>
                        <label class="float_right">@ViewBag.Currency</label>
                    </div>
                    @if (ViewData["stockControlItems"] != null)
                    {
                           foreach (var stockItem in ViewData["stockControlItems"] as List<MPC.Webstore.ViewModels.StockItemViewModel>)
                            {
                                if (stockItem.isItemInStock == false)
                                {
                                     <div class="InStockContainer" data-isItemInStock="0" data-StockOptionid="@stockItem.StockOptionId" data-isAllowBackOrder="@stockItem.isAllowBackOrder" style="background:red; color:white;display:none;">
                               
                                       <label>@stockItem.StockTextToDisplay</label>
                               
                                    </div>
                                }
                                else
                                {
                                    <div class="InStockContainer" data-isItemInStock="1" data-StockOptionid="@stockItem.StockOptionId" data-isAllowBackOrder="@stockItem.isAllowBackOrder" style="background:#f3f3f3; color:black;display:none;">
                                        <label>@stockItem.StockTextToDisplay</label>
                                    </div>
                                }
                            }
                    }
                 
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <div class="float_right">
                        @using (Html.BeginForm())
                        {
                            @Html.HiddenFor(m => m.OrderId, new { id = "VMOrderId" })
                            @Html.HiddenFor(m => m.ItemId, new { id = "VMItemId" })
                            @Html.HiddenFor(m => m.JsonPriceMatrix, new { id = "VMJsonMatrix" })
                            @Html.HiddenFor(m => m.JsonAddOnsPrice, new { id = "VMJsonAddOns" })
                            @Html.HiddenFor(m => m.ItemPrice, new { id = "VMPrice" })
                            @Html.HiddenFor(m => m.AddOnPrice, new { id = "VMAddOnrice" })
                            @Html.HiddenFor(m => m.StockId, new { id = "VMStockId" })
                            @Html.HiddenFor(m => m.QuantityOrdered, new { id = "VMQuantityOrdered" })
                            @Html.HiddenFor(m => m.ModifiedQueueItem, new { id = "ModifiedQueueItem" })
                            @Html.HiddenFor(m => m.JsonAllQuestionQueue, new { id = "VMJsonAddOnsQuestionQueue" })
                            @Html.HiddenFor(m => m.JsonAllInputQueue, new { id = "VMJsonAddOnsInputQueue" })
                            @Html.HiddenFor(m => m.ItemStockOptionId, new { id = "VMItemStockOptionId" })
                            <input type="submit" value="Add to cart" id="AddTOCart" class="add_to_cart_btn rounded_corners5 MTopM10 background-green" onclick="return ConfirmCart();" />
                        }


                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>

                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <div id="priceToggle" onclick="MatrixToggle();" style="cursor: pointer; color: black;
                            font-size: 12px; float: left; margin-top: 15px; margin-bottom: 10px;">
                        <label id="toggleHeading" style="cursor: pointer;">@Html.Raw(Html.GetKeyValueFromResourceFile("ShowPriceMatrix", UserCookieManager.WBStoreId))</label>
                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <div id="matrixHeadingsContainer" class="" style="display: none;">
                        @if (ViewBag.ItemModel.IsQtyRanged == true)
                        {
                            <div class="confirm_design divtxtalgn MLR">
                                <label id="lbl_Quantity">@Html.Raw(Html.GetKeyValueFromResourceFile("lblQuantity", UserCookieManager.WBStoreId))</label>
                            </div>
                            <br />
                        }
                        <div class="width50p">
                            @if (ViewBag.ItemModel.IsQtyRanged == true)
                            {
                                <div class="Fsize13 divtxtalgn float_left_simple ddwidth50 marginRight" style="margin-left: -46px;">
                                    <label id="lbl_From">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlfrom", UserCookieManager.WBStoreId))</label>
                                </div>
                                <div class="Fsize13 divtxtalgn float_left_simple">

                                    <label id="lbl_To">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlTo", UserCookieManager.WBStoreId))</label>
                                </div>
                            }
                            else
                            {
                                <div class="Fsize13 divtxtalgn_CS width70pixel float_left_simple">
                                    <label id="lbl_Quanity">@Html.Raw(Html.GetKeyValueFromResourceFile("lblQuantity", UserCookieManager.WBStoreId))</label>
                                </div>
                            }

                            <div class="divtxtalgn_CS Width40Px float_right">
                                Price
                            </div>
                            <div class="clearBoth">
                                &nbsp;
                            </div>
                        </div>
                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <div id="priceMatrixContainer" style="" class="spacerbottom cntlndngtbl">

                        @foreach (var matrixItem in ViewBag.ItemModel.ItemPriceMatrices as List<MPC.Models.DomainModels.ItemPriceMatrix>)
                        {
                            if (PriceBackgroundCount % 2 == 0)
                            {
                                priceMatrixBackground = "lightgray";
                            }
                            else
                            {
                                priceMatrixBackground = "white";
                            }


                                <div class="@priceMatrixBackground">
                                    <div class="divfloat WhtBakg">
                                        <input type="hidden" id="txtHiddenPriceMatrixID" class="AccessPriceInScript" value='@matrixItem.PriceMatrixId' />

                                    </div>
                                    @if (ViewBag.ItemModel.IsQtyRanged == true)
                                    {
                                        <div id="QtyRangeFrom" class="LandingPageQty divQNum">
                                            @matrixItem.QtyRangeFrom
                                        </div>
                                        <div id="QtyRangeTo" class="LandingPageQty divQNum">
                                            @matrixItem.QtyRangeTo
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="Quantity" class="LandingPageQty divQNum">
                                            @matrixItem.Quantity
                                        </div>
                                    }
                                    <div id="matrixItemColumn1" class="mattPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='1_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType1.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType1, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblMatt">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType1, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>


                                        </span>
                                    </div>
                                    <div id="matrixItemColumn2" class="glossyPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='2_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType2.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType2, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblGlossy">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType2, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn3" class="premiumMattPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='3_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType3.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType3, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblPremiumMatt">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType3, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>


                                        </span>
                                    </div>
                                    <div id="matrixItemColumn4" class="Stock4PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='4_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType4.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType4, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblForthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType4, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn5" class="Stock5PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='5_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType5.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType5, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblFifthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType5, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn6" class="Stock6PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='6_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType6.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType6, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblSixthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType6, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn7" class="Stock7PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='7_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType7.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType7, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblSevenStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType7, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn8" class="Stock8PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='8_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType8.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType8, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblEightStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType8, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn9" class="Stock9PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='9_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType9.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType9, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblNinthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType9, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn10" class="Stock10PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='10_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType10.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType10, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblTenthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType10, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div id="matrixItemColumn11" class="Stock11PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                        <span id='11_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType11.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType11, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                            <label id="lblElevenStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType11, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                        </span>
                                    </div>
                                    <div style="clear: both;">
                                    </div>
                                </div>
                                    PriceBackgroundCount++;
                        }
                </div>
                <div id="cntTabLabel">
                    <label id="lblTaxLabel" class="Fsize10 float_right marginLeft" style="margin-top:8px;">@ViewBag.VATLabel</label>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="clearBoth">
        &nbsp;
    </div>
    <input type="hidden" value=@Html.Raw(Json.Encode(ViewBag.JasonPriceMatrix)) class="JsonPriceMatrixValue" />
    <input type="hidden" value=@Html.Raw(Json.Encode(ViewBag.JsonAddonCostCentre)) class="JsonAddonCostCentreValue" />
    <input type="hidden" id="uploadedImageSide" value="@ViewBag.AttachmentCount" />
    <input type="hidden" id="costCentreQueueItems" value="" />
</div>
<br />
</div>
<div id="pnlArtworkUploader" style="display: none;" class="">

    <div id="PnlUploaderLeftContainer">
        @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File1) || !string.IsNullOrEmpty(ViewBag.ItemModel.File2) || !string.IsNullOrEmpty(ViewBag.ItemModel.File3) || !string.IsNullOrEmpty(ViewBag.ItemModel.File4))
        {
            <div id="lbl_DownloadTemplates" class="DownloadExmContainer">
                @Html.Raw(Html.GetKeyValueFromResourceFile("downloadExmp", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_CreateUploadTemplates" class="DExmlbl">
                @Html.Raw(Html.GetKeyValueFromResourceFile("lblDEmple", UserCookieManager.WBStoreId))

            </div>

            <div id="PnlUploaderDownloadIcons" style="text-align: left;">
                @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File1))
                {
                   
                    <a id="IcoPhotoshop" href="/@ViewBag.ItemModel.File1" target="_blank" class="DownloadImages">
                        <img src="@ViewBag.ItemModel.File1Url" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File2))
                {
                   
                    <a id="IcoIllustrator" href="/@ViewBag.ItemModel.File2" target="_blank" class="DownloadImages">
                        <img src="@ViewBag.ItemModel.File2Url" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File3))
                {
                   
                    <a id="Icoindesign" href="/@ViewBag.ItemModel.File3" target="_blank" class="DownloadImages">
                        <img src="@ViewBag.ItemModel.File3Url" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File4))
                {
                   
                    <a id="IcoPdf" href="/@ViewBag.ItemModel.File4" target="_blank" class="DownloadImages">
                        <img src="@ViewBag.ItemModel.File4Url" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.ItemModel.File5))
                {
                    
                     <a id="IcoPdf" href="/@ViewBag.ItemModel.File5" target="_blank" class="DownloadImages">
                        <img src="@ViewBag.ItemModel.File5Url" />
                     </a>
                }

            </div>
            <div class="clearBoth">&nbsp;</div>
        }
        @if (ViewBag.ItemModel.GridImage != null)
        {
            <div id="formatDesignContainer">
                <div class="DesgnFormatelbl">
                    <label id="lbl_DesignSize_Format" class="Fsize13">Design sizes & format</label>
                </div>
                <div class="white_background rounded_corners left_align">
                    <img id="designFormateimg" src="/@ViewBag.ItemModel.GridImage" />
                </div>
            </div>
        }

        <div class="guidlinContainer">
            <label id="lbl_UploadFileGudelines" class="Fsize13">@Html.Raw(Html.GetKeyValueFromResourceFile("lblUploadFileGudelines", UserCookieManager.WBStoreId))</label>
        </div>

        <div class="cntDesignGuidLines" style="float:left; ">
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL1Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">

                <label id="lbl_UploadFileGudelines_Description1">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL1Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading2" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL2Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description2">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL2Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading3" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL3Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description3">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL3Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading4" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL4Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description4">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL4Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading5" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL5Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description5">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL5Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading6" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL6Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description6">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL6Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading7" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL7Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description7">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL7Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading8" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL8Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description8">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL8Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>

        </div>
        <div class="float_left_simple UploadsGuidLineContainer">
            <input type="file" name="imageUploader" id="imageUploader" class="imageUploader" />
            <input type="button" value="Upload" class="Uplod_PCS rounded_corners5 background-green" id="btnOpenUploadDailog" onclick="openDailog();" />

            <div id="lbl_PremittedFormat" class="float_left_simple Fsize12" style="width: 175px; text-align: left; margin-bottom: 5px; margin-top: 10px;">
                @Html.Raw(Html.GetKeyValueFromResourceFile("lbl_PremittedFormat", UserCookieManager.WBStoreId))
            </div>
         
            <div class="clearBoth">&nbsp;</div>
            <div id="lbl_Recommended" class="Fsize12">
                @Html.Raw(Html.GetKeyValueFromResourceFile("Recommandedtxt", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_RecommandedFormat" class="Fsize12">
                @Html.Raw(Html.GetKeyValueFromResourceFile("PdfFormatInfo", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_MAXSize" class="Fsize12">
                @Html.Raw(Html.GetKeyValueFromResourceFile("MaxFileSize", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_RecommandedResulation" class="Fsize12">
                @Html.Raw(Html.GetKeyValueFromResourceFile("logoImgsize", UserCookieManager.WBStoreId))
            </div>
        </div>
        <div class="clearBoth">&nbsp;</div>

    </div>
    <div class="clearBoth">&nbsp;</div>

</div>
<script src="/Scripts/jquery-1.10.1.min.js"></script>
    <script src="~/Scripts/PopUp.js"></script>
    <script>

    var isRanged = "@ViewBag.ItemModel.IsQtyRanged.ToString()" == "False" ? 0 : 1;
    var TotalItemPrice = 0;
    var data = "";
    var fileExtension = "";
    var isPriceSelected = 0;
    var mandatoryRefiningOptIds = "";
    var isImageUploadedOnLandingPage = 0;
    $(document).ready(function() {

        isImageUploadedOnLandingPage = @ViewBag.AttachmentCount;

        $('input:radio[name=StockPaper]:checked').next().removeClass('grayRadiantbtn').addClass('OrangeGradiantbtn');
        $('input:radio[name=StockPaper]:checked').next().css("background-color", "white");

        SelectedFirstPaperIfNoPaperSelected();


        hideShowPriceColumns($('input:radio[name=StockPaper]:checked').attr("class"));

        MatrixToggle();
        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
            } else {
                CalculatePriceBaseOnRangedQuantity();
            }

        } else {
            CalculatePriceBaseOnSelectedQuantity($(".dropdownQtyListClass").find(":selected").index());
        }

        SelectStockOption($('input:radio[name=StockPaper]:checked').attr('class'));

        SetAddOnsPriceOnPageLoad();

        SetCostCentreQueueLabelsOnModify();

    });

    $("#priceToggle").click(function() {
        $('#priceMatrixContainer').slideToggle();
    });

    function SelectedFirstPaperIfNoPaperSelected() {
        var isPaperSelected = false;
        $('input:radio[name=StockPaper]').each(function() {
            if ($(this).is(':checked')) {
                isPaperSelected = true;
            }
        });

        if(isPaperSelected == false){
            $('input:radio[name=StockPaper]').each(function() {
                $(this).prop('checked', true);
                return false;
            });
        }
    }

    function ConfirmCart() {
        if (isPriceSelected == 0) {
            ShowPopUp("Message", "Please check your details to proceed.");
            return false;
        } else {
            console.log(@ViewBag.ItemModel.isUploadImage);
            console.log(isImageUploadedOnLandingPage);
            if(@ViewBag.ItemModel.isUploadImage == 1){
                if(isImageUploadedOnLandingPage == 0){
                    ShowPopUp("Message", "Please upload your artwork to proceed.");
                    return false;
                }
            }

            var noRefiningOptSelected = 1;
            if(mandatoryRefiningOptIds != ""){
                var ListOfOptnToCheck = mandatoryRefiningOptIds.split(',');

                $(ListOfOptnToCheck).each(function(i, val) {
                    if($("#" + val).is(':checked')){
                    }else{
                        $("#" + val).parent().parent().css("background-color", "rgb(228, 180, 182)");
                        noRefiningOptSelected = 0;
                    }

                });

                if(noRefiningOptSelected == 0){
                    ShowPopUp("Message", "Highlighted refining option(s) must be selected to add product in cart.");
                    return false;
                }else{
                    return true;
                }
            }else{
                ShowLoader();

            }
        }
    }

    function MatrixToggle() {

        var hideMessage = "Hide Price Table"; //Resources.MyResource.HidePriceMatrix;
        var showMessage = "Show Price Table"; //Resources.MyResource.ShowPriceMatrix;
        if ($('#toggleHeading').text() == hideMessage) {
            $('#toggleHeading').text(showMessage);
            $('#ToogleTable').css("margin-bottom", "0px");
            $('#cntTabLabel').css("display", "none");
            $('#matrixHeadingsContainer').css("display", "none");
        } else {
            $('#toggleHeading').text(hideMessage);
            $('#ToogleTable').css("margin-bottom", "10px");
            $('#matrixHeadingsContainer').css("display", "block");
            $('#cntTabLabel').css("display", "block");

        }
    }

    function CalculatePriceBaseOnRangedQuantity() {

        var QuantityOrdered = $("#rangedQuantityOrdered").val();

        if (isNaN(QuantityOrdered) === true) {

            ShowPopUp("Message", "Please enter numeric characters only.");
            return false;
        } else if (QuantityOrdered == 0) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        } else if (QuantityOrdered.toString().indexOf(".") != -1) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        } else if (QuantityOrdered < 0) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        }

        var ObjectItemStock = "@ViewBag.ItemStock";

        if (ObjectItemStock != "") {
            if (ObjectItemStock.InStock > 0) {
                if (ObjectItemStock.isAllowBackOrder == false) {
                    var StockLevel = parseInt(ObjectItemStock.InStock);
                    if (QuantityOrdered > StockLevel) {
                        ShowPopUp('Message', "You cannot place order because the selected quantity is more than stock.");
                        return false;
                    }
                }
            }
        }

        var selectedStockType = StockNo();

        var Price = null;
        var qtyJsonData = null;
        var ActualqtyJsonData = null;
        var count = $(JsonData).length;
        if (QuantityOrdered != "") {
            var JsonData = jQuery.parseJSON($('.JsonPriceMatrixValue').val());
            var JsonFirstObject = $(JsonData)[0];
            var JsonLastObject = "";
            var OrderedJasonObject = "";
            for (var i = count - 1; i < $(JsonData).length; i++) {
                JsonLastObject = $(JsonData)[i];
            }

            if (QuantityOrdered < JsonFirstObject.QtyRangeFrom || QuantityOrdered > JsonLastObject.QtyRangeTo) {
                ShowPopUp('Message', "Your quantity exceeds the normal amount, please contact us for a special price.");
                return false;
            } else {
                count = $(JsonData).length;

                for (var i = 0; i < count; i++) {

                    if (QuantityOrdered >= $(JsonData)[i].QtyRangeFrom && QuantityOrdered <= $(JsonData)[i].QtyRangeTo) {

                        OrderedJasonObject = $(JsonData)[i];
                        break;
                    }

                }


                if (OrderedJasonObject != null) {

                    selectedStockType = selectedStockType + '_PriceMatrixID_' + OrderedJasonObject.ItemID;

                    Price = parseFloat($('#' + selectedStockType).attr("title").replace(",",""));

                    $("#VMPrice").val(parseFloat($('#' + selectedStockType).attr("data-actualprice").replace(",","")) * QuantityOrdered);
                    Price = Price * QuantityOrdered;

                    $("#VMQuantityOrdered").val(QuantityOrdered);
                    $("#VMJsonMatrix").val(JSON.stringify(OrderedJasonObject));


                    this.displayTotalPrice(Price, calculateAddOns(true));

                }
            }
        } else {
            ShowPopUp("Message", "Please enter quantity.");
            return false;
        }
    }

    function CalculatePriceBaseOnSelectedQuantity(selectedQuantityIndex) {

        var selectedStockNo = StockNo();

        var JsonData = jQuery.parseJSON($('.JsonPriceMatrixValue').val());
        JsonData = JsonData[selectedQuantityIndex];
        selectedStockNo = selectedStockNo + '_PriceMatrixID_' + JsonData.ItemID.toString();

        var price = "";

        price = parseFloat($('#' + selectedStockNo).attr("title").replace(",",""));

        $("#VMPrice").val(parseFloat($('#' + selectedStockNo).attr("data-actualprice").replace(",","")));
        $("#VMJsonMatrix").val(JSON.stringify(JsonData));

        $("#VMQuantityOrdered").val($(".dropdownQtyListClass").find(":selected").text());
        this.displayTotalPrice(price, calculateAddOns(true));
    }

    $(".dropdownQtyListClass").change(function() {


        CalculatePriceBaseOnSelectedQuantity($(this).find(":selected").index());
    });

    function SelectStockOption(classname) {

        $('input:radio[class=' + classname + ']').prop('checked', true);

        if ($('input:radio[class=' + classname + ']').is(':checked')) {

            $('input:radio[class=' + classname + ']').next().removeClass('grayRadiantbtn').addClass('OrangeGradiantbtn');

            var name = $('input:radio[class=' + classname + ']').attr("name");

            $('input:radio[name=' + name + ']').each(function() {
                if ($(this).is(':checked')) {
                    $("#lblStock").text($(this).next().text());
                    $(this).parent().parent().parent().parent().addClass('white_background');
                    $(this).parent().parent().parent().parent().css("background-color", "white");
                } else {
                    $(this).next().removeClass('OrangeGradiantbtn').addClass('grayRadiantbtn');
                }
            });



            var stockID = $('input:radio[class=' + classname + ']').attr("data-stockid");
            var ItemstockOptionID = $('input:radio[class=' + classname + ']').attr("data-Id");

            $("#VMStockId").val(stockID);
            $("#VMItemStockOptionId").val(ItemstockOptionID);
            hideShowPriceColumns(classname);


            $('.InStockContainer').each(function() {
                if($(this).attr('data-StockOptionid') == ItemstockOptionID){
                    $(this).css("display", "block");
                    if($(this).attr('data-isItemInStock') == 1){
                        $("#AddTOCart").removeAttr('disabled');
                    }else{
                        $("#AddTOCart").attr('disabled','disabled');
                    }
                }else{
                    $(this).css("display", "none");
                }
            });
        }


        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
            } else {
                CalculatePriceBaseOnRangedQuantity();
            }
        } else {
            CalculatePriceBaseOnSelectedQuantity($(".dropdownQtyListClass").find(":selected").index());
        }

        LoadCostCentersByStockId(ItemstockOptionID);
    }


    function hideShowPriceColumns(selectedPaperType) {

        var mattClomuns = $(".mattPriceMatrixColumn");
        var glossyColumns = $(".glossyPriceMatrixColumn");
        var premimumMattColumns = $(".premiumMattPriceMatrixColumn");
        var forthColumn = $(".Stock4PriceMatrixColumn");
        var fifthColumn = $(".Stock5PriceMatrixColumn");
        var SixColumn = $(".Stock6PriceMatrixColumn");
        var SevenColumn = $(".Stock7PriceMatrixColumn");
        var eightColumn = $(".Stock8PriceMatrixColumn");
        var nineColumn = $(".Stock9PriceMatrixColumn");
        var tenthColumn = $(".Stock10PriceMatrixColumn");
        var elevenColumn = $(".Stock11PriceMatrixColumn");

        hideColumns(mattClomuns);
        hideColumns(glossyColumns);
        hideColumns(premimumMattColumns);
        hideColumns(forthColumn);
        hideColumns(fifthColumn);
        hideColumns(SixColumn);
        hideColumns(SevenColumn);
        hideColumns(eightColumn);
        hideColumns(nineColumn);
        hideColumns(tenthColumn);
        hideColumns(elevenColumn);

        if (selectedPaperType == 'rbStockType1') {
            showColumns(mattClomuns);
        } else if (selectedPaperType == 'rbStockType2') {
            showColumns(glossyColumns);
        } else if (selectedPaperType == 'rbStockType3') {
            showColumns(premimumMattColumns);
        } else if (selectedPaperType == 'rbStockType4') {
            showColumns(forthColumn);
        } else if (selectedPaperType == 'rbStockType5') {
            showColumns(fifthColumn);
        } else if (selectedPaperType == 'rbStockType6') {
            showColumns(SixColumn);
        } else if (selectedPaperType == 'rbStockType7') {
            showColumns(SevenColumn);
        } else if (selectedPaperType == 'rbStockType8') {
            showColumns(eightColumn);
        } else if (selectedPaperType == 'rbStockType9') {
            showColumns(nineColumn);
        } else if (selectedPaperType == 'rbStockType10') {
            showColumns(tenthColumn);
        } else if (selectedPaperType == 'rbStockType11') {
            showColumns(elevenColumn);
        }
    }

    function showColumns(columnsListObj) {

        $(columnsListObj).css("display", "block");
    }


    function hideColumns(columnsListObj) {
        $(columnsListObj).css("display", "none");
    }

    function displayTotalPrice(itemPrice, addOnPrice) {

        itemPrice = parseFloat(itemPrice);
        addOnPrice = parseFloat(addOnPrice);



        $("#VMItemId").val(@ViewBag.ClonedItemId);
        $("#VMOrderId").val(@ViewBag.Order.EstimateId);
        // this condition sets the total to zero because no quantity is selected
        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
                if (addOnPrice == 0 && itemPrice > 0) {
                    itemPrice = 0;
                }
            }
        }


        var culturee = 1;

        var IsInt = "";
        IsInt = itemPrice;

        if (IsInt == 0) {
        } else {
            IsInt = IsInt.toString();
            var indexOfDot = IsInt.indexOf(".");
            var indexOfComma = IsInt.indexOf(",");

            if (indexOfDot == -1 || indexOfComma == -1) {

                IsInt = -1;
            } else {
                IsInt = 1;
            }

        }

        TotalItemPrice = itemPrice;
        TotalItemPrice = TotalItemPrice.toFixed(2);

        var GrossTotal = itemPrice + addOnPrice;
        GrossTotal = GrossTotal.toFixed(2).toString();

        var isShowPricing = 1;

        if (isShowPricing == 1) {
            if (IsInt == -1) {
                $('#lblGrossTotal').text(GrossTotal);
            } else {
                $('#lblGrossTotal').text(GrossTotal);
            }
        } else {
            $('#lblGrossTotal').css("display", "none");
        }
        if ((itemPrice + addOnPrice) > 0) {
            isPriceSelected = 1;
        }
    }

    // returns the the selected stock no
    function StockNo() {
        var stockName = $('input:radio[name=StockPaper]:checked').attr("class");
        if (stockName == 'rbStockType1') {
            return '1';
        } else if (stockName == 'rbStockType2') {
            return '2';
        } else if (stockName == 'rbStockType3') {
            return '3';
        } else if (stockName == 'rbStockType4') {
            return '4';
        } else if (stockName == 'rbStockType5') {
            return '5';
        } else if (stockName == 'rbStockType6') {
            return '6';
        } else if (stockName == 'rbStockType7') {
            return '7';
        } else if (stockName == 'rbStockType8') {
            return '8';
        } else if (stockName == 'rbStockType9') {
            return '9';
        } else if (stockName == 'rbStockType10') {
            return '10';
        } else if (stockName == 'rbStockType11') {
            return '11';
        }
    }

    function calculateAddOns(isReCalCostCentreOnQuantityChange) {

        var checkedPriceTotal = 0;

        var selectedCheckBox = null;

        var unCheckedBox = null;

        var JsonToSubmit = [];

        var itemsList = '';

        // all available cost centres
        var addOnJasonData = jQuery.parseJSON($('.JsonAddonCostCentreValue').val());

        var alreadyAddedCostCentres = null;

        if ($("#VMJsonAddOns").val() != "") {

            if ($("#VMJsonAddOns").val().length == 2) {
                alreadyAddedCostCentres = null;
            } else {
                alreadyAddedCostCentres = jQuery.parseJSON($("#VMJsonAddOns").val());
            }

        }
        var isUpdateJson = 0;
        //var isCostCentresRecalculated = false;
        // var selectedAddonsList = "";
        $(".checkBoxAdOnPriceCheckBox").each(function(i, val) {

            if ($(val).is(':checked')) {

                if (addOnJasonData != null) {

                    for (var i = 0; i < $(addOnJasonData).length; i++) {
                        if ($(addOnJasonData)[i].Id == $(val).attr('id')) {
                            if (alreadyAddedCostCentres != null) {
                                var breakLoop = 0;
                                var isRecordAdded = 0;
                                for (var q = 0; q < $(alreadyAddedCostCentres).length; q++) {
                                    // if ticked cost centre is already added to the jason queue then pick the cos centre from jason queue
                                    if (alreadyAddedCostCentres[q].CostCenterId == $(addOnJasonData)[i].CostCenterId) {

                                        JsonToSubmit.push(alreadyAddedCostCentres[q]);
                                        breakLoop = 1;
                                        isRecordAdded = 1;
                                        break;
                                    }

                                    if (breakLoop == 1) {
                                        breakLoop = 0;
                                        break;
                                    }
                                }
                                // else pick the item from actual costcentres queue
                                if (isRecordAdded == 0) {
                                    JsonToSubmit.push($(addOnJasonData)[i]);
                                }
                            } else {
                                //pick the item from actual costcentres queue
                                JsonToSubmit.push($(addOnJasonData)[i]);
                            }

                            selectedCheckBox = $(addOnJasonData)[i];
                            break;
                        }
                    }

                    itemsList = itemsList + "<br/> " + $(val).next().text();

                    // check the costcenter if its type is fixed then we will take its setup cost
                    //if it is per quantity type then we will (qty * priceperunitqty) + setupcost

                    var actualPrice = selectedCheckBox.ActualPrice;

                    @*if (selectedCheckBox.Type == 2) {
                            var ActualPriceIncludeVat = 0;
                            if (isRanged) {
                                var quantityOrdered = $("#rangedQuantityOrdered").val();
                                actualPrice = (quantityOrdered * actualPrice) + selectedCheckBox.SetupCost;
                                if (actualPrice < selectedCheckBox.MinimumCost && selectedCheckBox.MinimumCost != 0) {
                                    actualPrice = selectedCheckBox.MinimumCost;
                                }
                                ActualPriceIncludeVat = actualPrice + ((actualPrice * @ViewBag.TaxRate) / 100);
                                ActualPriceIncludeVat = (ActualPriceIncludeVat).toFixed(2).toString();
                            } else {
                                var quantityOrdered = $(".dropdownQtyListClass").find(":selected").val();

                                actualPrice = (quantityOrdered * actualPrice) + selectedCheckBox.SetupCost;
                                if (actualPrice < selectedCheckBox.MinimumCost && selectedCheckBox.MinimumCost != 0) {
                                    actualPrice = selectedCheckBox.MinimumCost;

                                }
                                ActualPriceIncludeVat = actualPrice + ((actualPrice * @ViewBag.TaxRate) / 100);
                                ActualPriceIncludeVat = (ActualPriceIncludeVat).toFixed(2).toString();
                            }
                            $("#VMAddOnrice").val(actualPrice);

                            checkedPriceTotal = checkedPriceTotal + parseFloat(ActualPriceIncludeVat);

                        } else if (selectedCheckBox.Type == 4) {*@ // gets the value from the label
                    if ($(val).next().next().children(':first').text() == "") {

                    } else {
                        if (isReCalCostCentreOnQuantityChange == true) {
                            PromptQuestion(selectedCheckBox.CostCenterId, $(val).attr('id'), selectedCheckBox.Type, 2, selectedCheckBox.QuantitySourceType, selectedCheckBox.TimeSourceType);
                            checkedPriceTotal = checkedPriceTotal + parseFloat($(val).next().next().children(':first').text().replace("@ViewBag.Currency", ""));
                            $("#VMAddOnrice").val(checkedPriceTotal);
                            isReCalCostCentreOnQuantityChange = false;
                        }


                    }

                    if (!$(val).hasClass('userDefined')) {
                        $(val).addClass('userDefined');
                    }


                    //} else {
                    //    checkedPriceTotal = checkedPriceTotal + parseFloat(actualPrice);

                    //}

                    //     selectedAddonsList = selectedAddonsList + JSON.stringify(selectedCheckBox, null, 2);

                }
            } else {
                // in case of user defined cost centre remove the calculated price and modify button when this costcentre will be un checked
                if ($(val).hasClass('userDefined')) {
                    $(val).next().next().html('');
                }
            }

            $("#VMJsonAddOns").val(JSON.stringify(JsonToSubmit));

            selectedCheckBox = null;

        });

        $('#lblExtra').html(itemsList);

        return checkedPriceTotal;
    }


    $('input[name=addOnChecks]').on('change', function(e) {

        displayTotalPrice(TotalItemPrice, calculateAddOns(false));

    });


    function SetAddOnsPriceOnPageLoad() {

        var selectedCheckBox = null;

        var itemsList = '';

        var orderedQuantity = $(".dropdownQtyListClass").find(":selected").val();

        if (isRanged) {
            orderedQuantity = $("#rangedQuantityOrdered").val();

        }

        var addOnJasonData = jQuery.parseJSON($('.JsonAddonCostCentreValue').val());

        $(".checkBoxAdOnPriceCheckBox").each(function(i, val) {

            if (addOnJasonData != null) {

                for (var i = 0; i < $(addOnJasonData).length; i++) {
                    if ($(addOnJasonData)[i].Id == $(val).attr('id')) {
                        selectedCheckBox = $(addOnJasonData)[i];
                        break;
                    }
                }
                itemsList = itemsList + ", " + $(this).parent().next().text();

                // check the costcenter if its type is fixed then we will take its setup cost
                //if it is per quantity type then we will (qty * priceperunitqty) + setupcost
                //var actualPrice = selectedCheckBox.ActualPrice;


                if (selectedCheckBox.isChecked == true) {
                    var ActualPriceIncludeVatOnModifyingProductCase = selectedCheckBox.ActualPrice + ((selectedCheckBox.ActualPrice * @ViewBag.TaxRate) / 100);
                    ActualPriceIncludeVatOnModifyingProductCase =   "@ViewBag.Currency" + (ActualPriceIncludeVatOnModifyingProductCase).toFixed(2).toString();
                    if(selectedCheckBox.Type == 3){ // quantity cc
                        if(selectedCheckBox.QuantitySourceType == 1){
                            $(val).next().next().html('<label>' +  ActualPriceIncludeVatOnModifyingProductCase  + '</label>');
                        }else{
                            $(val).next().next().html('<label>' +  ActualPriceIncludeVatOnModifyingProductCase + '</label>' + '<a class="CCModifyLink" onclick="PromptQuestion(' + selectedCheckBox.CostCenterId + ',' + $(val).attr('id') + ',' + selectedCheckBox.Type +', 1, ' + selectedCheckBox.QuantitySourceType + ',' + selectedCheckBox.TimeSourceType + ');" >Modify</a> ');
                        }
                    }else if(selectedCheckBox.Type == 2){
                        if(selectedCheckBox.TimeSourceType == 1){
                            $(val).next().next().html('<label>' +  ActualPriceIncludeVatOnModifyingProductCase + '</label>');
                        }else{
                            $(val).next().next().html('<label>' +  ActualPriceIncludeVatOnModifyingProductCase + '</label>' + '<a class="CCModifyLink" onclick="PromptQuestion(' + selectedCheckBox.CostCenterId + ',' + $(val).attr('id') + ',' + selectedCheckBox.Type +', 1, ' + selectedCheckBox.QuantitySourceType + ',' + selectedCheckBox.TimeSourceType + ');" >Modify</a> ');
                        }

                    }else{
                        $(val).next().next().html('<label>' +  ActualPriceIncludeVatOnModifyingProductCase + '</label>' + '<a class="CCModifyLink" onclick="PromptQuestion(' + selectedCheckBox.CostCenterId + ',' + $(val).attr('id') + ',' + selectedCheckBox.Type +', 1, ' + selectedCheckBox.QuantitySourceType + ',' + selectedCheckBox.TimeSourceType + ');" >Modify</a> ');
                    }
                    $(val).click();
                }
                $(val).attr('onclick', 'PromptQuestion(' + selectedCheckBox.CostCenterId + ', ' + $(val).attr('id') + ',' + selectedCheckBox.Type + ', \"New\",'+ selectedCheckBox.QuantitySourceType +',' + selectedCheckBox.TimeSourceType + ');');

                $("#costCentreQueueItems").val(JSON.stringify(@Html.Raw(Json.Encode(ViewBag.CostCentreQueueItems))));


            }
        });

        selectedCheckBox = null;
    }

    function ShowArtworkPanel() {
     //   var panelHtml = $("#pnlArtworkUploader").html();
        CreateGenericPopup("Upload Artwork","pnlArtworkUploader");
        $("#pnlArtworkUploader").css("display","block");
        // ShowArtWorkPopup("Upload Artwork", panelHtml);
        $('.imageUploader').change(function () { 
            data = new FormData();
            var files = $(this)[0].files;

            var name1 = files[0].name.replace(/C:\\fakepath\\/i, '');
            fileExtension = name1.substr(name1.lastIndexOf('.') + 1);

            if (files.length > 0) {

                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
            }
        });

    }
    function openDailog() {

        if ( [ "pdf", "jpg", "eps", "tiff", "csv", "xls", "xlsx" ].indexOf(fileExtension) > -1 )
        {
            HideMessagePopUpGeneric();
            ShowLoader();
            var files = $('#imageUploader')[0].files;

            var sideOFImage = $("#uploadedImageSide").val();
            if (sideOFImage == 0) {
                sideOFImage = 1;
                $("#uploadedImageSide").val(1);
            } else {
                sideOFImage = parseInt(sideOFImage) + 1;
                $("#uploadedImageSide").val(sideOFImage);
            }

            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth(); //January is 0!
            var yyyy = today.getFullYear();
            var monthNames = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];
            var FileName = yyyy + monthNames[mm] + dd;
            FileName = FileName.concat("-", '@ViewBag.ClonedItem.ProductCode', "-", '@ViewBag.Order.Order_Code', "-", '@ViewBag.ClonedItem.ItemCode', "-", '' + sideOFImage);
            var url = "mpc_content/Attachments/";
            url = url.concat('@UserCookieManager.WEBOrganisationID', "/", '@UserCookieManager.WBStoreId', "/Products/", @ViewBag.ClonedItem.ItemId);

            while (url.indexOf('/') != -1)
                url = url.replace("/", "__");

            while (FileName.indexOf('/') != -1)
                FileName = FileName.replace("/", "__")
            if (data != "") {

                $.ajax({
                    type: "POST",
                    url: "/designerapi/AttachmentUploader/PostAsync/" + url + "/" + FileName + "/" + @ViewBag.ClonedItem.ItemId + "/" + @ViewBag.Order.ContactId + "/" + @ViewBag.Order.CompanyId,
                    contentType: false,
                    processData: false,
                    data: data,
                    success: function(messages) {

                        sideOFImage = parseInt(sideOFImage) + 1;
                        $("#uploadedImageSide").val(sideOFImage);
                        if (messages[0] == "Success") {
                            console.log(messages[1]);
                            $("#attachmentUploadContainer").html(messages[1]);
                            isImageUploadedOnLandingPage = 1;
                            HideLoader();
                        } else {
                            ShowPopUp('Message', messages[0]);
                        }


                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        //alert("Error while invoking the Web API");
                        alert(thrownError);
                        HideLoader();
                    }
                });
            }else
            {
                HideMessagePopUpGeneric();
                HideLoader();
                console.log(files);
                alert(files.length);
            }
        }
        else
        {
            HideMessagePopUpGeneric();
            ShowPopUp("Message", "You cannot upload file except of pdf,jpg,eps,tiff,csv,xls,xlsx.");
        }

    }
    

    function RediredToDesigner(ProductName, TemplateID, ItemID, CompanyID, ContactID, isCalledFrom, OrganisationID, printCropMarks, printWaterMark, isEmbedded, TempDesignerID) {

        ShowLoader();
        var URL = "/Designer/" + ProductName + "/" + TempDesignerID + "/" + TemplateID + "/" + ItemID + "/" + CompanyID + "/" + ContactID + "/" + isCalledFrom + "/" + OrganisationID + "/" + printCropMarks + "/" + printWaterMark + "/" + isEmbedded;
        window.location.href = URL;
    }

    function PromptQuestion(CostCentreId, ControlId, CostCentreType, Mode, QuantitySourceType, TimeSourceType) {

        var quantityOrdered = $("#VMQuantityOrdered").val() == "" ? null : $("#VMQuantityOrdered").val();
        if ($("#" + ControlId).is(':checked')) {
            if (Mode == 2) {// This condition will excute when quantity changed and user already selected some cost centres
                ShowLoader();

                var to;
                to = "/webstoreapi/costCenter/ExecuteCostCentre?CostCentreId=" + CostCentreId + "&ClonedItemId=" + @ViewBag.ClonedItem.ItemId + "&OrderedQuantity=" + quantityOrdered + "&CallMode=UpdateAllCostCentreOnQuantityChange";
                var options = {
                    type: "POST",
                    url: to,
                    data: $("#costCentreQueueItems").val(),
                    contentType: "application/json",
                    async: true,
                    success: function(response) {

                        if (response != "") {

                            $("#ModifiedQueueItem").val($("#costCentreQueueItems").val());
                            var updatedAddOns = jQuery.parseJSON($('#VMJsonAddOns').val());

                            if (updatedAddOns != null) {

                                var totalVal = 0;
                                var TaxAppliedValueOnQtyChange = 0;
                                for (var i = 0; i < $(updatedAddOns).length; i++) {

                                    TaxAppliedValueOnQtyChange = parseFloat($(updatedAddOns)[i].ActualPrice);
                                    TaxAppliedValueOnQtyChange = TaxAppliedValueOnQtyChange + ((TaxAppliedValueOnQtyChange * @ViewBag.TaxRate) / 100);

                                    totalVal = parseFloat(totalVal) + parseFloat(TaxAppliedValueOnQtyChange);

                                }
                                displayTotalPrice(TotalItemPrice, totalVal);
                            }
                        }

                    },
                    error: function(msg) {
                        alert("Error occured ");
                        console.log(msg);
                    }
                };
                var returnText = $.ajax(options).responseText;
                HideLoader();
            } else if (Mode == 1) {// This condition executes when we modify the selected cost centre
                ShowLoader();

                var to;
                to = "/webstoreapi/costCenter/ExecuteCostCentre?CostCentreId=" + CostCentreId + "&ClonedItemId=" + @ViewBag.ClonedItem.ItemId + "&OrderedQuantity=" + quantityOrdered + "&CallMode=Modify";
                var options = {
                    type: "POST",
                    url: to,
                    data: $("#costCentreQueueItems").val(),
                    contentType: "application/json",
                    async: true,
                    success: function(response) {
                        var isQueueExistOnModify = false;
                        var QuestionQueueObjectOnModify = response[2];
                        var InputQueueObjectOnModify = response[7];
                        var WorkInstObjectOnModify =  response[3][0].WorkInstructions;

                        if(CostCentreType == 4){ // cost centres of calculation methode type 4 are formula based
                            if(QuestionQueueObjectOnModify != null){ // process the question queue and prompt for values
                                if(QuestionQueueObjectOnModify.length > 0){
                                    isQueueExistOnModify = true;
                                    ShowCostCentrePopup(QuestionQueueObjectOnModify, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, InputQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                }
                            }
                            if(isQueueExistOnModify == false){ // process the question queue and prompt for values
                                if(WorkInstObjectOnModify != null && WorkInstObjectOnModify.length > 0){
                                    isQueueExistOnModify = true;
                                    ShowCostCentrePopup(QuestionQueueObjectOnModify, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, InputQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                }
                            }
                        }else if(CostCentreType == 3){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour
                            if(InputQueueObjectOnModify != null){
                                if(QuantitySourceType == 1){ // do not process the queue for prompting values bcoz it is of variable type as QuantitySourceType = 1
                                    isQueueExistOnModify = true;
                                }else{ // process the input queue and prompt for values
                                    isQueueExistOnModify = true;
                                    if(InputQueueObjectOnModify.Items == null){
                                        ShowInputCostCentrePopup(InputQueueObjectOnModify, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                    }else{
                                        ShowInputCostCentrePopup(InputQueueObjectOnModify.Items, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                    }

                                }
                            }

                        }else if(CostCentreType == 2){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour
                            if(InputQueueObjectOnModify != null){
                                if(TimeSourceType == 1){ // do not process the queue for prompting values bcoz it is of variable type as QuantitySourceType = 1
                                    isQueueExistOnModify = true;
                                }else{ // process the input queue and prompt for values
                                    isQueueExistOnModify = true;
                                    if(InputQueueObjectOnModify.Items == null){
                                        ShowInputCostCentrePopup(InputQueueObjectOnModify, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                    }else{
                                        ShowInputCostCentrePopup(InputQueueObjectOnModify.Items, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObjectOnModify, CostCentreType, @ViewBag.TaxRate, WorkInstObjectOnModify);
                                    }

                                }
                            }
                        }
                        if(isQueueExistOnModify == false){// queue is not populating
                            alert("Error:Queue is not populating.");
                        }

                    },
                    error: function(msg) {
                        alert("Error occured ");
                        console.log(msg);
                    }
                };
                var returnText = $.ajax(options).responseText;

            } else {//This condition executes when first time a cost centre is selected from landing page
                ShowLoader();

                if ($("#costCentreQueueItems").val() == 'null' || $("#costCentreQueueItems").val() == null) { // This condition will execute when cost centre queue is empty means we are adding cost centre at very first time
                    var isQueueExist = false;
                    var QuestionQueueObject = null;
                    var InputQueueObject = null;
                    var WorkInstructions = null;
                    $.getJSON("/webstoreapi/costCenter/ExecuteCostCentre?CostCentreId=" + CostCentreId + "&ClonedItemId=" + @ViewBag.ClonedItem.ItemId + "&OrderedQuantity=" + quantityOrdered + "&CallMode=New",
                        function(DT) {
                            QuestionQueueObject = DT[2];
                            InputQueueObject = DT[7];


                            WorkInstructions = DT[3][0].WorkInstructions;

                            if(CostCentreType == 4){ // cost centres of calculation methode type 4 are formula based
                                if(QuestionQueueObject != null && QuestionQueueObject != ""){ // process the question queue and prompt for values
                                    if(QuestionQueueObject.length > 0){
                                        isQueueExist = true;
                                        ShowCostCentrePopup(QuestionQueueObject, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, InputQueueObject.Items, CostCentreType, @ViewBag.TaxRate, WorkInstructions);
                                    }
                                    if(InputQueueObject.Items.length == 3){ // do not process the queue for prompting values
                                        isQueueExist = true;
                                    }
                                }else if(isQueueExist == false){ // process the question queue and prompt for values
                                    isQueueExist = true;
                                    if(WorkInstructions != null && WorkInstructions.length > 0){
                                        isQueueExist = true;
                                        ShowCostCentrePopup(QuestionQueueObject, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, InputQueueObject.Items, CostCentreType, @ViewBag.TaxRate, WorkInstructions);
                                    }else{
                                        SetGlobalCostCentreQueue(QuestionQueueObject, null, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                    }
                                }
                            }else if(CostCentreType == 3){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour
                                if(QuantitySourceType == 1){ // do not process the queue for prompting values else execute it as it is of variable type
                                    isQueueExist = true;
                                    SetGlobalCostCentreQueue(QuestionQueueObject, InputQueueObject.Items, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                }else{ // process the input queue and prompt for values
                                    isQueueExist = true;
                                    ShowInputCostCentrePopup(InputQueueObject.Items, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObject, CostCentreType, @ViewBag.TaxRate, WorkInstructions);
                                }
                            }else if(CostCentreType == 2){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour

                                if(TimeSourceType == 1){ // do not process the queue for prompting values else execute it as it is of variable type
                                    isQueueExist = true;
                                    SetGlobalCostCentreQueue(QuestionQueueObject, InputQueueObject.Items, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                }else{ // process the input queue and prompt for values
                                    isQueueExist = true;
                                    ShowInputCostCentrePopup(InputQueueObject.Items, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, QuestionQueueObject, CostCentreType, @ViewBag.TaxRate, WorkInstructions);
                                }
                            }
                            if(isQueueExist == false){// queue is not populating
                                alert("Error:Queue is not populating.");
                                HideLoader();
                            }
                        });

                } else { // This conditon will execute when atleast when cost centre is executed/selected and requesting to add another cost centre
                    var to;
                    to = "/webstoreapi/costCenter/ExecuteCostCentre?CostCentreId=" + CostCentreId + "&ClonedItemId=" + @ViewBag.ClonedItem.ItemId + "&OrderedQuantity=" + quantityOrdered + "&CallMode=addAnother";
                    var options = {
                        type: "POST",
                        url: to,
                        data: $("#costCentreQueueItems").val(),
                        contentType: "application/json",
                        async: true,
                        success: function(response) {

                            // This Section update the global queue List object
                            var AnOtherQuestionQueueObject = response[2];
                            var AnOtherInputQueueObject = response[7];
                            var AnOtherWorkInstructions =  response[3][0].WorkInstructions;

                            // This section will prompt the cost centre
                            if(CostCentreType == 4){ // cost centres of calculation methode type 4 are formula based
                                console.log("QuestionQueueObject: " + AnOtherQuestionQueueObject + " InputQueueObject" + AnOtherInputQueueObject + " WorkInstructions:" + AnOtherWorkInstructions);
                                if(AnOtherQuestionQueueObject != null && AnOtherQuestionQueueObject != ""){ // process the question queue and prompt for values
                                    if(AnOtherQuestionQueueObject.length > 0){
                                        var arrayOfQuestionQueueObjects = [];
                                        for (var i = 0; i < $(AnOtherQuestionQueueObject).length; i++) {
                                            if ($(AnOtherQuestionQueueObject)[i].CostCentreID == CostCentreId) {
                                                arrayOfQuestionQueueObjects.push($(AnOtherQuestionQueueObject)[i]);
                                            }
                                        }
                                        var data = JSON.parse($("#costCentreQueueItems").val());

                                        if(data.QuestionQueues == null){
                                            data.QuestionQueues = [];
                                        }

                                        for(var i =0; i < arrayOfQuestionQueueObjects.length;i++)
                                        {
                                            data.QuestionQueues.push( arrayOfQuestionQueueObjects[i]);
                                        }
                                        $("#costCentreQueueItems").val(JSON.stringify(data, null, 2));

                                        ShowCostCentrePopup(arrayOfQuestionQueueObjects, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice,AnOtherInputQueueObject, CostCentreType, @ViewBag.TaxRate, AnOtherWorkInstructions);
                                    }
                                }else if(AnOtherWorkInstructions != null && AnOtherWorkInstructions != ""){ // process the question queue and prompt for values

                                    ShowCostCentrePopup(AnOtherQuestionQueueObject, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice,AnOtherInputQueueObject, CostCentreType, @ViewBag.TaxRate, AnOtherWorkInstructions);

                                }
                                else{

                                    SetGlobalCostCentreQueue(AnOtherQuestionQueueObject, AnOtherInputQueueObject, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                }
                            }else if(CostCentreType == 3){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour
                                if(QuantitySourceType == 1){ // do not process the queue for prompting values
                                    SetGlobalCostCentreQueue(AnOtherQuestionQueueObject, AnOtherInputQueueObject.Items, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                }else{ // process the input queue and prompt for values
                                    var arrayOfInputQueueObjects = [];
                                    for (var i = 0; i < $(AnOtherInputQueueObject.Items).length; i++) {
                                        if ($(AnOtherInputQueueObject.Items)[i].CostCentreID == CostCentreId) {
                                            arrayOfInputQueueObjects.push($(AnOtherInputQueueObject.Items)[i]);
                                        }
                                    }
                                    var data = JSON.parse($("#costCentreQueueItems").val());
                                    if(data.InputQueues == null){
                                        data.InputQueues = [];
                                    }
                                    for(var i =0; i < arrayOfInputQueueObjects.length;i++)
                                    {
                                        data.InputQueues.push( arrayOfInputQueueObjects[i]);
                                    }
                                    $("#costCentreQueueItems").val(JSON.stringify(data, null, 2));

                                    ShowInputCostCentrePopup(arrayOfInputQueueObjects, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, AnOtherQuestionQueueObject, CostCentreType, @ViewBag.TaxRate, AnOtherWorkInstructions);
                                }
                            }else if(CostCentreType == 2){ // if method type is not 4 then it will be 3 : per quantity or 4: per hour
                                if(TimeSourceType == 1){ // do not process the queue for prompting values
                                    SetGlobalCostCentreQueue(AnOtherQuestionQueueObject, AnOtherInputQueueObject.Items, CostCentreId, CostCentreType,@ViewBag.ClonedItem.ItemId, ControlId, "", TotalItemPrice, "@ViewBag.Currency", false, @ViewBag.TaxRate);
                                }else{ // process the input queue and prompt for values
                                    var arrayOfInputQueueObjects = [];
                                    for (var i = 0; i < $(AnOtherInputQueueObject.Items).length; i++) {
                                        if ($(AnOtherInputQueueObject.Items)[i].CostCentreID == CostCentreId) {
                                            arrayOfInputQueueObjects.push($(AnOtherInputQueueObject.Items)[i]);
                                        }
                                    }
                                    var data = JSON.parse($("#costCentreQueueItems").val());
                                    if(data.InputQueues == null){
                                        data.InputQueues = [];
                                    }
                                    for(var i =0; i < arrayOfInputQueueObjects.length;i++)
                                    {
                                        data.InputQueues.push( arrayOfInputQueueObjects[i]);
                                    }
                                    $("#costCentreQueueItems").val(JSON.stringify(data, null, 2));

                                    ShowInputCostCentrePopup(arrayOfInputQueueObjects, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice, AnOtherQuestionQueueObject, CostCentreType, @ViewBag.TaxRate, AnOtherWorkInstructions);
                                }
                            }
                        },
                        error: function(msg) {
                            alert("Error occured ");
                            console.log(msg);
                        }
                    };
                    var returnText = $.ajax(options).responseText;

                }
            }
        }else{ // remove the added array of cost centre as cost centre is un checked and apply the price to total

            var JsonAllQueueItemArray = JSON.parse($("#costCentreQueueItems").val());
            if(JsonAllQueueItemArray.QuestionQueues.length > 0){

                JsonAllQueueItemArray.QuestionQueues = $.grep(JsonAllQueueItemArray.QuestionQueues, function (n, i) {
                    return (n.CostCentreID != CostCentreId);
                });
            }
            if(JsonAllQueueItemArray.InputQueues.length > 0){
                JsonAllQueueItemArray.InputQueues = $.grep(JsonAllQueueItemArray.InputQueues, function (n, i) {
                    return (n.CostCentreID != CostCentreId);
                });

            }
            $("#costCentreQueueItems").val(JSON.stringify(JsonAllQueueItemArray, null, 2));
            ReAddCostCentresValuesToTotalOnUnCheck();
        }
    }

    function LoadCostCentersByStockId(StockId) {

        var noRefiningOpt = 1;
        mandatoryRefiningOptIds = "";
        $(".CostCenterItems").each(function(i, val) {
            if (StockId == $(val).attr('data-StockId')) {
                $(val).css("display", "block");
                if($(val).attr('data-ismandatory') == 1){

                    if(mandatoryRefiningOptIds == ""){
                        mandatoryRefiningOptIds = $(val).children().next().children().attr('id');
                    }else{
                        mandatoryRefiningOptIds = mandatoryRefiningOptIds + "," + $(val).children().next().children().attr('id');
                    }
                }

                noRefiningOpt = 0;
            } else {

                $(val).css("display", "none");

                if ($(val).children().next().children().is(':checked')) {
                    $(val).children().next().children().click();

                }
            }

        });

        if(noRefiningOpt == 1){
            $("#lbl_RefiningOptions").css("display", "none");
            mandatoryRefiningOptIds = "";
        }else{
            $("#lbl_RefiningOptions").css("display", "block");
        }
    }

    function SetCostCentreQueueLabelsOnModify(){
        if ("@ViewBag.Mode" == "Modify") {
            var UpdatedGlobalQueueArrayOnLoad = JSON.parse($("#costCentreQueueItems").val());
            var CostCentreQueueObjectToSetLabels = [];
            var updatedAddOns = jQuery.parseJSON($('#VMJsonAddOns').val());
            var CostCentreTotalTaxAppliedValue = 0;
            var CostCentreTotalOnModify = 0;
            if (updatedAddOns != null) {

                for (var i = 0; i < $(updatedAddOns).length; i++) {
                    CostCentreTotalTaxAppliedValue = parseFloat($(updatedAddOns)[i].ActualPrice);
                    CostCentreTotalTaxAppliedValue = CostCentreTotalTaxAppliedValue + ((CostCentreTotalTaxAppliedValue * @ViewBag.TaxRate) / 100);
                    CostCentreTotalOnModify = parseFloat(CostCentreTotalOnModify) + parseFloat(CostCentreTotalTaxAppliedValue);
                    if ($(updatedAddOns)[i].Type == 4) { // question queue
                        if(UpdatedGlobalQueueArrayOnLoad != null ){
                            if(UpdatedGlobalQueueArrayOnLoad.QuestionQueues != null){
                                for (var j = 0; j < UpdatedGlobalQueueArrayOnLoad.QuestionQueues.length; j++) {
                                    if (UpdatedGlobalQueueArrayOnLoad.QuestionQueues[j].CostCentreID == $(updatedAddOns)[i].CostCentreID) {
                                        CostCentreQueueObjectToSetLabels.push(UpdatedGlobalQueueArrayOnLoad.QuestionQueues[j]);
                                    }
                                }
                            }else{
                                console.log("Json data on modify is corrupted.");
                            }
                        }else{
                            console.log("Json data on modify is corrupted.");
                        }

                    } else { // input queue
                        if(UpdatedGlobalQueueArrayOnLoad != null ){
                            if(UpdatedGlobalQueueArrayOnLoad.InputQueues != null){
                                for (var k = 0; k < UpdatedGlobalQueueArrayOnLoad.InputQueues.length; k++) {

                                    if (UpdatedGlobalQueueArrayOnLoad.InputQueues[k].CostCentreID == $(updatedAddOns)[i].CostCentreID) {
                                        CostCentreQueueObjectToSetLabels.push(UpdatedGlobalQueueArrayOnLoad.InputQueues[k]);
                                    }
                                }
                            }else{
                                console.log("Json data on modify is corrupted.");
                            }
                        }else{
                            console.log("Json data on modify is corrupted.");
                        }

                    }

                    if (CostCentreQueueObjectToSetLabels.length > 0) {
                        $(updatedAddOns)[i].CostCentreJasonData = JSON.stringify(CostCentreQueueObjectToSetLabels, null, 2);
                    }

                }
            }

            $('#VMJsonAddOns').val(JSON.stringify(updatedAddOns));
            displayTotalPrice(TotalItemPrice, CostCentreTotalOnModify);
        }
    }

    function ReAddCostCentresValuesToTotalOnUnCheck(){
        var updatedAddOns = jQuery.parseJSON($('#VMJsonAddOns').val());
        var ReTaxAppliedValueOnUnCheck = 0;
        var ReCalTotalVal = 0;
        if (updatedAddOns != null) {
            for (var i = 0; i < $(updatedAddOns).length; i++) {
                ReTaxAppliedValueOnUnCheck = parseFloat($(updatedAddOns)[i].ActualPrice);
                ReTaxAppliedValueOnUnCheck = ReTaxAppliedValueOnUnCheck + ((ReTaxAppliedValueOnUnCheck * @ViewBag.TaxRate) / 100);
                ReCalTotalVal = parseFloat(ReCalTotalVal) + parseFloat(ReTaxAppliedValueOnUnCheck);

            }
        }
        displayTotalPrice(TotalItemPrice, ReCalTotalVal);
    }

        function DeleteArtWork(AttachmentId, ItemId) {
            ShowLoader();

            var to;
            to = "/webstoreapi/DeleteAttachment/DeleteArtworkAttachment?AttachmentId=" + AttachmentId + "&ItemId=" + ItemId;
            var options = {
                type: "POST",
                url: to,
                data: "",
                contentType: "application/json",
                async: true,
                success: function (response) {

                    if (response[0] == "Success") {
                        $("#attachmentUploadContainer").html(response[1]);
                        isImageUploadedOnLandingPage = 1;
                        HideLoader();
                    } else if (response[0] == "NoFiles") {
                        $("#attachmentUploadContainer").html("");
                        isImageUploadedOnLandingPage = 0;
                        HideLoader();
                    }

                },
                error: function (msg) {
                    alert("Error occured ");
                    console.log(msg);
                }
            };
            var returnText = $.ajax(options).responseText;
        }
</script>
