@model MPC.Webstore.Models.ItemCartViewModel
@using MPC.Webstore.Common;
@using Newtonsoft.Json;
@using System;
@using System.Globalization;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    int StockCount = 1;
    int PriceBackgroundCount = 0;
    string priceMatrixBackground = "";
    string imagePath = "Thumb.png";
}
<script src="~/Scripts/Designer/p55.js"></script>
<script src="~/Scripts/Designer/p55-ease.js"></script>
<link href="~/Scripts/Designer/a12/a66.css" rel="stylesheet" />

<div id="FormulaMatrixLayer">
</div>
<div class="container content_area">
    <div class="row left_right_padding">
        <div class="BreadCrumbMenu left_align col-xs-12">
            <h1>

                <a id="aLinkItem" href="@ViewBag.CategoryHRef" class="crumb_notActive left_align">
                    @ViewBag.CategoryName
                </a>
                <label id="lblVerticalLine" class="crumb_notActive">&nbsp;&nbsp;&raquo;&nbsp;&nbsp;</label>
                <a id="aLinkItem" href="#" class="crumb_Active left_align">
                    @ViewBag.Item.ProductName
                </a>


            </h1>
            <div class="clearBoth"></div>
        </div>
        <div class="StocksDelivryContainer col-md-8 col-lg-8 col-xs-12 col-sm-12">
            <div id="divStockOptions" class="float_left_simple LGBC rounded_corners width730" style="padding: 5px;">
                <div id="lbl_Options" class="SelectQtyContainer textAlignLeft">
                    @Html.Raw(Html.GetKeyValueFromResourceFile("lnkltrlSelectQty", UserCookieManager.WBStoreId))
                </div>
                <div class="white_background rounded_corners divStk">
                    <div class="float_left_simple Width100Percent">
                        <div class="spacer10pxtop">

                            @foreach (var stock in ViewData["StckOptions"] as List<MPC.Models.DomainModels.ItemStockOption>)
                            {
                                if (ViewBag.SelectedStockItemId != null)
                                {
                                    string stockClassName = "rbStockType" + StockCount;
                                    if (ViewBag.SelectedStockItemId == stock.StockId)
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper checked data-id="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper data-id="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    string stockClassName = "rbStockType" + StockCount;
                                    if (StockCount == 1)
                                    {

                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper checked data-id="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class=float_left_simple style="height:55px;">
                                            <input type=radio name=StockPaper data-id="@stock.StockId" class="@stockClassName" style="position:absolute;opacity:0;" />
                                            <label for=radio1 class=grayRadiantbtn onclick=SelectStockOption('@stockClassName');> @stock.StockLabel </label>
                                        </div>
                                    }
                                }
                                StockCount++;
                            }
                        </div>
                        <div class="clearBoth">
                            &nbsp;
                        </div>
                        <br />
                       @if (ViewData["CostCenters"] != null)
                       {
                        <div class="Fsize19 template_designing margnTop10 LandPage-Heading-Cs">
                            <label id="lbl_RefiningOptions">@Html.Raw(Html.GetKeyValueFromResourceFile("lblRefinngOpt", UserCookieManager.WBStoreId))</label>
                        </div>
                       
                      
                        <div class="width365pxM250p">
                            @foreach (var costcenter in ViewData["CostCenters"] as List<MPC.Models.Common.AddOnCostsCenter>)
                            {
                                    <div class="CostCenterItems" data-ismandatory="@costcenter.IsMandatory" data-stockid="@costcenter.ItemStockId" style="display:none; margin:10px;">
                                        <div class="float_left_simple spacerbottom">
                                            <img class="RfgImgCs" src=/@costcenter.AddOnImage />
                                        </div>
                                        <div class="extra_item float_left_simple">

                                            <input id="@costcenter.ProductAddOnID" type="checkbox" name="addOnChecks" class="checkBoxAdOnPriceCheckBox backgroundIMg" />

                                            <label class="margin5 colorBlack">@costcenter.AddOnName</label>
                                            <div class="extra_pricing float_right">
                                                @if (costcenter.Type != 4)
                                                {
                                                    <label id="lblAddOnPrice">@ViewBag.Currency@costcenter.AddOnPrice</label>
                                                }
                                            </div>
                                            <label class="checkBoxAdOnDesc marginLeft">@costcenter.WebStoreDesc</label>
                                            <div class="clearBoth">
                                                &nbsp;
                                            </div>
                                        </div>
                                        <div class="clearBoth">
                                            &nbsp;
                                        </div>
                                        <div class="BorderLG_LP">
                                            &nbsp;
                                        </div>

                                    </div>

                            }
                    </div>
                       }
                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>
            </div>

        </div>
        <div class="signin_heading_div float_left_simple UploadContainerCs">
            <label id="lbl_UploadArtWork" class="textAlignLeft float_left_simple">@Html.Raw(Html.GetKeyValueFromResourceFile("lblUploadArtWork", UserCookieManager.WBStoreId))</label>
            @if (ViewData["Templates"] == null)
            {
                <label id="ltrlUpFlH" class="textAlignLeft float_left_simple Fsize19">Upload artwork</label>
                <div class="FormatContainer">
                    <div id="lbl_PremittedFormat" class="float_left_simple Fsize12 lbFormat">
                        @Html.Raw(Html.GetKeyValueFromResourceFile("lbl_PremittedFormat", UserCookieManager.WBStoreId))
                    </div>
                    <div>
                        <img id="imgpdf" alt="" src="~/images/pdfFormat.PNG" class="float_left_simple FormatedImgs" />
                        <img id="imgpng" alt="" src="~/images/pngFormat.PNG" class="float_left_simple FormatedImgs" />
                        <img id="imgjpg" alt="" src="~/images/jpgFormat.PNG" class="float_left_simple FormatedImgs" />
                        <img id="imggif" alt="" src="~/images/gifFormat.PNG" class="float_left_simple FormatedImgs" />
                    </div>
                </div>
            }
            else
            {
                <label id="ltrlUpFlH" class="textAlignLeft float_left_simple Fsize19">Your approved design(s)</label>
            }
            <div class="float_left_simple LGBC rounded_corners paddingLeft5px H4B
                     UplodArkworkContainer">
                <div class="white_background rounded_corners padding10 SidesContainerCS">

                    @if (ViewData["Templates"] == null)
                    {
                        <div class="rptContainers">
                            @if (ViewBag.AttachmentCount == 0)
                            {
                                <div onclick="return ShowArtworkPanel();" class="artworkarrow">
                                    <img id="ImgArrow" alt="" src="/Content/Images/artwork_arrow_icons.png" style="width: 60px;" /><br />
                                    <label id="lbl_SupplyArtWork" style="font-size: 16px; font-weight: bold;">@Html.Raw(Html.GetKeyValueFromResourceFile("lnkSupplyartwork", UserCookieManager.WBStoreId))</label><br />
                                    <label id="lbl_AddMultipleFiles" style="font-size: 13px;">@Html.Raw(Html.GetKeyValueFromResourceFile("lnkAddmultiplefiles", UserCookieManager.WBStoreId))</label>
                                </div>
                                <div class="clearBoth">
                                    &nbsp;
                                </div>
                            }
                            else
                            {
                                foreach (var artworkFile in ViewData["ArtworkAttachments"] as List<MPC.Models.DomainModels.ItemAttachment>)
                                {
                                    Random random = new Random();
                                    string randonNumber = "?r=" + random.Next();
                                    <div id="DivSide1" class="LGBC BD_PCS rounded_corners">
                                        <div class="DeleteIconPP">
                                            <asp:button id="DeleteBtn2" cssclass="delete_icon_img " onclientclick="return confirm('Are you sure you want to delete this Design?');"
                                                        commandname="DeleteDesign" />
                                        </div>
                                        <a id="hlSide1">
                                            <div class="PDTC_LP FI_PCS">

                                                <img class="full_img_ThumbnailPath_LP" src="/@artworkFile.FolderPath/@artworkFile.FileName@imagePath@randonNumber" />
                                            </div>
                                        </a>
                                        <div class="confirm_design LGBC height40_LP ">
                                            <label id="lblFront" class="">@artworkFile.FileName</label>
                                        </div>
                                    </div>
                                }
                            }

                            <div class="clearBoth">
                                &nbsp;
                            </div>
                    </div>
                        <div class="float_left_simple cntuploadfilebtns">
                            <input type="button" class="btn_upload_files_Prod_Land rounded_corners5" onclick="ShowArtworkPanel();" value="Upload File" />

                        </div>

                    }
                    else
                    {
                        <div class="rptContainers">
                            @foreach (var templateItem in ViewData["Templates"] as List<MPC.Webstore.Models.TemplateViewData>)
                            {
                                    <div class="LGBC BD_PCS rounded_corners">
                                        <a id="hlSide1">
                                            <div class="PDTC_LP FI_PCS">
                                                <img class="full_img_ThumbnailPath_LP" src="@templateItem.FolderPath@templateItem.FileName@imagePath" />

                                            </div>
                                        </a>
                                        <div class="confirm_design LGBC" style="display: none;">
                                            <label id="lblFront" class="ProdtPricedisplayNoneCs DisplayNoneCSS6"></label>
                                        </div>
                                        <div class="modify_button_container" style="position: absolute; padding: 0px; margin-top: -34px;">
                                            <div>
                                                <input type="button" class="btn_brown_small" value="Modify" onclick="RediredToDesigner('@templateItem.TemplateName', @templateItem.TemplateId , @templateItem.ItemId , @templateItem.CustomerId , @templateItem.ContactId , @templateItem.isCalledFrom , @templateItem.OrganisationID , @templateItem.printCropMarks.ToString().ToLower() , @templateItem.printWaterMark.ToString().ToLower() , @templateItem.isEmbedded.ToString().ToLower() , @templateItem.CategoryId);" />

                                            </div>
                                        </div>
                                    </div>
                            }
                    </div>
                        <div id="MoreSidesCont" class="ViewTemSidesCS" style="display:none;">
                            <label id="lbl_ViewMore">@Html.Raw(Html.GetKeyValueFromResourceFile("lblViewMore", UserCookieManager.WBStoreId))</label><br />
                            <label id="lbl_DesignerMode">@Html.Raw(Html.GetKeyValueFromResourceFile("lblDesignerMode", UserCookieManager.WBStoreId))</label>
                        </div>
                    }



                    <asp:image id="imgDesignSize" cssclass="DesgnFormteImg" />
                </div>
            </div>
        </div>

    </div>
    <div class="float_left_simple PriceTableCs col-md-3 col-lg-3 col-xs-12">
        <div class="LGBC rounded_corners Pad5px">
            <div id="lbl_SelectQuantity" class="SelectQtyContainer">
                @Html.Raw(Html.GetKeyValueFromResourceFile("ltrlLSelectYourQ", UserCookieManager.WBStoreId))
            </div>
            <div class="white_background rounded_corners padding10">
                <div class="textAlignLeft Mleft10 gallery">
                    <asp:hyperlink id="lnkPdfFile">
                        <asp:image id="FinishedGoodImg" cssclass="full_img_ThumbnailPath" />
                    </asp:hyperlink>
                </div>
                <div>
                    @if (ViewBag.Item.IsQtyRanged == true)
                    {
                        if (ViewBag.SelectedQuantity != null)
                        {
                            <input type="text" id="rangedQuantityOrdered" class="dropdownBorderCS Width60pixel  Fsize17" onblur="CalculatePriceBaseOnRangedQuantity();" value="@ViewBag.SelectedQuantity" />
                        }
                        else
                        {
                            <input type="text" id="rangedQuantityOrdered" class="dropdownBorderCS Width60pixel  Fsize17" onblur="CalculatePriceBaseOnRangedQuantity();" />
                        }

                        <input type="button" onclick="CalculatePriceBaseOnRangedQuantity(); return false;" class="go_button rounded_corners5 width35pix"
                               value="Go" />
                    }
                    else
                    {
                        <select class="dropdownBorderCS dropdown190 rounded_corners5 template_designing float_right dropdownQtyListClass clearRight ">
                            @foreach (var quantity in ViewBag.Item.ItemPriceMatrices as List<MPC.Models.DomainModels.ItemPriceMatrix>)
                            {
                                if (ViewBag.SelectedQuantity != null)
                                {
                                    if (ViewBag.SelectedQuantity == quantity.Quantity)
                                    {
                                        <option value="@quantity.PriceMatrixId" selected>@quantity.Quantity</option>
                                    }
                                    else
                                    {
                                        <option value="@quantity.PriceMatrixId">@quantity.Quantity</option>
                                    }

                                }
                                else
                                {
                                    <option value="@quantity.PriceMatrixId">@quantity.Quantity</option>
                                }

                            }

                        </select>
                    }

                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>
                <br />
                <div class=" left_align productStockDesc">
                    <label class="Fsize15 colorBlack left_align colorDGry">@ViewBag.Item.ProductName</label>
                    <br />
                    <label id="lblStock" class="LightGrayLabels"></label><br />
                    <label id="lblExtra" class="LightGrayLabels"></label>
                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>
                <div class="float_left_simple grossTotaldiv">
                    <label id="lbl_Total" class="float_left_simple">@Html.Raw(Html.GetKeyValueFromResourceFile("lblTotalHeadingText", UserCookieManager.WBStoreId))</label>
                    
                    <label id="lblTaxLabel" class="Fsize13 float_right marginLeft" style="margin-top:8px;">@ViewBag.VATLabel</label>
                    
                    <label id="lblGrossTotal" class="float_right"> 0.00</label>
                    <label class="float_right">@ViewBag.Currency</label>
                </div>
                @if (ViewBag.IsStockControl == true)
                {

                    if (ViewBag.ItemStock == 0)
                    { <div class="InStockContainer" style="background:red; color:white;">
                        @if (ViewBag.isAllowBackOrder ?? false) // back ordering allowed
                        {
                            <label id="lbl_BAckOrder">@Html.Raw(Html.GetKeyValueFromResourceFile("lblBackOrder", UserCookieManager.WBStoreId))</label>
                        }
                        else
                        {
                            <label id="lbl_OutOfStock">@Html.Raw(Html.GetKeyValueFromResourceFile("lblItemOutOfStock", UserCookieManager.WBStoreId))</label>
                        }
                    </div>
                    }
                    else
                    {
                        <div class="InStockContainer" style="background:#f3f3f3; color:black;">
                            <label>In stock: @ViewBag.InStock</label>
                        </div>
                    }


                }

                <div class="clearBoth">
                    &nbsp;
                </div>
                <div class="float_right">
                    @using (Html.BeginForm())
                    {
                        @Html.HiddenFor(m => m.OrderId, new { id = "VMOrderId" })
                        @Html.HiddenFor(m => m.ItemId, new { id = "VMItemId" })
                        @Html.HiddenFor(m => m.JsonPriceMatrix, new { id = "VMJsonMatrix" })
                        @Html.HiddenFor(m => m.JsonAddOnsPrice, new { id = "VMJsonAddOns" })
                        @Html.HiddenFor(m => m.ItemPrice, new { id = "VMPrice" })
                        @Html.HiddenFor(m => m.AddOnPrice, new { id = "VMAddOnrice" })
                        @Html.HiddenFor(m => m.StockId, new { id = "VMStockId" })
                        @Html.HiddenFor(m => m.QuantityOrdered, new { id = "VMQuantityOrdered" })
                        @Html.HiddenFor(m => m.ModifiedQueueItem, new { id = "ModifiedQueueItem" })
                        <input type="submit" value="Add to cart" class="add_to_cart_btn rounded_corners5 MTopM10 background-green" onclick="return ConfirmCart();" />
                    }


                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>

                <div class="clearBoth">
                    &nbsp;
                </div>
                <div id="priceToggle" onclick="MatrixToggle();" style="cursor: pointer; color: black;
                            font-size: 12px; float: left; margin-top: 15px; margin-bottom: 10px;">
                    <label id="toggleHeading" style="cursor: pointer;">@Html.Raw(Html.GetKeyValueFromResourceFile("ShowPriceMatrix", UserCookieManager.WBStoreId))</label>
                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>
                <div id="matrixHeadingsContainer" class="" style="display: none;">
                    @if (ViewBag.Item.IsQtyRanged == true)
                    {
                        <div class="confirm_design divtxtalgn MLR">
                            <label id="lbl_Quantity">@Html.Raw(Html.GetKeyValueFromResourceFile("lblQuantity", UserCookieManager.WBStoreId))</label>
                        </div>
                        <br />
                    }
                    <div class="width50p">
                        @if (ViewBag.Item.IsQtyRanged == true)
                        {
                            <div class="Fsize13 divtxtalgn float_left_simple ddwidth50 marginRight" style="margin-left: -46px;">
                                <label id="lbl_From">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlfrom", UserCookieManager.WBStoreId))</label>
                            </div>
                            <div class="Fsize13 divtxtalgn float_left_simple">

                                <label id="lbl_To">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlTo", UserCookieManager.WBStoreId))</label>
                            </div>
                        }
                        else
                        {
                            <div class="Fsize13 divtxtalgn_CS width70pixel float_left_simple">
                                <label id="lbl_Quanity">@Html.Raw(Html.GetKeyValueFromResourceFile("lblQuantity", UserCookieManager.WBStoreId))</label>
                            </div>
                        }

                        <div class="divtxtalgn_CS Width40Px float_right">
                            Price
                        </div>
                        <div class="clearBoth">
                            &nbsp;
                        </div>
                    </div>
                </div>
                <div class="clearBoth">
                    &nbsp;
                </div>
                <div id="priceMatrixContainer" style="" class="spacerbottom cntlndngtbl">

                    @foreach (var matrixItem in ViewBag.Item.ItemPriceMatrices as List<MPC.Models.DomainModels.ItemPriceMatrix>)
                    {
                        if (PriceBackgroundCount % 2 == 0)
                        {
                            priceMatrixBackground = "lightgray";
                        }
                        else
                        {
                            priceMatrixBackground = "white";
                        }
                      
                            <div class="@priceMatrixBackground">
                                <div class="divfloat WhtBakg">
                                    <input type="hidden" id="txtHiddenPriceMatrixID" class="AccessPriceInScript" value='@matrixItem.PriceMatrixId' />

                                </div>
                                @if (ViewBag.Item.IsQtyRanged == true)
                                {
                                    <div id="QtyRangeFrom" class="LandingPageQty divQNum">
                                        @matrixItem.QtyRangeFrom
                                    </div>
                                    <div id="QtyRangeTo" class="LandingPageQty divQNum">
                                        @matrixItem.QtyRangeTo
                                    </div>
                                }
                                else
                                {
                                    <div id="Quantity" class="LandingPageQty divQNum">
                                        @matrixItem.Quantity
                                    </div>
                                }
                                <div id="matrixItemColumn1" class="mattPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='1_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType1.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType1, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblMatt">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType1, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>


                                    </span>
                                </div>
                                <div id="matrixItemColumn2" class="glossyPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='2_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType2.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType2, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblGlossy">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType2, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn3" class="premiumMattPriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='3_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PricePaperType3.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType3, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblPremiumMatt">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PricePaperType3, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>


                                    </span>
                                </div>
                                <div id="matrixItemColumn4" class="Stock4PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='4_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType4.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType4, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblForthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType4, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn5" class="Stock5PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='5_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType5.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType5, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblFifthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType5, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>
                                        
                                    </span>
                                </div>
                                <div id="matrixItemColumn6" class="Stock6PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='6_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType6.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType6, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblSixthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType6, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn7" class="Stock7PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='7_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType7.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType7, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblSevenStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType7, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn8" class="Stock8PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='8_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType8.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType8, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblEightStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType8, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn9" class="Stock9PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='9_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType9.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType9, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblNinthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType9, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn10" class="Stock10PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='10_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType10.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType10, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblTenthStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType10, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div id="matrixItemColumn11" class="Stock11PriceMatrixColumn tblBorderTdWidth extra_pricing divtxtflt">
                                    <span id='11_PriceMatrixID_@matrixItem.PriceMatrixId' data-actualprice='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(matrixItem.PriceStockType11.ToString())' title='@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType11, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())'>
                                        <label id="lblElevenStock">@ViewBag.Currency@MPC.Webstore.Common.Utils.FormatValueToTwoDecimal(Utils.CalculateTaxOnPrice(Convert.ToDouble(matrixItem.PriceStockType11, CultureInfo.CurrentCulture), Convert.ToDouble(ViewBag.TaxRate)).ToString())</label>

                                    </span>
                                </div>
                                <div style="clear: both;">
                                </div>
                            </div>
                        PriceBackgroundCount++;
                    }
            </div>
                <div id="cntTabLabel">
                    <label id="lblTaxLabel" class="Fsize10 float_right marginLeft" style="margin-top:8px;">@ViewBag.VATLabel</label>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                </div>
        </div>
    </div>
    <div class=" ProductDetailGrayBoxLeftLP rounded_corners float_right ">
        <div style="background: white; padding: 10px; text-align: left;" class="rounded_corners">
            <div class="boxCatDes">
                <div class="mrginBtm">
                    <label id="lbl_Specifications" class="marginall5 ProductDetailH2">@Html.Raw(Html.GetKeyValueFromResourceFile("btnProductDetails", UserCookieManager.WBStoreId))</label>
                </div>
                <label id="lbl_CategroyCode" class="marginall5"></label>
                
                <p class="marginall5" style="width: 220px;">
                    <label style="font-weight:normal;">@ViewBag.Item.WebDescription</label>
                </p>
                <br />
            </div>
            <div class=" clear">
            </div>
        </div>
    </div>
</div>
<div class="clearBoth">
    &nbsp;
</div>
<input type="hidden" value=@Html.Raw(Json.Encode(ViewBag.JasonPriceMatrix)) class="JsonPriceMatrixValue" />
<input type="hidden" value=@Html.Raw(Json.Encode(ViewBag.JsonAddonCostCentre)) class="JsonAddonCostCentreValue" />
<input type="hidden" id="uploadedImageSide" value="@ViewBag.AttachmentCount" />
<input type="hidden" id="costCentreQueueItems" value="" />
</div>
<br />
</div>
<div id="pnlArtworkUploader" style="display: none;" class="">

    <div id="PnlUploaderLeftContainer">
        @if (!string.IsNullOrEmpty(ViewBag.Item.File1) || !string.IsNullOrEmpty(ViewBag.Item.File2) || !string.IsNullOrEmpty(ViewBag.Item.File3) || !string.IsNullOrEmpty(ViewBag.Item.File4))
        {
            <div id="lbl_DownloadTemplates" class="DownloadExmContainer">
                @Html.Raw(Html.GetKeyValueFromResourceFile("downloadExmp", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_CreateUploadTemplates" class="DExmlbl">
                @Html.Raw(Html.GetKeyValueFromResourceFile("lblDEmple", UserCookieManager.WBStoreId))

            </div>

            <div id="PnlUploaderDownloadIcons" style="text-align: left;">
                @if (!string.IsNullOrEmpty(ViewBag.Item.File1))
                {
                    <a id="IcoPhotoshop" href="@ViewBag.Item.File1" target="_blank" class="DownloadImages">
                        <img src="@Html.GetAppBasePath()@ViewBag.Item.File1" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.Item.File2))
                {
                    <a id="IcoIllustrator" href="@ViewBag.Item.File2" target="_blank" class="DownloadImages">
                        <img src="@Html.GetAppBasePath()@ViewBag.Item.File2" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.Item.File3))
                {
                    <a id="Icoindesign" href="@ViewBag.Item.File3" target="_blank" class="DownloadImages">
                        <img src="@Html.GetAppBasePath()@ViewBag.Item.File3" />
                    </a>
                }
                @if (!string.IsNullOrEmpty(ViewBag.Item.File4))
                {
                    <a id="IcoPdf" href="@ViewBag.Item.File4" target="_blank" class="DownloadImages">
                        <img src="@Html.GetAppBasePath()@ViewBag.Item.File4" />
                    </a>
                }
            </div>
            <div class="clearBoth">&nbsp;</div>
        }
        @if (ViewBag.Item.GridImage != null)
        {
            <div id="formatDesignContainer">
                <div class="DesgnFormatelbl">
                    <label id="lbl_DesignSize_Format" class="Fsize13">Design sizes & format</label>
                </div>
                <div class="white_background rounded_corners left_align">
                    <img id="designFormateimg" src="@ViewBag.Item.GridImage" />
                </div>
            </div>
        }

        <div class="guidlinContainer">
            <label id="lbl_UploadFileGudelines" class="Fsize13">@Html.Raw(Html.GetKeyValueFromResourceFile("lblUploadFileGudelines", UserCookieManager.WBStoreId))</label>
        </div>

        <div class="cntDesignGuidLines" style="float:left; ">
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL1Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">

                <label id="lbl_UploadFileGudelines_Description1">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL1Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading2" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL2Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description2">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL2Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading3" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL3Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description3">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL3Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading4" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL4Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description4">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL4Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading5" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL5Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description5">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL5Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading6" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL6Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description6">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL6Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading7" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL7Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description7">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL7Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div class="GLHeadingContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Heading8" class="GLHeading">@Html.Raw(Html.GetKeyValueFromResourceFile("lblGL8Heading", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="GLHeadDescContainer float_left_simple">
                <label id="lbl_UploadFileGudelines_Description8">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlGL8Desc", UserCookieManager.WBStoreId))</label>
            </div>
            <div class="clearBoth">&nbsp;</div>

        </div>
        <div class="float_left_simple UploadsGuidLineContainer">
            <input type="file" name="imageUploader"  id="imageUploader"/>
            <input type="button" value="Upload" class="Uplod_PCS rounded_corners5 background-green" id="btnOpenUploadDailog" onclick="openDailog();" />

            <div id="lbl_PremittedFormat" class="float_left_simple Fsize12" style="width: 175px; text-align: left; margin-bottom: 5px; margin-top: 10px;">
                @Html.Raw(Html.GetKeyValueFromResourceFile("lbl_PremittedFormat", UserCookieManager.WBStoreId))
            </div>
            <div id="allowedFormatesContainer">
                <img id="imgPdf" alt="" src="~/images/pdfFormat.PNG" class="float_left_simple"
                     width="35" style="margin-right: 5px;" />
                <img id="imgJpg" alt="" src="~/images/jpgFormat.PNG" class="float_left_simple"
                     width="35" style="margin-right: 5px;" />
            </div>
            <div class="clearBoth">&nbsp;</div>
            <div id="lbl_Recommended">
                @Html.Raw(Html.GetKeyValueFromResourceFile("Recommandedtxt", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_RecommandedFormat">
                @Html.Raw(Html.GetKeyValueFromResourceFile("PdfFormatInfo", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_MAXSize">
                @Html.Raw(Html.GetKeyValueFromResourceFile("MaxFileSize", UserCookieManager.WBStoreId))
            </div>
            <div id="lbl_RecommandedResulation">
                @Html.Raw(Html.GetKeyValueFromResourceFile("logoImgsize", UserCookieManager.WBStoreId))
            </div>
        </div>
        <div class="clearBoth">&nbsp;</div>

    </div>
    <div class="clearBoth">&nbsp;</div>

</div>
@section scripts {
    <script src="~/Scripts/PopUp.js"></script>
    <script>

    var isRanged = "@ViewBag.Item.IsQtyRanged.ToString()" == "False" ? 0 : 1;
        var TotalItemPrice = 0;
        var data = "";
    var isPriceSelected = 0;
    var mandatoryRefiningOptIds = "";
     
    
    $(document).ready(function() {
        
     
        $('input:radio[name=StockPaper]:checked').next().removeClass('grayRadiantbtn').addClass('OrangeGradiantbtn');
        $('input:radio[name=StockPaper]:checked').next().css("background-color", "white");

        hideShowPriceColumns($('input:radio[name=StockPaper]:checked').attr("class"));

        MatrixToggle();
        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
            } else {
                CalculatePriceBaseOnRangedQuantity();
            }

        } else {
            CalculatePriceBaseOnSelectedQuantity($(".dropdownQtyListClass").find(":selected").index());
        }

        SelectStockOption($('input:radio[name=StockPaper]:checked').attr('class'));

        SetAddOnsPriceOnPageLaod();

        if ("@ViewBag.Mode" == "Modify") {
            var updatedAddOns = jQuery.parseJSON($('#VMJsonAddOns').val());

            if (updatedAddOns != null) {

                for (var i = 0; i < $(updatedAddOns).length; i++) {

                    if ($(updatedAddOns)[i].Type == 4) {

                        $(updatedAddOns)[i].CostCentreJasonData = JSON.stringify(@Html.Raw(Json.Encode(ViewBag.CostCentreQueueItems)));
                    }
                }
            }
            $('#VMJsonAddOns').val(JSON.stringify(updatedAddOns));
        }
    });

    $("#priceToggle").click(function() {
        $('#priceMatrixContainer').slideToggle();
    });

    function ConfirmCart() {
        if (isPriceSelected == 0) {
            ShowPopUp("Message", "Please check your details to proceed.");
            return false;
        } else {
            var noRefiningOptSelected = 1;
            if(mandatoryRefiningOptIds != ""){
                var ListOfOptnToCheck = mandatoryRefiningOptIds.split(',');
               
                $(ListOfOptnToCheck).each(function(i, val) {
                    if($("#" + val).is(':checked')){
                    }else{
                        $("#" + val).parent().parent().css("background-color", "rgb(228, 180, 182)");
                        noRefiningOptSelected = 0;
                    }
                    
                });

                if(noRefiningOptSelected == 0){
                    ShowPopUp("Message", "Highlighted refining option(s) must be selected to add product in cart.");
                    return false;
                }else{
                    return true;
                }
            }else{
                ShowLoader();
               
            }
        }
    }

    function MatrixToggle() {

        var hideMessage = "Hide Price Table"; //Resources.MyResource.HidePriceMatrix;
        var showMessage = "Show Price Table"; //Resources.MyResource.ShowPriceMatrix;
        if ($('#toggleHeading').text() == hideMessage) {
            $('#toggleHeading').text(showMessage);
            $('#ToogleTable').css("margin-bottom", "0px");
            $('#cntTabLabel').css("display", "none");
            $('#matrixHeadingsContainer').css("display", "none");
        } else {
            $('#toggleHeading').text(hideMessage);
            $('#ToogleTable').css("margin-bottom", "10px");
            $('#matrixHeadingsContainer').css("display", "block");
            $('#cntTabLabel').css("display", "block");
            
        }
    }

    function CalculatePriceBaseOnRangedQuantity() {

        var QuantityOrdered = $("#rangedQuantityOrdered").val();

        if (isNaN(QuantityOrdered) === true) {

            ShowPopUp("Message", "Please enter numeric characters only.");
            return false;
        } else if (QuantityOrdered == 0) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        } else if (QuantityOrdered.toString().indexOf(".") != -1) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        } else if (QuantityOrdered < 0) {
            ShowPopUp("Message", "Please enter correct quantity.");
            return false;
        }

        var ObjectItemStock = "@ViewBag.ItemStock";

        if (ObjectItemStock != "") {
            if (ObjectItemStock.InStock > 0) {
                if (ObjectItemStock.isAllowBackOrder == false) {
                    var StockLevel = parseInt(ObjectItemStock.InStock);
                    if (QuantityOrdered > StockLevel) {
                        ShowPopUp('Message', "You cannot place order because the selected quantity is more than stock.");
                        return false;
                    }
                }
            }
        }

        var selectedStockType = StockNo();

        var Price = null;
        var qtyJsonData = null;
        var ActualqtyJsonData = null;
        var count = $(JsonData).length;
        if (QuantityOrdered != "") {
            var JsonData = jQuery.parseJSON($('.JsonPriceMatrixValue').val());
            var JsonFirstObject = $(JsonData)[0];
            var JsonLastObject = "";
            var OrderedJasonObject = "";
            for (var i = count - 1; i < $(JsonData).length; i++) {
                JsonLastObject = $(JsonData)[i];
            }

            if (QuantityOrdered < JsonFirstObject.QtyRangeFrom || QuantityOrdered > JsonLastObject.QtyRangeTo) {
                ShowPopUp('Message', "Your quantity exceeds the normal amount, please contact us for a special price.");
                return false;
            } else {
                count = $(JsonData).length;

                for (var i = 0; i < count; i++) {

                    if (QuantityOrdered >= $(JsonData)[i].QtyRangeFrom && QuantityOrdered <= $(JsonData)[i].QtyRangeTo) {

                        OrderedJasonObject = $(JsonData)[i];
                        break;
                    }

                }


                if (OrderedJasonObject != null) {

                    selectedStockType = selectedStockType + '_PriceMatrixID_' + OrderedJasonObject.ItemID;

                    Price = parseFloat($('#' + selectedStockType).attr("title").replace(",",""));

                    $("#VMPrice").val(parseFloat($('#' + selectedStockType).attr("data-actualprice").replace(",","")) * QuantityOrdered);
                    Price = Price * QuantityOrdered;

                    $("#VMQuantityOrdered").val(QuantityOrdered);
                    $("#VMJsonMatrix").val(JSON.stringify(OrderedJasonObject));


                    this.displayTotalPrice(Price, calculateAddOns(true));

                }
            }
        } else {
            ShowPopUp("Message", "Please enter quantity.");
            return false;
        }
    }

    function CalculatePriceBaseOnSelectedQuantity(selectedQuantityIndex) {

        var selectedStockNo = StockNo();

        var JsonData = jQuery.parseJSON($('.JsonPriceMatrixValue').val());
        JsonData = JsonData[selectedQuantityIndex];
        selectedStockNo = selectedStockNo + '_PriceMatrixID_' + JsonData.ItemID.toString();

        var price = "";

        price = parseFloat($('#' + selectedStockNo).attr("title").replace(",",""));

        $("#VMPrice").val(parseFloat($('#' + selectedStockNo).attr("data-actualprice").replace(",","")));
        $("#VMJsonMatrix").val(JSON.stringify(JsonData));

        $("#VMQuantityOrdered").val($(".dropdownQtyListClass").find(":selected").text());
        this.displayTotalPrice(price, calculateAddOns(true));
    }

    $(".dropdownQtyListClass").change(function() {


        CalculatePriceBaseOnSelectedQuantity($(this).find(":selected").index());
    });

    function SelectStockOption(classname) {

        $('input:radio[class=' + classname + ']').prop('checked', true);

        if ($('input:radio[class=' + classname + ']').is(':checked')) {

            $('input:radio[class=' + classname + ']').next().removeClass('grayRadiantbtn').addClass('OrangeGradiantbtn');

            var name = $('input:radio[class=' + classname + ']').attr("name");

            $('input:radio[name=' + name + ']').each(function() {
                if ($(this).is(':checked')) {
                    $("#lblStock").text($(this).next().text());
                    $(this).parent().parent().parent().parent().addClass('white_background');
                    $(this).parent().parent().parent().parent().css("background-color", "white");
                } else {
                    $(this).next().removeClass('OrangeGradiantbtn').addClass('grayRadiantbtn');
                }
            });

            var stockID = $('input:radio[class=' + classname + ']').attr("data-Id");

            $("#VMStockId").val(stockID);

            hideShowPriceColumns(classname);

        }


        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
            } else {
                CalculatePriceBaseOnRangedQuantity();
            }
        } else {
            CalculatePriceBaseOnSelectedQuantity($(".dropdownQtyListClass").find(":selected").index());
        }

        LoadCostCentersByStockId(stockID);
    }


    function hideShowPriceColumns(selectedPaperType) {

        var mattClomuns = $(".mattPriceMatrixColumn");
        var glossyColumns = $(".glossyPriceMatrixColumn");
        var premimumMattColumns = $(".premiumMattPriceMatrixColumn");
        var forthColumn = $(".Stock4PriceMatrixColumn");
        var fifthColumn = $(".Stock5PriceMatrixColumn");
        var SixColumn = $(".Stock6PriceMatrixColumn");
        var SevenColumn = $(".Stock7PriceMatrixColumn");
        var eightColumn = $(".Stock8PriceMatrixColumn");
        var nineColumn = $(".Stock9PriceMatrixColumn");
        var tenthColumn = $(".Stock10PriceMatrixColumn");
        var elevenColumn = $(".Stock11PriceMatrixColumn");

        hideColumns(mattClomuns);
        hideColumns(glossyColumns);
        hideColumns(premimumMattColumns);
        hideColumns(forthColumn);
        hideColumns(fifthColumn);
        hideColumns(SixColumn);
        hideColumns(SevenColumn);
        hideColumns(eightColumn);
        hideColumns(nineColumn);
        hideColumns(tenthColumn);
        hideColumns(elevenColumn);

        if (selectedPaperType == 'rbStockType1') {
            showColumns(mattClomuns);
        } else if (selectedPaperType == 'rbStockType2') {
            showColumns(glossyColumns);
        } else if (selectedPaperType == 'rbStockType3') {
            showColumns(premimumMattColumns);
        } else if (selectedPaperType == 'rbStockType4') {
            showColumns(forthColumn);
        } else if (selectedPaperType == 'rbStockType5') {
            showColumns(fifthColumn);
        } else if (selectedPaperType == 'rbStockType6') {
            showColumns(SixColumn);
        } else if (selectedPaperType == 'rbStockType7') {
            showColumns(SevenColumn);
        } else if (selectedPaperType == 'rbStockType8') {
            showColumns(eightColumn);
        } else if (selectedPaperType == 'rbStockType9') {
            showColumns(nineColumn);
        } else if (selectedPaperType == 'rbStockType10') {
            showColumns(tenthColumn);
        } else if (selectedPaperType == 'rbStockType11') {
            showColumns(elevenColumn);
        }
    }

    function showColumns(columnsListObj) {

        $(columnsListObj).css("display", "block");
    }


    function hideColumns(columnsListObj) {
        $(columnsListObj).css("display", "none");
    }

    function displayTotalPrice(itemPrice, addOnPrice) {

        itemPrice = parseFloat(itemPrice);
        addOnPrice = parseFloat(addOnPrice);

        
        $("#VMAddOnrice").val(addOnPrice);
        $("#VMItemId").val(@ViewBag.ClonedItemId);
        $("#VMOrderId").val(@ViewBag.Order.EstimateId);
        // this condition sets the total to zero because no quantity is selected
        if (isRanged) {
            if ($("#rangedQuantityOrdered").val() == "") {
                if (addOnPrice == 0 && itemPrice > 0) {
                    itemPrice = 0;
                }
            }
        }


        var culturee = 1;

        var IsInt = "";
        IsInt = itemPrice;

        if (IsInt == 0) {
        } else {
            IsInt = IsInt.toString();
            var indexOfDot = IsInt.indexOf(".");
            var indexOfComma = IsInt.indexOf(",");

            if (indexOfDot == -1 || indexOfComma == -1) {

                IsInt = -1;
            } else {
                IsInt = 1;
            }

        }

        TotalItemPrice = itemPrice;
        TotalItemPrice = TotalItemPrice.toFixed(2);

        var GrossTotal = itemPrice + addOnPrice;
        GrossTotal = GrossTotal.toFixed(2).toString();

        var isShowPricing = 1;

        if (isShowPricing == 1) {
            if (IsInt == -1) {
                $('#lblGrossTotal').text(GrossTotal);
            } else {
                $('#lblGrossTotal').text(GrossTotal);
            }
        } else {
            $('#lblGrossTotal').css("display", "none");
        }
        if ((itemPrice + addOnPrice) > 0) {
            isPriceSelected = 1;
        }
    }

    // returns the the selected stock no
    function StockNo() {
        var stockName = $('input:radio[name=StockPaper]:checked').attr("class");
        if (stockName == 'rbStockType1') {
            return '1';
        } else if (stockName == 'rbStockType2') {
            return '2';
        } else if (stockName == 'rbStockType3') {
            return '3';
        } else if (stockName == 'rbStockType4') {
            return '4';
        } else if (stockName == 'rbStockType5') {
            return '5';
        } else if (stockName == 'rbStockType6') {
            return '6';
        } else if (stockName == 'rbStockType7') {
            return '7';
        } else if (stockName == 'rbStockType8') {
            return '8';
        } else if (stockName == 'rbStockType9') {
            return '9';
        } else if (stockName == 'rbStockType10') {
            return '10';
        } else if (stockName == 'rbStockType11') {
            return '11';
        }
    }

    function calculateAddOns(isReCalCostCentreOnQuantityChange) {

        var checkedPriceTotal = 0;

        var selectedCheckBox = null;

        var unCheckedBox = null;

        var JsonToSubmit = [];

        var itemsList = '';

        // all available cost centres
        var addOnJasonData = jQuery.parseJSON($('.JsonAddonCostCentreValue').val());

        var alreadyAddedCostCentres = null;

        if ($("#VMJsonAddOns").val() != "") {

            if ($("#VMJsonAddOns").val().length == 2) {
                alreadyAddedCostCentres = null;
            } else {
                alreadyAddedCostCentres = jQuery.parseJSON($("#VMJsonAddOns").val());
            }

        }
        var isUpdateJson = 0;
        var selectedAddonsList = "";
        $(".checkBoxAdOnPriceCheckBox").each(function(i, val) {

            if ($(val).is(':checked')) {

                if (addOnJasonData != null) {

                    for (var i = 0; i < $(addOnJasonData).length; i++) {
                        if ($(addOnJasonData)[i].Id == $(val).attr('id')) {
                            if (alreadyAddedCostCentres != null) {
                                var breakLoop = 0;
                                var isRecordAdded = 0;
                                for (var q = 0; q < $(alreadyAddedCostCentres).length; q++) {
                                    // if ticked cost centre is already added to the jason queue then pick the cos centre from jason queue
                                    if (alreadyAddedCostCentres[q].CostCenterId == $(addOnJasonData)[i].CostCenterId) {

                                        JsonToSubmit.push(alreadyAddedCostCentres[q]);
                                        breakLoop = 1;
                                        isRecordAdded = 1;
                                        break;
                                    }

                                    if (breakLoop == 1) {
                                        breakLoop = 0;
                                        break;
                                    }
                                }
                                // else pick the item from actual costcentres queue
                                if (isRecordAdded == 0) {
                                    JsonToSubmit.push($(addOnJasonData)[i]);
                                }
                            } else {
                                //pick the item from actual costcentres queue
                                JsonToSubmit.push($(addOnJasonData)[i]);
                            }

                            selectedCheckBox = $(addOnJasonData)[i];
                            break;
                        }
                    }

                    itemsList = itemsList + "<br/> " + $(val).next().text();

                    // check the costcenter if its type is fixed then we will take its setup cost
                    //if it is per quantity type then we will (qty * priceperunitqty) + setupcost

                    var actualPrice = selectedCheckBox.ActualPrice;

                    if (selectedCheckBox.Type == 2) {

                        if (isRanged) {
                            var quantityOrdered = $("#rangedQuantityOrdered").val();
                            actualPrice = (quantityOrdered * actualPrice) + selectedCheckBox.SetupCost;
                            if (actualPrice < selectedCheckBox.MinimumCost && selectedCheckBox.MinimumCost != 0) {
                                actualPrice = selectedCheckBox.MinimumCost;
                            }
                        } else {
                            var quantityOrdered = $(".dropdownQtyListClass").find(":selected").val();

                            actualPrice = (quantityOrdered * actualPrice) + selectedCheckBox.SetupCost;
                            if (actualPrice < selectedCheckBox.MinimumCost && selectedCheckBox.MinimumCost != 0) {
                                actualPrice = selectedCheckBox.MinimumCost;

                            }
                        }
                        checkedPriceTotal = checkedPriceTotal + parseFloat(actualPrice);

                    } else if (selectedCheckBox.Type == 4) { // gets the value from the label
                        if ($(val).next().next().children(':first').text() == "") {

                        } else {
                            if (isReCalCostCentreOnQuantityChange == true) {
                                PromptForValues(selectedCheckBox.CostCenterId, $(val).attr('id'), 2);
                                checkedPriceTotal = checkedPriceTotal + parseFloat($(val).next().next().children(':first').text().replace("@ViewBag.Currency", ""));
                            }
                        }

                        if (!$(val).hasClass('userDefined')) {
                            $(val).addClass('userDefined');
                        }


                    } else {
                        checkedPriceTotal = checkedPriceTotal + parseFloat(actualPrice);

                    }

                    selectedAddonsList = selectedAddonsList + JSON.stringify(selectedCheckBox, null, 2);

                }
            } else {
                // in case of user defined cost centre remove the calculated price and modify button when this costcentre will be un checked
                if ($(val).hasClass('userDefined')) {
                    $(val).next().next().html('');
                }
            }

            $("#VMJsonAddOns").val(JSON.stringify(JsonToSubmit));

            selectedCheckBox = null;

        });

        $('#lblExtra').html(itemsList);

        return checkedPriceTotal;
    }


    $('input[name=addOnChecks]').on('change', function(e) {

        displayTotalPrice(TotalItemPrice, calculateAddOns(false));
    });


    function SetAddOnsPriceOnPageLaod() {

        var selectedCheckBox = null;

        var itemsList = '';

        var orderedQuantity = $(".dropdownQtyListClass").find(":selected").val();

        if (isRanged) {
            orderedQuantity = $("#rangedQuantityOrdered").val();

        }

        var addOnJasonData = jQuery.parseJSON($('.JsonAddonCostCentreValue').val());

        $(".checkBoxAdOnPriceCheckBox").each(function(i, val) {

            if (addOnJasonData != null) {

                for (var i = 0; i < $(addOnJasonData).length; i++) {
                    if ($(addOnJasonData)[i].Id == $(val).attr('id')) {
                        selectedCheckBox = $(addOnJasonData)[i];
                        break;
                    }
                }

                itemsList = itemsList + ", " + $(this).parent().next().text();

                // check the costcenter if its type is fixed then we will take its setup cost
                //if it is per quantity type then we will (qty * priceperunitqty) + setupcost
                var actualPrice = selectedCheckBox.ActualPrice;

                if (selectedCheckBox.Type == 2) {

                    actualPrice = (orderedQuantity * actualPrice) + selectedCheckBox.SetupCost;

                    if (actualPrice < selectedCheckBox.MinimumCost && selectedCheckBox.MinimumCost != 0) {
                        actualPrice = selectedCheckBox.MinimumCost;

                    }
                    actualPrice = "@ViewBag.Currency" + (actualPrice).toFixed(2).toString();
                    $(val).next().next().children(':first').html(actualPrice);

                    if (selectedCheckBox.isChecked == true) {
                        $(val).click();
                    }
                } else if (selectedCheckBox.Type == 4) {
                    if (selectedCheckBox.isChecked == true) {
                        $(val).next().next().html('<label>' + "@ViewBag.Currency" + selectedCheckBox.ActualPrice + '</label>' + '<a onclick="PromptForValues(' + selectedCheckBox.CostCenterId + ',' + $(val).attr('id') + ', 1);" >Modify</a> ');
                        $(val).click();
                    }
                    $(val).attr('onclick', 'PromptForValues(' + selectedCheckBox.CostCenterId + ', ' + $(val).attr('id') + ', \"New\");');

                    $("#costCentreQueueItems").val(JSON.stringify(@Html.Raw(Json.Encode(ViewBag.CostCentreQueueItems))));

                }

            }
        });

        selectedCheckBox = null;
    }

    function ShowArtworkPanel() {
        var panelHtml = $("#pnlArtworkUploader").html();
        ShowArtWorkPopup("Upload Artwork", panelHtml);
        $('#imageUploader').change(function () {
            data = new FormData();
            var files = $('#imageUploader')[0].files;
            //alert(files.length);
            if (files.length > 0) {
            
                for (i = 0; i < files.length; i++) {
                    data.append("file" + i, files[i]);
                }
            }
        });

    }

    function openDailog() {
        ShowLoader();
        var files = $('#imageUploader')[0].files;//$("#imageUploader").get(0).files;
        var sideOFImage = $("#uploadedImageSide").val();
        if (sideOFImage == 0) {
            sideOFImage = 1;
            $("#uploadedImageSide").val(1);
        } else {
            sideOFImage = parseInt(sideOFImage) + 1;
            $("#uploadedImageSide").val(sideOFImage);
        }
        //var name1 = files[0].name.replace(/C:\\fakepath\\/i, '');
        //var fileExtension = name1.replace(/^.*\./, '');
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth(); //January is 0!
        var yyyy = today.getFullYear();
        var monthNames = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        var FileName = yyyy + monthNames[mm] + dd;
        FileName = FileName.concat("-", '@ViewBag.ClonedItem.ProductCode', "-", '@ViewBag.Order.Order_Code', "-", '@ViewBag.ClonedItem.ItemCode', "-", '' + sideOFImage);
        var url = "mpc_content/Attachments/";
        url = url.concat('@UserCookieManager.WEBOrganisationID', "/", '@UserCookieManager.WBStoreId', "/Products/", @ViewBag.ClonedItem.ItemId);

        while (url.indexOf('/') != -1)
            url = url.replace("/", "__");

        while (FileName.indexOf('/') != -1)
            FileName = FileName.replace("/", "__")
        if (data != "") {
            
            //for (i = 0; i < files.length; i++) {
            //    data.append("file" + i, files[i]);
            //}
            
            $.ajax({
                type: "POST",
                url: "/designerapi/AttachmentUploader/PostAsync/" + url + "/" + FileName + "/" + @ViewBag.ClonedItem.ItemId + "/" + @ViewBag.Order.ContactId + "/" + @ViewBag.Order.CompanyId,
                contentType: false,
                processData: false,
                data: data,
                success: function(messages) {

                    sideOFImage = parseInt(sideOFImage) + 1;
                    $("#uploadedImageSide").val(sideOFImage);
                    if (messages[0] == "Artwork not uploaded") {
                        alert(messages[0]);
                    } else {
                        window.location.reload(true);
                    }


                },
                error: function(xhr, ajaxOptions, thrownError) {
                    //alert("Error while invoking the Web API");
                    alert(thrownError);
                    HideLoader();
                }
            });
        }else 
        {
            HideLoader();
            console.log(files);
            alert(files.length);
        }
    }
  
    function RediredToDesigner(ProductName, TemplateID, ItemID, CompanyID, ContactID, isCalledFrom, OrganisationID, printCropMarks, printWaterMark, isEmbedded, TempDesignerID) {

        ShowLoader();
        var URL = "/Designer/" + ProductName + "/" + TempDesignerID + "/" + TemplateID + "/" + ItemID + "/" + CompanyID + "/" + ContactID + "/" + isCalledFrom + "/" + OrganisationID + "/" + printCropMarks + "/" + printWaterMark + "/" + isEmbedded;
        window.location.href = URL;
    }

    function PromptForValues(CostCentreId, ControlId, Mode) {

        var quantityOrdered = $("#VMQuantityOrdered").val() == "" ? null : $("#VMQuantityOrdered").val();
        if ($("#" + ControlId).is(':checked')) {
            if (Mode == 2) {
                ShowLoader();

                var to;
                to = "/webstoreapi/costCenter/GetDateTimeString?parameter1=" + CostCentreId + "&parameter2=" + @ViewBag.ClonedItem.ItemId + "&parameter3=" + quantityOrdered + "&parameter4=Update";
                var options = {
                    type: "POST",
                    url: to,
                    data: $("#costCentreQueueItems").val(),
                    contentType: "application/json",
                    async: true,
                    success: function(response) {

                        if (response != "") {

                            $("#ModifiedQueueItem").val($("#costCentreQueueItems").val());
                            var updatedAddOns = jQuery.parseJSON($('#VMJsonAddOns').val());

                            if (updatedAddOns != null) {

                                for (var i = 0; i < $(updatedAddOns).length; i++) {

                                    if ($(updatedAddOns)[i].CostCenterId == CostCentreId) {
                                        $(updatedAddOns)[i].ActualPrice = response;
                                        $(updatedAddOns)[i].CostCentreJasonData = $("#costCentreQueueItems").val();
                                    }
                                }

                                var JsonToReSubmit = [];
                                var totalVal = 0;
                                for (var i = 0; i < $(updatedAddOns).length; i++) {

                                    JsonToReSubmit.push($(updatedAddOns)[i]);
                                    if ($(updatedAddOns)[i].Type == 4) {
                                        totalVal = parseFloat(totalVal) + parseFloat(response);
                                    } else {
                                        var actualP = ($("#VMQuantityOrdered").val() * $(updatedAddOns)[i].ActualPrice) + $(updatedAddOns)[i].SetupCost;
                                        if (actualP < $(updatedAddOns)[i].MinimumCost && $(updatedAddOns)[i].MinimumCost != 0) {
                                            actualP = $(updatedAddOns)[i].MinimumCost;
                                        }
                                        totalVal = parseFloat(totalVal) + parseFloat(actualP);
                                    }

                                }
                                displayTotalPrice(TotalItemPrice, totalVal);
                                $("#" + ControlId).next().next().html('<label>' + '@ViewBag.Currency' + response + '</label>' + '<a onclick="PromptForValues(' + CostCentreId + ',' + ControlId + ', 1);" >Modify</a> ');

                                $("#VMJsonAddOns").val(JSON.stringify(JsonToReSubmit));
                            }
                        }

                    },
                    error: function(msg) {
                        alert("Error occured ");
                        console.log(msg);
                    }
                };
                var returnText = $.ajax(options).responseText;
                HideLoader();
            } else if (Mode == 1) {
                ShowLoader();

                var to;
                to = "/webstoreapi/costCenter/GetDateTimeString?parameter1=" + CostCentreId + "&parameter2=" + @ViewBag.ClonedItem.ItemId + "&parameter3=" + quantityOrdered + "&parameter4=Modify";
                var options = {
                    type: "POST",
                    url: to,
                    data: $("#costCentreQueueItems").val(),
                    contentType: "application/json",
                    async: true,
                    success: function(response) {
                        ShowCostCentrePopup(response[2], CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "Modify", "@ViewBag.Currency", TotalItemPrice);
                    },
                    error: function(msg) {
                        alert("Error occured ");
                        console.log(msg);
                    }
                };
                var returnText = $.ajax(options).responseText;

            } else {
                ShowLoader();
                if ($("#costCentreQueueItems").val() == 'null') {
                    $.getJSON("/webstoreapi/costCenter/GetDateTimeString/" + CostCentreId + "/" + @ViewBag.ClonedItem.ItemId + "/" + quantityOrdered + "/New/null",
                        function(DT) {

                            ShowCostCentrePopup(DT[2], CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice);
                        });

                } else {
                    var to;
                    to = "/webstoreapi/costCenter/GetDateTimeString?parameter1=" + CostCentreId + "&parameter2=" + @ViewBag.ClonedItem.ItemId + "&parameter3=" + quantityOrdered + "&parameter4=addAnother";
                    var options = {
                        type: "POST",
                        url: to,
                        data: $("#costCentreQueueItems").val(),
                        contentType: "application/json",
                        async: true,
                        success: function(response) {
                            console.log(response);
                            $("#costCentreQueueItems").val(response[2]);
                            var selectedCostCentreArray = [];
                            for (var i = 0; i < $(response[2]).length; i++) {
                                if ($(response[2])[i].CostCentreID == CostCentreId) {
                                    selectedCostCentreArray.push($(response[2])[i]);
                                }
                            }
                            ShowCostCentrePopup(selectedCostCentreArray, CostCentreId, @ViewBag.ClonedItem.ItemId, ControlId, "New", "@ViewBag.Currency", TotalItemPrice);
                        },
                        error: function(msg) {
                            alert("Error occured ");
                            console.log(msg);
                        }
                    };
                    var returnText = $.ajax(options).responseText;

                }
            }
        }
    }

        function LoadCostCentersByStockId(StockId) {
       
            var noRefiningOpt = 1;
            mandatoryRefiningOptIds = "";
            $(".CostCenterItems").each(function(i, val) {
                if (StockId == $(val).attr('data-StockId')) {
                    $(val).css("display", "block");
                    if($(val).attr('data-ismandatory') == 1){
                   
                        if(mandatoryRefiningOptIds == ""){
                            mandatoryRefiningOptIds = $(val).children().next().children().attr('id');
                        }else{
                            mandatoryRefiningOptIds = mandatoryRefiningOptIds + "," + $(val).children().next().children().attr('id');
                        }
                    }
               
                    noRefiningOpt = 0;
                } else {

                    $(val).css("display", "none");

                    if ($(val).children().next().children().is(':checked')) {
                        $(val).children().next().children().click();

                    }
                }
           
            });
       
            if(noRefiningOpt == 1){
                $("#lbl_RefiningOptions").css("display", "none");
                mandatoryRefiningOptIds = "";
            }else{
                $("#lbl_RefiningOptions").css("display", "block");
            }
        }

    </script>
}