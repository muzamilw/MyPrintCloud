@model MPC.Models.Common.ShoppingCart
@using MPC.Models.Common;
@using MPC.Webstore.Common;
@using System.Linq;
@using MPC.Webstore.ViewModels;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    double AmountOfDiscount = 0;
    string EstimateDispatchTime = string.Empty;
    double _priceTotal = 0;
    double _vatTotal = 0;
    double _grandTotal = 0;
    decimal noOfCostCentreProdDays = 0;
    decimal _numOfProductionDays = 0;
    decimal numberOfDaysAddedTodelivery = 0;
    decimal ProductProductionTime = 0;
    double PriceTotal = 0;
    double GrossTotal = 0;
    string VatTotal = string.Empty;
    string subtotal = string.Empty;
}

<div class="container content_area">
    <div class="row left_right_padding">
        <div class="signin_heading_div textAlignLeft" style="padding-bottom: 0px !important;">
            <table width="1000px">
                <tr>
                    <td width="500px">
                        <label id="lblTitle" class="sign_in_heading">Shopping cart</label>
                    </td>
                    <td width="220px"></td>
                    <td width="180px"></td>
                </tr>
                <tr style="height: 5px;"></tr>
                <tr id="ErrorDisplyMes" style="display: none; width: 1000px;">
                    <td colspan="3" width="1000px">
                        <div style="background-color: red; border: 1px solid red; padding: 10px;" class="rounded_corners">
                            <label id="ErrorMEsSummry" style="color: White; font-size: 16px; font-weight: bold;"></label>
                        </div>
                    </td>

                </tr>
            </table>
        </div>
        @if (Model != null)
        {
            if (Model.CartItemsList == null || Model.CartItemsList.Count == 0)
            {
                <div class="get_in_touch_box rounded_corners">
                    <div class="textAlignCenter">
                        <label class="cartFontStyle">Your Cart is empty!</label>

                    </div>

                </div>
            }
            else
            {
                using (Html.BeginForm())
                {
                    <div class="get_in_touch_box rounded_corners">

                        <div id="ShopingCartDisplay">

                            <button id="Button1" onclick="return EmailProofClick()" class="start_creating_btn_EmailProof float_right rounded_corners5"></button>

                            <table cellspacing="0" cellpadding="15" id="grdViewShopCart" style="width:100%;border-collapse:collapse;">
                                <tbody>
                                    <tr class="gridViewHeaderStyle">
                                        <th align="center" scope="col">&nbsp;</th>
                                        <th align="left" scope="col">lblProductTxt</th>
                                        <th align="left" scope="col">lblQuantityHeaderTxt</th>
                                        @if (ViewBag.IsShowPrices)
                                        {
                                            <th align="left" scope="col">Price</th>
                                        }
                                        <th align="left" scope="col" style="color: white !important; border: none; background-color: white !important;">&nbsp;</th>
                                    </tr>
                                    @{ foreach (var prod in ViewData["ProductItemList"] as List<MPC.Models.Common.ProductItem>)
                                     {
                                        <tr class="gridViewRowStyle" valign="top">
                                            <td class="PadTop5 shopCartFirstCol">
                                                <div class="cart_grid_image_container gallery">
                                                    @{
                                         string pdfLinkBtn = string.Empty;
                                         string imgToShowURL = string.Empty;
                                         if (!string.IsNullOrWhiteSpace(prod.Attatchment.FileName))
                                         {
                                             string ext = System.IO.Path.GetExtension(prod.Attatchment.FileName);
                                             if (ext == ".xlsx" || ext == ".xls" || ext == ".csv")
                                             {
                                                 string completeImgPath = prod.ThumbnailPath;
                                                 pdfLinkBtn = completeImgPath;// ImageDisplayScript(completeImgPath);
                                                 imgToShowURL = completeImgPath;
                                             }
                                             else
                                             {
                                                 string FolderPathOfAttachment = prod.Attatchment.FolderPath;
                                                 if (FolderPathOfAttachment.Contains("Production") == true)
                                                 {
                                                     FolderPathOfAttachment = FolderPathOfAttachment.Replace("Production", "Attachments");
                                                 }
                                                 // from file table
                                                 //  string completeImgPath = ResolveUrl(GetSideThumbnail(FolderPathOfAttachment, model.Attatchment.FileName));

                                                 pdfLinkBtn = "";// completeImgPath;//ImageDisplayScript(completeImgPath);
                                                 imgToShowURL = "";// completeImgPath;
                                             }
                                         }
                                         else
                                         {
                                             if (prod.ProductType == (int)ProductType.FinishedGoodWithBanner || prod.ProductType == (int)ProductType.FinishedGoodWithImageRotator)
                                             {
                                                 string completeImgPath = prod.ThumbnailPath;
                                                 pdfLinkBtn = completeImgPath;// ImageDisplayScript(completeImgPath);
                                                 imgToShowURL = completeImgPath;
                                             }
                                         }
                                                    }
                                                    <a id="lnkPdfFile" href=@pdfLinkBtn><img id="imgToShow" class="image_stretcher" src="@imgToShowURL"></a>
                                                </div>
                                                <div class="BtnTemplateModifyContainer">
                                                    @if (prod.ProductType == (int)ProductType.TemplateProductWithBanner || prod.ProductType == (int)ProductType.TemplateProductWithImage)
                                                    {
                                                        <input type="submit" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('@prod.TemplateID','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="silver_back_button_modify">
                                                    }
                                                    else
                                                    {
                                                        <input type="submit" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('0','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="silver_back_button_modify">
                                                    }
                                                </div>
                                            </td>
                                            <td style="width:29%;">
                                                <span id="lblItemProductName" class="heading_16">@prod.ProductName</span><span id="CopyTxt" class="heading_16" style="color: red !important;"></span>
                                                <br>
                                                <span id="lblProductCategory" class="ItemdetailDesc">( @prod.ProductCategoryName )</span>
                                                <br>
                                                <br>
                                                <span id="lblSlectedStockName" class="ItemdetailDesc">@prod.PaperType</span>
                                                <br>
                                                <br>
                                                @{
                                                    string itemAddsOn = string.Empty;
                                                    ProductProductionTime = prod.EstimateProductionTime ?? 0;
                                                    if (ViewData["selectedItemsAddonsList"] != null)
                                                    {
                                                        List<AddOnCostsCenter> costcenters = ViewData["selectedItemsAddonsList"] as List<AddOnCostsCenter>;
                                                        foreach (AddOnCostsCenter cost in costcenters.Where(addon => addon.ItemID == prod.ItemID))
                                                        {
                                                            itemAddsOn = itemAddsOn + cost.AddOnName + ",";
                                                            noOfCostCentreProdDays += cost.EstimateProductionTime;
                                                        }
                                                    }

                                                    ProductProductionTime += noOfCostCentreProdDays;
                                                    if (_numOfProductionDays < ProductProductionTime)
                                                    {
                                                        _numOfProductionDays = ProductProductionTime;
                                                    }
                                                    numberOfDaysAddedTodelivery = _numOfProductionDays;

                                                    DateTime date = Utils.AddBusinessdays(_numOfProductionDays, DateTime.Now);

                                                    EstimateDispatchTime = date.ToString("MMMM dd, yyyy");
                                                }

                                                <span id="lblselectedAddOnList" class="ItemdetailDesc">@itemAddsOn</span>
                                                <br>
                                                <br>
                                            </td>
                                            <td class="PadTop5" align="left" style="width:5%;">
                                                <span id="lblItemQuantity" class="fntQtyPrice" style="font-weight:bold;">@prod.Qty1</span>
                                            </td>
                                            @if (ViewBag.IsShowPrices)
                                            {

                                                string itemPrice = string.Empty;
                                                double vatStateTaxPaid = (prod.Qty1GrossTotal ?? 0) - (prod.Qty1BaseCharge1 ?? 0);
                                                _vatTotal += vatStateTaxPaid;

                                                //2.Set item Price Now

                                                _priceTotal += prod.Qty1BaseCharge1 ?? 0;

                                                itemPrice = Utils.FormatDecimalValueToTwoDecimal((prod.Qty1BaseCharge1 ?? 0).ToString(), ViewBag.Currency);
                                                _grandTotal += prod.Qty1GrossTotal ?? 0;

                                                <td class="PadTop5 priceth" align="right" style="width:20%;">
                                                    <span id="lblItemPrice" class="fntQtyPrice" style="font-weight:bold;text-align: right !important;">@itemPrice</span>
                                                </td>
                                            }

                                            <td align="left" style="width:20%;">

                                                <a id="linkRemoveCartItem" class="silver_back_button_remove removeBtnForeColor" onclick="ConfirmDeleteItem('@prod.ItemID');">lblRemove</a>
                                                <br>
                                                @Html.ActionLink("btnCopyincarttxt", "CopyProduct", "ShopCart", new { ItemID = prod.ItemID, OrderID = UserCookieManager.OrderId }, new { @class = "silver_back_button" })

                                            </td>
                                        </tr>

                                            subtotal = Utils.FormatDecimalValueToTwoDecimal(_priceTotal.ToString(), ViewBag.Currency);
                                            VatTotal = Utils.FormatDecimalValueToTwoDecimal(_vatTotal.ToString(), ViewBag.Currency);
                                            GrossTotal = _priceTotal + _vatTotal;

                                     }

                                    }
                                </tbody>
                            </table>

                            <br />
                            <div class="cnttotalPayables">

                                <div class="cntsubHeadings">
                                    <label id="ltrlsubtotal" class=" LightGrayLabels displayClear">Sub Total</label>

                                    <label id="ltrlDelivery" class="LightGrayLabels displayClear">Delivery</label>

                                    @if (ViewBag.isIncludeVAT)
                                    {
                                        <label id="lblTaxLabel" class="LightGrayLabels displayClear">@ViewBag.TaxRate</label>
                                    }

                                    <label id="lblTotalpayable" class="colorBlack total_payable">Total Payable</label>
                                </div>
                                <div class="cnttotals" id="cntRightPricing1">

                                    <label id="lblSubTotal" class="Fsize14 colorBlack displayClear">@subtotal</label>

                                    <label id="lblDeliveryCostCenter" class="LightGrayLabels displayClear">@Model.DeliveryCost</label>
                                    @if (ViewBag.isIncludeVAT)
                                    {
                                        <label id="lblVatTotal" class="LightGrayLabels displayClear">@VatTotal</label>
                                    }
                                    <label id="lblGrandTotal" class="colorBlack total_payable" style="float: right;">@GrossTotal</label>
                                </div>
                                <div class="clearBoth">
                                </div>
                            </div>
                            <div class="cntdispatchDelivery">
                                <div class="tdDispatchDate">
                                    <div class="estimated_dispactch_sec MLeft17 LightGrayLabels">
                                        <label id="lblEstimatedDispatch">Estimated Dispatch</label>
                                    </div>
                                    <div class="estimated_dispatch_time MLeft17">
                                        <label id="lblDeliveryCostCenterDateText" class="heading_h5 colorBlack fontSyleBold">@EstimateDispatchTime</label>  &nbsp;
                                    </div>
                                </div>
                                <div class="tdDelivery">

                                </div>
                            </div>
                            <div class="clearBoth">
                            </div>
                            <div class="clearBoth">
                                &nbsp;
                            </div>
                            <button value="CHECKOUT" id="btnCheckout"
                                    onclientclick="return CanCheckOut(this);" class="start_creating_btn_checkout float_right  rounded_corners5"
                                    onclick="btnCheckout_Click" style="" /><br />
                            <button id="btnContinueShopping" onclick="ContinueShopping();"
                                    class="btn_brown  rounded_corners5" value="CONTINUE SHOPPING" style="float: right;" />
                        </div>

                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>

                }
            }


        }
        else
        {
            <div class="get_in_touch_box rounded_corners">
                <div class="textAlignCenter">
                    <label class="cartFontStyle">Your Cart is empty!</label>

                </div>

            </div>
        }

    </div>
    <div class="clearBoth">
        &nbsp;
    </div>
    <div style="padding-top: 5px; text-align: left; font-size: 18px; line-height: 4;">
        <label id="lblYoumightLke" visible="false"></label>
    </div>



    <div class="clearBoth">
        &nbsp;
    </div>
    @*matching set*@
    
    @{
        MatchingSetViewModel MSViewModel = new MatchingSetViewModel();
        MSViewModel = ViewData["MSViewModel"] as MatchingSetViewModel;
        @Html.Partial("MatchingSet",MSViewModel);
    }
   
    
    <br />
    <input type="hidden" id="hfIsCallFrom" name="hfIsCallFrom" value="0" />
    <input type="hidden" id="hfIsItemID" name="hfIsItemID" value="0" />

    <div class="clearBoth">
        &nbsp;
    </div>
    <br />
</div>
</div>
<div class="opaqueLayer">
</div>
<div id="popupSendProofs" class="popupSendProofs">
    <div id="MainContent_Div1" onclick="return closePopUpClick()" class="exit_popup exitPopupProofs" style="display: none;">
    </div>
    <label class="boldTxt">
        Enter the email address(s) to send all proofs
    </label>
    <br />
    <br />
    <table class="normalTextStyle" width="400px" cellpadding="2">
        <tr>
            <td align="right">
                <label id="ltrlEmail1">E-mail Address 1</label>
            </td>
            <td class="tdtextbox">
                <input type="email" name="userEmail1" id="userEmail1" class="text_box200 rounded_corners5">
                <br />
            </td>
        </tr>
        <tr>
            <td align="right" class="H4B">
                <label id="ltrlconfirmpass">E-mail Address 2</label>
            </td>
            <td class="tdtextbox">
                <input type="email" name="userEmail2" id="userEmail2" class="text_box200 rounded_corners5">
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div class="reset_password_button_div2">
                    <button id="btnSendEmail" class="start_creating_btn rounded_corners5 btnSendProofs"
                            onclick="return EmailItems()">
                        Send Email
                    </button>
                    &nbsp;
                    <button id="btnCancel" class="start_creating_btn rounded_corners5" onclick="return closePopUpClick()">
                        Close
                    </button>
                </div>
            </td>
        </tr>
    </table>
    <p class="proofSuccess" style="display: none;" id="paraEmail" runat="server">
        Proofs sent.
    </p>
</div>
<div id="RemoveProductDiv1" class="RemoveProductDiv" style="display:none;">
    <div class="md-modal md-effect-7" id="modal-7">
        <div class="md-content"><div class="modal-header"><button class="md-close close" onclick=HideMessagePopUp();>&times;</button><h4 class="modal-title">Message</h4></div><div class="modal-body">Are you sure you want to remove this item from your shopping cart?<div class="modal-footer" style="margin-left: -20px;margin-right: -20px;"><input type="submit" class="btn btn-primary" value="Yes" /><input type="button" onclick=HideMessagePopUp(); class="btn btn-primary" value="No"></div></div></div>
    </div>
</div>
<label id="lblDesgnHeaderTxt" visible="false"></label>
<label id="lblProductHeaderTxt" visible="false"></label>
<label id="lblQuantityHeaderTxt" visible="false"></label>
<label id="lblPriceHeaderTxt" visible="false"></label>
<button id="btnYesNO" style="display: none; width: 0px; height: 0px" />
@section scripts
{
    <script src="~/Scripts/PopUp.js"></script>
    <script>
        function EmailProofClick() {
            if ($('#hfIsUserLoggedIn.ClientID').val() == "true") {

                $(".opaqueLayer").css("height", $(window).height() + "px");
                $(".opaqueLayer").css("width", $(window).width() + "px");
                $(".opaqueLayer").css("display", "block");
                $("#userEmail1").val($('#hfProofEmail1').val());
                $("#userEmail2").val($('#hfProofEmail2').val());
                $("#popupSendProofs").css("display", "block");
                $('.popupSendProofs').css("left", (($(window).width() - $('.popupSendProofs').width()) / 2) + "px");
                $('.popupSendProofs').css("top", (($(window).height() - $('.popupSendProofs').height()) / 2) + "px");
                return false;
            } else {
                window.location.href = $('#hfRedirectURL.ClientID').val();
                return false;
            }
        }
        function CanCheckOut(sender) {
            if (Page_ClientValidate()) {

                var numOfRec = '<%=NumberOfRecords %>';
                var zeroItemincart = '<%=ZeroItems %>';
                if (parseInt(numOfRec) > 0) {
                    if (zeroItemincart == 0) {
                        showProgress();
                        AvoidReClickOnPostBack(sender);
                        return true;
                    } else {
                        ShowPopup('Message', 'Please remove the items of price zero.');
                        return false;
                    }

                }
                else {
                    ShowPopup('Message', 'No item(s) to checkout');
                    return false;
                }
            } else {
                return false;
            }
        }
        function EmailItems() {
            var ModeOfStore = '<%=Mode %>';
            var BrokerCompanyId = '<%=BrokerCompanyID %>';
            var email1 = $("#userEmail1").val();
            var email2 = $("#userEmail2").val();
            var orderID = $('#<%=hfOrderID.ClientID %>').val();
            var ContactID = $('#<%=hfContactID.ClientID %>').val();
            var ComapanyID = $('#<%=hfCompanyID.ClientID %>').val();
            var filter = /^([\w-\.]+)((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
            if (email1 != "") {
                if (!filter.test(email1)) {
                    alert("Please enter a valid email address in address 1");
                    return false;
                }
            }
            if (email2 != "") {
                if (!filter.test(email2)) {
                    alert("Please enter a valid email address in address 2");
                    return false;
                }
            }
            if (email2 == "" && email1 == "") {
                alert("Please enter atleast one email address");
                return false;
            }
            $.get("Services/Webstore.svc/sendProofs", { orderID: orderID, Email1: email1, Email2: email2, ContactID: ContactID, ContactCompanyID: ComapanyID, StoreMode: ModeOfStore, BrokerContactCompanyID: BrokerCompanyId },
                function (data) {
                    //alert(data);
                    if (data == true) {
                        $(".proofSuccess").css("display", "block");
                    }
                    //window.location.href = data + "&CategoryId=" + CategoryId + "&ProductName=" + document.getElementById('txtDesignName').value + emailParameters;
                });
            return false;
        }
        function closePopUpClick() {
            $("#popupSendProofs").css("display", "none");
            $(".opaqueLayer").css("display", "none");
            return false;
        }
        function hideRemovePanel() {
            $find('MPERemoveCartItem').hide();
            showProgress();
            return true;
        }
        function RedirectToConfirmSelect(TempID,CategoryID,ItemID)
        {
            if(TempID == 0)
            {
                window.location.href = "/ProductOptions/" + CategoryID + "/" + ItemID;
            }
            else
            {
                window.location.href = "/ProductOptions/" + TempID + "/" + CategoryID + "/" + ItemID;
            }

        }
        function ContinueShopping()
        {
            window.location.href = "/Home/Index";
        }
        function ApplyVoucherCode(OrderID,DiscountVoucher)
        {
            window.location.href = "/ShopCart/ApplyDiscountVoucherCode/DiscountVoucher=" + DiscountVoucher + "/" + OrderID;
        }
        function RemoveVoucherCode(OrderID)
        {
            window.location.href = "/ShopCart/RemoveDiscountVoucherCode/OrderID="+ OrderID;
        }
        function ConfirmDeleteItem(ItemID)
        {
            $("#RemoveProductDiv1").css("display", "block");
            $("hfIsItemID").val(ItemID);
            $("hfIsCallFrom").val(1);
            var html = $("div.RemoveProductDiv").html();
            alert(html);
            ConfirmDeleteItemPopUP(html);

        }
    </script>
}
