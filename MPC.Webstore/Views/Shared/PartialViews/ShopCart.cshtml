@model MPC.Models.Common.ShoppingCart
@using MPC.Models.Common;
@using MPC.Webstore.Common;
@using System.Linq;
@using MPC.Webstore.ViewModels;

@{
  
    string EstimateDispatchTime = string.Empty;
    double _priceTotal = 0;
    double _vatTotal = 0;
    double _grandTotal = 0;
    decimal noOfCostCentreProdDays = 0;
    decimal _numOfProductionDays = 0;
    decimal numberOfDaysAddedTodelivery = 0;
    decimal ProductProductionTime = 0;
    double GrossTotal = 0;
    string VatTotal = string.Empty;
    string subtotal = string.Empty;
    var ThumnbString = "Thumb.png";
}
@{
    Layout = null;
}
<div class="container content_area" id="all-shopCart-pg">
    <div class="left_right_padding">
        <div class="signin_heading_div textAlignLeft col-lg-12 col-md-12 col-xs-12" style="padding-bottom: 0px !important;">
            <table style="  width: 100%;">
                <tr>
                    <td>
                        <div class="contact_us_heading">
                            <label id="lbl_ShoppingCart" class="">@Html.Raw(Html.GetKeyValueFromResourceFile("lblTitleShopCart", UserCookieManager.WBStoreId))</label>
                        </div>

                    </td>

                </tr>
                <tr style="height: 5px;"></tr>
                @if (ViewBag.CancelPaymentMessage != null)
                {
                    <tr id="ErrorDisplyMes" style=" width: 100%;">
                        <td width="1000px">
                            <div style="background-color: red; border: 1px solid red; padding: 10px;" class="rounded_corners">
                                <label id="ErrorMEsSummry" style="color: White; font-size: 16px; font-weight: bold;">@ViewBag.CancelPaymentMessage</label>
                            </div>
                        </td>

                    </tr>
                }
                else if (ViewBag.ANZError != null || ViewBag.ANZErrorMes != null)
                {
                    <tr id="ErrorDisplyMes" style=" width: 100%;">
                        <td width="1000px">
                            <div style="background-color: red; border: 1px solid red; padding: 10px;" class="rounded_corners">
                                <label id="ErrorMEsSummry" style="color: White; font-size: 16px; font-weight: bold;">@ViewBag.ANZError</label><br />
                                <label id="ErrorMEsSummry" style="color: White; font-size: 16px; font-weight: bold;">@ViewBag.ANZErrorMes</label>
                            </div>
                        </td>

                    </tr>
                }
                else
                {
                    <tr id="ErrorDisplyMes" style="display: none; width: 100%;">
                        <td width="1000px">
                            &nbsp;
                        </td>

                    </tr>
                }
            </table>
        </div>
        @if (Model != null)
        {
            if (Model.CartItemsList == null || Model.CartItemsList.Count == 0)
            {
                <div class="get_in_touch_box rounded_corners col-lg-12 col-md-12 col-xs-12">
                    <div class="textAlignCenter">

                        <label class="lbl_Cart">@Html.Raw(Html.GetKeyValueFromResourceFile("lblMsg", UserCookieManager.WBStoreId))</label>

                    </div>

                </div>
            }
            else
            {
                using (Html.BeginForm())
                {
                    <div class="col-lg-12 col-md-12 col-xs-12">

                        <div id="ShopingCartDisplay" class="get_in_touch_box rounded_corners ">

                            <button id="Button1" style="display:none;" onclick="return EmailProofClick()" class="start_creating_btn_EmailProof float_right rounded_corners5"></button>

                            <table cellspacing="0" cellpadding="15" id="grdViewShopCart" style="width:100%;border-collapse:collapse;">
                                <tbody>
                                    <tr class="gridViewHeaderStyle">
                                        <th align="center" scope="col" class="hidden-xs">&nbsp;</th>
                                        <th id="lblProductTxt" align="left" scope="col">@Html.Raw(Html.GetKeyValueFromResourceFile("lblProductTxt", UserCookieManager.WBStoreId))</th>
                                        <th id="lblQuantityHeaderTxt" align="left" scope="col">@Html.Raw(Html.GetKeyValueFromResourceFile("lblQuantityHeaderTxt", UserCookieManager.WBStoreId))</th>
                                        @if (ViewBag.IsShowPrices)
                                        {
                                            <th id="lbl_Price" align="left" scope="col">@Html.Raw(Html.GetKeyValueFromResourceFile("lblPriceHeaderTxt", UserCookieManager.WBStoreId))</th>
                                        }
                                        @*<th align="left" scope="col" style="color: white !important; border: none; background-color: white">&nbsp;</th>*@
                                    </tr>
                                    @{ foreach (var prod in ViewData["ProductItemList"] as List<MPC.Models.Common.ProductItem>)
                                     {
                                        <tr class="gridViewRowStyle" align="top">
                                            <td class="PadTop5 shopCartFirstCol hidden-xs">
                                                <div class="cart_grid_image_container gallery">
                                                    @{
                                         string pdfLinkBtn = string.Empty;
                                         string imgToShowURL = string.Empty;
                                         if (!string.IsNullOrWhiteSpace(prod.Attatchment.FileName))
                                         {
                                             string ext = System.IO.Path.GetExtension(prod.Attatchment.FileName);
                                             if (ext == ".xlsx" || ext == ".xls" || ext == ".csv")
                                             {
                                                 string completeImgPath = Html.GetAppBasePath() + prod.Attatchment.FolderPath + prod.Attatchment.FileName + ThumnbString;
                                                 pdfLinkBtn = completeImgPath;// ImageDisplayScript(completeImgPath);
                                                 imgToShowURL = completeImgPath;
                                             }
                                             else
                                             {
                                                 string FolderPathOfAttachment = prod.Attatchment.FolderPath;
                                                 if (FolderPathOfAttachment.Contains("Production") == true)
                                                 {
                                                     FolderPathOfAttachment = FolderPathOfAttachment.Replace("Production", "Attachments");
                                                 }
                                                 // from file table
                                                 //  string completeImgPath = ResolveUrl(GetSideThumbnail(FolderPathOfAttachment, model.Attatchment.FileName));

                                                 pdfLinkBtn = "";// completeImgPath;//ImageDisplayScript(completeImgPath);
                                                 if (FolderPathOfAttachment[0] == '/')
                                                 {
                                                     imgToShowURL = FolderPathOfAttachment + "/" + prod.Attatchment.FileName + ThumnbString;// completeImgPath;
                                                 }
                                                 else
                                                 {
                                                     imgToShowURL = "/" + FolderPathOfAttachment + "/" + prod.Attatchment.FileName + ThumnbString;// completeImgPath;
                                                 }
                                             }
                                         }
                                         else
                                         {
                                             if (prod.ProductType == (int)ProductType.NonPrintProduct)
                                             {
                                                 string completeImgPath = "";
                                                 if (!string.IsNullOrEmpty(prod.Attatchment.FolderPath) && !string.IsNullOrEmpty(prod.Attatchment.FileName))
                                                 {
                                                     completeImgPath = "/" + prod.Attatchment.FolderPath + "/" + prod.Attatchment.FileName + ThumnbString;
                                                 }
                                                 else
                                                 {
                                                     completeImgPath = "/" + prod.ThumbnailPath;
                                                 }
                                                 pdfLinkBtn = completeImgPath;
                                                 imgToShowURL = completeImgPath;
                                             }
                                         }
                                                    }
                                                    <a id="lnkPdfFile" href=@pdfLinkBtn><img id="imgToShow" class="image_stretcher" src="@imgToShowURL" /></a>
                                                </div>
                                                <div class="BtnTemplateModifyContainer visible-xs hidden-sm">
                                                    @if (prod.ProductType == (int)ProductType.PrintProduct)
                                                    {
                                                        <input type="button" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('@prod.TemplateID','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="silver_back_button_modify">
                                                    }
                                                    else
                                                    {
                                                        <input type="button" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('0','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="silver_back_button_modify">
                                                    }
                                                </div>
                                            </td>
                                            <td style="width:29%;" valign="top" class="PadTop5">
                                                <span id="lblItemProductName" class="heading_16">@prod.ProductName</span><span id="CopyTxt" class="heading_16" style="color: red !important;"></span>
                                                <br>
                                                <span id="lblProductCategory" class="ItemdetailDesc">( @prod.ProductCategoryName )</span>
                                                <br>
                                                <br>
                                                <span id="lblSlectedStockName" class="ItemdetailDesc">@prod.PaperType</span>
                                                <br>

                                                @{
                                                    string itemAddsOn = string.Empty;
                                                    ProductProductionTime = prod.EstimateProductionTime ?? 0;
                                                    if (ViewData["selectedItemsAddonsList"] != null)
                                                    {
                                                        List<AddOnCostsCenter> costcenters = ViewData["selectedItemsAddonsList"] as List<AddOnCostsCenter>;
                                                        foreach (AddOnCostsCenter cost in costcenters.Where(addon => addon.ItemID == prod.ItemID))
                                                        {
                                                            itemAddsOn = itemAddsOn + cost.AddOnName + ",";
                                                            noOfCostCentreProdDays += cost.EstimateProductionTime;
                                                        }
                                                    }

                                                    ProductProductionTime += noOfCostCentreProdDays;
                                                    if (_numOfProductionDays < ProductProductionTime)
                                                    {
                                                        _numOfProductionDays = ProductProductionTime;
                                                    }
                                                    numberOfDaysAddedTodelivery = _numOfProductionDays;

                                                    DateTime date = Utils.AddBusinessdays(_numOfProductionDays, DateTime.Now);

                                                    EstimateDispatchTime = date.ToString("MMMM dd, yyyy");
                                                }

                                                <span id="lblselectedAddOnList" class="ItemdetailDesc">@itemAddsOn</span>
                                                <input type="hidden" id="numberOfDaysAddedTodelivery" name="numberOfDaysAddedTodelivery" value="@numberOfDaysAddedTodelivery">
                                                <br>
                                                <input type="submit" id="linkRemoveCartItem" class="silver_back_button_remove removeBtnForeColor" onclick="return ConfirmDeleteItem('@prod.ItemID','@ViewBag.OrderID');" value="Remove product from cart">
                                                <br />
                                                <input type="submit" id="btnCopyProduct" class="silver_back_button" onclick="CopyProduct('@prod.ItemID');" value="Make a copy of this product in cart">

                                                <br />
                                                <br />
                                                @if (prod.ProductType == (int)ProductType.PrintProduct)
                                                {
                                                    <input type="button" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('@prod.TemplateID','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="visible-sm visible-xs silver_back_button">
                                                }
                                                else
                                                {
                                                    <input type="button" name="lnkBtnRedesignTemplate" onclick="RedirectToConfirmSelect('0','@prod.ProductCategoryID','@prod.ItemID');" value="Modify" id="MainContent_grdViewShopCart_lnkBtnRedesignTemplate_0" class="visible-sm visible-xs silver_back_button">
                                                }
                                            </td>
                                            <td class="PadTop5" align="left" style="width:5%;" valign="top">
                                                <span id="lblItemQuantity" class="fntQtyPrice" style="font-weight:bold;">@prod.Qty1</span>
                                            </td>
                                            @if (ViewBag.IsShowPrices)
                                            {

                                                string itemPrice = string.Empty;
                                                double vatStateTaxPaid = (prod.Qty1GrossTotal ?? 0) - (prod.Qty1BaseCharge1 ?? 0);
                                                _vatTotal += vatStateTaxPaid;

                                                //2.Set item Price Now

                                                _priceTotal += prod.Qty1BaseCharge1 ?? 0;

                                                itemPrice = Utils.FormatDecimalValueToTwoDecimal((prod.Qty1BaseCharge1 ?? 0).ToString(), ViewBag.Currency);
                                                _grandTotal += prod.Qty1GrossTotal ?? 0;

                                                <td class="PadTop5 priceth" valign="top" align="right" style="width:20%;padding-right:0px;">
                                                    <span id="lblItemPrice" class="fntQtyPrice" style="font-weight:bold;text-align: right !important;">@itemPrice</span>
                                                </td>
                                            }


                                        </tr>

                                            subtotal = _priceTotal.ToString();


                                     }

                                    }
                                    @{

                                     _vatTotal = Convert.ToDouble(_vatTotal) + Convert.ToDouble(Model.DeliveryTaxValue);
                                     GrossTotal = Convert.ToDouble(subtotal) + Convert.ToDouble(_vatTotal) + Model.DeliveryCost;
                                     subtotal = Utils.FormatDecimalValueToTwoDecimal(subtotal.ToString(), ViewBag.Currency);
                                     VatTotal = Utils.FormatDecimalValueToTwoDecimal(_vatTotal.ToString(), ViewBag.Currency);
                                    }

                                </tbody>
                            </table>

                            <br />
                            <div class="cnttotalPayables">
                                @if (ViewBag.IsShowPrices)
                                {
                                    <div class="cntsubHeadings">
                                        <label id="lbl_SubTotal" class=" LightGrayLabels displayClear">@Html.Raw(Html.GetKeyValueFromResourceFile("ltrlsubtotal", UserCookieManager.WBStoreId))</label>
                                        <label id="lblVoucherDiscPercentageDisplay" class=" LightGrayLabels displayClear" style="display:none;">Discount</label>
                                        <label id="lbl_SubTotal" class=" LightGrayLabels displayClear">Delivery:</label>
                                        <label id="lbl_SubTotal" class=" LightGrayLabels displayClear">@Model.TaxLabel</label>
                                        <label id="lbl_SubTotal" class=" LightGrayLabels displayClear">Total:</label>
                                    </div>
                                    <div class="cnttotals" id="cntRightPricing1">
                                        <label id="lblSubTotal" class="Fsize13 colorBlack displayClear">@subtotal</label>
                                        <label id="lblVoucherCodeDiscAmount" class="Fsize13 colorBlack displayClear" style="display:none;">0</label>
                                        <label class="Fsize13 colorBlack displayClear">@Utils.FormatDecimalValueToTwoDecimal(Convert.ToString(Model.DeliveryCost), ViewBag.Currency)</label>
                                        <label class="Fsize13 colorBlack displayClear">@VatTotal</label>
                                        <label class="Fsize13 colorBlack displayClear">@Utils.FormatDecimalValueToTwoDecimal(GrossTotal.ToString(), ViewBag.Currency)</label>
                                    </div>
                                }
                                <div class="clearBoth">
                                </div>
                            </div>
                            <div class="cntdispatchDelivery">
                                <div class="tdDispatchDate">
                                    <div class="estimated_dispactch_sec MLeft17 LightGrayLabels">
                                        <label id="lbl_EstimatedDispatch">@Html.Raw(Html.GetKeyValueFromResourceFile("spnestimateddispatchdate", UserCookieManager.WBStoreId))</label>
                                    </div>
                                    <div class="estimated_dispatch_time MLeft17">
                                        <label id="lblDeliveryCostCenterDateText" class="heading_h5 colorBlack fontSyleBold">@EstimateDispatchTime</label>  &nbsp;
                                    </div>
                                </div>
                                <div class="tdDelivery">
                                    <div class="estimated_dilvery_sec  LightGrayLabels">
                                        &nbsp;
                                    </div>
                                    <div class="dropdown_sec">

                                        <div ID="pnlVoucherCodes">
                                            <label id="lblRedeemHeading" class="LightGrayLabels marginLeft marginRight">Voucher codes</label>
                                            <input type="text" class="text_box115 rounded_corners5" id="txtDiscountVoucherCode" />
                                            <button id="btnAutoPostBackDiscountVoucherCode" class="btn_blue_back_small rounded_corners5" onclick="ApplyDiscountVouchers();">Apply</button>
                                            <button id="btnAutoPostBackRemoveVoucherCode" class="btn_blue_back_small_Remove rounded_corners5" style="display:none;">Remove voucher code</button>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="clearBoth">
                            </div>

                            <input type="submit" id="btnCheckout" value="CHECKOUT" class="start_creating_btn_checkout float_right  rounded_corners5" onclick="ShowLoader();" /><br />
                            <button id="btn_ContinueShopping" type="button" onclick="ContinueShopping(); ShowLoader();" class="btn_brown  rounded_corners5" style="float: right;">@Html.Raw(Html.GetKeyValueFromResourceFile("btnContinueShopping1", UserCookieManager.WBStoreId))</button>
                            <div class="clearBoth">
                                &nbsp;
                            </div>
                        </div>

                    </div>
                    <div class="clearBoth">
                        &nbsp;
                    </div>
                    <input type="hidden" id="hfIsCallFrom" name="hfIsCallFrom" value="Checkout" />
                    <input type="hidden" id="hfItemID" name="hfItemID" value="0" />
                    <input type="hidden" id="hfNumOfRec" value="@ViewBag.NumberOfRecords" />
                    <input type="hidden" id="hfOrderID" name="hfOrderID" value="@ViewBag.OrderID" />
                    <input type="hidden" id="hfGrandTotal" name="hfGrandTotal" value="@ViewBag.GrossTotal" />

                }
            }


        }
        else
        {
            <div class="get_in_touch_box rounded_corners">
                <div class="textAlignCenter">
                    <label class="lbl_Empty_Cart">@Html.Raw(Html.GetKeyValueFromResourceFile("lblMsg", UserCookieManager.WBStoreId))</label>

                </div>

            </div>
        }

    </div>
    <div class="clearBoth">

    </div>
    @*matching set*@

    @{
        if (UserCookieManager.WEBStoreMode != (int)StoreMode.Corp)
        {

            // call matching set partial view to show matching sets
            MatchingSetViewModel MSViewModel = new MatchingSetViewModel();

            MSViewModel = ViewData["MSViewModel"] as MatchingSetViewModel;
            if (MSViewModel != null)
            {
                @Html.Partial("PartialViews/MatchingSet", MSViewModel);
            }


            // call related items to show lists of related items
            RelatedItemViewModel RIViewModel = new RelatedItemViewModel();
            RIViewModel = ViewData["RIViewModel"] as RelatedItemViewModel;
            if (RIViewModel != null)
            {
                @Html.Partial("PartialViews/RelatedItems", RIViewModel);
            }
            else
            {
                <label id="lbl_NorelatedItemsFound" class="errorMsgClss">@Html.Raw(Html.GetKeyValueFromResourceFile("lblNorelatedItemsFound", UserCookieManager.WBStoreId))</label>
            }
        }

    }
    <div class="clearBoth">

    </div>
</div>

<div class="opaqueLayer">
</div>
<div id="popupSendProofs" class="popupSendProofs">
    <div id="MainContent_Div1" onclick="return closePopUpClick()" class="exit_popup exitPopupProofs" style="display: none;">
    </div>
    <label id="lbl_EmailSendProofs" class="boldTxt">
        @Html.Raw(Html.GetKeyValueFromResourceFile("lbl_EmailSendProofs", UserCookieManager.WBStoreId))
    </label>
    <br />
    <br />
    <table class="normalTextStyle" width="400" cellpadding="2">
        <tr>
            <td align="right">
                <label id="lbl_Email1AddressSendProofs">@Html.Raw(Html.GetKeyValueFromResourceFile("lbl_Email1AddressSendProofs", UserCookieManager.WBStoreId))</label>
            </td>
            <td class="tdtextbox">
                <input type="email" name="userEmail1" id="userEmail1" class="text_box200 rounded_corners5">
                <br />
            </td>
        </tr>
        <tr>
            <td align="right" class="H4B">
                <label id="lbl_Email2AddressSendProofs">@Html.Raw(Html.GetKeyValueFromResourceFile("lbl_Email2AddressSendProofs", UserCookieManager.WBStoreId))</label>
            </td>
            <td class="tdtextbox">
                <input type="email" name="userEmail2" id="userEmail2" class="text_box200 rounded_corners5">
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <div class="reset_password_button_div2">
                    <button id="btn_SendEmail" class="start_creating_btn rounded_corners5 btnSendProofs" onclick="return EmailItems()">
                        @Html.Raw(Html.GetKeyValueFromResourceFile("btn_SendEmail", UserCookieManager.WBStoreId))
                    </button>
                    &nbsp;
                    <button id="btn_Cancel" class="start_creating_btn rounded_corners5" onclick="return closePopUpClick()">
                        @Html.Raw(Html.GetKeyValueFromResourceFile("btn_Cancel", UserCookieManager.WBStoreId))
                    </button>
                </div>
            </td>
        </tr>
    </table>
    <p class="proofSuccess" style="display: none;" id="lbl_EmailSentProofMessage">
        @Html.Raw(Html.GetKeyValueFromResourceFile("lbl_EmailSentProofMessage", UserCookieManager.WBStoreId))
    </p>
</div>
<div id="RemoveProductDiv1" class="RemoveProductDiv" style="display:none;">
    <div class="md-modal md-effect-7" id="modal-7">
        <div class="md-content"><div class="modal-header"><button class="md-close close" onclick=HideMessagePopUp();>&times;</button><h4 id="popup_Mesaage_Title" class="modal-title">@Html.Raw(Html.GetKeyValueFromResourceFile("popup_Mesaage_Title", UserCookieManager.WBStoreId))</h4></div><div id="popup_Mesaage" class="modal-body">@Html.Raw(Html.GetKeyValueFromResourceFile("popup_Mesaage", UserCookieManager.WBStoreId))<div class="modal-footer" style="margin-left: -20px;margin-right: -20px;"><input type="submit" class="btn btn-primary" value="Yes" /><input type="button" onclick=HideMessagePopUp(); class="btn btn-primary" value="No"></div></div></div>
    </div>
</div>
<button id="btnYesNO" style="display: none; width: 0px; height: 0px" />


     <script src="/Scripts/jquery-1.10.1.min.js"></script>
    <script src="~/Scripts/PopUp.js"></script>
    <script type="text/javascript">
        function EmailProofClick() {
            if ($('#hfIsUserLoggedIn.ClientID').val() == "true") {

                $(".opaqueLayer").css("height", $(window).height() + "px");
                $(".opaqueLayer").css("width", $(window).width() + "px");
                $(".opaqueLayer").css("display", "block");
                $("#userEmail1").val($('#hfProofEmail1').val());
                $("#userEmail2").val($('#hfProofEmail2').val());
                $("#popupSendProofs").css("display", "block");
                $('.popupSendProofs').css("left", (($(window).width() - $('.popupSendProofs').width()) / 2) + "px");
                $('.popupSendProofs').css("top", (($(window).height() - $('.popupSendProofs').height()) / 2) + "px");
                return false;
            } else {
                window.location.href = $('#hfRedirectURL.ClientID').val();
                return false;
            }
        }
        function CanCheckOut(sender) {
            if (Page_ClientValidate()) {

                var numOfRec = @ViewBag.NumberOfRecords;

                if (parseInt(numOfRec) > 0) {
                    $("hfIsCallFrom").val("CheckOut");
                    return true;
                }
                else {
                    ShowPopup('Message', 'No item(s) to checkout');
                    return false;
                }
            } else {
                return false;
            }
        }
        function EmailItems() {
            var ModeOfStore = '<%=Mode %>';
            var BrokerCompanyId = '<%=BrokerCompanyID %>';
            var email1 = $("#userEmail1").val();
            var email2 = $("#userEmail2").val();
            var orderID = $('#<%=hfOrderID.ClientID %>').val();
            var ContactID = $('#<%=hfContactID.ClientID %>').val();
            var ComapanyID = $('#<%=hfCompanyID.ClientID %>').val();
            var filter = /^([\w-\.]+)((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
            if (email1 != "") {
                if (!filter.test(email1)) {
                    alert("Please enter a valid email address in address 1");
                    return false;
                }
            }
            if (email2 != "") {
                if (!filter.test(email2)) {
                    alert("Please enter a valid email address in address 2");
                    return false;
                }
            }
            if (email2 == "" && email1 == "") {
                alert("Please enter atleast one email address");
                return false;
            }
            $.get("Services/Webstore.svc/sendProofs", { orderID: orderID, Email1: email1, Email2: email2, ContactID: ContactID, ContactCompanyID: ComapanyID, StoreMode: ModeOfStore, BrokerContactCompanyID: BrokerCompanyId },
                function (data) {
                    //alert(data);
                    if (data == true) {
                        $(".proofSuccess").css("display", "block");
                    }
                    //window.location.href = data + "&CategoryId=" + CategoryId + "&ProductName=" + document.getElementById('txtDesignName').value + emailParameters;
                });
            return false;
        }
        function closePopUpClick() {
            $("#popupSendProofs").css("display", "none");
            $(".opaqueLayer").css("display", "none");
            return false;
        }
        function hideRemovePanel() {
            $find('MPERemoveCartItem').hide();
            showProgress();
            return true;
        }
        function RedirectToConfirmSelect(TempID,CategoryID,ItemID)
        {
            if(TempID == 0)
            {
                window.location.href = "/ProductOptions/" + CategoryID + "/" + ItemID + "/Modify";
            }
            else
            {

                window.location.href = "/ProductOptions" + "/" + CategoryID + "/" + ItemID + "/Modify/" + TempID;
            }
            return false;
        }
        function ContinueShopping()
        {

            window.location.href = "/";
        }
        function ApplyVoucherCode(OrderID,DiscountVoucher)
        {
            window.location.href = "/ShopCart/ApplyDiscountVoucherCode/DiscountVoucher=" + DiscountVoucher + "/" + OrderID;
        }
        function RemoveVoucherCode(OrderID)
        {
            window.location.href = "/ShopCart/RemoveDiscountVoucherCode/OrderID="+ OrderID;
        }
        function ConfirmDeleteItem(ItemID,OrderID)
        {
            
            $("#hfItemID").val(ItemID);
            $("#hfIsCallFrom").val("RemoveProduct");
            ConfirmDeleteItemPopUP(ItemID,OrderID);
            return false;
        }
        function CopyProduct(ItemID)
        {

            $("#hfItemID").val(ItemID);
            $("#hfIsCallFrom").val("CopyProduct");

            ShowLoader();


        }

        function ApplyDiscountVouchers() {

            ShowLoader();
            
            var data = { DiscountVoucher: $("#txtDiscountVoucherCode").val() }
            $.ajax({
                type: "GET",
                url: "/webstoreapi/DiscountVoucher/ValidateDiscountVouchers",
                contentType: "application/json",
                data: data,
                async: true,
                success: function (response) {
                  
                }
            });

        }
    </script>

