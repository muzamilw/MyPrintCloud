




















//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets6FFA0CFD2B370358021F319B64D023F95CEC9CD7FA94275D15CDEBA4183D82F2))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets6FFA0CFD2B370358021F319B64D023F95CEC9CD7FA94275D15CDEBA4183D82F2 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets6FFA0CFD2B370358021F319B64D023F95CEC9CD7FA94275D15CDEBA4183D82F2()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "f18711493b34a9a271ca9e8302c96bea07b7d0a307e4f174687b950b3b7e2978";
            this.HashOverAllExtentViews = "652c766a4f009373d190e79e015ec24c6ecc3629b0b092054a30475904076ed1";
            this.ViewCount = 210;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            if ((index == 62))
            {
                return GetView62();
            }
            if ((index == 63))
            {
                return GetView63();
            }
            if ((index == 64))
            {
                return GetView64();
            }
            if ((index == 65))
            {
                return GetView65();
            }
            if ((index == 66))
            {
                return GetView66();
            }
            if ((index == 67))
            {
                return GetView67();
            }
            if ((index == 68))
            {
                return GetView68();
            }
            if ((index == 69))
            {
                return GetView69();
            }
            if ((index == 70))
            {
                return GetView70();
            }
            if ((index == 71))
            {
                return GetView71();
            }
            if ((index == 72))
            {
                return GetView72();
            }
            if ((index == 73))
            {
                return GetView73();
            }
            if ((index == 74))
            {
                return GetView74();
            }
            if ((index == 75))
            {
                return GetView75();
            }
            if ((index == 76))
            {
                return GetView76();
            }
            if ((index == 77))
            {
                return GetView77();
            }
            if ((index == 78))
            {
                return GetView78();
            }
            if ((index == 79))
            {
                return GetView79();
            }
            if ((index == 80))
            {
                return GetView80();
            }
            if ((index == 81))
            {
                return GetView81();
            }
            if ((index == 82))
            {
                return GetView82();
            }
            if ((index == 83))
            {
                return GetView83();
            }
            if ((index == 84))
            {
                return GetView84();
            }
            if ((index == 85))
            {
                return GetView85();
            }
            if ((index == 86))
            {
                return GetView86();
            }
            if ((index == 87))
            {
                return GetView87();
            }
            if ((index == 88))
            {
                return GetView88();
            }
            if ((index == 89))
            {
                return GetView89();
            }
            if ((index == 90))
            {
                return GetView90();
            }
            if ((index == 91))
            {
                return GetView91();
            }
            if ((index == 92))
            {
                return GetView92();
            }
            if ((index == 93))
            {
                return GetView93();
            }
            if ((index == 94))
            {
                return GetView94();
            }
            if ((index == 95))
            {
                return GetView95();
            }
            if ((index == 96))
            {
                return GetView96();
            }
            if ((index == 97))
            {
                return GetView97();
            }
            if ((index == 98))
            {
                return GetView98();
            }
            if ((index == 99))
            {
                return GetView99();
            }
            if ((index == 100))
            {
                return GetView100();
            }
            if ((index == 101))
            {
                return GetView101();
            }
            if ((index == 102))
            {
                return GetView102();
            }
            if ((index == 103))
            {
                return GetView103();
            }
            if ((index == 104))
            {
                return GetView104();
            }
            if ((index == 105))
            {
                return GetView105();
            }
            if ((index == 106))
            {
                return GetView106();
            }
            if ((index == 107))
            {
                return GetView107();
            }
            if ((index == 108))
            {
                return GetView108();
            }
            if ((index == 109))
            {
                return GetView109();
            }
            if ((index == 110))
            {
                return GetView110();
            }
            if ((index == 111))
            {
                return GetView111();
            }
            if ((index == 112))
            {
                return GetView112();
            }
            if ((index == 113))
            {
                return GetView113();
            }
            if ((index == 114))
            {
                return GetView114();
            }
            if ((index == 115))
            {
                return GetView115();
            }
            if ((index == 116))
            {
                return GetView116();
            }
            if ((index == 117))
            {
                return GetView117();
            }
            if ((index == 118))
            {
                return GetView118();
            }
            if ((index == 119))
            {
                return GetView119();
            }
            if ((index == 120))
            {
                return GetView120();
            }
            if ((index == 121))
            {
                return GetView121();
            }
            if ((index == 122))
            {
                return GetView122();
            }
            if ((index == 123))
            {
                return GetView123();
            }
            if ((index == 124))
            {
                return GetView124();
            }
            if ((index == 125))
            {
                return GetView125();
            }
            if ((index == 126))
            {
                return GetView126();
            }
            if ((index == 127))
            {
                return GetView127();
            }
            if ((index == 128))
            {
                return GetView128();
            }
            if ((index == 129))
            {
                return GetView129();
            }
            if ((index == 130))
            {
                return GetView130();
            }
            if ((index == 131))
            {
                return GetView131();
            }
            if ((index == 132))
            {
                return GetView132();
            }
            if ((index == 133))
            {
                return GetView133();
            }
            if ((index == 134))
            {
                return GetView134();
            }
            if ((index == 135))
            {
                return GetView135();
            }
            if ((index == 136))
            {
                return GetView136();
            }
            if ((index == 137))
            {
                return GetView137();
            }
            if ((index == 138))
            {
                return GetView138();
            }
            if ((index == 139))
            {
                return GetView139();
            }
            if ((index == 140))
            {
                return GetView140();
            }
            if ((index == 141))
            {
                return GetView141();
            }
            if ((index == 142))
            {
                return GetView142();
            }
            if ((index == 143))
            {
                return GetView143();
            }
            if ((index == 144))
            {
                return GetView144();
            }
            if ((index == 145))
            {
                return GetView145();
            }
            if ((index == 146))
            {
                return GetView146();
            }
            if ((index == 147))
            {
                return GetView147();
            }
            if ((index == 148))
            {
                return GetView148();
            }
            if ((index == 149))
            {
                return GetView149();
            }
            if ((index == 150))
            {
                return GetView150();
            }
            if ((index == 151))
            {
                return GetView151();
            }
            if ((index == 152))
            {
                return GetView152();
            }
            if ((index == 153))
            {
                return GetView153();
            }
            if ((index == 154))
            {
                return GetView154();
            }
            if ((index == 155))
            {
                return GetView155();
            }
            if ((index == 156))
            {
                return GetView156();
            }
            if ((index == 157))
            {
                return GetView157();
            }
            if ((index == 158))
            {
                return GetView158();
            }
            if ((index == 159))
            {
                return GetView159();
            }
            if ((index == 160))
            {
                return GetView160();
            }
            if ((index == 161))
            {
                return GetView161();
            }
            if ((index == 162))
            {
                return GetView162();
            }
            if ((index == 163))
            {
                return GetView163();
            }
            if ((index == 164))
            {
                return GetView164();
            }
            if ((index == 165))
            {
                return GetView165();
            }
            if ((index == 166))
            {
                return GetView166();
            }
            if ((index == 167))
            {
                return GetView167();
            }
            if ((index == 168))
            {
                return GetView168();
            }
            if ((index == 169))
            {
                return GetView169();
            }
            if ((index == 170))
            {
                return GetView170();
            }
            if ((index == 171))
            {
                return GetView171();
            }
            if ((index == 172))
            {
                return GetView172();
            }
            if ((index == 173))
            {
                return GetView173();
            }
            if ((index == 174))
            {
                return GetView174();
            }
            if ((index == 175))
            {
                return GetView175();
            }
            if ((index == 176))
            {
                return GetView176();
            }
            if ((index == 177))
            {
                return GetView177();
            }
            if ((index == 178))
            {
                return GetView178();
            }
            if ((index == 179))
            {
                return GetView179();
            }
            if ((index == 180))
            {
                return GetView180();
            }
            if ((index == 181))
            {
                return GetView181();
            }
            if ((index == 182))
            {
                return GetView182();
            }
            if ((index == 183))
            {
                return GetView183();
            }
            if ((index == 184))
            {
                return GetView184();
            }
            if ((index == 185))
            {
                return GetView185();
            }
            if ((index == 186))
            {
                return GetView186();
            }
            if ((index == 187))
            {
                return GetView187();
            }
            if ((index == 188))
            {
                return GetView188();
            }
            if ((index == 189))
            {
                return GetView189();
            }
            if ((index == 190))
            {
                return GetView190();
            }
            if ((index == 191))
            {
                return GetView191();
            }
            if ((index == 192))
            {
                return GetView192();
            }
            if ((index == 193))
            {
                return GetView193();
            }
            if ((index == 194))
            {
                return GetView194();
            }
            if ((index == 195))
            {
                return GetView195();
            }
            if ((index == 196))
            {
                return GetView196();
            }
            if ((index == 197))
            {
                return GetView197();
            }
            if ((index == 198))
            {
                return GetView198();
            }
            if ((index == 199))
            {
                return GetView199();
            }
            if ((index == 200))
            {
                return GetView200();
            }
            if ((index == 201))
            {
                return GetView201();
            }
            if ((index == 202))
            {
                return GetView202();
            }
            if ((index == 203))
            {
                return GetView203();
            }
            if ((index == 204))
            {
                return GetView204();
            }
            if ((index == 205))
            {
                return GetView205();
            }
            if ((index == 206))
            {
                return GetView206();
            }
            if ((index == 207))
            {
                return GetView207();
            }
            if ((index == 208))
            {
                return GetView208();
            }
            if ((index == 209))
            {
                return GetView209();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9642);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [DomainModels.Store.Company]");
            viewString.Append("(T1.Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL");
            viewString.Append(", T1.Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Compa");
            viewString.Append("ny_TypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company");
            viewString.Append("_AccountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsC");
            viewString.Append("ustomer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLast");
            viewString.Append("UpdatedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedB");
            viewString.Append("y, T1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, ");
            viewString.Append("T1.Company_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_Is");
            viewString.Append("General, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.");
            viewString.Append("Company_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequ");
            viewString.Append("ired, T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTracki");
            viewString.Append("ngPath, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.C");
            viewString.Append("ompany_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeatur");
            viewString.Append("edProducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseU");
            viewString.Append("sIcons, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.C");
            viewString.Append("ompany_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBr");
            viewString.Append("okerBanners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, ");
            viewString.Append("T1.Company_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline,");
            viewString.Append(" T1.Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T");
            viewString.Append("1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Compan");
            viewString.Append("y_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_i");
            viewString.Append("sShowGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company");
            viewString.Append("_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSeco");
            viewString.Append("ndaryPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowR");
            viewString.Append("egistrationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstT");
            viewString.Append("ime, T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppI");
            viewString.Append("d, T1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS");
            viewString.Append(", T1.Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlace");
            viewString.Append("OrderWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, ");
            viewString.Append("T1.Company_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerAr");
            viewString.Append("tworkOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.C");
            viewString.Append("ompany_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Prod");
            viewString.Append("uctionManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotifi");
            viewString.Append("cationManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnCh");
            viewString.Append("eckout, T1.Company_DeliveryPickUpAddressId, T1.Company_TaxRate, T1.Company_IsDis");
            viewString.Append("playDiscountVoucherCode, T1.Company_IsDisplayCorporateBinding, T1.Company_MapIma");
            viewString.Append("geURL, T1.Company_PickupAddressId, T1.Company_TaxLabel)\r\n    FROM (\r\n        SEL");
            viewString.Append("ECT \r\n            T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumbe");
            viewString.Append("r AS Company_AccountNumber, \r\n            T.Name AS Company_Name, \r\n            ");
            viewString.Append("T.URL AS Company_URL, \r\n            T.CreditReference AS Company_CreditReference");
            viewString.Append(", \r\n            T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS C");
            viewString.Append("ompany_Terms, \r\n            T.TypeId AS Company_TypeId, \r\n            T.DefaultN");
            viewString.Append("ominalCode AS Company_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Com");
            viewString.Append("pany_DefaultMarkUpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate");
            viewString.Append(", \r\n            T.AccountManagerId AS Company_AccountManagerId, \r\n            T.");
            viewString.Append("Status AS Company_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n  ");
            viewString.Append("          T.Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Comp");
            viewString.Append("any_NotesLastUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLas");
            viewString.Append("tUpdatedBy, \r\n            T.AccountStatusId AS Company_AccountStatusId, \r\n      ");
            viewString.Append("      T.IsDisabled AS Company_IsDisabled, \r\n            T.LockedBy AS Company_Lo");
            viewString.Append("ckedBy, \r\n            T.AccountBalance AS Company_AccountBalance, \r\n            ");
            viewString.Append("T.CreationDate AS Company_CreationDate, \r\n            T.VATRegNumber AS Company_");
            viewString.Append("VATRegNumber, \r\n            T.VATRegReference AS Company_VATRegReference, \r\n    ");
            viewString.Append("        T.FlagId AS Company_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, ");
            viewString.Append("\r\n            T.IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS C");
            viewString.Append("ompany_SalesPerson, \r\n            T.Image AS Company_Image, \r\n            T.WebA");
            viewString.Append("ccessCode AS Company_WebAccessCode, \r\n            T.isArchived AS Company_isArch");
            viewString.Append("ived, \r\n            T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCa");
            viewString.Append("rd, \r\n            T.PONumberRequired AS Company_PONumberRequired, \r\n            ");
            viewString.Append("T.ShowPrices AS Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_Ca");
            viewString.Append("rrierWebPath, \r\n            T.CarrierTrackingPath AS Company_CarrierTrackingPath");
            viewString.Append(", \r\n            T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n");
            viewString.Append("            T.isDisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            ");
            viewString.Append("T.isDisplayMenuBar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners");
            viewString.Append(" AS Company_isDisplayBanners, \r\n            T.isDisplayFeaturedProducts AS Compa");
            viewString.Append("ny_isDisplayFeaturedProducts, \r\n            T.isDisplayPromotionalProducts AS Co");
            viewString.Append("mpany_isDisplayPromotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Co");
            viewString.Append("mpany_isDisplayChooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company");
            viewString.Append("_isDisplaySecondaryPages, \r\n            T.isDisplaySiteFooter AS Company_isDispl");
            viewString.Append("aySiteFooter, \r\n            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL");
            viewString.Append(", \r\n            T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.");
            viewString.Append("isDisplaylBrokerBanners AS Company_isDisplaylBrokerBanners, \r\n            T.isBr");
            viewString.Append("okerCanLaminate AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRound");
            viewString.Append("Corner AS Company_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSame");
            viewString.Append("Day AS Company_isBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPayme");
            viewString.Append("ntOnline AS Company_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrde");
            viewString.Append("rApprovalRequired AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBr");
            viewString.Append("okerPaymentRequired AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteL");
            viewString.Append("abel AS Company_isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, ");
            viewString.Append("\r\n            T.FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL ");
            viewString.Append("AS Company_LinkedinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n");
            viewString.Append("            T.WebAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShow");
            viewString.Append("GoogleMap AS Company_isShowGoogleMap, \r\n            T.isTextWatermark AS Company");
            viewString.Append("_isTextWatermark, \r\n            T.WatermarkText AS Company_WatermarkText, \r\n    ");
            viewString.Append("        T.CoreCustomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgro");
            viewString.Append("undImage AS Company_StoreBackgroundImage, \r\n            T.isDisplayBrokerSeconda");
            viewString.Append("ryPages AS Company_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS");
            viewString.Append(" Company_PriceFlagId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n  ");
            viewString.Append("          T.isAllowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n");
            viewString.Append("            T.MarketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n    ");
            viewString.Append("        T.isLoginFirstTime AS Company_isLoginFirstTime, \r\n            T.facebook");
            viewString.Append("AppId AS Company_facebookAppId, \r\n            T.facebookAppKey AS Company_facebo");
            viewString.Append("okAppKey, \r\n            T.twitterAppId AS Company_twitterAppId, \r\n            T.");
            viewString.Append("twitterAppKey AS Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Co");
            viewString.Append("mpany_isStoreModePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n    ");
            viewString.Append("        T.TaxPercentageId AS Company_TaxPercentageId, \r\n            T.XeroAccess");
            viewString.Append("Code AS Company_XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval");
            viewString.Append(" AS Company_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile");
            viewString.Append(" AS Company_CanUserEditProfile, \r\n            T.OrganisationId AS Company_Organi");
            viewString.Append("sationId, \r\n            T.includeEmailBrokerArtworkOrderReport AS Company_includ");
            viewString.Append("eEmailBrokerArtworkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXM");
            viewString.Append("L AS Company_includeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrok");
            viewString.Append("erArtworkOrderJobCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n      ");
            viewString.Append("      T.makeEmailBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArt");
            viewString.Append("workOrderProductionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_Sal");
            viewString.Append("esAndOrderManagerId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAn");
            viewString.Append("dOrderManagerId2, \r\n            T.ProductionManagerId1 AS Company_ProductionMana");
            viewString.Append("gerId1, \r\n            T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n");
            viewString.Append("            T.StockNotificationManagerId1 AS Company_StockNotificationManagerId1");
            viewString.Append(", \r\n            T.StockNotificationManagerId2 AS Company_StockNotificationManage");
            viewString.Append("rId2, \r\n            T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n        ");
            viewString.Append("    T.IsDisplayDeliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n    ");
            viewString.Append("        T.DeliveryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n        ");
            viewString.Append("    T.TaxRate AS Company_TaxRate, \r\n            T.IsDisplayDiscountVoucherCode A");
            viewString.Append("S Company_IsDisplayDiscountVoucherCode, \r\n            T.IsDisplayCorporateBindin");
            viewString.Append("g AS Company_IsDisplayCorporateBinding, \r\n            T.MapImageUrl AS Company_M");
            viewString.Append("apImageURL, \r\n            T.PickupAddressId AS Company_PickupAddressId, \r\n      ");
            viewString.Append("      T.TaxLabel AS Company_TaxLabel, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" BaseDbContext.Companies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidget
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidget", @"
    SELECT VALUE -- Constructing CmsSkinPageWidget
        [DomainModels.Store.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidgetParam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidgetParam", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParam
        [DomainModels.Store.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgetParams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBanner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBanner", @"
    SELECT VALUE -- Constructing CompanyBanner
        [DomainModels.Store.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM BaseDbContext.CompanyBanners AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBannerSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBannerSet", @"
    SELECT VALUE -- Constructing CompanyBannerSet
        [DomainModels.Store.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyBannerSets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyDomain", @"
    SELECT VALUE -- Constructing CompanyDomain
        [DomainModels.Store.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyDomains AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Organisation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2629);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisation\r\n        [DomainModels.Store.Org");
            viewString.Append("anisation](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.");
            viewString.Append("Organisation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Or");
            viewString.Append("ganisation_City, T1.Organisation_StateId, T1.Organisation_CountryId, T1.Organisa");
            viewString.Append("tion_ZipCode, T1.Organisation_Tel, T1.Organisation_Fax, T1.Organisation_Mobile, ");
            viewString.Append("T1.Organisation_Email, T1.Organisation_URL, T1.Organisation_WebsiteLogo, T1.Orga");
            viewString.Append("nisation_MISLogo, T1.Organisation_TaxRegistrationNo, T1.Organisation_LicenseLeve");
            viewString.Append("l, T1.Organisation_CustomerAccountNumber, T1.Organisation_SmtpServer, T1.Organis");
            viewString.Append("ation_SmtpUserName, T1.Organisation_SmtpPassword, T1.Organisation_VATRegNumber, ");
            viewString.Append("T1.Organisation_SystemLengthUnit, T1.Organisation_SystemWeightUnit, T1.Organisat");
            viewString.Append("ion_CurrencyId, T1.Organisation_LanguageId, T1.Organisation_UserDomainKey, T1.Or");
            viewString.Append("ganisation_MISLogoStreamId)\r\n    FROM (\r\n        SELECT \r\n            T.Organisa");
            viewString.Append("tionId AS Organisation_OrganisationId, \r\n            T.OrganisationName AS Organ");
            viewString.Append("isation_OrganisationName, \r\n            T.Address1 AS Organisation_Address1, \r\n ");
            viewString.Append("           T.Address2 AS Organisation_Address2, \r\n            T.Address3 AS Orga");
            viewString.Append("nisation_Address3, \r\n            T.City AS Organisation_City, \r\n            T.St");
            viewString.Append("ateId AS Organisation_StateId, \r\n            T.CountryId AS Organisation_Country");
            viewString.Append("Id, \r\n            T.ZipCode AS Organisation_ZipCode, \r\n            T.Tel AS Orga");
            viewString.Append("nisation_Tel, \r\n            T.Fax AS Organisation_Fax, \r\n            T.Mobile AS");
            viewString.Append(" Organisation_Mobile, \r\n            T.Email AS Organisation_Email, \r\n           ");
            viewString.Append(" T.URL AS Organisation_URL, \r\n            T.WebsiteLogo AS Organisation_WebsiteL");
            viewString.Append("ogo, \r\n            T.MISLogo AS Organisation_MISLogo, \r\n            T.TaxRegistr");
            viewString.Append("ationNo AS Organisation_TaxRegistrationNo, \r\n            T.LicenseLevel AS Organ");
            viewString.Append("isation_LicenseLevel, \r\n            T.CustomerAccountNumber AS Organisation_Cust");
            viewString.Append("omerAccountNumber, \r\n            T.SmtpServer AS Organisation_SmtpServer, \r\n    ");
            viewString.Append("        T.SmtpUserName AS Organisation_SmtpUserName, \r\n            T.SmtpPasswor");
            viewString.Append("d AS Organisation_SmtpPassword, \r\n            T.VATRegNumber AS Organisation_VAT");
            viewString.Append("RegNumber, \r\n            T.SystemLengthUnit AS Organisation_SystemLengthUnit, \r\n");
            viewString.Append("            T.SystemWeightUnit AS Organisation_SystemWeightUnit, \r\n            T");
            viewString.Append(".CurrencyId AS Organisation_CurrencyId, \r\n            T.LanguageId AS Organisati");
            viewString.Append("on_LanguageId, \r\n            T.UserDomainKey AS Organisation_UserDomainKey, \r\n  ");
            viewString.Append("          T.MISLogoStreamId AS Organisation_MISLogoStreamId, \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM BaseDbContext.Organisations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Organisation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6012);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategory\r\n        [DomainModels.Store.");
            viewString.Append("ProductCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_Catego");
            viewString.Append("ryName, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.Prod");
            viewString.Append("uctCategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_Compan");
            viewString.Append("yId, T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Pr");
            viewString.Append("oductCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_is");
            viewString.Append("Enabled, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMa");
            viewString.Append("ppedCategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished,");
            viewString.Append(" T1.ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCa");
            viewString.Append("tegory_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCatego");
            viewString.Append("ry_isLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRest");
            viewString.Append("rictions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction");
            viewString.Append(", T1.ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Pr");
            viewString.Append("oductCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleF");
            viewString.Append("actor, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeyword");
            viewString.Append("s, T1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductC");
            viewString.Append("ategory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCa");
            viewString.Append("tegory_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1");
            viewString.Append(".ProductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCat");
            viewString.Append("egory_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCateg");
            viewString.Append("ory_DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory");
            viewString.Append("_ProductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCa");
            viewString.Append("tegory_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCateg");
            viewString.Append("ory_IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsSh");
            viewString.Append("owStockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_I");
            viewString.Append("sShowProductShortDescription, T1.ProductCategory_ImageStreamId, T1.ProductCatego");
            viewString.Append("ry_ThumbnailStreamId)\r\n    FROM (\r\n        SELECT \r\n            T.ProductCategor");
            viewString.Append("yId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName AS Produc");
            viewString.Append("tCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_ContentTy");
            viewString.Append("pe, \r\n            T.Description1 AS ProductCategory_Description1, \r\n            ");
            viewString.Append("T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy AS Prod");
            viewString.Append("uctCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_CompanyId, \r\n");
            viewString.Append("            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n          ");
            viewString.Append("  T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImagePath AS P");
            viewString.Append("roductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCategory_Thumb");
            viewString.Append("nailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n            ");
            viewString.Append("T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.TemplateDesign");
            viewString.Append("erMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryName, \r\n  ");
            viewString.Append("          T.isArchived AS ProductCategory_isArchived, \r\n            T.isPublishe");
            viewString.Append("d AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS ProductCategor");
            viewString.Append("y_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_TrimmedHeight, ");
            viewString.Append("\r\n            T.isColorImposition AS ProductCategory_isColorImposition, \r\n      ");
            viewString.Append("      T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n            T.");
            viewString.Append("isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.Sides AS");
            viewString.Append(" ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS ProductCategory");
            viewString.Append("_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategory_ApplyF");
            viewString.Append("oldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestriction, ");
            viewString.Append("\r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, \r\n      ");
            viewString.Append("      T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            T.Region");
            viewString.Append("Id AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCategory_Zo");
            viewString.Append("omFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n        ");
            viewString.Append("    T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, \r\n      ");
            viewString.Append("      T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.MetaDescri");
            viewString.Append("ption AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS ProductCa");
            viewString.Append("tegory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Organisation");
            viewString.Append("Id, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCategoryDispla");
            viewString.Append("yMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCategoryDi");
            viewString.Append("splayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory_SubCate");
            viewString.Append("goryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_CategoryU");
            viewString.Append("RLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n        ");
            viewString.Append("    T.ShortDescription AS ProductCategory_ShortDescription, \r\n            T.Seco");
            viewString.Append("ndaryDescription AS ProductCategory_SecondaryDescription, \r\n            T.Defaul");
            viewString.Append("tSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDisplayColumns");
            viewString.Append(" AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisplayRows ");
            viewString.Append("AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeaturedproduct");
            viewString.Append("s AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAvailablit");
            viewString.Append("y AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoints AS Pr");
            viewString.Append("oductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS ProductCate");
            viewString.Append("gory_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory_IsShowS");
            viewString.Append("alePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowStockStatus");
            viewString.Append(", \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProductDescr");
            viewString.Append("iption, \r\n            T.IsShowProductShortDescription AS ProductCategory_IsShowP");
            viewString.Append("roductShortDescription, \r\n            T.ImageStreamId AS ProductCategory_ImageSt");
            viewString.Append("reamId, \r\n            T.ThumbnailStreamId AS ProductCategory_ThumbnailStreamId, ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM BaseDbContext.ProductCategories AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategory", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Store.Widgets](T1.Widgets_WidgetId, T1.Widgets_WidgetCode, T1.Widgets_WidgetName, T1.Widgets_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widgets_WidgetId, 
            T.WidgetCode AS Widgets_WidgetCode, 
            T.WidgetName AS Widgets_WidgetName, 
            T.WidgetControlName AS Widgets_WidgetControlName, 
            True AS _from0
        FROM BaseDbContext.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCategory", "\r\n    SELECT VALUE -- Constructing StockCategory\r\n        [DomainModels.Store.Sto" +
                    "ckCategory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory" +
                    "_Name, T1.StockCategory_Description, T1.StockCategory_fixed, T1.StockCategory_It" +
                    "emWeight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.Stock" +
                    "Category_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCo" +
                    "ated, T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCatego" +
                    "ry_recLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Fla" +
                    "g2, T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r" +
                    "\n    FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_Category" +
                    "Id, \r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCat" +
                    "egory_Name, \r\n            T.Description AS StockCategory_Description, \r\n        " +
                    "    T.Fixed AS StockCategory_fixed, \r\n            T.ItemWeight AS StockCategory_" +
                    "ItemWeight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n          " +
                    "  T.ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSiz" +
                    "e AS StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategor" +
                    "y_ItemCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n    " +
                    "        T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge" +
                    " AS StockCategory_ItemCharge, \r\n            T.RecLock AS StockCategory_recLock, " +
                    "\r\n            T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCate" +
                    "gory_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 " +
                    "AS StockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n        " +
                    "    T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n      " +
                    "  FROM BaseDbContext.StockCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockSubCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockSubCategory", @"
    SELECT VALUE -- Constructing StockSubCategory
        [DomainModels.Store.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM BaseDbContext.StockSubCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2770);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPage\r\n        [DomainModels.Store.CmsPage]");
            viewString.Append("(T1.CmsPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTi");
            viewString.Append("tle, T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, ");
            viewString.Append("T1.[CmsPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsP");
            viewString.Append("age.Meta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPa");
            viewString.Append("ge.Meta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateCo");
            viewString.Append("ntent], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent]");
            viewString.Append(", T1.[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.Cms");
            viewString.Append("Page_CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.C");
            viewString.Append("msPage_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_");
            viewString.Append("PageKeywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, ");
            viewString.Append("T1.CmsPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS");
            viewString.Append(" CmsPage_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.P");
            viewString.Append("ageTitle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r");
            viewString.Append("\n            T.description AS CmsPage_description, \r\n            T.PageRelativeP");
            viewString.Append("ath AS CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder,");
            viewString.Append(" \r\n            T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n       ");
            viewString.Append("     T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n         ");
            viewString.Append("   T.Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r");
            viewString.Append("\n            T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n       ");
            viewString.Append("     T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_");
            viewString.Append("AuthorContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent ");
            viewString.Append("AS [CmsPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.");
            viewString.Append("Meta_LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta");
            viewString.Append("_RevisitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n   ");
            viewString.Append("         T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPag");
            viewString.Append("e_isUserDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n           ");
            viewString.Append(" T.isPromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialO");
            viewString.Append("ffer AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r");
            viewString.Append("\n            T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.Pag");
            viewString.Append("eBanner AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywo");
            viewString.Append("rds, \r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay A");
            viewString.Append("S CmsPage_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n         ");
            viewString.Append("   T.OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM BaseDbContext.CmsPages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCostAndPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCostAndPrice", @"
    SELECT VALUE -- Constructing StockCostAndPrice
        [DomainModels.Store.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM BaseDbContext.StockCostAndPrices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5761);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItem\r\n        [DomainModels.Store.StockI");
            viewString.Append("tem](T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.");
            viewString.Append("StockItem_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.St");
            viewString.Append("ockItem_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1");
            viewString.Append(".StockItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T");
            viewString.Append("1.StockItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.Stoc");
            viewString.Append("kItem_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifie");
            viewString.Append("dBy, T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.S");
            viewString.Append("tockItem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, ");
            viewString.Append("T1.StockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProce");
            viewString.Append("ssingCharge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQ");
            viewString.Append("tyRate, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_Locke");
            viewString.Append("dBy, T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderD");
            viewString.Append("ate, T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.Stoc");
            viewString.Append("kItem_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSi");
            viewString.Append("zeSelectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.Sto");
            viewString.Append("ckItem_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.Stoc");
            viewString.Append("kItem_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.Stoc");
            viewString.Append("kItem_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockIt");
            viewString.Append("em_DepartmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.St");
            viewString.Append("ockItem_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_In");
            viewString.Append("kStandards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCod");
            viewString.Append("e, T1.StockItem_OrganisationId, T1.StockItem_ThresholdLevel, T1.StockItem_Thresh");
            viewString.Append("oldProductionQuantity, T1.StockItem_isAllowBackOrder)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.StockItemId AS StockItem_StockItemId, \r\n            T.ItemCode");
            viewString.Append(" AS StockItem_ItemCode, \r\n            T.ItemName AS StockItem_ItemName, \r\n      ");
            viewString.Append("      T.AlternateName AS StockItem_AlternateName, \r\n            T.ItemWeight AS ");
            viewString.Append("StockItem_ItemWeight, \r\n            T.ItemColour AS StockItem_ItemColour, \r\n    ");
            viewString.Append("        T.ItemSizeCustom AS StockItem_ItemSizeCustom, \r\n            T.ItemSizeId");
            viewString.Append(" AS StockItem_ItemSizeId, \r\n            T.ItemSizeHeight AS StockItem_ItemSizeHe");
            viewString.Append("ight, \r\n            T.ItemSizeWidth AS StockItem_ItemSizeWidth, \r\n            T.");
            viewString.Append("ItemSizeDim AS StockItem_ItemSizeDim, \r\n            T.ItemUnitSize AS StockItem_");
            viewString.Append("ItemUnitSize, \r\n            T.SupplierId AS StockItem_SupplierId, \r\n            ");
            viewString.Append("T.CostPrice AS StockItem_CostPrice, \r\n            T.CategoryId AS StockItem_Cate");
            viewString.Append("goryId, \r\n            T.SubCategoryId AS StockItem_SubCategoryId, \r\n            ");
            viewString.Append("T.LastModifiedDateTime AS StockItem_LastModifiedDateTime, \r\n            T.LastMo");
            viewString.Append("difiedBy AS StockItem_LastModifiedBy, \r\n            T.StockLevel AS StockItem_St");
            viewString.Append("ockLevel, \r\n            T.PackageQty AS StockItem_PackageQty, \r\n            T.St");
            viewString.Append("atus AS StockItem_Status, \r\n            T.ReOrderLevel AS StockItem_ReOrderLevel");
            viewString.Append(", \r\n            T.StockLocation AS StockItem_StockLocation, \r\n            T.Item");
            viewString.Append("CoatedType AS StockItem_ItemCoatedType, \r\n            T.ItemExposure AS StockIte");
            viewString.Append("m_ItemExposure, \r\n            T.ItemExposureTime AS StockItem_ItemExposureTime, ");
            viewString.Append("\r\n            T.ItemProcessingCharge AS StockItem_ItemProcessingCharge, \r\n      ");
            viewString.Append("      T.ItemType AS StockItem_ItemType, \r\n            T.StockCreated AS StockIte");
            viewString.Append("m_StockCreated, \r\n            T.PerQtyRate AS StockItem_PerQtyRate, \r\n          ");
            viewString.Append("  T.PerQtyQty AS StockItem_PerQtyQty, \r\n            T.ItemDescription AS StockIt");
            viewString.Append("em_ItemDescription, \r\n            T.LockedBy AS StockItem_LockedBy, \r\n          ");
            viewString.Append("  T.ReorderQty AS StockItem_ReorderQty, \r\n            T.LastOrderQty AS StockIte");
            viewString.Append("m_LastOrderQty, \r\n            T.LastOrderDate AS StockItem_LastOrderDate, \r\n    ");
            viewString.Append("        T.inStock AS StockItem_inStock, \r\n            T.onOrder AS StockItem_onO");
            viewString.Append("rder, \r\n            T.Allocated AS StockItem_Allocated, \r\n            T.TaxID AS");
            viewString.Append(" StockItem_TaxID, \r\n            T.unitRate AS StockItem_unitRate, \r\n            ");
            viewString.Append("T.ItemCoated AS StockItem_ItemCoated, \r\n            T.ItemSizeSelectedUnit AS St");
            viewString.Append("ockItem_ItemSizeSelectedUnit, \r\n            T.ItemWeightSelectedUnit AS StockIte");
            viewString.Append("m_ItemWeightSelectedUnit, \r\n            T.FlagID AS StockItem_FlagID, \r\n        ");
            viewString.Append("    T.InkAbsorption AS StockItem_InkAbsorption, \r\n            T.WashupCounter AS");
            viewString.Append(" StockItem_WashupCounter, \r\n            T.InkYield AS StockItem_InkYield, \r\n    ");
            viewString.Append("        T.PaperBasicAreaId AS StockItem_PaperBasicAreaId, \r\n            T.PaperT");
            viewString.Append("ype AS StockItem_PaperType, \r\n            T.PerQtyType AS StockItem_PerQtyType, ");
            viewString.Append("\r\n            T.RollWidth AS StockItem_RollWidth, \r\n            T.RollLength AS ");
            viewString.Append("StockItem_RollLength, \r\n            T.RollStandards AS StockItem_RollStandards, ");
            viewString.Append("\r\n            T.DepartmentId AS StockItem_DepartmentId, \r\n            T.InkYield");
            viewString.Append("Standards AS StockItem_InkYieldStandards, \r\n            T.PerQtyPrice AS StockIt");
            viewString.Append("em_PerQtyPrice, \r\n            T.PackPrice AS StockItem_PackPrice, \r\n            ");
            viewString.Append("T.Region AS StockItem_Region, \r\n            T.isDisabled AS StockItem_isDisabled");
            viewString.Append(", \r\n            T.InkStandards AS StockItem_InkStandards, \r\n            T.BarCod");
            viewString.Append("e AS StockItem_BarCode, \r\n            T.Image AS StockItem_Image, \r\n            ");
            viewString.Append("T.XeroAccessCode AS StockItem_XeroAccessCode, \r\n            T.OrganisationId AS ");
            viewString.Append("StockItem_OrganisationId, \r\n            T.ThresholdLevel AS StockItem_ThresholdL");
            viewString.Append("evel, \r\n            T.ThresholdProductionQuantity AS StockItem_ThresholdProducti");
            viewString.Append("onQuantity, \r\n            T.isAllowBackOrder AS StockItem_isAllowBackOrder, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM BaseDbContext.StockItems AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockItem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PageCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PageCategory", @"
    SELECT VALUE -- Constructing PageCategory
        [DomainModels.Store.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM BaseDbContext.PageCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyContact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7956);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CompanyContact\r\n        [DomainModels.Store.C");
            viewString.Append("ompanyContact](T1.CompanyContact_ContactId, T1.CompanyContact_AddressId, T1.Comp");
            viewString.Append("anyContact_CompanyId, T1.CompanyContact_FirstName, T1.CompanyContact_MiddleName,");
            viewString.Append(" T1.CompanyContact_LastName, T1.CompanyContact_Title, T1.CompanyContact_HomeTel1");
            viewString.Append(", T1.CompanyContact_HomeTel2, T1.CompanyContact_HomeExtension1, T1.CompanyContac");
            viewString.Append("t_HomeExtension2, T1.CompanyContact_Mobile, T1.CompanyContact_Email, T1.CompanyC");
            viewString.Append("ontact_FAX, T1.CompanyContact_JobTitle, T1.CompanyContact_DOB, T1.CompanyContact");
            viewString.Append("_Notes, T1.CompanyContact_IsDefaultContact, T1.CompanyContact_HomeAddress1, T1.C");
            viewString.Append("ompanyContact_HomeAddress2, T1.CompanyContact_HomeCity, T1.CompanyContact_HomeSt");
            viewString.Append("ate, T1.CompanyContact_HomePostCode, T1.CompanyContact_HomeCountry, T1.CompanyCo");
            viewString.Append("ntact_SecretQuestion, T1.CompanyContact_SecretAnswer, T1.CompanyContact_Password");
            viewString.Append(", T1.CompanyContact_URL, T1.CompanyContact_IsEmailSubscription, T1.CompanyContac");
            viewString.Append("t_IsNewsLetterSubscription, T1.CompanyContact_image, T1.CompanyContact_quickFull");
            viewString.Append("Name, T1.CompanyContact_quickTitle, T1.CompanyContact_quickCompanyName, T1.Compa");
            viewString.Append("nyContact_quickAddress1, T1.CompanyContact_quickAddress2, T1.CompanyContact_quic");
            viewString.Append("kAddress3, T1.CompanyContact_quickPhone, T1.CompanyContact_quickFax, T1.CompanyC");
            viewString.Append("ontact_quickEmail, T1.CompanyContact_quickWebsite, T1.CompanyContact_quickCompMe");
            viewString.Append("ssage, T1.CompanyContact_QuestionId, T1.CompanyContact_IsApprover, T1.CompanyCon");
            viewString.Append("tact_isWebAccess, T1.CompanyContact_isPlaceOrder, T1.CompanyContact_CreditLimit,");
            viewString.Append(" T1.CompanyContact_isArchived, T1.CompanyContact_ContactRoleId, T1.CompanyContac");
            viewString.Append("t_TerritoryId, T1.CompanyContact_ClaimIdentifer, T1.CompanyContact_AuthentifiedB");
            viewString.Append("y, T1.CompanyContact_IsPayByPersonalCreditCard, T1.CompanyContact_IsPricingshown");
            viewString.Append(", T1.CompanyContact_SkypeId, T1.CompanyContact_LinkedinURL, T1.CompanyContact_Fa");
            viewString.Append("cebookURL, T1.CompanyContact_TwitterURL, T1.CompanyContact_authenticationToken, ");
            viewString.Append("T1.CompanyContact_twitterScreenName, T1.CompanyContact_ShippingAddressId, T1.Com");
            viewString.Append("panyContact_isUserLoginFirstTime, T1.CompanyContact_quickMobileNumber, T1.Compan");
            viewString.Append("yContact_quickTwitterId, T1.CompanyContact_quickFacebookId, T1.CompanyContact_qu");
            viewString.Append("ickLinkedInId, T1.CompanyContact_quickOtherId, T1.CompanyContact_POBoxAddress, T");
            viewString.Append("1.CompanyContact_CorporateUnit, T1.CompanyContact_OfficeTradingName, T1.CompanyC");
            viewString.Append("ontact_ContractorName, T1.CompanyContact_BPayCRN, T1.CompanyContact_ABN, T1.Comp");
            viewString.Append("anyContact_ACN, T1.CompanyContact_AdditionalField1, T1.CompanyContact_Additional");
            viewString.Append("Field2, T1.CompanyContact_AdditionalField3, T1.CompanyContact_AdditionalField4, ");
            viewString.Append("T1.CompanyContact_AdditionalField5, T1.CompanyContact_canUserPlaceOrderWithoutAp");
            viewString.Append("proval, T1.CompanyContact_CanUserEditProfile, T1.CompanyContact_canPlaceDirectOr");
            viewString.Append("der, T1.CompanyContact_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.ContactId AS CompanyContact_ContactId, \r\n            T.AddressId AS CompanyCo");
            viewString.Append("ntact_AddressId, \r\n            T.CompanyId AS CompanyContact_CompanyId, \r\n      ");
            viewString.Append("      T.FirstName AS CompanyContact_FirstName, \r\n            T.MiddleName AS Com");
            viewString.Append("panyContact_MiddleName, \r\n            T.LastName AS CompanyContact_LastName, \r\n ");
            viewString.Append("           T.Title AS CompanyContact_Title, \r\n            T.HomeTel1 AS CompanyC");
            viewString.Append("ontact_HomeTel1, \r\n            T.HomeTel2 AS CompanyContact_HomeTel2, \r\n        ");
            viewString.Append("    T.HomeExtension1 AS CompanyContact_HomeExtension1, \r\n            T.HomeExten");
            viewString.Append("sion2 AS CompanyContact_HomeExtension2, \r\n            T.Mobile AS CompanyContact");
            viewString.Append("_Mobile, \r\n            T.Email AS CompanyContact_Email, \r\n            T.FAX AS C");
            viewString.Append("ompanyContact_FAX, \r\n            T.JobTitle AS CompanyContact_JobTitle, \r\n      ");
            viewString.Append("      T.DOB AS CompanyContact_DOB, \r\n            T.Notes AS CompanyContact_Notes");
            viewString.Append(", \r\n            T.IsDefaultContact AS CompanyContact_IsDefaultContact, \r\n       ");
            viewString.Append("     T.HomeAddress1 AS CompanyContact_HomeAddress1, \r\n            T.HomeAddress2");
            viewString.Append(" AS CompanyContact_HomeAddress2, \r\n            T.HomeCity AS CompanyContact_Home");
            viewString.Append("City, \r\n            T.HomeState AS CompanyContact_HomeState, \r\n            T.Hom");
            viewString.Append("ePostCode AS CompanyContact_HomePostCode, \r\n            T.HomeCountry AS Company");
            viewString.Append("Contact_HomeCountry, \r\n            T.SecretQuestion AS CompanyContact_SecretQues");
            viewString.Append("tion, \r\n            T.SecretAnswer AS CompanyContact_SecretAnswer, \r\n           ");
            viewString.Append(" T.Password AS CompanyContact_Password, \r\n            T.URL AS CompanyContact_UR");
            viewString.Append("L, \r\n            T.IsEmailSubscription AS CompanyContact_IsEmailSubscription, \r\n");
            viewString.Append("            T.IsNewsLetterSubscription AS CompanyContact_IsNewsLetterSubscriptio");
            viewString.Append("n, \r\n            T.image AS CompanyContact_image, \r\n            T.quickFullName ");
            viewString.Append("AS CompanyContact_quickFullName, \r\n            T.quickTitle AS CompanyContact_qu");
            viewString.Append("ickTitle, \r\n            T.quickCompanyName AS CompanyContact_quickCompanyName, \r");
            viewString.Append("\n            T.quickAddress1 AS CompanyContact_quickAddress1, \r\n            T.qu");
            viewString.Append("ickAddress2 AS CompanyContact_quickAddress2, \r\n            T.quickAddress3 AS Co");
            viewString.Append("mpanyContact_quickAddress3, \r\n            T.quickPhone AS CompanyContact_quickPh");
            viewString.Append("one, \r\n            T.quickFax AS CompanyContact_quickFax, \r\n            T.quickE");
            viewString.Append("mail AS CompanyContact_quickEmail, \r\n            T.quickWebsite AS CompanyContac");
            viewString.Append("t_quickWebsite, \r\n            T.quickCompMessage AS CompanyContact_quickCompMess");
            viewString.Append("age, \r\n            T.QuestionId AS CompanyContact_QuestionId, \r\n            T.Is");
            viewString.Append("Approver AS CompanyContact_IsApprover, \r\n            T.isWebAccess AS CompanyCon");
            viewString.Append("tact_isWebAccess, \r\n            T.isPlaceOrder AS CompanyContact_isPlaceOrder, \r");
            viewString.Append("\n            T.CreditLimit AS CompanyContact_CreditLimit, \r\n            T.isArch");
            viewString.Append("ived AS CompanyContact_isArchived, \r\n            T.ContactRoleId AS CompanyConta");
            viewString.Append("ct_ContactRoleId, \r\n            T.TerritoryId AS CompanyContact_TerritoryId, \r\n ");
            viewString.Append("           T.ClaimIdentifer AS CompanyContact_ClaimIdentifer, \r\n            T.Au");
            viewString.Append("thentifiedBy AS CompanyContact_AuthentifiedBy, \r\n            T.IsPayByPersonalCr");
            viewString.Append("editCard AS CompanyContact_IsPayByPersonalCreditCard, \r\n            T.IsPricings");
            viewString.Append("hown AS CompanyContact_IsPricingshown, \r\n            T.SkypeId AS CompanyContact");
            viewString.Append("_SkypeId, \r\n            T.LinkedinURL AS CompanyContact_LinkedinURL, \r\n         ");
            viewString.Append("   T.FacebookURL AS CompanyContact_FacebookURL, \r\n            T.TwitterURL AS Co");
            viewString.Append("mpanyContact_TwitterURL, \r\n            T.authenticationToken AS CompanyContact_a");
            viewString.Append("uthenticationToken, \r\n            T.twitterScreenName AS CompanyContact_twitterS");
            viewString.Append("creenName, \r\n            T.ShippingAddressId AS CompanyContact_ShippingAddressId");
            viewString.Append(", \r\n            T.isUserLoginFirstTime AS CompanyContact_isUserLoginFirstTime, \r");
            viewString.Append("\n            T.quickMobileNumber AS CompanyContact_quickMobileNumber, \r\n        ");
            viewString.Append("    T.quickTwitterId AS CompanyContact_quickTwitterId, \r\n            T.quickFace");
            viewString.Append("bookId AS CompanyContact_quickFacebookId, \r\n            T.quickLinkedInId AS Com");
            viewString.Append("panyContact_quickLinkedInId, \r\n            T.quickOtherId AS CompanyContact_quic");
            viewString.Append("kOtherId, \r\n            T.POBoxAddress AS CompanyContact_POBoxAddress, \r\n       ");
            viewString.Append("     T.CorporateUnit AS CompanyContact_CorporateUnit, \r\n            T.OfficeTrad");
            viewString.Append("ingName AS CompanyContact_OfficeTradingName, \r\n            T.ContractorName AS C");
            viewString.Append("ompanyContact_ContractorName, \r\n            T.BPayCRN AS CompanyContact_BPayCRN,");
            viewString.Append(" \r\n            T.ABN AS CompanyContact_ABN, \r\n            T.ACN AS CompanyContac");
            viewString.Append("t_ACN, \r\n            T.AdditionalField1 AS CompanyContact_AdditionalField1, \r\n  ");
            viewString.Append("          T.AdditionalField2 AS CompanyContact_AdditionalField2, \r\n            T");
            viewString.Append(".AdditionalField3 AS CompanyContact_AdditionalField3, \r\n            T.Additional");
            viewString.Append("Field4 AS CompanyContact_AdditionalField4, \r\n            T.AdditionalField5 AS C");
            viewString.Append("ompanyContact_AdditionalField5, \r\n            T.canUserPlaceOrderWithoutApproval");
            viewString.Append(" AS CompanyContact_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEdit");
            viewString.Append("Profile AS CompanyContact_CanUserEditProfile, \r\n            T.canPlaceDirectOrde");
            viewString.Append("r AS CompanyContact_canPlaceDirectOrder, \r\n            T.OrganisationId AS Compa");
            viewString.Append("nyContact_OrganisationId, \r\n            True AS _from0\r\n        FROM BaseDbConte");
            viewString.Append("xt.CompanyContacts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyContact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyContactRole
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyContactRole", @"
    SELECT VALUE -- Constructing CompanyContactRole
        [DomainModels.Store.CompanyContactRole](T1.CompanyContactRole_ContactRoleId, T1.CompanyContactRole_ContactRoleName)
    FROM (
        SELECT 
            T.ContactRoleId AS CompanyContactRole_ContactRoleId, 
            T.ContactRoleName AS CompanyContactRole_ContactRoleName, 
            True AS _from0
        FROM BaseDbContext.CompanyContactRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyTerritory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyTerritory", @"
    SELECT VALUE -- Constructing CompanyTerritory
        [DomainModels.Store.CompanyTerritory](T1.CompanyTerritory_TerritoryId, T1.CompanyTerritory_TerritoryName, T1.CompanyTerritory_CompanyId, T1.CompanyTerritory_TerritoryCode, T1.CompanyTerritory_isDefault)
    FROM (
        SELECT 
            T.TerritoryId AS CompanyTerritory_TerritoryId, 
            T.TerritoryName AS CompanyTerritory_TerritoryName, 
            T.CompanyId AS CompanyTerritory_CompanyId, 
            T.TerritoryCode AS CompanyTerritory_TerritoryCode, 
            T.isDefault AS CompanyTerritory_isDefault, 
            True AS _from0
        FROM BaseDbContext.CompanyTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyType", @"
    SELECT VALUE -- Constructing CompanyType
        [DomainModels.Store.CompanyType](T1.CompanyType_TypeId, T1.CompanyType_IsFixed, T1.CompanyType_TypeName)
    FROM (
        SELECT 
            T.TypeId AS CompanyType_TypeId, 
            T.IsFixed AS CompanyType_IsFixed, 
            T.TypeName AS CompanyType_TypeName, 
            True AS _from0
        FROM BaseDbContext.CompanyTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(12357);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CostCentre\r\n        [DomainModels.Store.CostC");
            viewString.Append("entre](T1.CostCentre_CostCentreId, T1.CostCentre_Name, T1.CostCentre_Description");
            viewString.Append(", T1.CostCentre_Type, T1.CostCentre_CreatedBy, T1.CostCentre_LockedBy, T1.CostCe");
            viewString.Append("ntre_LastModifiedBy, T1.CostCentre_MinimumCost, T1.CostCentre_SetupCost, T1.Cost");
            viewString.Append("Centre_SetupTime, T1.CostCentre_DefaultVA, T1.CostCentre_DefaultVAId, T1.CostCen");
            viewString.Append("tre_OverHeadRate, T1.CostCentre_HourlyCharge, T1.CostCentre_CostPerThousand, T1.");
            viewString.Append("CostCentre_CreationDate, T1.CostCentre_LastModifiedDate, T1.CostCentre_Preferred");
            viewString.Append("SupplierId, T1.CostCentre_CodeFileName, T1.CostCentre_nominalCode, T1.CostCentre");
            viewString.Append("_CompletionTime, T1.CostCentre_HeaderCode, T1.CostCentre_MiddleCode, T1.CostCent");
            viewString.Append("re_FooterCode, T1.CostCentre_strCostPlantParsed, T1.CostCentre_strCostPlantUnPar");
            viewString.Append("sed, T1.CostCentre_strCostLabourParsed, T1.CostCentre_strCostLabourUnParsed, T1.");
            viewString.Append("CostCentre_strCostMaterialParsed, T1.CostCentre_strCostMaterialUnParsed, T1.Cost");
            viewString.Append("Centre_strPricePlantParsed, T1.CostCentre_strPricePlantUnParsed, T1.CostCentre_s");
            viewString.Append("trPriceLabourParsed, T1.CostCentre_strPriceLabourUnParsed, T1.CostCentre_strPric");
            viewString.Append("eMaterialParsed, T1.CostCentre_strPriceMaterialUnParsed, T1.CostCentre_strActual");
            viewString.Append("CostPlantParsed, T1.CostCentre_strActualCostPlantUnParsed, T1.CostCentre_strActu");
            viewString.Append("alCostLabourParsed, T1.CostCentre_strActualCostLabourUnParsed, T1.CostCentre_str");
            viewString.Append("ActualCostMaterialParsed, T1.CostCentre_strActualCostMaterialUnParsed, T1.CostCe");
            viewString.Append("ntre_strTimeParsed, T1.CostCentre_strTimeUnParsed, T1.CostCentre_IsDisabled, T1.");
            viewString.Append("CostCentre_IsDirectCost, T1.CostCentre_SetupSpoilage, T1.CostCentre_RunningSpoil");
            viewString.Append("age, T1.CostCentre_CalculationMethodType, T1.CostCentre_NoOfHours, T1.CostCentre");
            viewString.Append("_PerHourCost, T1.CostCentre_PerHourPrice, T1.CostCentre_UnitQuantity, T1.CostCen");
            viewString.Append("tre_QuantitySourceType, T1.CostCentre_QuantityVariableId, T1.CostCentre_Quantity");
            viewString.Append("QuestionString, T1.CostCentre_QuantityQuestionDefaultValue, T1.CostCentre_Quanti");
            viewString.Append("tyCalculationString, T1.CostCentre_CostPerUnitQuantity, T1.CostCentre_PricePerUn");
            viewString.Append("itQuantity, T1.CostCentre_TimePerUnitQuantity, T1.CostCentre_TimeRunSpeed, T1.Co");
            viewString.Append("stCentre_TimeNoOfPasses, T1.CostCentre_TimeSourceType, T1.CostCentre_TimeVariabl");
            viewString.Append("eId, T1.CostCentre_TimeQuestionString, T1.CostCentre_TimeQuestionDefaultValue, T");
            viewString.Append("1.CostCentre_TimeCalculationString, T1.CostCentre_Priority, T1.CostCentre_CostQu");
            viewString.Append("estionString, T1.CostCentre_CostDefaultValue, T1.CostCentre_PriceQuestionString,");
            viewString.Append(" T1.CostCentre_PriceDefaultValue, T1.CostCentre_EstimatedTimeQuestionString, T1.");
            viewString.Append("CostCentre_EstimatedTimeDefaultValue, T1.CostCentre_Sequence, T1.CostCentre_Comp");
            viewString.Append("leteCode, T1.CostCentre_ItemDescription, T1.CostCentre_CompanyId, T1.CostCentre_");
            viewString.Append("SystemTypeId, T1.CostCentre_FlagId, T1.CostCentre_IsScheduleable, T1.CostCentre_");
            viewString.Append("SystemSiteId, T1.CostCentre_IsPrintOnJobCard, T1.CostCentre_WebStoreDesc, T1.Cos");
            viewString.Append("tCentre_isPublished, T1.CostCentre_EstimateProductionTime, T1.CostCentre_MainIma");
            viewString.Append("geURL, T1.CostCentre_ThumbnailImageURL, T1.CostCentre_isOption1, T1.CostCentre_i");
            viewString.Append("sOption2, T1.CostCentre_isOption3, T1.CostCentre_TextOption1, T1.CostCentre_Text");
            viewString.Append("Option2, T1.CostCentre_TextOption3, T1.CostCentre_CCIDOption1, T1.CostCentre_CCI");
            viewString.Append("DOption2, T1.CostCentre_CCIDOption3, T1.CostCentre_SetupCharge2, T1.CostCentre_S");
            viewString.Append("etupCharge3, T1.CostCentre_MinimumCost2, T1.CostCentre_MinimumCost3, T1.CostCent");
            viewString.Append("re_PricePerUnitQuantity2, T1.CostCentre_PricePerUnitQuantity3, T1.CostCentre_Qua");
            viewString.Append("ntityVariableID2, T1.CostCentre_QuantityVariableID3, T1.CostCentre_QuantitySourc");
            viewString.Append("eType2, T1.CostCentre_QuantitySourceType3, T1.CostCentre_QuantityQuestionString2");
            viewString.Append(", T1.CostCentre_QuantityQuestionString3, T1.CostCentre_QuantityQuestionDefaultVa");
            viewString.Append("lue2, T1.CostCentre_QuantityQuestionDefaultValue3, T1.CostCentre_DefaultVAId2, T");
            viewString.Append("1.CostCentre_DefaultVAId3, T1.CostCentre_IsPrintOnJobCard2, T1.CostCentre_IsPrin");
            viewString.Append("tOnJobCard3, T1.CostCentre_IsDirectCost2, T1.CostCentre_IsDirectCost3, T1.CostCe");
            viewString.Append("ntre_PreferredSupplierID2, T1.CostCentre_PreferredSupplierID3, T1.CostCentre_Est");
            viewString.Append("imateProductionTime2, T1.CostCentre_EstimateProductionTime3, T1.CostCentre_Deliv");
            viewString.Append("eryCharges, T1.CostCentre_isFromMIS, T1.CostCentre_XeroAccessCode, T1.CostCentre");
            viewString.Append("_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.CostCentreId AS Cos");
            viewString.Append("tCentre_CostCentreId, \r\n            T.Name AS CostCentre_Name, \r\n            T.D");
            viewString.Append("escription AS CostCentre_Description, \r\n            T.Type AS CostCentre_Type, \r");
            viewString.Append("\n            T.CreatedBy AS CostCentre_CreatedBy, \r\n            T.LockedBy AS Co");
            viewString.Append("stCentre_LockedBy, \r\n            T.LastModifiedBy AS CostCentre_LastModifiedBy, ");
            viewString.Append("\r\n            T.MinimumCost AS CostCentre_MinimumCost, \r\n            T.SetupCost");
            viewString.Append(" AS CostCentre_SetupCost, \r\n            T.SetupTime AS CostCentre_SetupTime, \r\n ");
            viewString.Append("           T.DefaultVA AS CostCentre_DefaultVA, \r\n            T.DefaultVAId AS C");
            viewString.Append("ostCentre_DefaultVAId, \r\n            T.OverHeadRate AS CostCentre_OverHeadRate, ");
            viewString.Append("\r\n            T.HourlyCharge AS CostCentre_HourlyCharge, \r\n            T.CostPer");
            viewString.Append("Thousand AS CostCentre_CostPerThousand, \r\n            T.CreationDate AS CostCent");
            viewString.Append("re_CreationDate, \r\n            T.LastModifiedDate AS CostCentre_LastModifiedDate");
            viewString.Append(", \r\n            T.PreferredSupplierId AS CostCentre_PreferredSupplierId, \r\n     ");
            viewString.Append("       T.CodeFileName AS CostCentre_CodeFileName, \r\n            T.nominalCode AS");
            viewString.Append(" CostCentre_nominalCode, \r\n            T.CompletionTime AS CostCentre_Completion");
            viewString.Append("Time, \r\n            T.HeaderCode AS CostCentre_HeaderCode, \r\n            T.Middl");
            viewString.Append("eCode AS CostCentre_MiddleCode, \r\n            T.FooterCode AS CostCentre_FooterC");
            viewString.Append("ode, \r\n            T.strCostPlantParsed AS CostCentre_strCostPlantParsed, \r\n    ");
            viewString.Append("        T.strCostPlantUnParsed AS CostCentre_strCostPlantUnParsed, \r\n           ");
            viewString.Append(" T.strCostLabourParsed AS CostCentre_strCostLabourParsed, \r\n            T.strCos");
            viewString.Append("tLabourUnParsed AS CostCentre_strCostLabourUnParsed, \r\n            T.strCostMate");
            viewString.Append("rialParsed AS CostCentre_strCostMaterialParsed, \r\n            T.strCostMaterialU");
            viewString.Append("nParsed AS CostCentre_strCostMaterialUnParsed, \r\n            T.strPricePlantPars");
            viewString.Append("ed AS CostCentre_strPricePlantParsed, \r\n            T.strPricePlantUnParsed AS C");
            viewString.Append("ostCentre_strPricePlantUnParsed, \r\n            T.strPriceLabourParsed AS CostCen");
            viewString.Append("tre_strPriceLabourParsed, \r\n            T.strPriceLabourUnParsed AS CostCentre_s");
            viewString.Append("trPriceLabourUnParsed, \r\n            T.strPriceMaterialParsed AS CostCentre_strP");
            viewString.Append("riceMaterialParsed, \r\n            T.strPriceMaterialUnParsed AS CostCentre_strPr");
            viewString.Append("iceMaterialUnParsed, \r\n            T.strActualCostPlantParsed AS CostCentre_strA");
            viewString.Append("ctualCostPlantParsed, \r\n            T.strActualCostPlantUnParsed AS CostCentre_s");
            viewString.Append("trActualCostPlantUnParsed, \r\n            T.strActualCostLabourParsed AS CostCent");
            viewString.Append("re_strActualCostLabourParsed, \r\n            T.strActualCostLabourUnParsed AS Cos");
            viewString.Append("tCentre_strActualCostLabourUnParsed, \r\n            T.strActualCostMaterialParsed");
            viewString.Append(" AS CostCentre_strActualCostMaterialParsed, \r\n            T.strActualCostMateria");
            viewString.Append("lUnParsed AS CostCentre_strActualCostMaterialUnParsed, \r\n            T.strTimePa");
            viewString.Append("rsed AS CostCentre_strTimeParsed, \r\n            T.strTimeUnParsed AS CostCentre_");
            viewString.Append("strTimeUnParsed, \r\n            T.IsDisabled AS CostCentre_IsDisabled, \r\n        ");
            viewString.Append("    T.IsDirectCost AS CostCentre_IsDirectCost, \r\n            T.SetupSpoilage AS ");
            viewString.Append("CostCentre_SetupSpoilage, \r\n            T.RunningSpoilage AS CostCentre_RunningS");
            viewString.Append("poilage, \r\n            T.CalculationMethodType AS CostCentre_CalculationMethodTy");
            viewString.Append("pe, \r\n            T.NoOfHours AS CostCentre_NoOfHours, \r\n            T.PerHourCo");
            viewString.Append("st AS CostCentre_PerHourCost, \r\n            T.PerHourPrice AS CostCentre_PerHour");
            viewString.Append("Price, \r\n            T.UnitQuantity AS CostCentre_UnitQuantity, \r\n            T.");
            viewString.Append("QuantitySourceType AS CostCentre_QuantitySourceType, \r\n            T.QuantityVar");
            viewString.Append("iableId AS CostCentre_QuantityVariableId, \r\n            T.QuantityQuestionString");
            viewString.Append(" AS CostCentre_QuantityQuestionString, \r\n            T.QuantityQuestionDefaultVa");
            viewString.Append("lue AS CostCentre_QuantityQuestionDefaultValue, \r\n            T.QuantityCalculat");
            viewString.Append("ionString AS CostCentre_QuantityCalculationString, \r\n            T.CostPerUnitQu");
            viewString.Append("antity AS CostCentre_CostPerUnitQuantity, \r\n            T.PricePerUnitQuantity A");
            viewString.Append("S CostCentre_PricePerUnitQuantity, \r\n            T.TimePerUnitQuantity AS CostCe");
            viewString.Append("ntre_TimePerUnitQuantity, \r\n            T.TimeRunSpeed AS CostCentre_TimeRunSpee");
            viewString.Append("d, \r\n            T.TimeNoOfPasses AS CostCentre_TimeNoOfPasses, \r\n            T.");
            viewString.Append("TimeSourceType AS CostCentre_TimeSourceType, \r\n            T.TimeVariableId AS C");
            viewString.Append("ostCentre_TimeVariableId, \r\n            T.TimeQuestionString AS CostCentre_TimeQ");
            viewString.Append("uestionString, \r\n            T.TimeQuestionDefaultValue AS CostCentre_TimeQuesti");
            viewString.Append("onDefaultValue, \r\n            T.TimeCalculationString AS CostCentre_TimeCalculat");
            viewString.Append("ionString, \r\n            T.Priority AS CostCentre_Priority, \r\n            T.Cost");
            viewString.Append("QuestionString AS CostCentre_CostQuestionString, \r\n            T.CostDefaultValu");
            viewString.Append("e AS CostCentre_CostDefaultValue, \r\n            T.PriceQuestionString AS CostCen");
            viewString.Append("tre_PriceQuestionString, \r\n            T.PriceDefaultValue AS CostCentre_PriceDe");
            viewString.Append("faultValue, \r\n            T.EstimatedTimeQuestionString AS CostCentre_EstimatedT");
            viewString.Append("imeQuestionString, \r\n            T.EstimatedTimeDefaultValue AS CostCentre_Estim");
            viewString.Append("atedTimeDefaultValue, \r\n            T.Sequence AS CostCentre_Sequence, \r\n       ");
            viewString.Append("     T.CompleteCode AS CostCentre_CompleteCode, \r\n            T.ItemDescription ");
            viewString.Append("AS CostCentre_ItemDescription, \r\n            T.CompanyId AS CostCentre_CompanyId");
            viewString.Append(", \r\n            T.SystemTypeId AS CostCentre_SystemTypeId, \r\n            T.FlagI");
            viewString.Append("d AS CostCentre_FlagId, \r\n            T.IsScheduleable AS CostCentre_IsSchedulea");
            viewString.Append("ble, \r\n            T.SystemSiteId AS CostCentre_SystemSiteId, \r\n            T.Is");
            viewString.Append("PrintOnJobCard AS CostCentre_IsPrintOnJobCard, \r\n            T.WebStoreDesc AS C");
            viewString.Append("ostCentre_WebStoreDesc, \r\n            T.isPublished AS CostCentre_isPublished, \r");
            viewString.Append("\n            T.EstimateProductionTime AS CostCentre_EstimateProductionTime, \r\n  ");
            viewString.Append("          T.MainImageURL AS CostCentre_MainImageURL, \r\n            T.ThumbnailIm");
            viewString.Append("ageURL AS CostCentre_ThumbnailImageURL, \r\n            T.isOption1 AS CostCentre_");
            viewString.Append("isOption1, \r\n            T.isOption2 AS CostCentre_isOption2, \r\n            T.is");
            viewString.Append("Option3 AS CostCentre_isOption3, \r\n            T.TextOption1 AS CostCentre_TextO");
            viewString.Append("ption1, \r\n            T.TextOption2 AS CostCentre_TextOption2, \r\n            T.T");
            viewString.Append("extOption3 AS CostCentre_TextOption3, \r\n            T.CCIDOption1 AS CostCentre_");
            viewString.Append("CCIDOption1, \r\n            T.CCIDOption2 AS CostCentre_CCIDOption2, \r\n          ");
            viewString.Append("  T.CCIDOption3 AS CostCentre_CCIDOption3, \r\n            T.SetupCharge2 AS CostC");
            viewString.Append("entre_SetupCharge2, \r\n            T.SetupCharge3 AS CostCentre_SetupCharge3, \r\n ");
            viewString.Append("           T.MinimumCost2 AS CostCentre_MinimumCost2, \r\n            T.MinimumCos");
            viewString.Append("t3 AS CostCentre_MinimumCost3, \r\n            T.PricePerUnitQuantity2 AS CostCent");
            viewString.Append("re_PricePerUnitQuantity2, \r\n            T.PricePerUnitQuantity3 AS CostCentre_Pr");
            viewString.Append("icePerUnitQuantity3, \r\n            T.QuantityVariableID2 AS CostCentre_QuantityV");
            viewString.Append("ariableID2, \r\n            T.QuantityVariableID3 AS CostCentre_QuantityVariableID");
            viewString.Append("3, \r\n            T.QuantitySourceType2 AS CostCentre_QuantitySourceType2, \r\n    ");
            viewString.Append("        T.QuantitySourceType3 AS CostCentre_QuantitySourceType3, \r\n            T");
            viewString.Append(".QuantityQuestionString2 AS CostCentre_QuantityQuestionString2, \r\n            T.");
            viewString.Append("QuantityQuestionString3 AS CostCentre_QuantityQuestionString3, \r\n            T.Q");
            viewString.Append("uantityQuestionDefaultValue2 AS CostCentre_QuantityQuestionDefaultValue2, \r\n    ");
            viewString.Append("        T.QuantityQuestionDefaultValue3 AS CostCentre_QuantityQuestionDefaultVal");
            viewString.Append("ue3, \r\n            T.DefaultVAId2 AS CostCentre_DefaultVAId2, \r\n            T.De");
            viewString.Append("faultVAId3 AS CostCentre_DefaultVAId3, \r\n            T.IsPrintOnJobCard2 AS Cost");
            viewString.Append("Centre_IsPrintOnJobCard2, \r\n            T.IsPrintOnJobCard3 AS CostCentre_IsPrin");
            viewString.Append("tOnJobCard3, \r\n            T.IsDirectCost2 AS CostCentre_IsDirectCost2, \r\n      ");
            viewString.Append("      T.IsDirectCost3 AS CostCentre_IsDirectCost3, \r\n            T.PreferredSupp");
            viewString.Append("lierID2 AS CostCentre_PreferredSupplierID2, \r\n            T.PreferredSupplierID3");
            viewString.Append(" AS CostCentre_PreferredSupplierID3, \r\n            T.EstimateProductionTime2 AS ");
            viewString.Append("CostCentre_EstimateProductionTime2, \r\n            T.EstimateProductionTime3 AS C");
            viewString.Append("ostCentre_EstimateProductionTime3, \r\n            T.DeliveryCharges AS CostCentre");
            viewString.Append("_DeliveryCharges, \r\n            T.isFromMIS AS CostCentre_isFromMIS, \r\n         ");
            viewString.Append("   T.XeroAccessCode AS CostCentre_XeroAccessCode, \r\n            T.OrganisationId");
            viewString.Append(" AS CostCentre_OrganisationId, \r\n            True AS _from0\r\n        FROM BaseDb");
            viewString.Append("Context.CostCentres AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentre", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemAttachment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemAttachment", "\r\n    SELECT VALUE -- Constructing ItemAttachment\r\n        [DomainModels.Store.It" +
                    "emAttachment](T1.ItemAttachment_ItemAttachmentId, T1.ItemAttachment_FileTitle, T" +
                    "1.ItemAttachment_isFromCustomer, T1.ItemAttachment_CompanyId, T1.ItemAttachment_" +
                    "ContactId, T1.ItemAttachment_SystemUserId, T1.ItemAttachment_UploadDate, T1.Item" +
                    "Attachment_UploadTime, T1.ItemAttachment_Version, T1.ItemAttachment_ItemId, T1.I" +
                    "temAttachment_Comments, T1.ItemAttachment_Type, T1.ItemAttachment_IsApproved, T1" +
                    ".ItemAttachment_FileName, T1.ItemAttachment_FolderPath, T1.ItemAttachment_FileTy" +
                    "pe, T1.ItemAttachment_ContentType, T1.ItemAttachment_Parent, T1.ItemAttachment_A" +
                    "pproveDate)\r\n    FROM (\r\n        SELECT \r\n            T.ItemAttachmentId AS Item" +
                    "Attachment_ItemAttachmentId, \r\n            T.FileTitle AS ItemAttachment_FileTit" +
                    "le, \r\n            T.isFromCustomer AS ItemAttachment_isFromCustomer, \r\n         " +
                    "   T.CompanyId AS ItemAttachment_CompanyId, \r\n            T.ContactId AS ItemAtt" +
                    "achment_ContactId, \r\n            T.SystemUserId AS ItemAttachment_SystemUserId, " +
                    "\r\n            T.UploadDate AS ItemAttachment_UploadDate, \r\n            T.UploadT" +
                    "ime AS ItemAttachment_UploadTime, \r\n            T.Version AS ItemAttachment_Vers" +
                    "ion, \r\n            T.ItemId AS ItemAttachment_ItemId, \r\n            T.Comments A" +
                    "S ItemAttachment_Comments, \r\n            T.Type AS ItemAttachment_Type, \r\n      " +
                    "      T.IsApproved AS ItemAttachment_IsApproved, \r\n            T.FileName AS Ite" +
                    "mAttachment_FileName, \r\n            T.FolderPath AS ItemAttachment_FolderPath, \r" +
                    "\n            T.FileType AS ItemAttachment_FileType, \r\n            T.ContentType " +
                    "AS ItemAttachment_ContentType, \r\n            T.Parent AS ItemAttachment_Parent, " +
                    "\r\n            T.ApproveDate AS ItemAttachment_ApproveDate, \r\n            True AS" +
                    " _from0\r\n        FROM BaseDbContext.ItemAttachments AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemImage", @"
    SELECT VALUE -- Constructing ItemImage
        [DomainModels.Store.ItemImage](T1.ItemImage_ProductImageId, T1.ItemImage_ItemId, T1.ItemImage_ImageTitle, T1.ItemImage_ImageURL, T1.ItemImage_ImageType, T1.ItemImage_ImageName, T1.ItemImage_UploadDate)
    FROM (
        SELECT 
            T.ProductImageId AS ItemImage_ProductImageId, 
            T.ItemId AS ItemImage_ItemId, 
            T.ImageTitle AS ItemImage_ImageTitle, 
            T.ImageURL AS ItemImage_ImageURL, 
            T.ImageType AS ItemImage_ImageType, 
            T.ImageName AS ItemImage_ImageName, 
            T.UploadDate AS ItemImage_UploadDate, 
            True AS _from0
        FROM BaseDbContext.ItemImages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemPriceMatrix
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2156);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemPriceMatrix\r\n        [DomainModels.Store.");
            viewString.Append("ItemPriceMatrix](T1.ItemPriceMatrix_PriceMatrixId, T1.ItemPriceMatrix_Quantity, ");
            viewString.Append("T1.ItemPriceMatrix_Price, T1.ItemPriceMatrix_ItemId, T1.ItemPriceMatrix_PricePap");
            viewString.Append("erType1, T1.ItemPriceMatrix_PricePaperType2, T1.ItemPriceMatrix_PricePaperType3,");
            viewString.Append(" T1.ItemPriceMatrix_QtyRangeFrom, T1.ItemPriceMatrix_QtyRangeTo, T1.ItemPriceMat");
            viewString.Append("rix_SupplierId, T1.ItemPriceMatrix_PriceStockType4, T1.ItemPriceMatrix_PriceStoc");
            viewString.Append("kType5, T1.ItemPriceMatrix_PriceStockType6, T1.ItemPriceMatrix_PriceStockType7, ");
            viewString.Append("T1.ItemPriceMatrix_PriceStockType8, T1.ItemPriceMatrix_PriceStockType9, T1.ItemP");
            viewString.Append("riceMatrix_PriceStockType10, T1.ItemPriceMatrix_PriceStockType11, T1.ItemPriceMa");
            viewString.Append("trix_FlagId, T1.ItemPriceMatrix_SupplierSequence)\r\n    FROM (\r\n        SELECT \r\n");
            viewString.Append("            T.PriceMatrixId AS ItemPriceMatrix_PriceMatrixId, \r\n            T.Qu");
            viewString.Append("antity AS ItemPriceMatrix_Quantity, \r\n            T.Price AS ItemPriceMatrix_Pri");
            viewString.Append("ce, \r\n            T.ItemId AS ItemPriceMatrix_ItemId, \r\n            T.PricePaper");
            viewString.Append("Type1 AS ItemPriceMatrix_PricePaperType1, \r\n            T.PricePaperType2 AS Ite");
            viewString.Append("mPriceMatrix_PricePaperType2, \r\n            T.PricePaperType3 AS ItemPriceMatrix");
            viewString.Append("_PricePaperType3, \r\n            T.QtyRangeFrom AS ItemPriceMatrix_QtyRangeFrom, ");
            viewString.Append("\r\n            T.QtyRangeTo AS ItemPriceMatrix_QtyRangeTo, \r\n            T.Suppli");
            viewString.Append("erId AS ItemPriceMatrix_SupplierId, \r\n            T.PriceStockType4 AS ItemPrice");
            viewString.Append("Matrix_PriceStockType4, \r\n            T.PriceStockType5 AS ItemPriceMatrix_Price");
            viewString.Append("StockType5, \r\n            T.PriceStockType6 AS ItemPriceMatrix_PriceStockType6, ");
            viewString.Append("\r\n            T.PriceStockType7 AS ItemPriceMatrix_PriceStockType7, \r\n          ");
            viewString.Append("  T.PriceStockType8 AS ItemPriceMatrix_PriceStockType8, \r\n            T.PriceSto");
            viewString.Append("ckType9 AS ItemPriceMatrix_PriceStockType9, \r\n            T.PriceStockType10 AS ");
            viewString.Append("ItemPriceMatrix_PriceStockType10, \r\n            T.PriceStockType11 AS ItemPriceM");
            viewString.Append("atrix_PriceStockType11, \r\n            T.FlagId AS ItemPriceMatrix_FlagId, \r\n    ");
            viewString.Append("        T.SupplierSequence AS ItemPriceMatrix_SupplierSequence, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM BaseDbContext.ItemPriceMatrices AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemPriceMatrix", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemRelatedItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemRelatedItem", @"
    SELECT VALUE -- Constructing ItemRelatedItem
        [DomainModels.Store.ItemRelatedItem](T1.ItemRelatedItem_ItemId, T1.ItemRelatedItem_Id, T1.ItemRelatedItem_RelatedItemId)
    FROM (
        SELECT 
            T.ItemId AS ItemRelatedItem_ItemId, 
            T.Id AS ItemRelatedItem_Id, 
            T.RelatedItemId AS ItemRelatedItem_RelatedItemId, 
            True AS _from0
        FROM BaseDbContext.ItemRelatedItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Items
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(17248);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Items\r\n        [DomainModels.Store.Items](T1.");
            viewString.Append("Items_ItemId, T1.Items_ItemCode, T1.Items_EstimateId, T1.Items_InvoiceId, T1.Ite");
            viewString.Append("ms_Title, T1.Items_Tax1, T1.Items_Tax2, T1.Items_Tax3, T1.Items_CreatedBy, T1.It");
            viewString.Append("ems_Status, T1.Items_ItemCreationDateTime, T1.Items_ItemLastUpdateDateTime, T1.I");
            viewString.Append("tems_IsMultipleQty, T1.Items_RunOnQty, T1.Items_RunonCostCentreProfit, T1.Items_");
            viewString.Append("RunonBaseCharge, T1.Items_RunOnMarkUpID, T1.Items_RunonPercentageValue, T1.Items");
            viewString.Append("_RunOnMarkUpValue, T1.Items_RunOnNetTotal, T1.Items_Qty1, T1.Items_Qty2, T1.Item");
            viewString.Append("s_Qty3, T1.Items_Qty1CostCentreProfit, T1.Items_Qty2CostCentreProfit, T1.Items_Q");
            viewString.Append("ty3CostCentreProfit, T1.Items_Qty1BaseCharge1, T1.Items_Qty2BaseCharge2, T1.Item");
            viewString.Append("s_Qty3BaseCharge3, T1.Items_Qty1MarkUpID1, T1.Items_Qty2MarkUpID2, T1.Items_Qty3");
            viewString.Append("MarkUpID3, T1.Items_Qty1MarkUpPercentageValue, T1.Items_Qty2MarkUpPercentageValu");
            viewString.Append("e, T1.Items_Qty3MarkUpPercentageValue, T1.Items_Qty1MarkUp1Value, T1.Items_Qty2M");
            viewString.Append("arkUp2Value, T1.Items_Qty3MarkUp3Value, T1.Items_Qty1NetTotal, T1.Items_Qty2NetT");
            viewString.Append("otal, T1.Items_Qty3NetTotal, T1.Items_Qty1Tax1Value, T1.Items_Qty1Tax2Value, T1.");
            viewString.Append("Items_Qty1Tax3Value, T1.Items_Qty1GrossTotal, T1.Items_Qty2Tax1Value, T1.Items_Q");
            viewString.Append("ty2Tax2Value, T1.Items_Qty2Tax3Value, T1.Items_Qty2grossTotal, T1.Items_Qty3Tax1");
            viewString.Append("Value, T1.Items_Qty3Tax2Value, T1.Items_Qty3Tax3Value, T1.Items_Qty3GrossTotal, ");
            viewString.Append("T1.Items_IsDescriptionLocked, T1.Items_qty1title, T1.Items_qty2title, T1.Items_q");
            viewString.Append("ty3Title, T1.Items_RunonTitle, T1.Items_AdditionalInformation, T1.Items_qty2Desc");
            viewString.Append("ription, T1.Items_qty3Description, T1.Items_RunonDescription, T1.Items_EstimateD");
            viewString.Append("escriptionTitle1, T1.Items_EstimateDescriptionTitle2, T1.Items_EstimateDescripti");
            viewString.Append("onTitle3, T1.Items_EstimateDescriptionTitle4, T1.Items_EstimateDescriptionTitle5");
            viewString.Append(", T1.Items_EstimateDescriptionTitle6, T1.Items_EstimateDescriptionTitle7, T1.Ite");
            viewString.Append("ms_EstimateDescriptionTitle8, T1.Items_EstimateDescriptionTitle9, T1.Items_Estim");
            viewString.Append("ateDescriptionTitle10, T1.Items_EstimateDescription1, T1.Items_EstimateDescripti");
            viewString.Append("on2, T1.Items_EstimateDescription3, T1.Items_EstimateDescription4, T1.Items_Esti");
            viewString.Append("mateDescription5, T1.Items_EstimateDescription6, T1.Items_EstimateDescription7, ");
            viewString.Append("T1.Items_EstimateDescription8, T1.Items_EstimateDescription9, T1.Items_EstimateD");
            viewString.Append("escription10, T1.Items_JobDescriptionTitle1, T1.Items_JobDescriptionTitle2, T1.I");
            viewString.Append("tems_JobDescriptionTitle3, T1.Items_JobDescriptionTitle4, T1.Items_JobDescriptio");
            viewString.Append("nTitle5, T1.Items_JobDescriptionTitle6, T1.Items_JobDescriptionTitle7, T1.Items_");
            viewString.Append("JobDescriptionTitle8, T1.Items_JobDescriptionTitle9, T1.Items_JobDescriptionTitl");
            viewString.Append("e10, T1.Items_JobDescription1, T1.Items_JobDescription2, T1.Items_JobDescription");
            viewString.Append("3, T1.Items_JobDescription4, T1.Items_JobDescription5, T1.Items_JobDescription6,");
            viewString.Append(" T1.Items_JobDescription7, T1.Items_JobDescription8, T1.Items_JobDescription9, T");
            viewString.Append("1.Items_JobDescription10, T1.Items_IsParagraphDescription, T1.Items_EstimateDesc");
            viewString.Append("ription, T1.Items_JobDescription, T1.Items_InvoiceDescription, T1.Items_JobCode,");
            viewString.Append(" T1.Items_JobManagerId, T1.Items_JobEstimatedStartDateTime, T1.Items_JobEstimate");
            viewString.Append("dCompletionDateTime, T1.Items_JobCreationDateTime, T1.Items_JobProgressedBy, T1.");
            viewString.Append("Items_jobSelectedQty, T1.Items_JobStatusId, T1.Items_IsJobCardPrinted, T1.Items_");
            viewString.Append("IsItemLibraray, T1.Items_ItemLibrarayGroupId, T1.Items_PayInFullInvoiceId, T1.It");
            viewString.Append("ems_IsGroupItem, T1.Items_ItemType, T1.Items_IsIncludedInPipeLine, T1.Items_IsRu");
            viewString.Append("nOnQty, T1.Items_CanCopyToEstimate, T1.Items_FlagId, T1.Items_CostCenterDescript");
            viewString.Append("ions, T1.Items_IsRead, T1.Items_IsScheduled, T1.Items_IsPaperStatusChanged, T1.I");
            viewString.Append("tems_IsJobCardCreated, T1.Items_IsAttachmentAdded, T1.Items_IsItemValueChanged, ");
            viewString.Append("T1.Items_DepartmentId, T1.Items_ItemNotes, T1.Items_UpdatedBy, T1.Items_LastUpda");
            viewString.Append("te, T1.Items_JobActualStartDateTime, T1.Items_JobActualCompletionDateTime, T1.It");
            viewString.Append("ems_IsJobCostingDone, T1.Items_ProductName, T1.Items_ImagePath, T1.Items_Thumbna");
            viewString.Append("ilPath, T1.Items_ProductSpecification, T1.Items_CompleteSpecification, T1.Items_");
            viewString.Append("DesignGuideLines, T1.Items_ProductCode, T1.Items_IsPublished, T1.Items_CompanyId");
            viewString.Append(", T1.Items_PriceDiscountPercentage, T1.Items_IsEnabled, T1.Items_IsSpecialItem, ");
            viewString.Append("T1.Items_IconPath, T1.Items_IsPopular, T1.Items_IsFeatured, T1.Items_IsPromotion");
            viewString.Append("al, T1.Items_TipsAndHints, T1.Items_FactSheetFileName, T1.Items_IsArchived, T1.I");
            viewString.Append("tems_NominalCodeId, T1.Items_RefItemId, T1.Items_TemplateId, T1.Items_WebDescrip");
            viewString.Append("tion, T1.Items_ItemTypeId, T1.Items_IsOrderedItem, T1.Items_JobCardPrintedBy, T1");
            viewString.Append(".Items_JobCardLastPrintedDate, T1.Items_EstimateProductionTime, T1.Items_SortOrd");
            viewString.Append("er, T1.Items_ProductType, T1.Items_LayoutGridContent, T1.Items_HowToVideoContent");
            viewString.Append(", T1.Items_file1, T1.Items_file2, T1.Items_file3, T1.Items_file4, T1.Items_file5");
            viewString.Append(", T1.Items_GridImage, T1.Items_isQtyRanged, T1.Items_CostCentreProfitBroker, T1.");
            viewString.Append("Items_BaseChargeBroker, T1.Items_MarkUpValueBroker, T1.Items_NetTotalBroker, T1.");
            viewString.Append("Items_TaxValueBroker, T1.Items_GrossTotalBroker, T1.Items_isCMYK, T1.Items_Suppl");
            viewString.Append("ierId, T1.Items_isStockControl, T1.Items_isUploadImage, T1.Items_isMarketingBrie");
            viewString.Append("f, T1.Items_SupplierID2, T1.Items_FinishedGoodId, T1.Items_IsFinishedGoodPrivate");
            viewString.Append(", T1.Items_MetaKeywords, T1.Items_MetaDescription, T1.Items_MetaTitle, T1.Items_");
            viewString.Append("isTemplateDesignMode, T1.Items_XeroAccessCode, T1.Items_DefaultItemTax, T1.Items");
            viewString.Append("_OrganisationId, T1.Items_PackagingWeight, T1.Items_IsVDPProduct, T1.Items_Templ");
            viewString.Append("ateType, T1.Items_DesignerCategoryId, T1.Items_Scalar, T1.Items_ZoomFactor)\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.ItemId AS Items_ItemId, \r\n            T.");
            viewString.Append("ItemCode AS Items_ItemCode, \r\n            T.EstimateId AS Items_EstimateId, \r\n  ");
            viewString.Append("          T.InvoiceId AS Items_InvoiceId, \r\n            T.Title AS Items_Title, ");
            viewString.Append("\r\n            T.Tax1 AS Items_Tax1, \r\n            T.Tax2 AS Items_Tax2, \r\n      ");
            viewString.Append("      T.Tax3 AS Items_Tax3, \r\n            T.CreatedBy AS Items_CreatedBy, \r\n    ");
            viewString.Append("        T.StatusId AS Items_Status, \r\n            T.ItemCreationDateTime AS Item");
            viewString.Append("s_ItemCreationDateTime, \r\n            T.ItemLastUpdateDateTime AS Items_ItemLast");
            viewString.Append("UpdateDateTime, \r\n            T.IsMultipleQty AS Items_IsMultipleQty, \r\n        ");
            viewString.Append("    T.RunOnQty AS Items_RunOnQty, \r\n            T.RunonCostCentreProfit AS Items");
            viewString.Append("_RunonCostCentreProfit, \r\n            T.RunonBaseCharge AS Items_RunonBaseCharge");
            viewString.Append(", \r\n            T.RunOnMarkUpId AS Items_RunOnMarkUpID, \r\n            T.RunonPer");
            viewString.Append("centageValue AS Items_RunonPercentageValue, \r\n            T.RunOnMarkUpValue AS ");
            viewString.Append("Items_RunOnMarkUpValue, \r\n            T.RunOnNetTotal AS Items_RunOnNetTotal, \r\n");
            viewString.Append("            T.Qty1 AS Items_Qty1, \r\n            T.Qty2 AS Items_Qty2, \r\n        ");
            viewString.Append("    T.Qty3 AS Items_Qty3, \r\n            T.Qty1CostCentreProfit AS Items_Qty1Cost");
            viewString.Append("CentreProfit, \r\n            T.Qty2CostCentreProfit AS Items_Qty2CostCentreProfit");
            viewString.Append(", \r\n            T.Qty3CostCentreProfit AS Items_Qty3CostCentreProfit, \r\n        ");
            viewString.Append("    T.Qty1BaseCharge1 AS Items_Qty1BaseCharge1, \r\n            T.Qty2BaseCharge2 ");
            viewString.Append("AS Items_Qty2BaseCharge2, \r\n            T.Qty3BaseCharge3 AS Items_Qty3BaseCharg");
            viewString.Append("e3, \r\n            T.Qty1MarkUpId1 AS Items_Qty1MarkUpID1, \r\n            T.Qty2Ma");
            viewString.Append("rkUpId2 AS Items_Qty2MarkUpID2, \r\n            T.Qty3MarkUpId3 AS Items_Qty3MarkU");
            viewString.Append("pID3, \r\n            T.Qty1MarkUpPercentageValue AS Items_Qty1MarkUpPercentageVal");
            viewString.Append("ue, \r\n            T.Qty2MarkUpPercentageValue AS Items_Qty2MarkUpPercentageValue");
            viewString.Append(", \r\n            T.Qty3MarkUpPercentageValue AS Items_Qty3MarkUpPercentageValue, ");
            viewString.Append("\r\n            T.Qty1MarkUp1Value AS Items_Qty1MarkUp1Value, \r\n            T.Qty2");
            viewString.Append("MarkUp2Value AS Items_Qty2MarkUp2Value, \r\n            T.Qty3MarkUp3Value AS Item");
            viewString.Append("s_Qty3MarkUp3Value, \r\n            T.Qty1NetTotal AS Items_Qty1NetTotal, \r\n      ");
            viewString.Append("      T.Qty2NetTotal AS Items_Qty2NetTotal, \r\n            T.Qty3NetTotal AS Item");
            viewString.Append("s_Qty3NetTotal, \r\n            T.Qty1Tax1Value AS Items_Qty1Tax1Value, \r\n        ");
            viewString.Append("    T.Qty1Tax2Value AS Items_Qty1Tax2Value, \r\n            T.Qty1Tax3Value AS Ite");
            viewString.Append("ms_Qty1Tax3Value, \r\n            T.Qty1GrossTotal AS Items_Qty1GrossTotal, \r\n    ");
            viewString.Append("        T.Qty2Tax1Value AS Items_Qty2Tax1Value, \r\n            T.Qty2Tax2Value AS");
            viewString.Append(" Items_Qty2Tax2Value, \r\n            T.Qty2Tax3Value AS Items_Qty2Tax3Value, \r\n  ");
            viewString.Append("          T.Qty2GrossTotal AS Items_Qty2grossTotal, \r\n            T.Qty3Tax1Valu");
            viewString.Append("e AS Items_Qty3Tax1Value, \r\n            T.Qty3Tax2Value AS Items_Qty3Tax2Value, ");
            viewString.Append("\r\n            T.Qty3Tax3Value AS Items_Qty3Tax3Value, \r\n            T.Qty3GrossT");
            viewString.Append("otal AS Items_Qty3GrossTotal, \r\n            T.IsDescriptionLocked AS Items_IsDes");
            viewString.Append("criptionLocked, \r\n            T.Qty1Title AS Items_qty1title, \r\n            T.Qt");
            viewString.Append("y2Title AS Items_qty2title, \r\n            T.Qty3Title AS Items_qty3Title, \r\n    ");
            viewString.Append("        T.RunonTitle AS Items_RunonTitle, \r\n            T.AdditionalInformation ");
            viewString.Append("AS Items_AdditionalInformation, \r\n            T.Qty2Description AS Items_qty2Des");
            viewString.Append("cription, \r\n            T.Qty3Description AS Items_qty3Description, \r\n          ");
            viewString.Append("  T.RunonDescription AS Items_RunonDescription, \r\n            T.EstimateDescript");
            viewString.Append("ionTitle1 AS Items_EstimateDescriptionTitle1, \r\n            T.EstimateDescriptio");
            viewString.Append("nTitle2 AS Items_EstimateDescriptionTitle2, \r\n            T.EstimateDescriptionT");
            viewString.Append("itle3 AS Items_EstimateDescriptionTitle3, \r\n            T.EstimateDescriptionTit");
            viewString.Append("le4 AS Items_EstimateDescriptionTitle4, \r\n            T.EstimateDescriptionTitle");
            viewString.Append("5 AS Items_EstimateDescriptionTitle5, \r\n            T.EstimateDescriptionTitle6 ");
            viewString.Append("AS Items_EstimateDescriptionTitle6, \r\n            T.EstimateDescriptionTitle7 AS");
            viewString.Append(" Items_EstimateDescriptionTitle7, \r\n            T.EstimateDescriptionTitle8 AS I");
            viewString.Append("tems_EstimateDescriptionTitle8, \r\n            T.EstimateDescriptionTitle9 AS Ite");
            viewString.Append("ms_EstimateDescriptionTitle9, \r\n            T.EstimateDescriptionTitle10 AS Item");
            viewString.Append("s_EstimateDescriptionTitle10, \r\n            T.EstimateDescription1 AS Items_Esti");
            viewString.Append("mateDescription1, \r\n            T.EstimateDescription2 AS Items_EstimateDescript");
            viewString.Append("ion2, \r\n            T.EstimateDescription3 AS Items_EstimateDescription3, \r\n    ");
            viewString.Append("        T.EstimateDescription4 AS Items_EstimateDescription4, \r\n            T.Es");
            viewString.Append("timateDescription5 AS Items_EstimateDescription5, \r\n            T.EstimateDescri");
            viewString.Append("ption6 AS Items_EstimateDescription6, \r\n            T.EstimateDescription7 AS It");
            viewString.Append("ems_EstimateDescription7, \r\n            T.EstimateDescription8 AS Items_Estimate");
            viewString.Append("Description8, \r\n            T.EstimateDescription9 AS Items_EstimateDescription9");
            viewString.Append(", \r\n            T.EstimateDescription10 AS Items_EstimateDescription10, \r\n      ");
            viewString.Append("      T.JobDescriptionTitle1 AS Items_JobDescriptionTitle1, \r\n            T.JobD");
            viewString.Append("escriptionTitle2 AS Items_JobDescriptionTitle2, \r\n            T.JobDescriptionTi");
            viewString.Append("tle3 AS Items_JobDescriptionTitle3, \r\n            T.JobDescriptionTitle4 AS Item");
            viewString.Append("s_JobDescriptionTitle4, \r\n            T.JobDescriptionTitle5 AS Items_JobDescrip");
            viewString.Append("tionTitle5, \r\n            T.JobDescriptionTitle6 AS Items_JobDescriptionTitle6, ");
            viewString.Append("\r\n            T.JobDescriptionTitle7 AS Items_JobDescriptionTitle7, \r\n          ");
            viewString.Append("  T.JobDescriptionTitle8 AS Items_JobDescriptionTitle8, \r\n            T.JobDescr");
            viewString.Append("iptionTitle9 AS Items_JobDescriptionTitle9, \r\n            T.JobDescriptionTitle1");
            viewString.Append("0 AS Items_JobDescriptionTitle10, \r\n            T.JobDescription1 AS Items_JobDe");
            viewString.Append("scription1, \r\n            T.JobDescription2 AS Items_JobDescription2, \r\n        ");
            viewString.Append("    T.JobDescription3 AS Items_JobDescription3, \r\n            T.JobDescription4 ");
            viewString.Append("AS Items_JobDescription4, \r\n            T.JobDescription5 AS Items_JobDescriptio");
            viewString.Append("n5, \r\n            T.JobDescription6 AS Items_JobDescription6, \r\n            T.Jo");
            viewString.Append("bDescription7 AS Items_JobDescription7, \r\n            T.JobDescription8 AS Items");
            viewString.Append("_JobDescription8, \r\n            T.JobDescription9 AS Items_JobDescription9, \r\n  ");
            viewString.Append("          T.JobDescription10 AS Items_JobDescription10, \r\n            T.IsParagr");
            viewString.Append("aphDescription AS Items_IsParagraphDescription, \r\n            T.EstimateDescript");
            viewString.Append("ion AS Items_EstimateDescription, \r\n            T.JobDescription AS Items_JobDes");
            viewString.Append("cription, \r\n            T.InvoiceDescription AS Items_InvoiceDescription, \r\n    ");
            viewString.Append("        T.JobCode AS Items_JobCode, \r\n            T.JobManagerId AS Items_JobMan");
            viewString.Append("agerId, \r\n            T.JobEstimatedStartDateTime AS Items_JobEstimatedStartDate");
            viewString.Append("Time, \r\n            T.JobEstimatedCompletionDateTime AS Items_JobEstimatedComple");
            viewString.Append("tionDateTime, \r\n            T.JobCreationDateTime AS Items_JobCreationDateTime, ");
            viewString.Append("\r\n            T.JobProgressedBy AS Items_JobProgressedBy, \r\n            T.JobSel");
            viewString.Append("ectedQty AS Items_jobSelectedQty, \r\n            T.JobStatusId AS Items_JobStatus");
            viewString.Append("Id, \r\n            T.IsJobCardPrinted AS Items_IsJobCardPrinted, \r\n            T.");
            viewString.Append("IsItemLibraray AS Items_IsItemLibraray, \r\n            T.ItemLibrarayGroupId AS I");
            viewString.Append("tems_ItemLibrarayGroupId, \r\n            T.PayInFullInvoiceId AS Items_PayInFullI");
            viewString.Append("nvoiceId, \r\n            T.IsGroupItem AS Items_IsGroupItem, \r\n            T.Item");
            viewString.Append("Type AS Items_ItemType, \r\n            T.IsIncludedInPipeLine AS Items_IsIncluded");
            viewString.Append("InPipeLine, \r\n            T.IsRunOnQty AS Items_IsRunOnQty, \r\n            T.CanC");
            viewString.Append("opyToEstimate AS Items_CanCopyToEstimate, \r\n            T.FlagId AS Items_FlagId");
            viewString.Append(", \r\n            T.CostCenterDescriptions AS Items_CostCenterDescriptions, \r\n    ");
            viewString.Append("        T.IsRead AS Items_IsRead, \r\n            T.IsScheduled AS Items_IsSchedul");
            viewString.Append("ed, \r\n            T.IsPaperStatusChanged AS Items_IsPaperStatusChanged, \r\n      ");
            viewString.Append("      T.IsJobCardCreated AS Items_IsJobCardCreated, \r\n            T.IsAttachment");
            viewString.Append("Added AS Items_IsAttachmentAdded, \r\n            T.IsItemValueChanged AS Items_Is");
            viewString.Append("ItemValueChanged, \r\n            T.DepartmentId AS Items_DepartmentId, \r\n        ");
            viewString.Append("    T.ItemNotes AS Items_ItemNotes, \r\n            T.UpdatedBy AS Items_UpdatedBy");
            viewString.Append(", \r\n            T.LastUpdate AS Items_LastUpdate, \r\n            T.JobActualStart");
            viewString.Append("DateTime AS Items_JobActualStartDateTime, \r\n            T.JobActualCompletionDat");
            viewString.Append("eTime AS Items_JobActualCompletionDateTime, \r\n            T.IsJobCostingDone AS ");
            viewString.Append("Items_IsJobCostingDone, \r\n            T.ProductName AS Items_ProductName, \r\n    ");
            viewString.Append("        T.ImagePath AS Items_ImagePath, \r\n            T.ThumbnailPath AS Items_T");
            viewString.Append("humbnailPath, \r\n            T.ProductSpecification AS Items_ProductSpecification");
            viewString.Append(", \r\n            T.CompleteSpecification AS Items_CompleteSpecification, \r\n      ");
            viewString.Append("      T.DesignGuideLines AS Items_DesignGuideLines, \r\n            T.ProductCode ");
            viewString.Append("AS Items_ProductCode, \r\n            T.IsPublished AS Items_IsPublished, \r\n      ");
            viewString.Append("      T.CompanyId AS Items_CompanyId, \r\n            T.PriceDiscountPercentage AS");
            viewString.Append(" Items_PriceDiscountPercentage, \r\n            T.IsEnabled AS Items_IsEnabled, \r\n");
            viewString.Append("            T.IsSpecialItem AS Items_IsSpecialItem, \r\n            T.IconPath AS ");
            viewString.Append("Items_IconPath, \r\n            T.IsPopular AS Items_IsPopular, \r\n            T.Is");
            viewString.Append("Featured AS Items_IsFeatured, \r\n            T.IsPromotional AS Items_IsPromotion");
            viewString.Append("al, \r\n            T.TipsAndHints AS Items_TipsAndHints, \r\n            T.FactShee");
            viewString.Append("tFileName AS Items_FactSheetFileName, \r\n            T.IsArchived AS Items_IsArch");
            viewString.Append("ived, \r\n            T.NominalCodeId AS Items_NominalCodeId, \r\n            T.RefI");
            viewString.Append("temId AS Items_RefItemId, \r\n            T.TemplateId AS Items_TemplateId, \r\n    ");
            viewString.Append("        T.WebDescription AS Items_WebDescription, \r\n            T.ItemTypeId AS ");
            viewString.Append("Items_ItemTypeId, \r\n            T.IsOrderedItem AS Items_IsOrderedItem, \r\n      ");
            viewString.Append("      T.JobCardPrintedBy AS Items_JobCardPrintedBy, \r\n            T.JobCardLastP");
            viewString.Append("rintedDate AS Items_JobCardLastPrintedDate, \r\n            T.EstimateProductionTi");
            viewString.Append("me AS Items_EstimateProductionTime, \r\n            T.SortOrder AS Items_SortOrder");
            viewString.Append(", \r\n            T.ProductType AS Items_ProductType, \r\n            T.LayoutGridCo");
            viewString.Append("ntent AS Items_LayoutGridContent, \r\n            T.HowToVideoContent AS Items_How");
            viewString.Append("ToVideoContent, \r\n            T.File1 AS Items_file1, \r\n            T.File2 AS I");
            viewString.Append("tems_file2, \r\n            T.File3 AS Items_file3, \r\n            T.File4 AS Items");
            viewString.Append("_file4, \r\n            T.File5 AS Items_file5, \r\n            T.GridImage AS Items");
            viewString.Append("_GridImage, \r\n            T.IsQtyRanged AS Items_isQtyRanged, \r\n            T.Co");
            viewString.Append("stCentreProfitBroker AS Items_CostCentreProfitBroker, \r\n            T.BaseCharge");
            viewString.Append("Broker AS Items_BaseChargeBroker, \r\n            T.MarkUpValueBroker AS Items_Mar");
            viewString.Append("kUpValueBroker, \r\n            T.NetTotalBroker AS Items_NetTotalBroker, \r\n      ");
            viewString.Append("      T.TaxValueBroker AS Items_TaxValueBroker, \r\n            T.GrossTotalBroker");
            viewString.Append(" AS Items_GrossTotalBroker, \r\n            T.IsCmyk AS Items_isCMYK, \r\n          ");
            viewString.Append("  T.SupplierId AS Items_SupplierId, \r\n            T.IsStockControl AS Items_isSt");
            viewString.Append("ockControl, \r\n            T.IsUploadImage AS Items_isUploadImage, \r\n            ");
            viewString.Append("T.IsMarketingBrief AS Items_isMarketingBrief, \r\n            T.SupplierId2 AS Ite");
            viewString.Append("ms_SupplierID2, \r\n            T.FinishedGoodId AS Items_FinishedGoodId, \r\n      ");
            viewString.Append("      T.IsFinishedGoodPrivate AS Items_IsFinishedGoodPrivate, \r\n            T.Me");
            viewString.Append("taKeywords AS Items_MetaKeywords, \r\n            T.MetaDescription AS Items_MetaD");
            viewString.Append("escription, \r\n            T.MetaTitle AS Items_MetaTitle, \r\n            T.IsTemp");
            viewString.Append("lateDesignMode AS Items_isTemplateDesignMode, \r\n            T.XeroAccessCode AS ");
            viewString.Append("Items_XeroAccessCode, \r\n            T.DefaultItemTax AS Items_DefaultItemTax, \r\n");
            viewString.Append("            T.OrganisationId AS Items_OrganisationId, \r\n            T.PackagingW");
            viewString.Append("eight AS Items_PackagingWeight, \r\n            T.IsVdpProduct AS Items_IsVDPProdu");
            viewString.Append("ct, \r\n            T.TemplateType AS Items_TemplateType, \r\n            T.Designer");
            viewString.Append("CategoryId AS Items_DesignerCategoryId, \r\n            T.Scalar AS Items_Scalar, ");
            viewString.Append("\r\n            T.ZoomFactor AS Items_ZoomFactor, \r\n            True AS _from0\r\n  ");
            viewString.Append("      FROM BaseDbContext.Items AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Items", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemSection
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(15732);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemSection\r\n        [DomainModels.Store.Item");
            viewString.Append("Section](T1.ItemSection_ItemSectionId, T1.ItemSection_SectionNo, T1.ItemSection_");
            viewString.Append("SectionName, T1.ItemSection_IsMainSection, T1.ItemSection_IsMultipleQty, T1.Item");
            viewString.Append("Section_IsRunOnQty, T1.ItemSection_ItemId, T1.ItemSection_Qty1, T1.ItemSection_Q");
            viewString.Append("ty2, T1.ItemSection_Qty3, T1.ItemSection_Qty4, T1.ItemSection_Qty5, T1.ItemSecti");
            viewString.Append("on_Qty1Profit, T1.ItemSection_Qty2Profit, T1.ItemSection_Qty3Profit, T1.ItemSect");
            viewString.Append("ion_Qty4Profit, T1.ItemSection_Qty5Profit, T1.ItemSection_BaseCharge1, T1.ItemSe");
            viewString.Append("ction_BaseCharge2, T1.ItemSection_Basecharge3, T1.ItemSection_BaseCharge4, T1.It");
            viewString.Append("emSection_BaseCharge5, T1.ItemSection_RunOnQty, T1.ItemSection_RunOnBaseCharge, ");
            viewString.Append("T1.ItemSection_RunonProfit, T1.ItemSection_SectionSizeId, T1.ItemSection_IsSecti");
            viewString.Append("onSizeCustom, T1.ItemSection_SectionSizeHeight, T1.ItemSection_SectionSizeWidth,");
            viewString.Append(" T1.ItemSection_ItemSizeId, T1.ItemSection_IsItemSizeCustom, T1.ItemSection_Item");
            viewString.Append("SizeHeight, T1.ItemSection_ItemSizeWidth, T1.ItemSection_GuillotineId, T1.ItemSe");
            viewString.Append("ction_IncludeGutter, T1.ItemSection_PressId, T1.ItemSection_FilmId, T1.ItemSecti");
            viewString.Append("on_PlateId, T1.ItemSection_ItemGutterHorizontal, T1.ItemSection_ItemGutterVertic");
            viewString.Append("al, T1.ItemSection_IsPressrestrictionApplied, T1.ItemSection_IsDoubleSided, T1.I");
            viewString.Append("temSection_IsWashup, T1.ItemSection_PrintViewLayoutLandScape, T1.ItemSection_Pri");
            viewString.Append("ntViewLayoutPortrait, T1.ItemSection_PrintViewLayout, T1.ItemSection_SetupSpoila");
            viewString.Append("ge, T1.ItemSection_RunningSpoilage, T1.ItemSection_RunningSpoilageValue, T1.Item");
            viewString.Append("Section_EstimateForWholePacks, T1.ItemSection_IsFirstTrim, T1.ItemSection_IsSeco");
            viewString.Append("ndTrim, T1.ItemSection_PaperQty, T1.ItemSection_ImpressionQty1, T1.ItemSection_I");
            viewString.Append("mpressionQty2, T1.ItemSection_ImpressionQty3, T1.ItemSection_ImpressionQty4, T1.");
            viewString.Append("ItemSection_ImpressionQty5, T1.ItemSection_FilmQty, T1.ItemSection_IsFilmSupplie");
            viewString.Append("d, T1.ItemSection_IsPlateSupplied, T1.ItemSection_IsPaperSupplied, T1.ItemSectio");
            viewString.Append("n_WashupQty, T1.ItemSection_MakeReadyQty, T1.ItemSection_IsPaperCoated, T1.ItemS");
            viewString.Append("ection_GuillotineFirstCut, T1.ItemSection_GuillotineSecondCut, T1.ItemSection_Gu");
            viewString.Append("illotineCutTime, T1.ItemSection_GuillotineQty1BundlesFirstTrim, T1.ItemSection_G");
            viewString.Append("uillotineQty2BundlesFirstTrim, T1.ItemSection_GuillotineQty3BundlesFirstTrim, T1");
            viewString.Append(".ItemSection_GuillotineQty1BundlesSecondTrim, T1.ItemSection_GuillotineQty2Bundl");
            viewString.Append("esSecondTrim, T1.ItemSection_GuillotineQty3BundlesSecondTrim, T1.ItemSection_Gui");
            viewString.Append("llotineQty1FirstTrimCuts, T1.ItemSection_GuillotineQty2FirstTrimCuts, T1.ItemSec");
            viewString.Append("tion_GuillotineQty3FirstTrimCuts, T1.ItemSection_GuillotineQty1SecondTrimCuts, T");
            viewString.Append("1.ItemSection_GuillotineQty2SecondTrimCuts, T1.ItemSection_GuillotineQty3SecondT");
            viewString.Append("rimCuts, T1.ItemSection_GuillotineQty1TotalsCuts, T1.ItemSection_GuillotineQty2T");
            viewString.Append("otalsCuts, T1.ItemSection_GuillotineQty3TotalsCuts, T1.ItemSection_AdditionalFil");
            viewString.Append("mUsed, T1.ItemSection_AdditionalPlateUsed, T1.ItemSection_IsFilmUsed, T1.ItemSec");
            viewString.Append("tion_IsPlateUsed, T1.ItemSection_NoofUniqueInks, T1.ItemSection_WizardRunMode, T");
            viewString.Append("1.ItemSection_OverAllPTV, T1.ItemSection_ItemPTV, T1.ItemSection_Side1Inks, T1.I");
            viewString.Append("temSection_Side2Inks, T1.ItemSection_IsSwingApplied, T1.ItemSection_SectionType,");
            viewString.Append(" T1.ItemSection_IsMakeReadyUsed, T1.ItemSection_isWorknTurn, T1.ItemSection_isWo");
            viewString.Append("rkntumble, T1.ItemSection_QuestionQueue, T1.ItemSection_StockQueue, T1.ItemSecti");
            viewString.Append("on_InputQueue, T1.ItemSection_CostCentreQueue, T1.ItemSection_PressSpeed1, T1.It");
            viewString.Append("emSection_PressSpeed2, T1.ItemSection_PressSpeed3, T1.ItemSection_PressSpeed4, T");
            viewString.Append("1.ItemSection_PressSpeed5, T1.ItemSection_PrintSheetQty1, T1.ItemSection_PrintSh");
            viewString.Append("eetQty2, T1.ItemSection_PrintSheetQty3, T1.ItemSection_PrintSheetQty4, T1.ItemSe");
            viewString.Append("ction_PrintSheetQty5, T1.ItemSection_PressHourlyCharge, T1.ItemSection_PrintChar");
            viewString.Append("geExMakeReady1, T1.ItemSection_PrintChargeExMakeReady2, T1.ItemSection_PrintChar");
            viewString.Append("geExMakeReady3, T1.ItemSection_PrintChargeExMakeReady4, T1.ItemSection_PrintChar");
            viewString.Append("geExMakeReady5, T1.ItemSection_PaperGsm, T1.ItemSection_PaperPackPrice, T1.ItemS");
            viewString.Append("ection_PTVRows, T1.ItemSection_PTVColoumns, T1.ItemSection_PaperWeight1, T1.Item");
            viewString.Append("Section_PaperWeight2, T1.ItemSection_PaperWeight3, T1.ItemSection_PaperWeight4, ");
            viewString.Append("T1.ItemSection_PaperWeight5, T1.ItemSection_FinishedItemQty1, T1.ItemSection_Fin");
            viewString.Append("ishedItemQty2, T1.ItemSection_FinishedItemQty3, T1.ItemSection_FinishedItemQty4,");
            viewString.Append(" T1.ItemSection_FinishedItemQty5, T1.ItemSection_ProfileId, T1.ItemSection_Selec");
            viewString.Append("tedPressCalculationMethodId, T1.ItemSection_SectionNotes, T1.ItemSection_IsSched");
            viewString.Append("uled, T1.ItemSection_ImageType, T1.ItemSection_WebClylinderHeight, T1.ItemSectio");
            viewString.Append("n_WebCylinderWidth, T1.ItemSection_WebCylinderId, T1.ItemSection_WebPaperLengthW");
            viewString.Append("ithSp, T1.ItemSection_WebPaperLengthWoSp, T1.ItemSection_WebReelMakereadyQty, T1");
            viewString.Append(".ItemSection_WebStockPaperCost, T1.ItemSection_WebSpoilageType, T1.ItemSection_P");
            viewString.Append("ressPassesQty, T1.ItemSection_PrintingType, T1.ItemSection_PadsLeafQty, T1.ItemS");
            viewString.Append("ection_PadsQuantity, T1.ItemSection_LastUpdateDate, T1.ItemSection_LastUpdatedBy");
            viewString.Append(", T1.ItemSection_Qty1MarkUpID, T1.ItemSection_Qty2MarkUpID, T1.ItemSection_Qty3M");
            viewString.Append("arkUpID, T1.ItemSection_StockItemID1, T1.ItemSection_StockItemID2, T1.ItemSectio");
            viewString.Append("n_StockItemID3, T1.ItemSection_Side1PlateQty, T1.ItemSection_IsPortrait, T1.Item");
            viewString.Append("Section_Side2PlateQty, T1.ItemSection_InkColorType, T1.ItemSection_BaseCharge1Br");
            viewString.Append("oker, T1.ItemSection_PlateInkId, T1.ItemSection_SimilarSections)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.ItemSectionId AS ItemSection_ItemSectionId, \r\n     ");
            viewString.Append("       T.SectionNo AS ItemSection_SectionNo, \r\n            T.SectionName AS Item");
            viewString.Append("Section_SectionName, \r\n            T.IsMainSection AS ItemSection_IsMainSection,");
            viewString.Append(" \r\n            T.IsMultipleQty AS ItemSection_IsMultipleQty, \r\n            T.IsR");
            viewString.Append("unOnQty AS ItemSection_IsRunOnQty, \r\n            T.ItemId AS ItemSection_ItemId,");
            viewString.Append(" \r\n            T.Qty1 AS ItemSection_Qty1, \r\n            T.Qty2 AS ItemSection_Q");
            viewString.Append("ty2, \r\n            T.Qty3 AS ItemSection_Qty3, \r\n            T.Qty4 AS ItemSecti");
            viewString.Append("on_Qty4, \r\n            T.Qty5 AS ItemSection_Qty5, \r\n            T.Qty1Profit AS");
            viewString.Append(" ItemSection_Qty1Profit, \r\n            T.Qty2Profit AS ItemSection_Qty2Profit, \r");
            viewString.Append("\n            T.Qty3Profit AS ItemSection_Qty3Profit, \r\n            T.Qty4Profit ");
            viewString.Append("AS ItemSection_Qty4Profit, \r\n            T.Qty5Profit AS ItemSection_Qty5Profit,");
            viewString.Append(" \r\n            T.BaseCharge1 AS ItemSection_BaseCharge1, \r\n            T.BaseCha");
            viewString.Append("rge2 AS ItemSection_BaseCharge2, \r\n            T.Basecharge3 AS ItemSection_Base");
            viewString.Append("charge3, \r\n            T.BaseCharge4 AS ItemSection_BaseCharge4, \r\n            T");
            viewString.Append(".BaseCharge5 AS ItemSection_BaseCharge5, \r\n            T.RunOnQty AS ItemSection");
            viewString.Append("_RunOnQty, \r\n            T.RunOnBaseCharge AS ItemSection_RunOnBaseCharge, \r\n   ");
            viewString.Append("         T.RunonProfit AS ItemSection_RunonProfit, \r\n            T.SectionSizeId");
            viewString.Append(" AS ItemSection_SectionSizeId, \r\n            T.IsSectionSizeCustom AS ItemSectio");
            viewString.Append("n_IsSectionSizeCustom, \r\n            T.SectionSizeHeight AS ItemSection_SectionS");
            viewString.Append("izeHeight, \r\n            T.SectionSizeWidth AS ItemSection_SectionSizeWidth, \r\n ");
            viewString.Append("           T.ItemSizeId AS ItemSection_ItemSizeId, \r\n            T.IsItemSizeCus");
            viewString.Append("tom AS ItemSection_IsItemSizeCustom, \r\n            T.ItemSizeHeight AS ItemSecti");
            viewString.Append("on_ItemSizeHeight, \r\n            T.ItemSizeWidth AS ItemSection_ItemSizeWidth, \r");
            viewString.Append("\n            T.GuillotineId AS ItemSection_GuillotineId, \r\n            T.Include");
            viewString.Append("Gutter AS ItemSection_IncludeGutter, \r\n            T.PressId AS ItemSection_Pres");
            viewString.Append("sId, \r\n            T.FilmId AS ItemSection_FilmId, \r\n            T.PlateId AS It");
            viewString.Append("emSection_PlateId, \r\n            T.ItemGutterHorizontal AS ItemSection_ItemGutte");
            viewString.Append("rHorizontal, \r\n            T.ItemGutterVertical AS ItemSection_ItemGutterVertica");
            viewString.Append("l, \r\n            T.IsPressrestrictionApplied AS ItemSection_IsPressrestrictionAp");
            viewString.Append("plied, \r\n            T.IsDoubleSided AS ItemSection_IsDoubleSided, \r\n           ");
            viewString.Append(" T.IsWashup AS ItemSection_IsWashup, \r\n            T.PrintViewLayoutLandScape AS");
            viewString.Append(" ItemSection_PrintViewLayoutLandScape, \r\n            T.PrintViewLayoutPortrait A");
            viewString.Append("S ItemSection_PrintViewLayoutPortrait, \r\n            T.PrintViewLayout AS ItemSe");
            viewString.Append("ction_PrintViewLayout, \r\n            T.SetupSpoilage AS ItemSection_SetupSpoilag");
            viewString.Append("e, \r\n            T.RunningSpoilage AS ItemSection_RunningSpoilage, \r\n           ");
            viewString.Append(" T.RunningSpoilageValue AS ItemSection_RunningSpoilageValue, \r\n            T.Est");
            viewString.Append("imateForWholePacks AS ItemSection_EstimateForWholePacks, \r\n            T.IsFirst");
            viewString.Append("Trim AS ItemSection_IsFirstTrim, \r\n            T.IsSecondTrim AS ItemSection_IsS");
            viewString.Append("econdTrim, \r\n            T.PaperQty AS ItemSection_PaperQty, \r\n            T.Imp");
            viewString.Append("ressionQty1 AS ItemSection_ImpressionQty1, \r\n            T.ImpressionQty2 AS Ite");
            viewString.Append("mSection_ImpressionQty2, \r\n            T.ImpressionQty3 AS ItemSection_Impressio");
            viewString.Append("nQty3, \r\n            T.ImpressionQty4 AS ItemSection_ImpressionQty4, \r\n         ");
            viewString.Append("   T.ImpressionQty5 AS ItemSection_ImpressionQty5, \r\n            T.FilmQty AS It");
            viewString.Append("emSection_FilmQty, \r\n            T.IsFilmSupplied AS ItemSection_IsFilmSupplied,");
            viewString.Append(" \r\n            T.IsPlateSupplied AS ItemSection_IsPlateSupplied, \r\n            T");
            viewString.Append(".IsPaperSupplied AS ItemSection_IsPaperSupplied, \r\n            T.WashupQty AS It");
            viewString.Append("emSection_WashupQty, \r\n            T.MakeReadyQty AS ItemSection_MakeReadyQty, \r");
            viewString.Append("\n            T.IsPaperCoated AS ItemSection_IsPaperCoated, \r\n            T.Guill");
            viewString.Append("otineFirstCut AS ItemSection_GuillotineFirstCut, \r\n            T.GuillotineSecon");
            viewString.Append("dCut AS ItemSection_GuillotineSecondCut, \r\n            T.GuillotineCutTime AS It");
            viewString.Append("emSection_GuillotineCutTime, \r\n            T.GuillotineQty1BundlesFirstTrim AS I");
            viewString.Append("temSection_GuillotineQty1BundlesFirstTrim, \r\n            T.GuillotineQty2Bundles");
            viewString.Append("FirstTrim AS ItemSection_GuillotineQty2BundlesFirstTrim, \r\n            T.Guillot");
            viewString.Append("ineQty3BundlesFirstTrim AS ItemSection_GuillotineQty3BundlesFirstTrim, \r\n       ");
            viewString.Append("     T.GuillotineQty1BundlesSecondTrim AS ItemSection_GuillotineQty1BundlesSecon");
            viewString.Append("dTrim, \r\n            T.GuillotineQty2BundlesSecondTrim AS ItemSection_Guillotine");
            viewString.Append("Qty2BundlesSecondTrim, \r\n            T.GuillotineQty3BundlesSecondTrim AS ItemSe");
            viewString.Append("ction_GuillotineQty3BundlesSecondTrim, \r\n            T.GuillotineQty1FirstTrimCu");
            viewString.Append("ts AS ItemSection_GuillotineQty1FirstTrimCuts, \r\n            T.GuillotineQty2Fir");
            viewString.Append("stTrimCuts AS ItemSection_GuillotineQty2FirstTrimCuts, \r\n            T.Guillotin");
            viewString.Append("eQty3FirstTrimCuts AS ItemSection_GuillotineQty3FirstTrimCuts, \r\n            T.G");
            viewString.Append("uillotineQty1SecondTrimCuts AS ItemSection_GuillotineQty1SecondTrimCuts, \r\n     ");
            viewString.Append("       T.GuillotineQty2SecondTrimCuts AS ItemSection_GuillotineQty2SecondTrimCut");
            viewString.Append("s, \r\n            T.GuillotineQty3SecondTrimCuts AS ItemSection_GuillotineQty3Sec");
            viewString.Append("ondTrimCuts, \r\n            T.GuillotineQty1TotalsCuts AS ItemSection_GuillotineQ");
            viewString.Append("ty1TotalsCuts, \r\n            T.GuillotineQty2TotalsCuts AS ItemSection_Guillotin");
            viewString.Append("eQty2TotalsCuts, \r\n            T.GuillotineQty3TotalsCuts AS ItemSection_Guillot");
            viewString.Append("ineQty3TotalsCuts, \r\n            T.AdditionalFilmUsed AS ItemSection_AdditionalF");
            viewString.Append("ilmUsed, \r\n            T.AdditionalPlateUsed AS ItemSection_AdditionalPlateUsed,");
            viewString.Append(" \r\n            T.IsFilmUsed AS ItemSection_IsFilmUsed, \r\n            T.IsPlateUs");
            viewString.Append("ed AS ItemSection_IsPlateUsed, \r\n            T.NoofUniqueInks AS ItemSection_Noo");
            viewString.Append("fUniqueInks, \r\n            T.WizardRunMode AS ItemSection_WizardRunMode, \r\n     ");
            viewString.Append("       T.OverAllPTV AS ItemSection_OverAllPTV, \r\n            T.ItemPTV AS ItemSe");
            viewString.Append("ction_ItemPTV, \r\n            T.Side1Inks AS ItemSection_Side1Inks, \r\n           ");
            viewString.Append(" T.Side2Inks AS ItemSection_Side2Inks, \r\n            T.IsSwingApplied AS ItemSec");
            viewString.Append("tion_IsSwingApplied, \r\n            T.SectionType AS ItemSection_SectionType, \r\n ");
            viewString.Append("           T.IsMakeReadyUsed AS ItemSection_IsMakeReadyUsed, \r\n            T.isW");
            viewString.Append("orknTurn AS ItemSection_isWorknTurn, \r\n            T.isWorkntumble AS ItemSectio");
            viewString.Append("n_isWorkntumble, \r\n            T.QuestionQueue AS ItemSection_QuestionQueue, \r\n ");
            viewString.Append("           T.StockQueue AS ItemSection_StockQueue, \r\n            T.InputQueue AS");
            viewString.Append(" ItemSection_InputQueue, \r\n            T.CostCentreQueue AS ItemSection_CostCent");
            viewString.Append("reQueue, \r\n            T.PressSpeed1 AS ItemSection_PressSpeed1, \r\n            T");
            viewString.Append(".PressSpeed2 AS ItemSection_PressSpeed2, \r\n            T.PressSpeed3 AS ItemSect");
            viewString.Append("ion_PressSpeed3, \r\n            T.PressSpeed4 AS ItemSection_PressSpeed4, \r\n     ");
            viewString.Append("       T.PressSpeed5 AS ItemSection_PressSpeed5, \r\n            T.PrintSheetQty1 ");
            viewString.Append("AS ItemSection_PrintSheetQty1, \r\n            T.PrintSheetQty2 AS ItemSection_Pri");
            viewString.Append("ntSheetQty2, \r\n            T.PrintSheetQty3 AS ItemSection_PrintSheetQty3, \r\n   ");
            viewString.Append("         T.PrintSheetQty4 AS ItemSection_PrintSheetQty4, \r\n            T.PrintSh");
            viewString.Append("eetQty5 AS ItemSection_PrintSheetQty5, \r\n            T.PressHourlyCharge AS Item");
            viewString.Append("Section_PressHourlyCharge, \r\n            T.PrintChargeExMakeReady1 AS ItemSectio");
            viewString.Append("n_PrintChargeExMakeReady1, \r\n            T.PrintChargeExMakeReady2 AS ItemSectio");
            viewString.Append("n_PrintChargeExMakeReady2, \r\n            T.PrintChargeExMakeReady3 AS ItemSectio");
            viewString.Append("n_PrintChargeExMakeReady3, \r\n            T.PrintChargeExMakeReady4 AS ItemSectio");
            viewString.Append("n_PrintChargeExMakeReady4, \r\n            T.PrintChargeExMakeReady5 AS ItemSectio");
            viewString.Append("n_PrintChargeExMakeReady5, \r\n            T.PaperGsm AS ItemSection_PaperGsm, \r\n ");
            viewString.Append("           T.PaperPackPrice AS ItemSection_PaperPackPrice, \r\n            T.PTVRo");
            viewString.Append("ws AS ItemSection_PTVRows, \r\n            T.PTVColoumns AS ItemSection_PTVColoumn");
            viewString.Append("s, \r\n            T.PaperWeight1 AS ItemSection_PaperWeight1, \r\n            T.Pap");
            viewString.Append("erWeight2 AS ItemSection_PaperWeight2, \r\n            T.PaperWeight3 AS ItemSecti");
            viewString.Append("on_PaperWeight3, \r\n            T.PaperWeight4 AS ItemSection_PaperWeight4, \r\n   ");
            viewString.Append("         T.PaperWeight5 AS ItemSection_PaperWeight5, \r\n            T.FinishedIte");
            viewString.Append("mQty1 AS ItemSection_FinishedItemQty1, \r\n            T.FinishedItemQty2 AS ItemS");
            viewString.Append("ection_FinishedItemQty2, \r\n            T.FinishedItemQty3 AS ItemSection_Finishe");
            viewString.Append("dItemQty3, \r\n            T.FinishedItemQty4 AS ItemSection_FinishedItemQty4, \r\n ");
            viewString.Append("           T.FinishedItemQty5 AS ItemSection_FinishedItemQty5, \r\n            T.P");
            viewString.Append("rofileId AS ItemSection_ProfileId, \r\n            T.SelectedPressCalculationMetho");
            viewString.Append("dId AS ItemSection_SelectedPressCalculationMethodId, \r\n            T.SectionNote");
            viewString.Append("s AS ItemSection_SectionNotes, \r\n            T.IsScheduled AS ItemSection_IsSche");
            viewString.Append("duled, \r\n            T.ImageType AS ItemSection_ImageType, \r\n            T.WebCl");
            viewString.Append("ylinderHeight AS ItemSection_WebClylinderHeight, \r\n            T.WebCylinderWidt");
            viewString.Append("h AS ItemSection_WebCylinderWidth, \r\n            T.WebCylinderId AS ItemSection_");
            viewString.Append("WebCylinderId, \r\n            T.WebPaperLengthWithSp AS ItemSection_WebPaperLengt");
            viewString.Append("hWithSp, \r\n            T.WebPaperLengthWoSp AS ItemSection_WebPaperLengthWoSp, \r");
            viewString.Append("\n            T.WebReelMakereadyQty AS ItemSection_WebReelMakereadyQty, \r\n       ");
            viewString.Append("     T.WebStockPaperCost AS ItemSection_WebStockPaperCost, \r\n            T.WebSp");
            viewString.Append("oilageType AS ItemSection_WebSpoilageType, \r\n            T.PressPassesQty AS Ite");
            viewString.Append("mSection_PressPassesQty, \r\n            T.PrintingType AS ItemSection_PrintingTyp");
            viewString.Append("e, \r\n            T.PadsLeafQty AS ItemSection_PadsLeafQty, \r\n            T.PadsQ");
            viewString.Append("uantity AS ItemSection_PadsQuantity, \r\n            T.LastUpdateDate AS ItemSecti");
            viewString.Append("on_LastUpdateDate, \r\n            T.LastUpdatedBy AS ItemSection_LastUpdatedBy, \r");
            viewString.Append("\n            T.Qty1MarkUpID AS ItemSection_Qty1MarkUpID, \r\n            T.Qty2Mar");
            viewString.Append("kUpID AS ItemSection_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS ItemSection_Q");
            viewString.Append("ty3MarkUpID, \r\n            T.StockItemID1 AS ItemSection_StockItemID1, \r\n       ");
            viewString.Append("     T.StockItemID2 AS ItemSection_StockItemID2, \r\n            T.StockItemID3 AS");
            viewString.Append(" ItemSection_StockItemID3, \r\n            T.Side1PlateQty AS ItemSection_Side1Pla");
            viewString.Append("teQty, \r\n            T.IsPortrait AS ItemSection_IsPortrait, \r\n            T.Sid");
            viewString.Append("e2PlateQty AS ItemSection_Side2PlateQty, \r\n            T.InkColorType AS ItemSec");
            viewString.Append("tion_InkColorType, \r\n            T.BaseCharge1Broker AS ItemSection_BaseCharge1B");
            viewString.Append("roker, \r\n            T.PlateInkId AS ItemSection_PlateInkId, \r\n            T.Sim");
            viewString.Append("ilarSections AS ItemSection_SimilarSections, \r\n            True AS _from0\r\n     ");
            viewString.Append("   FROM BaseDbContext.ItemSections AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemSection", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStockOption
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStockOption", @"
    SELECT VALUE -- Constructing ItemStockOption
        [DomainModels.Store.ItemStockOption](T1.ItemStockOption_ItemStockOptionId, T1.ItemStockOption_ItemId, T1.ItemStockOption_OptionSequence, T1.ItemStockOption_StockId, T1.ItemStockOption_StockLabel, T1.ItemStockOption_CompanyId, T1.ItemStockOption_ImageURL)
    FROM (
        SELECT 
            T.ItemStockOptionId AS ItemStockOption_ItemStockOptionId, 
            T.ItemId AS ItemStockOption_ItemId, 
            T.OptionSequence AS ItemStockOption_OptionSequence, 
            T.StockId AS ItemStockOption_StockId, 
            T.StockLabel AS ItemStockOption_StockLabel, 
            T.CompanyId AS ItemStockOption_CompanyId, 
            T.ImageURL AS ItemStockOption_ImageURL, 
            True AS _from0
        FROM BaseDbContext.ItemStockOptions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemVDPPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemVDPPrice", @"
    SELECT VALUE -- Constructing ItemVDPPrice
        [DomainModels.Store.ItemVDPPrice](T1.ItemVDPPrice_ItemVDPPriceId, T1.ItemVDPPrice_ClickRangeTo, T1.ItemVDPPrice_ClickRangeFrom, T1.ItemVDPPrice_PricePerClick, T1.ItemVDPPrice_SetupCharge, T1.ItemVDPPrice_ItemId)
    FROM (
        SELECT 
            T.ItemVdpPriceId AS ItemVDPPrice_ItemVDPPriceId, 
            T.ClickRangeTo AS ItemVDPPrice_ClickRangeTo, 
            T.ClickRangeFrom AS ItemVDPPrice_ClickRangeFrom, 
            T.PricePerClick AS ItemVDPPrice_PricePerClick, 
            T.SetupCharge AS ItemVDPPrice_SetupCharge, 
            T.ItemId AS ItemVDPPrice_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemVdpPrices1 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Country
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Country", @"
    SELECT VALUE -- Constructing Country
        [DomainModels.Store.Country](T1.Country_CountryID, T1.Country_CountryName, T1.Country_CountryCode)
    FROM (
        SELECT 
            T.CountryId AS Country_CountryID, 
            T.CountryName AS Country_CountryName, 
            T.CountryCode AS Country_CountryCode, 
            True AS _from0
        FROM BaseDbContext.Countries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostcentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(11180);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SectionCostcentre\r\n        [DomainModels.Stor");
            viewString.Append("e.SectionCostcentre](T1.SectionCostcentre_SectionCostcentreId, T1.SectionCostcen");
            viewString.Append("tre_ItemSectionId, T1.SectionCostcentre_CostCentreId, T1.SectionCostcentre_CostC");
            viewString.Append("entreType, T1.SectionCostcentre_SystemCostCentreType, T1.SectionCostcentre_Order");
            viewString.Append(", T1.SectionCostcentre_IsDirectCost, T1.SectionCostcentre_IsOptionalExtra, T1.Se");
            viewString.Append("ctionCostcentre_IsPurchaseOrderRaised, T1.SectionCostcentre_Status, T1.SectionCo");
            viewString.Append("stcentre_ActivityUser, T1.SectionCostcentre_IsPrintable, T1.SectionCostcentre_Es");
            viewString.Append("timatedStartTime, T1.SectionCostcentre_EstimatedDuration, T1.SectionCostcentre_E");
            viewString.Append("stimatedEndTime, T1.SectionCostcentre_ActualDuration, T1.SectionCostcentre_Actua");
            viewString.Append("lStartDateTime, T1.SectionCostcentre_ActualEndTime, T1.SectionCostcentre_Qty1Cha");
            viewString.Append("rge, T1.SectionCostcentre_Qty2Charge, T1.SectionCostcentre_Qty3Charge, T1.Sectio");
            viewString.Append("nCostcentre_Qty4Charge, T1.SectionCostcentre_Qty5Charge, T1.SectionCostcentre_Qt");
            viewString.Append("y1MarkUpID, T1.SectionCostcentre_Qty2MarkUpID, T1.SectionCostcentre_Qty3MarkUpID");
            viewString.Append(", T1.SectionCostcentre_Qty4MarkUpID, T1.SectionCostcentre_Qty5MarkUpID, T1.Secti");
            viewString.Append("onCostcentre_Qty1MarkUpValue, T1.SectionCostcentre_Qty2MarkUpValue, T1.SectionCo");
            viewString.Append("stcentre_Qty3MarkUpValue, T1.SectionCostcentre_Qty4MarkUpValue, T1.SectionCostce");
            viewString.Append("ntre_Qty5MarkUpValue, T1.SectionCostcentre_Qty1NetTotal, T1.SectionCostcentre_Qt");
            viewString.Append("y2NetTotal, T1.SectionCostcentre_Qty3NetTotal, T1.SectionCostcentre_Qty4NetTotal");
            viewString.Append(", T1.SectionCostcentre_Qty5NetTotal, T1.SectionCostcentre_Qty1EstimatedPlantCost");
            viewString.Append(", T1.SectionCostcentre_Qty1EstimatedLabourCost, T1.SectionCostcentre_Qty1Estimat");
            viewString.Append("edStockCost, T1.SectionCostcentre_Qty1EstimatedTime, T1.SectionCostcentre_Qty1Qu");
            viewString.Append("otedPlantCharge, T1.SectionCostcentre_Qty1QuotedLabourCharge, T1.SectionCostcent");
            viewString.Append("re_Qty1QuotedStockCharge, T1.SectionCostcentre_Qty2EstimatedPlantCost, T1.Sectio");
            viewString.Append("nCostcentre_Qty2EstimatedLabourCost, T1.SectionCostcentre_Qty2EstimatedStockCost");
            viewString.Append(", T1.SectionCostcentre_Qty2EstimatedTime, T1.SectionCostcentre_Qty2QuotedPlantCh");
            viewString.Append("arge, T1.SectionCostcentre_Qty2QuotedLabourCharge, T1.SectionCostcentre_Qty2Quot");
            viewString.Append("edStockCharge, T1.SectionCostcentre_Qty3EstimatedPlantCost, T1.SectionCostcentre");
            viewString.Append("_Qty3EstimatedLabourCost, T1.SectionCostcentre_Qty3EstimatedStockCost, T1.Sectio");
            viewString.Append("nCostcentre_Qty3EstimatedTime, T1.SectionCostcentre_Qty3QuotedPlantCharge, T1.Se");
            viewString.Append("ctionCostcentre_Qty3QuotedLabourCharge, T1.SectionCostcentre_Qty3QuotedStockChar");
            viewString.Append("ge, T1.SectionCostcentre_Qty4EstimatedPlantCost, T1.SectionCostcentre_Qty4Estima");
            viewString.Append("tedLabourCost, T1.SectionCostcentre_Qty4EstimatedStockCost, T1.SectionCostcentre");
            viewString.Append("_Qty4EstimatedTime, T1.SectionCostcentre_Qty4QuotedPlantCharge, T1.SectionCostce");
            viewString.Append("ntre_Qty4QuotedLabourCharge, T1.SectionCostcentre_Qty4QuotedStockCharge, T1.Sect");
            viewString.Append("ionCostcentre_Qty5EstimatedPlantCost, T1.SectionCostcentre_Qty5EstimatedLabourCo");
            viewString.Append("st, T1.SectionCostcentre_Qty5EstimatedStockCost, T1.SectionCostcentre_Qty5Estima");
            viewString.Append("tedTime, T1.SectionCostcentre_Qty5QuotedPlantCharge, T1.SectionCostcentre_Qty5Qu");
            viewString.Append("otedLabourCharge, T1.SectionCostcentre_Qty5QuotedStockCharge, T1.SectionCostcent");
            viewString.Append("re_ActualPlantCost, T1.SectionCostcentre_ActualLabourCost, T1.SectionCostcentre_");
            viewString.Append("ActualStockCost, T1.SectionCostcentre_Qty1WorkInstructions, T1.SectionCostcentre");
            viewString.Append("_Qty2WorkInstructions, T1.SectionCostcentre_Qty3WorkInstructions, T1.SectionCost");
            viewString.Append("centre_Qty4WorkInstructions, T1.SectionCostcentre_Qty5WorkInstructions, T1.Secti");
            viewString.Append("onCostcentre_IsCostCentreUsedinPurchaseOrder, T1.SectionCostcentre_IsMinimumCost");
            viewString.Append(", T1.SectionCostcentre_SetupTime, T1.SectionCostcentre_IsScheduled, T1.SectionCo");
            viewString.Append("stcentre_IsScheduleable, T1.SectionCostcentre_Locked, T1.SectionCostcentre_Costi");
            viewString.Append("ngActualCost, T1.SectionCostcentre_CostingActualTime, T1.SectionCostcentre_Costi");
            viewString.Append("ngActualQty, T1.SectionCostcentre_Name, T1.SectionCostcentre_QtyChargeBroker, T1");
            viewString.Append(".SectionCostcentre_MarkUpValueBroker, T1.SectionCostcentre_Qty1, T1.SectionCostc");
            viewString.Append("entre_Qty2, T1.SectionCostcentre_Qty3, T1.SectionCostcentre_SetupCost, T1.Sectio");
            viewString.Append("nCostcentre_PricePerUnitQty)\r\n    FROM (\r\n        SELECT \r\n            T.Section");
            viewString.Append("CostcentreId AS SectionCostcentre_SectionCostcentreId, \r\n            T.ItemSecti");
            viewString.Append("onId AS SectionCostcentre_ItemSectionId, \r\n            T.CostCentreId AS Section");
            viewString.Append("Costcentre_CostCentreId, \r\n            T.CostCentreType AS SectionCostcentre_Cos");
            viewString.Append("tCentreType, \r\n            T.SystemCostCentreType AS SectionCostcentre_SystemCos");
            viewString.Append("tCentreType, \r\n            T.[Order] AS SectionCostcentre_Order, \r\n            T");
            viewString.Append(".IsDirectCost AS SectionCostcentre_IsDirectCost, \r\n            T.IsOptionalExtra");
            viewString.Append(" AS SectionCostcentre_IsOptionalExtra, \r\n            T.IsPurchaseOrderRaised AS ");
            viewString.Append("SectionCostcentre_IsPurchaseOrderRaised, \r\n            T.Status AS SectionCostce");
            viewString.Append("ntre_Status, \r\n            T.ActivityUser AS SectionCostcentre_ActivityUser, \r\n ");
            viewString.Append("           T.IsPrintable AS SectionCostcentre_IsPrintable, \r\n            T.Estim");
            viewString.Append("atedStartTime AS SectionCostcentre_EstimatedStartTime, \r\n            T.Estimated");
            viewString.Append("Duration AS SectionCostcentre_EstimatedDuration, \r\n            T.EstimatedEndTim");
            viewString.Append("e AS SectionCostcentre_EstimatedEndTime, \r\n            T.ActualDuration AS Secti");
            viewString.Append("onCostcentre_ActualDuration, \r\n            T.ActualStartDateTime AS SectionCostc");
            viewString.Append("entre_ActualStartDateTime, \r\n            T.ActualEndTime AS SectionCostcentre_Ac");
            viewString.Append("tualEndTime, \r\n            T.Qty1Charge AS SectionCostcentre_Qty1Charge, \r\n     ");
            viewString.Append("       T.Qty2Charge AS SectionCostcentre_Qty2Charge, \r\n            T.Qty3Charge ");
            viewString.Append("AS SectionCostcentre_Qty3Charge, \r\n            T.Qty4Charge AS SectionCostcentre");
            viewString.Append("_Qty4Charge, \r\n            T.Qty5Charge AS SectionCostcentre_Qty5Charge, \r\n     ");
            viewString.Append("       T.Qty1MarkUpID AS SectionCostcentre_Qty1MarkUpID, \r\n            T.Qty2Mar");
            viewString.Append("kUpID AS SectionCostcentre_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS Section");
            viewString.Append("Costcentre_Qty3MarkUpID, \r\n            T.Qty4MarkUpID AS SectionCostcentre_Qty4M");
            viewString.Append("arkUpID, \r\n            T.Qty5MarkUpID AS SectionCostcentre_Qty5MarkUpID, \r\n     ");
            viewString.Append("       T.Qty1MarkUpValue AS SectionCostcentre_Qty1MarkUpValue, \r\n            T.Q");
            viewString.Append("ty2MarkUpValue AS SectionCostcentre_Qty2MarkUpValue, \r\n            T.Qty3MarkUpV");
            viewString.Append("alue AS SectionCostcentre_Qty3MarkUpValue, \r\n            T.Qty4MarkUpValue AS Se");
            viewString.Append("ctionCostcentre_Qty4MarkUpValue, \r\n            T.Qty5MarkUpValue AS SectionCostc");
            viewString.Append("entre_Qty5MarkUpValue, \r\n            T.Qty1NetTotal AS SectionCostcentre_Qty1Net");
            viewString.Append("Total, \r\n            T.Qty2NetTotal AS SectionCostcentre_Qty2NetTotal, \r\n       ");
            viewString.Append("     T.Qty3NetTotal AS SectionCostcentre_Qty3NetTotal, \r\n            T.Qty4NetTo");
            viewString.Append("tal AS SectionCostcentre_Qty4NetTotal, \r\n            T.Qty5NetTotal AS SectionCo");
            viewString.Append("stcentre_Qty5NetTotal, \r\n            T.Qty1EstimatedPlantCost AS SectionCostcent");
            viewString.Append("re_Qty1EstimatedPlantCost, \r\n            T.Qty1EstimatedLabourCost AS SectionCos");
            viewString.Append("tcentre_Qty1EstimatedLabourCost, \r\n            T.Qty1EstimatedStockCost AS Secti");
            viewString.Append("onCostcentre_Qty1EstimatedStockCost, \r\n            T.Qty1EstimatedTime AS Sectio");
            viewString.Append("nCostcentre_Qty1EstimatedTime, \r\n            T.Qty1QuotedPlantCharge AS SectionC");
            viewString.Append("ostcentre_Qty1QuotedPlantCharge, \r\n            T.Qty1QuotedLabourCharge AS Secti");
            viewString.Append("onCostcentre_Qty1QuotedLabourCharge, \r\n            T.Qty1QuotedStockCharge AS Se");
            viewString.Append("ctionCostcentre_Qty1QuotedStockCharge, \r\n            T.Qty2EstimatedPlantCost AS");
            viewString.Append(" SectionCostcentre_Qty2EstimatedPlantCost, \r\n            T.Qty2EstimatedLabourCo");
            viewString.Append("st AS SectionCostcentre_Qty2EstimatedLabourCost, \r\n            T.Qty2EstimatedSt");
            viewString.Append("ockCost AS SectionCostcentre_Qty2EstimatedStockCost, \r\n            T.Qty2Estimat");
            viewString.Append("edTime AS SectionCostcentre_Qty2EstimatedTime, \r\n            T.Qty2QuotedPlantCh");
            viewString.Append("arge AS SectionCostcentre_Qty2QuotedPlantCharge, \r\n            T.Qty2QuotedLabou");
            viewString.Append("rCharge AS SectionCostcentre_Qty2QuotedLabourCharge, \r\n            T.Qty2QuotedS");
            viewString.Append("tockCharge AS SectionCostcentre_Qty2QuotedStockCharge, \r\n            T.Qty3Estim");
            viewString.Append("atedPlantCost AS SectionCostcentre_Qty3EstimatedPlantCost, \r\n            T.Qty3E");
            viewString.Append("stimatedLabourCost AS SectionCostcentre_Qty3EstimatedLabourCost, \r\n            T");
            viewString.Append(".Qty3EstimatedStockCost AS SectionCostcentre_Qty3EstimatedStockCost, \r\n         ");
            viewString.Append("   T.Qty3EstimatedTime AS SectionCostcentre_Qty3EstimatedTime, \r\n            T.Q");
            viewString.Append("ty3QuotedPlantCharge AS SectionCostcentre_Qty3QuotedPlantCharge, \r\n            T");
            viewString.Append(".Qty3QuotedLabourCharge AS SectionCostcentre_Qty3QuotedLabourCharge, \r\n         ");
            viewString.Append("   T.Qty3QuotedStockCharge AS SectionCostcentre_Qty3QuotedStockCharge, \r\n       ");
            viewString.Append("     T.Qty4EstimatedPlantCost AS SectionCostcentre_Qty4EstimatedPlantCost, \r\n   ");
            viewString.Append("         T.Qty4EstimatedLabourCost AS SectionCostcentre_Qty4EstimatedLabourCost,");
            viewString.Append(" \r\n            T.Qty4EstimatedStockCost AS SectionCostcentre_Qty4EstimatedStockC");
            viewString.Append("ost, \r\n            T.Qty4EstimatedTime AS SectionCostcentre_Qty4EstimatedTime, \r");
            viewString.Append("\n            T.Qty4QuotedPlantCharge AS SectionCostcentre_Qty4QuotedPlantCharge,");
            viewString.Append(" \r\n            T.Qty4QuotedLabourCharge AS SectionCostcentre_Qty4QuotedLabourCha");
            viewString.Append("rge, \r\n            T.Qty4QuotedStockCharge AS SectionCostcentre_Qty4QuotedStockC");
            viewString.Append("harge, \r\n            T.Qty5EstimatedPlantCost AS SectionCostcentre_Qty5Estimated");
            viewString.Append("PlantCost, \r\n            T.Qty5EstimatedLabourCost AS SectionCostcentre_Qty5Esti");
            viewString.Append("matedLabourCost, \r\n            T.Qty5EstimatedStockCost AS SectionCostcentre_Qty");
            viewString.Append("5EstimatedStockCost, \r\n            T.Qty5EstimatedTime AS SectionCostcentre_Qty5");
            viewString.Append("EstimatedTime, \r\n            T.Qty5QuotedPlantCharge AS SectionCostcentre_Qty5Qu");
            viewString.Append("otedPlantCharge, \r\n            T.Qty5QuotedLabourCharge AS SectionCostcentre_Qty");
            viewString.Append("5QuotedLabourCharge, \r\n            T.Qty5QuotedStockCharge AS SectionCostcentre_");
            viewString.Append("Qty5QuotedStockCharge, \r\n            T.ActualPlantCost AS SectionCostcentre_Actu");
            viewString.Append("alPlantCost, \r\n            T.ActualLabourCost AS SectionCostcentre_ActualLabourC");
            viewString.Append("ost, \r\n            T.ActualStockCost AS SectionCostcentre_ActualStockCost, \r\n   ");
            viewString.Append("         T.Qty1WorkInstructions AS SectionCostcentre_Qty1WorkInstructions, \r\n   ");
            viewString.Append("         T.Qty2WorkInstructions AS SectionCostcentre_Qty2WorkInstructions, \r\n   ");
            viewString.Append("         T.Qty3WorkInstructions AS SectionCostcentre_Qty3WorkInstructions, \r\n   ");
            viewString.Append("         T.Qty4WorkInstructions AS SectionCostcentre_Qty4WorkInstructions, \r\n   ");
            viewString.Append("         T.Qty5WorkInstructions AS SectionCostcentre_Qty5WorkInstructions, \r\n   ");
            viewString.Append("         T.IsCostCentreUsedinPurchaseOrder AS SectionCostcentre_IsCostCentreUsed");
            viewString.Append("inPurchaseOrder, \r\n            T.IsMinimumCost AS SectionCostcentre_IsMinimumCos");
            viewString.Append("t, \r\n            T.SetupTime AS SectionCostcentre_SetupTime, \r\n            T.IsS");
            viewString.Append("cheduled AS SectionCostcentre_IsScheduled, \r\n            T.IsScheduleable AS Sec");
            viewString.Append("tionCostcentre_IsScheduleable, \r\n            T.Locked AS SectionCostcentre_Locke");
            viewString.Append("d, \r\n            T.CostingActualCost AS SectionCostcentre_CostingActualCost, \r\n ");
            viewString.Append("           T.CostingActualTime AS SectionCostcentre_CostingActualTime, \r\n       ");
            viewString.Append("     T.CostingActualQty AS SectionCostcentre_CostingActualQty, \r\n            T.N");
            viewString.Append("ame AS SectionCostcentre_Name, \r\n            T.QtyChargeBroker AS SectionCostcen");
            viewString.Append("tre_QtyChargeBroker, \r\n            T.MarkUpValueBroker AS SectionCostcentre_Mark");
            viewString.Append("UpValueBroker, \r\n            T.Qty1 AS SectionCostcentre_Qty1, \r\n            T.Q");
            viewString.Append("ty2 AS SectionCostcentre_Qty2, \r\n            T.Qty3 AS SectionCostcentre_Qty3, \r");
            viewString.Append("\n            T.SetupCost AS SectionCostcentre_SetupCost, \r\n            T.PricePe");
            viewString.Append("rUnitQty AS SectionCostcentre_PricePerUnitQty, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM BaseDbContext.SectionCostcentres AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostcentre", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostCentreDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostCentreDetail", @"
    SELECT VALUE -- Constructing SectionCostCentreDetail
        [DomainModels.Store.SectionCostCentreDetail](T1.SectionCostCentreDetail_SectionCostCentreDetailId, T1.SectionCostCentreDetail_SectionCostCentreId, T1.SectionCostCentreDetail_StockId, T1.SectionCostCentreDetail_SupplierId, T1.SectionCostCentreDetail_Qty1, T1.SectionCostCentreDetail_Qty2, T1.SectionCostCentreDetail_Qty3, T1.SectionCostCentreDetail_CostPrice, T1.SectionCostCentreDetail_ActualQtyUsed, T1.SectionCostCentreDetail_StockName, T1.SectionCostCentreDetail_Supplier)
    FROM (
        SELECT 
            T.SectionCostCentreDetailId AS SectionCostCentreDetail_SectionCostCentreDetailId, 
            T.SectionCostCentreId AS SectionCostCentreDetail_SectionCostCentreId, 
            T.StockId AS SectionCostCentreDetail_StockId, 
            T.SupplierId AS SectionCostCentreDetail_SupplierId, 
            T.Qty1 AS SectionCostCentreDetail_Qty1, 
            T.Qty2 AS SectionCostCentreDetail_Qty2, 
            T.Qty3 AS SectionCostCentreDetail_Qty3, 
            T.CostPrice AS SectionCostCentreDetail_CostPrice, 
            T.ActualQtyUsed AS SectionCostCentreDetail_ActualQtyUsed, 
            T.StockName AS SectionCostCentreDetail_StockName, 
            T.Supplier AS SectionCostCentreDetail_Supplier, 
            True AS _from0
        FROM BaseDbContext.SectionCostCentreDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostCentreResource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostCentreResource", @"
    SELECT VALUE -- Constructing SectionCostCentreResource
        [DomainModels.Store.SectionCostCentreResource](T1.SectionCostCentreResource_SectionCostCentreResourceId, T1.SectionCostCentreResource_SectionCostcentreId, T1.SectionCostCentreResource_ResourceId, T1.SectionCostCentreResource_ResourceTime, T1.SectionCostCentreResource_IsScheduleable, T1.SectionCostCentreResource_IsScheduled)
    FROM (
        SELECT 
            T.SectionCostCentreResourceId AS SectionCostCentreResource_SectionCostCentreResourceId, 
            T.SectionCostcentreId AS SectionCostCentreResource_SectionCostcentreId, 
            T.ResourceId AS SectionCostCentreResource_ResourceId, 
            T.ResourceTime AS SectionCostCentreResource_ResourceTime, 
            T.IsScheduleable AS SectionCostCentreResource_IsScheduleable, 
            T.IsScheduled AS SectionCostCentreResource_IsScheduled, 
            True AS _from0
        FROM BaseDbContext.SectionCostCentreResources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.State
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.State", @"
    SELECT VALUE -- Constructing State
        [DomainModels.Store.State](T1.State_StateId, T1.State_CountryId, T1.State_StateCode, T1.State_StateName)
    FROM (
        SELECT 
            T.StateId AS State_StateId, 
            T.CountryId AS State_CountryId, 
            T.StateCode AS State_StateCode, 
            T.StateName AS State_StateName, 
            True AS _from0
        FROM BaseDbContext.States AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Status
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Status", @"
    SELECT VALUE -- Constructing Status
        [DomainModels.Store.Status](T1.Status_StatusId, T1.Status_StatusName, T1.Status_Description, T1.Status_StatusType)
    FROM (
        SELECT 
            T.StatusId AS Status_StatusId, 
            T.StatusName AS Status_StatusName, 
            T.Description AS Status_Description, 
            T.StatusType AS Status_StatusType, 
            True AS _from0
        FROM BaseDbContext.Status AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Estimate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8305);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Estimate\r\n        [DomainModels.Store.Estimat");
            viewString.Append("e](T1.Estimate_EstimateId, T1.[Estimate.Estimate_Code], T1.[Estimate.Estimate_Na");
            viewString.Append("me], T1.Estimate_EnquiryId, T1.Estimate_ContactCompanyId, T1.Estimate_ContactId,");
            viewString.Append(" T1.Estimate_StatusId, T1.[Estimate.Estimate_Total], T1.[Estimate.Estimate_Valid");
            viewString.Append("Upto], T1.Estimate_UserNotes, T1.Estimate_LastUpdatedBy, T1.Estimate_CreationDat");
            viewString.Append("e, T1.Estimate_CreationTime, T1.[Estimate.Created_by], T1.Estimate_SalesPersonId");
            viewString.Append(", T1.Estimate_HeadNotes, T1.Estimate_FootNotes, T1.Estimate_EstimateDate, T1.Est");
            viewString.Append("imate_ProjectionDate, T1.Estimate_Greeting, T1.Estimate_AccountNumber, T1.Estima");
            viewString.Append("te_OrderNo, T1.Estimate_SuccessChanceId, T1.Estimate_LockedBy, T1.Estimate_Addre");
            viewString.Append("ssId, T1.Estimate_CompanyName, T1.Estimate_SectionFlagId, T1.Estimate_CompanyId,");
            viewString.Append(" T1.Estimate_SourceId, T1.Estimate_ProductId, T1.Estimate_IsInPipeLine, T1.[Esti");
            viewString.Append("mate.Order_Code], T1.[Estimate.Order_Date], T1.[Estimate.Order_CreationDateTime]");
            viewString.Append(", T1.[Estimate.Order_DeliveryDate], T1.[Estimate.Order_ConfirmationDate], T1.[Es");
            viewString.Append("timate.Order_Status], T1.[Estimate.Order_CompletionDate], T1.Estimate_CompanySit");
            viewString.Append("eId, T1.Estimate_OrderManagerId, T1.Estimate_ArtworkByDate, T1.Estimate_DataByDa");
            viewString.Append("te, T1.Estimate_TargetPrintDate, T1.Estimate_StartDeliveryDate, T1.Estimate_Pape");
            viewString.Append("rByDate, T1.Estimate_TargetBindDate, T1.Estimate_FinishDeliveryDate, T1.Estimate");
            viewString.Append("_Classification1Id, T1.Estimate_Classification2ID, T1.Estimate_IsOfficialOrder, ");
            viewString.Append("T1.Estimate_CustomerPO, T1.Estimate_OfficialOrderSetBy, T1.Estimate_OfficialOrde");
            viewString.Append("rSetOnDateTime, T1.Estimate_IsCreditApproved, T1.Estimate_CreditLimitForJob, T1.");
            viewString.Append("Estimate_CreditLimitSetBy, T1.Estimate_CreditLimitSetOnDateTime, T1.Estimate_IsJ");
            viewString.Append("obAllowedWOCreditCheck, T1.Estimate_AllowJobWOCreditCheckSetBy, T1.Estimate_Allo");
            viewString.Append("wJobWOCreditCheckSetOnDateTime, T1.Estimate_NotesUpdateDateTime, T1.Estimate_Not");
            viewString.Append("esUpdatedByUserId, T1.Estimate_OrderSourceId, T1.Estimate_IsRead, T1.Estimate_Es");
            viewString.Append("timateSentTo, T1.Estimate_EstimateValueChanged, T1.Estimate_NewItemAdded, T1.Est");
            viewString.Append("imate_isEstimate, T1.Estimate_isDirectSale, T1.Estimate_LastUpdateDate, T1.Estim");
            viewString.Append("ate_NominalCode, T1.Estimate_BillingAddressId, T1.Estimate_DeliveryCostCenterId,");
            viewString.Append(" T1.Estimate_DeliveryCost, T1.Estimate_DeliveryCompletionTime, T1.Estimate_Vouch");
            viewString.Append("erDiscountRate, T1.Estimate_ReportSignedBy, T1.Estimate_InvoiceId, T1.Estimate_O");
            viewString.Append("rderReportSignedBy, T1.Estimate_OrderReportLastPrinted, T1.Estimate_EstimateRepo");
            viewString.Append("rtLastPrinted, T1.Estimate_isEmailSent, T1.Estimate_DiscountVoucherID, T1.[Estim");
            viewString.Append("ate.Estimate_TotalBroker], T1.Estimate_BrokerPO, T1.Estimate_BrokerId, T1.Estima");
            viewString.Append("te_ClientStatus, T1.Estimate_ParentId, T1.Estimate_Version, T1.Estimate_RefEstim");
            viewString.Append("ateId, T1.Estimate_XeroAccessCode, T1.Estimate_OrganisationId)\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.EstimateId AS Estimate_EstimateId, \r\n            T.Es");
            viewString.Append("timate_Code AS [Estimate.Estimate_Code], \r\n            T.Estimate_Name AS [Estim");
            viewString.Append("ate.Estimate_Name], \r\n            T.EnquiryId AS Estimate_EnquiryId, \r\n         ");
            viewString.Append("   T.ContactCompanyId AS Estimate_ContactCompanyId, \r\n            T.ContactId AS");
            viewString.Append(" Estimate_ContactId, \r\n            T.StatusId AS Estimate_StatusId, \r\n          ");
            viewString.Append("  T.Estimate_Total AS [Estimate.Estimate_Total], \r\n            T.Estimate_ValidU");
            viewString.Append("pto AS [Estimate.Estimate_ValidUpto], \r\n            T.UserNotes AS Estimate_User");
            viewString.Append("Notes, \r\n            T.LastUpdatedBy AS Estimate_LastUpdatedBy, \r\n            T.");
            viewString.Append("CreationDate AS Estimate_CreationDate, \r\n            T.CreationTime AS Estimate_");
            viewString.Append("CreationTime, \r\n            T.Created_by AS [Estimate.Created_by], \r\n           ");
            viewString.Append(" T.SalesPersonId AS Estimate_SalesPersonId, \r\n            T.HeadNotes AS Estimat");
            viewString.Append("e_HeadNotes, \r\n            T.FootNotes AS Estimate_FootNotes, \r\n            T.Es");
            viewString.Append("timateDate AS Estimate_EstimateDate, \r\n            T.ProjectionDate AS Estimate_");
            viewString.Append("ProjectionDate, \r\n            T.Greeting AS Estimate_Greeting, \r\n            T.A");
            viewString.Append("ccountNumber AS Estimate_AccountNumber, \r\n            T.OrderNo AS Estimate_Orde");
            viewString.Append("rNo, \r\n            T.SuccessChanceId AS Estimate_SuccessChanceId, \r\n            ");
            viewString.Append("T.LockedBy AS Estimate_LockedBy, \r\n            T.AddressId AS Estimate_AddressId");
            viewString.Append(", \r\n            T.CompanyName AS Estimate_CompanyName, \r\n            T.SectionFl");
            viewString.Append("agId AS Estimate_SectionFlagId, \r\n            T.CompanyId AS Estimate_CompanyId,");
            viewString.Append(" \r\n            T.SourceId AS Estimate_SourceId, \r\n            T.ProductId AS Est");
            viewString.Append("imate_ProductId, \r\n            T.IsInPipeLine AS Estimate_IsInPipeLine, \r\n      ");
            viewString.Append("      T.Order_Code AS [Estimate.Order_Code], \r\n            T.Order_Date AS [Esti");
            viewString.Append("mate.Order_Date], \r\n            T.Order_CreationDateTime AS [Estimate.Order_Crea");
            viewString.Append("tionDateTime], \r\n            T.Order_DeliveryDate AS [Estimate.Order_DeliveryDat");
            viewString.Append("e], \r\n            T.Order_ConfirmationDate AS [Estimate.Order_ConfirmationDate],");
            viewString.Append(" \r\n            T.Order_Status AS [Estimate.Order_Status], \r\n            T.Order_");
            viewString.Append("CompletionDate AS [Estimate.Order_CompletionDate], \r\n            T.CompanySiteId");
            viewString.Append(" AS Estimate_CompanySiteId, \r\n            T.OrderManagerId AS Estimate_OrderMana");
            viewString.Append("gerId, \r\n            T.ArtworkByDate AS Estimate_ArtworkByDate, \r\n            T.");
            viewString.Append("DataByDate AS Estimate_DataByDate, \r\n            T.TargetPrintDate AS Estimate_T");
            viewString.Append("argetPrintDate, \r\n            T.StartDeliveryDate AS Estimate_StartDeliveryDate,");
            viewString.Append(" \r\n            T.PaperByDate AS Estimate_PaperByDate, \r\n            T.TargetBind");
            viewString.Append("Date AS Estimate_TargetBindDate, \r\n            T.FinishDeliveryDate AS Estimate_");
            viewString.Append("FinishDeliveryDate, \r\n            T.Classification1Id AS Estimate_Classification");
            viewString.Append("1Id, \r\n            T.Classification2ID AS Estimate_Classification2ID, \r\n        ");
            viewString.Append("    T.IsOfficialOrder AS Estimate_IsOfficialOrder, \r\n            T.CustomerPO AS");
            viewString.Append(" Estimate_CustomerPO, \r\n            T.OfficialOrderSetBy AS Estimate_OfficialOrd");
            viewString.Append("erSetBy, \r\n            T.OfficialOrderSetOnDateTime AS Estimate_OfficialOrderSet");
            viewString.Append("OnDateTime, \r\n            T.IsCreditApproved AS Estimate_IsCreditApproved, \r\n   ");
            viewString.Append("         T.CreditLimitForJob AS Estimate_CreditLimitForJob, \r\n            T.Cred");
            viewString.Append("itLimitSetBy AS Estimate_CreditLimitSetBy, \r\n            T.CreditLimitSetOnDateT");
            viewString.Append("ime AS Estimate_CreditLimitSetOnDateTime, \r\n            T.IsJobAllowedWOCreditCh");
            viewString.Append("eck AS Estimate_IsJobAllowedWOCreditCheck, \r\n            T.AllowJobWOCreditCheck");
            viewString.Append("SetBy AS Estimate_AllowJobWOCreditCheckSetBy, \r\n            T.AllowJobWOCreditCh");
            viewString.Append("eckSetOnDateTime AS Estimate_AllowJobWOCreditCheckSetOnDateTime, \r\n            T");
            viewString.Append(".NotesUpdateDateTime AS Estimate_NotesUpdateDateTime, \r\n            T.NotesUpdat");
            viewString.Append("edByUserId AS Estimate_NotesUpdatedByUserId, \r\n            T.OrderSourceId AS Es");
            viewString.Append("timate_OrderSourceId, \r\n            T.IsRead AS Estimate_IsRead, \r\n            T");
            viewString.Append(".EstimateSentTo AS Estimate_EstimateSentTo, \r\n            T.EstimateValueChanged");
            viewString.Append(" AS Estimate_EstimateValueChanged, \r\n            T.NewItemAdded AS Estimate_NewI");
            viewString.Append("temAdded, \r\n            T.isEstimate AS Estimate_isEstimate, \r\n            T.isD");
            viewString.Append("irectSale AS Estimate_isDirectSale, \r\n            T.LastUpdateDate AS Estimate_L");
            viewString.Append("astUpdateDate, \r\n            T.NominalCode AS Estimate_NominalCode, \r\n          ");
            viewString.Append("  T.BillingAddressId AS Estimate_BillingAddressId, \r\n            T.DeliveryCostC");
            viewString.Append("enterId AS Estimate_DeliveryCostCenterId, \r\n            T.DeliveryCost AS Estima");
            viewString.Append("te_DeliveryCost, \r\n            T.DeliveryCompletionTime AS Estimate_DeliveryComp");
            viewString.Append("letionTime, \r\n            T.VoucherDiscountRate AS Estimate_VoucherDiscountRate,");
            viewString.Append(" \r\n            T.ReportSignedBy AS Estimate_ReportSignedBy, \r\n            T.Invo");
            viewString.Append("iceId AS Estimate_InvoiceId, \r\n            T.OrderReportSignedBy AS Estimate_Ord");
            viewString.Append("erReportSignedBy, \r\n            T.OrderReportLastPrinted AS Estimate_OrderReport");
            viewString.Append("LastPrinted, \r\n            T.EstimateReportLastPrinted AS Estimate_EstimateRepor");
            viewString.Append("tLastPrinted, \r\n            T.isEmailSent AS Estimate_isEmailSent, \r\n           ");
            viewString.Append(" T.DiscountVoucherID AS Estimate_DiscountVoucherID, \r\n            T.Estimate_Tot");
            viewString.Append("alBroker AS [Estimate.Estimate_TotalBroker], \r\n            T.BrokerPO AS Estimat");
            viewString.Append("e_BrokerPO, \r\n            T.BrokerId AS Estimate_BrokerId, \r\n            T.Clien");
            viewString.Append("tStatus AS Estimate_ClientStatus, \r\n            T.ParentId AS Estimate_ParentId,");
            viewString.Append(" \r\n            T.Version AS Estimate_Version, \r\n            T.RefEstimateId AS E");
            viewString.Append("stimate_RefEstimateId, \r\n            T.XeroAccessCode AS Estimate_XeroAccessCode");
            viewString.Append(", \r\n            T.OrganisationId AS Estimate_OrganisationId, \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM BaseDbContext.Estimates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Estimate", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaymentGateway
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaymentGateway", @"
    SELECT VALUE -- Constructing PaymentGateway
        [DomainModels.Store.PaymentGateway](T1.PaymentGateway_PaymentGatewayId, T1.PaymentGateway_BusinessEmail, T1.PaymentGateway_IdentityToken, T1.PaymentGateway_isActive, T1.PaymentGateway_CompanyId, T1.PaymentGateway_PaymentMethodId, T1.PaymentGateway_SecureHash)
    FROM (
        SELECT 
            T.PaymentGatewayId AS PaymentGateway_PaymentGatewayId, 
            T.BusinessEmail AS PaymentGateway_BusinessEmail, 
            T.IdentityToken AS PaymentGateway_IdentityToken, 
            T.isActive AS PaymentGateway_isActive, 
            T.CompanyId AS PaymentGateway_CompanyId, 
            T.PaymentMethodId AS PaymentGateway_PaymentMethodId, 
            T.SecureHash AS PaymentGateway_SecureHash, 
            True AS _from0
        FROM BaseDbContext.PaymentGateways AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaymentMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaymentMethod", @"
    SELECT VALUE -- Constructing PaymentMethod
        [DomainModels.Store.PaymentMethod](T1.PaymentMethod_PaymentMethodId, T1.PaymentMethod_MethodName, T1.PaymentMethod_IsActive)
    FROM (
        SELECT 
            T.PaymentMethodId AS PaymentMethod_PaymentMethodId, 
            T.MethodName AS PaymentMethod_MethodName, 
            T.IsActive AS PaymentMethod_IsActive, 
            True AS _from0
        FROM BaseDbContext.PaymentMethods AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PrePayment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PrePayment", @"
    SELECT VALUE -- Constructing PrePayment
        [DomainModels.Store.PrePayment](T1.PrePayment_PrePaymentId, T1.PrePayment_CustomerId, T1.PrePayment_OrderId, T1.PrePayment_Amount, T1.PrePayment_PaymentDate, T1.PrePayment_PayPalResponseId, T1.PrePayment_PaymentMethodId, T1.PrePayment_ReferenceCode, T1.PrePayment_PaymentDescription)
    FROM (
        SELECT 
            T.PrePaymentId AS PrePayment_PrePaymentId, 
            T.CustomerId AS PrePayment_CustomerId, 
            T.OrderId AS PrePayment_OrderId, 
            T.Amount AS PrePayment_Amount, 
            T.PaymentDate AS PrePayment_PaymentDate, 
            T.PayPalResponseId AS PrePayment_PayPalResponseId, 
            T.PaymentMethodId AS PrePayment_PaymentMethodId, 
            T.ReferenceCode AS PrePayment_ReferenceCode, 
            T.PaymentDescription AS PrePayment_PaymentDescription, 
            True AS _from0
        FROM BaseDbContext.PrePayments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.RaveReview
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.RaveReview", @"
    SELECT VALUE -- Constructing RaveReview
        [DomainModels.Store.RaveReview](T1.RaveReview_ReviewId, T1.RaveReview_ReviewBy, T1.RaveReview_Review, T1.RaveReview_ReviewDate, T1.RaveReview_isDisplay, T1.RaveReview_SortOrder, T1.RaveReview_OrganisationId, T1.RaveReview_CompanyId)
    FROM (
        SELECT 
            T.ReviewId AS RaveReview_ReviewId, 
            T.ReviewBy AS RaveReview_ReviewBy, 
            T.Review AS RaveReview_Review, 
            T.ReviewDate AS RaveReview_ReviewDate, 
            T.isDisplay AS RaveReview_isDisplay, 
            T.SortOrder AS RaveReview_SortOrder, 
            T.OrganisationId AS RaveReview_OrganisationId, 
            T.CompanyId AS RaveReview_CompanyId, 
            True AS _from0
        FROM BaseDbContext.RaveReviews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.EmailEvent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.EmailEvent", @"
    SELECT VALUE -- Constructing EmailEvent
        [DomainModels.Store.EmailEvent](T1.EmailEvent_EmailEventId, T1.EmailEvent_EventName, T1.EmailEvent_Description, T1.EmailEvent_EventType)
    FROM (
        SELECT 
            T.EmailEventId AS EmailEvent_EmailEventId, 
            T.EventName AS EmailEvent_EventName, 
            T.Description AS EmailEvent_Description, 
            T.EventType AS EmailEvent_EventType, 
            True AS _from0
        FROM BaseDbContext.EmailEvents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Inquiry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Inquiry", @"
    SELECT VALUE -- Constructing Inquiry
        [DomainModels.Store.Inquiry](T1.Inquiry_InquiryId, T1.Inquiry_Title, T1.Inquiry_ContactId, T1.Inquiry_CreatedDate, T1.Inquiry_SourceId, T1.Inquiry_ContactCompanyId, T1.Inquiry_RequireByDate, T1.Inquiry_SystemUserId, T1.Inquiry_Status, T1.Inquiry_IsDirectInquiry, T1.Inquiry_FlagId, T1.Inquiry_InquiryCode, T1.Inquiry_CreatedBy, T1.Inquiry_BrokerContactCompanyId, T1.Inquiry_OrganisationId)
    FROM (
        SELECT 
            T.InquiryId AS Inquiry_InquiryId, 
            T.Title AS Inquiry_Title, 
            T.ContactId AS Inquiry_ContactId, 
            T.CreatedDate AS Inquiry_CreatedDate, 
            T.SourceId AS Inquiry_SourceId, 
            T.ContactCompanyId AS Inquiry_ContactCompanyId, 
            T.RequireByDate AS Inquiry_RequireByDate, 
            T.SystemUserId AS Inquiry_SystemUserId, 
            T.Status AS Inquiry_Status, 
            T.IsDirectInquiry AS Inquiry_IsDirectInquiry, 
            T.FlagId AS Inquiry_FlagId, 
            T.InquiryCode AS Inquiry_InquiryCode, 
            T.CreatedBy AS Inquiry_CreatedBy, 
            T.BrokerContactCompanyId AS Inquiry_BrokerContactCompanyId, 
            T.OrganisationId AS Inquiry_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.Inquiries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InquiryAttachment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InquiryAttachment", @"
    SELECT VALUE -- Constructing InquiryAttachment
        [DomainModels.Store.InquiryAttachment](T1.InquiryAttachment_AttachmentId, T1.InquiryAttachment_OrignalFileName, T1.InquiryAttachment_AttachmentPath, T1.InquiryAttachment_InquiryId, T1.InquiryAttachment_Extension)
    FROM (
        SELECT 
            T.AttachmentId AS InquiryAttachment_AttachmentId, 
            T.OrignalFileName AS InquiryAttachment_OrignalFileName, 
            T.AttachmentPath AS InquiryAttachment_AttachmentPath, 
            T.InquiryId AS InquiryAttachment_InquiryId, 
            T.Extension AS InquiryAttachment_Extension, 
            True AS _from0
        FROM BaseDbContext.InquiryAttachments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InquiryItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InquiryItem", @"
    SELECT VALUE -- Constructing InquiryItem
        [DomainModels.Store.InquiryItem](T1.InquiryItem_InquiryItemId, T1.InquiryItem_Title, T1.InquiryItem_Notes, T1.InquiryItem_DeliveryDate, T1.InquiryItem_InquiryId, T1.InquiryItem_ProductId)
    FROM (
        SELECT 
            T.InquiryItemId AS InquiryItem_InquiryItemId, 
            T.Title AS InquiryItem_Title, 
            T.Notes AS InquiryItem_Notes, 
            T.DeliveryDate AS InquiryItem_DeliveryDate, 
            T.InquiryId AS InquiryItem_InquiryId, 
            T.ProductId AS InquiryItem_ProductId, 
            True AS _from0
        FROM BaseDbContext.InquiryItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Invoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3237);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoice\r\n        [DomainModels.Store.Invoice]");
            viewString.Append("(T1.Invoice_InvoiceId, T1.Invoice_InvoiceCode, T1.Invoice_InvoiceType, T1.Invoic");
            viewString.Append("e_InvoiceName, T1.Invoice_ContactCompanyID, T1.Invoice_ContactId, T1.Invoice_Con");
            viewString.Append("tactCompany, T1.Invoice_OrderNo, T1.Invoice_InvoiceStatus, T1.Invoice_InvoiceTot");
            viewString.Append("al, T1.Invoice_InvoiceDate, T1.Invoice_LastUpdatedBy, T1.Invoice_CreationDate, T");
            viewString.Append("1.Invoice_CreatedBy, T1.Invoice_AccountNumber, T1.Invoice_Terms, T1.Invoice_Invo");
            viewString.Append("icePostingDate, T1.Invoice_InvoicePostedBy, T1.Invoice_LockedBy, T1.Invoice_Addr");
            viewString.Append("essId, T1.Invoice_IsArchive, T1.Invoice_TaxValue, T1.Invoice_GrandTotal, T1.Invo");
            viewString.Append("ice_FlagID, T1.Invoice_UserNotes, T1.Invoice_NotesUpdateDateTime, T1.Invoice_Not");
            viewString.Append("esUpdatedByUserID, T1.Invoice_SystemSiteId, T1.Invoice_EstimateId, T1.Invoice_Is");
            viewString.Append("Read, T1.Invoice_IsProformaInvoice, T1.Invoice_IsPrinted, T1.Invoice_LastUpdateD");
            viewString.Append("ate, T1.Invoice_ReportSignedBy, T1.Invoice_ReportLastPrintedDate, T1.Invoice_Hea");
            viewString.Append("dNotes, T1.Invoice_FootNotes, T1.Invoice_XeroAccessCode, T1.Invoice_Organisation");
            viewString.Append("Id)\r\n    FROM (\r\n        SELECT \r\n            T.InvoiceId AS Invoice_InvoiceId, ");
            viewString.Append("\r\n            T.InvoiceCode AS Invoice_InvoiceCode, \r\n            T.InvoiceType ");
            viewString.Append("AS Invoice_InvoiceType, \r\n            T.InvoiceName AS Invoice_InvoiceName, \r\n  ");
            viewString.Append("          T.ContactCompanyID AS Invoice_ContactCompanyID, \r\n            T.Contac");
            viewString.Append("tId AS Invoice_ContactId, \r\n            T.ContactCompany AS Invoice_ContactCompa");
            viewString.Append("ny, \r\n            T.OrderNo AS Invoice_OrderNo, \r\n            T.InvoiceStatus AS");
            viewString.Append(" Invoice_InvoiceStatus, \r\n            T.InvoiceTotal AS Invoice_InvoiceTotal, \r\n");
            viewString.Append("            T.InvoiceDate AS Invoice_InvoiceDate, \r\n            T.LastUpdatedBy ");
            viewString.Append("AS Invoice_LastUpdatedBy, \r\n            T.CreationDate AS Invoice_CreationDate, ");
            viewString.Append("\r\n            T.CreatedBy AS Invoice_CreatedBy, \r\n            T.AccountNumber AS");
            viewString.Append(" Invoice_AccountNumber, \r\n            T.Terms AS Invoice_Terms, \r\n            T.");
            viewString.Append("InvoicePostingDate AS Invoice_InvoicePostingDate, \r\n            T.InvoicePostedB");
            viewString.Append("y AS Invoice_InvoicePostedBy, \r\n            T.LockedBy AS Invoice_LockedBy, \r\n  ");
            viewString.Append("          T.AddressId AS Invoice_AddressId, \r\n            T.IsArchive AS Invoice");
            viewString.Append("_IsArchive, \r\n            T.TaxValue AS Invoice_TaxValue, \r\n            T.GrandT");
            viewString.Append("otal AS Invoice_GrandTotal, \r\n            T.FlagID AS Invoice_FlagID, \r\n        ");
            viewString.Append("    T.UserNotes AS Invoice_UserNotes, \r\n            T.NotesUpdateDateTime AS Inv");
            viewString.Append("oice_NotesUpdateDateTime, \r\n            T.NotesUpdatedByUserID AS Invoice_NotesU");
            viewString.Append("pdatedByUserID, \r\n            T.SystemSiteId AS Invoice_SystemSiteId, \r\n        ");
            viewString.Append("    T.EstimateId AS Invoice_EstimateId, \r\n            T.IsRead AS Invoice_IsRead");
            viewString.Append(", \r\n            T.IsProformaInvoice AS Invoice_IsProformaInvoice, \r\n            ");
            viewString.Append("T.IsPrinted AS Invoice_IsPrinted, \r\n            T.LastUpdateDate AS Invoice_Last");
            viewString.Append("UpdateDate, \r\n            T.ReportSignedBy AS Invoice_ReportSignedBy, \r\n        ");
            viewString.Append("    T.ReportLastPrintedDate AS Invoice_ReportLastPrintedDate, \r\n            T.He");
            viewString.Append("adNotes AS Invoice_HeadNotes, \r\n            T.FootNotes AS Invoice_FootNotes, \r\n");
            viewString.Append("            T.XeroAccessCode AS Invoice_XeroAccessCode, \r\n            T.Organisa");
            viewString.Append("tionId AS Invoice_OrganisationId, \r\n            True AS _from0\r\n        FROM Bas");
            viewString.Append("eDbContext.Invoices AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Invoice", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InvoiceDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InvoiceDetail", @"
    SELECT VALUE -- Constructing InvoiceDetail
        [DomainModels.Store.InvoiceDetail](T1.InvoiceDetail_InvoiceDetailId, T1.InvoiceDetail_InvoiceId, T1.InvoiceDetail_DetailType, T1.InvoiceDetail_ItemId, T1.InvoiceDetail_InvoiceTitle, T1.InvoiceDetail_NominalCode, T1.InvoiceDetail_ItemCharge, T1.InvoiceDetail_Quantity, T1.InvoiceDetail_ItemTaxValue, T1.InvoiceDetail_FlagId, T1.InvoiceDetail_DepartmentId, T1.InvoiceDetail_Description, T1.InvoiceDetail_ItemType, T1.InvoiceDetail_TaxId)
    FROM (
        SELECT 
            T.InvoiceDetailId AS InvoiceDetail_InvoiceDetailId, 
            T.InvoiceId AS InvoiceDetail_InvoiceId, 
            T.DetailType AS InvoiceDetail_DetailType, 
            T.ItemId AS InvoiceDetail_ItemId, 
            T.InvoiceTitle AS InvoiceDetail_InvoiceTitle, 
            T.NominalCode AS InvoiceDetail_NominalCode, 
            T.ItemCharge AS InvoiceDetail_ItemCharge, 
            T.Quantity AS InvoiceDetail_Quantity, 
            T.ItemTaxValue AS InvoiceDetail_ItemTaxValue, 
            T.FlagId AS InvoiceDetail_FlagId, 
            T.DepartmentId AS InvoiceDetail_DepartmentId, 
            T.Description AS InvoiceDetail_Description, 
            T.ItemType AS InvoiceDetail_ItemType, 
            T.TaxId AS InvoiceDetail_TaxId, 
            True AS _from0
        FROM BaseDbContext.InvoiceDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.RegistrationQuestion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.RegistrationQuestion", @"
    SELECT VALUE -- Constructing RegistrationQuestion
        [DomainModels.Store.RegistrationQuestion](T1.RegistrationQuestion_QuestionId, T1.RegistrationQuestion_Question)
    FROM (
        SELECT 
            T.QuestionId AS RegistrationQuestion_QuestionId, 
            T.Question AS RegistrationQuestion_Question, 
            True AS _from0
        FROM BaseDbContext.RegistrationQuestions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Campaign
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9024);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Campaign\r\n        [DomainModels.Store.Campaig");
            viewString.Append("n](T1.Campaign_CampaignId, T1.Campaign_CampaignName, T1.Campaign_Description, T1");
            viewString.Append(".Campaign_DataSourceType, T1.Campaign_RunCampaignFor, T1.Campaign_IncludeCustome");
            viewString.Append("rs, T1.Campaign_IncludeSuppliers, T1.Campaign_IncludeProspects, T1.Campaign_Incl");
            viewString.Append("udeKeyword, T1.Campaign_SearchKeyword, T1.Campaign_IncludeType, T1.Campaign_Incl");
            viewString.Append("udeFlag, T1.Campaign_IncludeName, T1.Campaign_IncludeAddress, T1.Campaign_Includ");
            viewString.Append("eContactName, T1.Campaign_SubjectA, T1.Campaign_HTMLMessageA, T1.Campaign_Attach");
            viewString.Append("mentFileNameFieldName, T1.Campaign_AttachmentType, T1.Campaign_EmailField, T1.Ca");
            viewString.Append("mpaign_CCEmailField, T1.Campaign_SMTPServer, T1.Campaign_FromAddress, T1.Campaig");
            viewString.Append("n_ReturnPathAddress, T1.Campaign_ReplyToAddress, T1.Campaign_ErrorsToAddress, T1");
            viewString.Append(".Campaign_SMTPServerType, T1.Campaign_EnableSchedule, T1.Campaign_StartDateTime,");
            viewString.Append(" T1.Campaign_RepeatEvery, T1.Campaign_RepeatInterval, T1.Campaign_LastRunOn, T1.");
            viewString.Append("Campaign_MessageType, T1.Campaign_ABMessaging, T1.Campaign_SubjectB, T1.Campaign");
            viewString.Append("_HTMLMessageB, T1.Campaign_IncludePlainText, T1.Campaign_SMTPDelaySeconds, T1.Ca");
            viewString.Append("mpaign_EmailAddressLogFiles, T1.Campaign_PlainTextMessageA, T1.Campaign_PlainTex");
            viewString.Append("tMessageB, T1.Campaign_UId, T1.Campaign_Private, T1.Campaign_SubscribeEmailUpdat");
            viewString.Append("eField, T1.Campaign_UnsubscribeEmailHyperlinkText, T1.Campaign_SubscribeEmailAdd");
            viewString.Append("ress, T1.Campaign_SubscribeEmailHyperlinkText, T1.Campaign_UnSubscribeCount, T1.");
            viewString.Append("Campaign_SubscribeCount, T1.Campaign_BounceCount, T1.Campaign_LastRunEndDateTime");
            viewString.Append(", T1.Campaign_MessageCount, T1.Campaign_SuccessCount, T1.Campaign_FailedCount, T");
            viewString.Append("1.Campaign_EnableLogFiles, T1.Campaign_ContinueIfWritebackError, T1.Campaign_Ema");
            viewString.Append("ilFieldPreviewColumn2, T1.Campaign_EmailFieldPreviewColumn3, T1.Campaign_Attachm");
            viewString.Append("entFileName, T1.Campaign_ClearCounters, T1.Campaign_SMTPServer2, T1.Campaign_Loc");
            viewString.Append("kedByUID, T1.Campaign_UnSubscribeCountTotal, T1.Campaign_SubscribeCountTotal, T1");
            viewString.Append(".Campaign_BounceCountTotal, T1.Campaign_EnableEmailAddressCache, T1.Campaign_Ope");
            viewString.Append("nedCount, T1.Campaign_OpenedCountTotal, T1.Campaign_OpenedEmailUpdateField, T1.C");
            viewString.Append("ampaign_EnableOpenedEmail, T1.Campaign_ABMessagingUpdateField, T1.Campaign_Email");
            viewString.Append("LogFileAddress2, T1.Campaign_EmailLogFileAddress3, T1.Campaign_CampaignCategory,");
            viewString.Append(" T1.Campaign_SoftBounceCountTotal, T1.Campaign_SMTPUsername, T1.Campaign_SMTPPas");
            viewString.Append("sword, T1.Campaign_EnableWriteBackTab, T1.Campaign_EnableClickThruTab, T1.Campai");
            viewString.Append("gn_UnsubscribeMethod, T1.Campaign_UseWYSWYG, T1.Campaign_CreationDate, T1.Campai");
            viewString.Append("gn_Status, T1.Campaign_ValidateEmail, T1.Campaign_CampaignType, T1.Campaign_Syst");
            viewString.Append("emSiteId, T1.Campaign_IncludeCorporateCustomers, T1.Campaign_IsEnabled, T1.Campa");
            viewString.Append("ign_SendEmailAfterDays, T1.Campaign_EmailEvent, T1.Campaign_isSystemEmail, T1.Ca");
            viewString.Append("mpaign_FlagIDs, T1.Campaign_CustomerTypeIDs, T1.Campaign_GroupIDs, T1.Campaign_F");
            viewString.Append("romName, T1.Campaign_CampaignReportId, T1.Campaign_OrganisationId, T1.Campaign_C");
            viewString.Append("ompanyId, T1.Campaign_UnsubscribeEmailAddress)\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.CampaignId AS Campaign_CampaignId, \r\n            T.CampaignName AS Ca");
            viewString.Append("mpaign_CampaignName, \r\n            T.Description AS Campaign_Description, \r\n    ");
            viewString.Append("        T.DataSourceType AS Campaign_DataSourceType, \r\n            T.RunCampaign");
            viewString.Append("For AS Campaign_RunCampaignFor, \r\n            T.IncludeCustomers AS Campaign_Inc");
            viewString.Append("ludeCustomers, \r\n            T.IncludeSuppliers AS Campaign_IncludeSuppliers, \r\n");
            viewString.Append("            T.IncludeProspects AS Campaign_IncludeProspects, \r\n            T.Inc");
            viewString.Append("ludeKeyword AS Campaign_IncludeKeyword, \r\n            T.SearchKeyword AS Campaig");
            viewString.Append("n_SearchKeyword, \r\n            T.IncludeType AS Campaign_IncludeType, \r\n        ");
            viewString.Append("    T.IncludeFlag AS Campaign_IncludeFlag, \r\n            T.IncludeName AS Campai");
            viewString.Append("gn_IncludeName, \r\n            T.IncludeAddress AS Campaign_IncludeAddress, \r\n   ");
            viewString.Append("         T.IncludeContactName AS Campaign_IncludeContactName, \r\n            T.Su");
            viewString.Append("bjectA AS Campaign_SubjectA, \r\n            T.HTMLMessageA AS Campaign_HTMLMessag");
            viewString.Append("eA, \r\n            T.AttachmentFileNameFieldName AS Campaign_AttachmentFileNameFi");
            viewString.Append("eldName, \r\n            T.AttachmentType AS Campaign_AttachmentType, \r\n          ");
            viewString.Append("  T.EmailField AS Campaign_EmailField, \r\n            T.CCEmailField AS Campaign_");
            viewString.Append("CCEmailField, \r\n            T.SMTPServer AS Campaign_SMTPServer, \r\n            T");
            viewString.Append(".FromAddress AS Campaign_FromAddress, \r\n            T.ReturnPathAddress AS Campa");
            viewString.Append("ign_ReturnPathAddress, \r\n            T.ReplyToAddress AS Campaign_ReplyToAddress");
            viewString.Append(", \r\n            T.ErrorsToAddress AS Campaign_ErrorsToAddress, \r\n            T.S");
            viewString.Append("MTPServerType AS Campaign_SMTPServerType, \r\n            T.EnableSchedule AS Camp");
            viewString.Append("aign_EnableSchedule, \r\n            T.StartDateTime AS Campaign_StartDateTime, \r\n");
            viewString.Append("            T.RepeatEvery AS Campaign_RepeatEvery, \r\n            T.RepeatInterva");
            viewString.Append("l AS Campaign_RepeatInterval, \r\n            T.LastRunOn AS Campaign_LastRunOn, \r");
            viewString.Append("\n            T.MessageType AS Campaign_MessageType, \r\n            T.ABMessaging ");
            viewString.Append("AS Campaign_ABMessaging, \r\n            T.SubjectB AS Campaign_SubjectB, \r\n      ");
            viewString.Append("      T.HTMLMessageB AS Campaign_HTMLMessageB, \r\n            T.IncludePlainText ");
            viewString.Append("AS Campaign_IncludePlainText, \r\n            T.SMTPDelaySeconds AS Campaign_SMTPD");
            viewString.Append("elaySeconds, \r\n            T.EmailAddressLogFiles AS Campaign_EmailAddressLogFil");
            viewString.Append("es, \r\n            T.PlainTextMessageA AS Campaign_PlainTextMessageA, \r\n         ");
            viewString.Append("   T.PlainTextMessageB AS Campaign_PlainTextMessageB, \r\n            T.UId AS Cam");
            viewString.Append("paign_UId, \r\n            T.Private AS Campaign_Private, \r\n            T.Subscrib");
            viewString.Append("eEmailUpdateField AS Campaign_SubscribeEmailUpdateField, \r\n            T.Unsubsc");
            viewString.Append("ribeEmailHyperlinkText AS Campaign_UnsubscribeEmailHyperlinkText, \r\n            ");
            viewString.Append("T.SubscribeEmailAddress AS Campaign_SubscribeEmailAddress, \r\n            T.Subsc");
            viewString.Append("ribeEmailHyperlinkText AS Campaign_SubscribeEmailHyperlinkText, \r\n            T.");
            viewString.Append("UnSubscribeCount AS Campaign_UnSubscribeCount, \r\n            T.SubscribeCount AS");
            viewString.Append(" Campaign_SubscribeCount, \r\n            T.BounceCount AS Campaign_BounceCount, \r");
            viewString.Append("\n            T.LastRunEndDateTime AS Campaign_LastRunEndDateTime, \r\n            ");
            viewString.Append("T.MessageCount AS Campaign_MessageCount, \r\n            T.SuccessCount AS Campaig");
            viewString.Append("n_SuccessCount, \r\n            T.FailedCount AS Campaign_FailedCount, \r\n         ");
            viewString.Append("   T.EnableLogFiles AS Campaign_EnableLogFiles, \r\n            T.ContinueIfWriteb");
            viewString.Append("ackError AS Campaign_ContinueIfWritebackError, \r\n            T.EmailFieldPreview");
            viewString.Append("Column2 AS Campaign_EmailFieldPreviewColumn2, \r\n            T.EmailFieldPreviewC");
            viewString.Append("olumn3 AS Campaign_EmailFieldPreviewColumn3, \r\n            T.AttachmentFileName ");
            viewString.Append("AS Campaign_AttachmentFileName, \r\n            T.ClearCounters AS Campaign_ClearC");
            viewString.Append("ounters, \r\n            T.SMTPServer2 AS Campaign_SMTPServer2, \r\n            T.Lo");
            viewString.Append("ckedByUID AS Campaign_LockedByUID, \r\n            T.UnSubscribeCountTotal AS Camp");
            viewString.Append("aign_UnSubscribeCountTotal, \r\n            T.SubscribeCountTotal AS Campaign_Subs");
            viewString.Append("cribeCountTotal, \r\n            T.BounceCountTotal AS Campaign_BounceCountTotal, ");
            viewString.Append("\r\n            T.EnableEmailAddressCache AS Campaign_EnableEmailAddressCache, \r\n ");
            viewString.Append("           T.OpenedCount AS Campaign_OpenedCount, \r\n            T.OpenedCountTot");
            viewString.Append("al AS Campaign_OpenedCountTotal, \r\n            T.OpenedEmailUpdateField AS Campa");
            viewString.Append("ign_OpenedEmailUpdateField, \r\n            T.EnableOpenedEmail AS Campaign_Enable");
            viewString.Append("OpenedEmail, \r\n            T.ABMessagingUpdateField AS Campaign_ABMessagingUpdat");
            viewString.Append("eField, \r\n            T.EmailLogFileAddress2 AS Campaign_EmailLogFileAddress2, \r");
            viewString.Append("\n            T.EmailLogFileAddress3 AS Campaign_EmailLogFileAddress3, \r\n        ");
            viewString.Append("    T.CampaignCategory AS Campaign_CampaignCategory, \r\n            T.SoftBounceC");
            viewString.Append("ountTotal AS Campaign_SoftBounceCountTotal, \r\n            T.SMTPUsername AS Camp");
            viewString.Append("aign_SMTPUsername, \r\n            T.SMTPPassword AS Campaign_SMTPPassword, \r\n    ");
            viewString.Append("        T.EnableWriteBackTab AS Campaign_EnableWriteBackTab, \r\n            T.Ena");
            viewString.Append("bleClickThruTab AS Campaign_EnableClickThruTab, \r\n            T.UnsubscribeMetho");
            viewString.Append("d AS Campaign_UnsubscribeMethod, \r\n            T.UseWYSWYG AS Campaign_UseWYSWYG");
            viewString.Append(", \r\n            T.CreationDate AS Campaign_CreationDate, \r\n            T.Status ");
            viewString.Append("AS Campaign_Status, \r\n            T.ValidateEmail AS Campaign_ValidateEmail, \r\n ");
            viewString.Append("           T.CampaignType AS Campaign_CampaignType, \r\n            T.SystemSiteId");
            viewString.Append(" AS Campaign_SystemSiteId, \r\n            T.IncludeCorporateCustomers AS Campaign");
            viewString.Append("_IncludeCorporateCustomers, \r\n            T.IsEnabled AS Campaign_IsEnabled, \r\n ");
            viewString.Append("           T.SendEmailAfterDays AS Campaign_SendEmailAfterDays, \r\n            T.");
            viewString.Append("EmailEvent AS Campaign_EmailEvent, \r\n            T.isSystemEmail AS Campaign_isS");
            viewString.Append("ystemEmail, \r\n            T.FlagIDs AS Campaign_FlagIDs, \r\n            T.Custome");
            viewString.Append("rTypeIDs AS Campaign_CustomerTypeIDs, \r\n            T.GroupIDs AS Campaign_Group");
            viewString.Append("IDs, \r\n            T.FromName AS Campaign_FromName, \r\n            T.CampaignRepo");
            viewString.Append("rtId AS Campaign_CampaignReportId, \r\n            T.OrganisationId AS Campaign_Or");
            viewString.Append("ganisationId, \r\n            T.CompanyId AS Campaign_CompanyId, \r\n            T.U");
            viewString.Append("nsubscribeEmailAddress AS Campaign_UnsubscribeEmailAddress, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM BaseDbContext.Campaigns AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Campaign", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignImage", @"
    SELECT VALUE -- Constructing CampaignImage
        [DomainModels.Store.CampaignImage](T1.CampaignImage_CampaignImageId, T1.CampaignImage_CampaignId, T1.CampaignImage_ImagePath, T1.CampaignImage_ImageName)
    FROM (
        SELECT 
            T.CampaignImageId AS CampaignImage_CampaignImageId, 
            T.CampaignId AS CampaignImage_CampaignId, 
            T.ImagePath AS CampaignImage_ImagePath, 
            T.ImageName AS CampaignImage_ImageName, 
            True AS _from0
        FROM BaseDbContext.CampaignImages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DeliveryNote
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2807);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryNote\r\n        [DomainModels.Store.Del");
            viewString.Append("iveryNote](T1.DeliveryNote_DeliveryNoteId, T1.DeliveryNote_Code, T1.DeliveryNote");
            viewString.Append("_DeliveryDate, T1.DeliveryNote_ContactCompanyId, T1.DeliveryNote_OrderReff, T1.D");
            viewString.Append("eliveryNote_footnote, T1.DeliveryNote_Comments, T1.DeliveryNote_LockedBy, T1.Del");
            viewString.Append("iveryNote_IsStatus, T1.DeliveryNote_ContactId, T1.DeliveryNote_ContactCompany, T");
            viewString.Append("1.DeliveryNote_CustomerOrderReff, T1.DeliveryNote_AddressId, T1.DeliveryNote_Cre");
            viewString.Append("atedBy, T1.DeliveryNote_CreationDateTime, T1.DeliveryNote_SupplierId, T1.Deliver");
            viewString.Append("yNote_SupplierTelNo, T1.DeliveryNote_CsNo, T1.DeliveryNote_SupplierURL, T1.Deliv");
            viewString.Append("eryNote_RaisedBy, T1.DeliveryNote_FlagId, T1.DeliveryNote_EstimateId, T1.Deliver");
            viewString.Append("yNote_JobId, T1.DeliveryNote_InvoiceId, T1.DeliveryNote_OrderId, T1.DeliveryNote");
            viewString.Append("_UserNotes, T1.DeliveryNote_NotesUpdateDateTime, T1.DeliveryNote_NotesUpdatedByU");
            viewString.Append("serId, T1.DeliveryNote_SystemSiteId, T1.DeliveryNote_IsRead, T1.DeliveryNote_IsP");
            viewString.Append("rinted)\r\n    FROM (\r\n        SELECT \r\n            T.DeliveryNoteId AS DeliveryNo");
            viewString.Append("te_DeliveryNoteId, \r\n            T.Code AS DeliveryNote_Code, \r\n            T.De");
            viewString.Append("liveryDate AS DeliveryNote_DeliveryDate, \r\n            T.ContactCompanyId AS Del");
            viewString.Append("iveryNote_ContactCompanyId, \r\n            T.OrderReff AS DeliveryNote_OrderReff,");
            viewString.Append(" \r\n            T.footnote AS DeliveryNote_footnote, \r\n            T.Comments AS ");
            viewString.Append("DeliveryNote_Comments, \r\n            T.LockedBy AS DeliveryNote_LockedBy, \r\n    ");
            viewString.Append("        T.IsStatus AS DeliveryNote_IsStatus, \r\n            T.ContactId AS Delive");
            viewString.Append("ryNote_ContactId, \r\n            T.ContactCompany AS DeliveryNote_ContactCompany,");
            viewString.Append(" \r\n            T.CustomerOrderReff AS DeliveryNote_CustomerOrderReff, \r\n        ");
            viewString.Append("    T.AddressId AS DeliveryNote_AddressId, \r\n            T.CreatedBy AS Delivery");
            viewString.Append("Note_CreatedBy, \r\n            T.CreationDateTime AS DeliveryNote_CreationDateTim");
            viewString.Append("e, \r\n            T.SupplierId AS DeliveryNote_SupplierId, \r\n            T.Suppli");
            viewString.Append("erTelNo AS DeliveryNote_SupplierTelNo, \r\n            T.CsNo AS DeliveryNote_CsNo");
            viewString.Append(", \r\n            T.SupplierURL AS DeliveryNote_SupplierURL, \r\n            T.Raise");
            viewString.Append("dBy AS DeliveryNote_RaisedBy, \r\n            T.FlagId AS DeliveryNote_FlagId, \r\n ");
            viewString.Append("           T.EstimateId AS DeliveryNote_EstimateId, \r\n            T.JobId AS Del");
            viewString.Append("iveryNote_JobId, \r\n            T.InvoiceId AS DeliveryNote_InvoiceId, \r\n        ");
            viewString.Append("    T.OrderId AS DeliveryNote_OrderId, \r\n            T.UserNotes AS DeliveryNote");
            viewString.Append("_UserNotes, \r\n            T.NotesUpdateDateTime AS DeliveryNote_NotesUpdateDateT");
            viewString.Append("ime, \r\n            T.NotesUpdatedByUserId AS DeliveryNote_NotesUpdatedByUserId, ");
            viewString.Append("\r\n            T.SystemSiteId AS DeliveryNote_SystemSiteId, \r\n            T.IsRea");
            viewString.Append("d AS DeliveryNote_IsRead, \r\n            T.IsPrinted AS DeliveryNote_IsPrinted, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM BaseDbContext.DeliveryNotes AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DeliveryNote", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DeliveryNoteDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DeliveryNoteDetail", @"
    SELECT VALUE -- Constructing DeliveryNoteDetail
        [DomainModels.Store.DeliveryNoteDetail](T1.DeliveryNoteDetail_DeliveryDetailid, T1.DeliveryNoteDetail_DeliveryNoteId, T1.DeliveryNoteDetail_Description, T1.DeliveryNoteDetail_ItemId, T1.DeliveryNoteDetail_ItemQty, T1.DeliveryNoteDetail_GrossItemTotal)
    FROM (
        SELECT 
            T.DeliveryDetailid AS DeliveryNoteDetail_DeliveryDetailid, 
            T.DeliveryNoteId AS DeliveryNoteDetail_DeliveryNoteId, 
            T.Description AS DeliveryNoteDetail_Description, 
            T.ItemId AS DeliveryNoteDetail_ItemId, 
            T.ItemQty AS DeliveryNoteDetail_ItemQty, 
            T.GrossItemTotal AS DeliveryNoteDetail_GrossItemTotal, 
            True AS _from0
        FROM BaseDbContext.DeliveryNoteDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyCMYKColor
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyCMYKColor", @"
    SELECT VALUE -- Constructing CompanyCMYKColor
        [DomainModels.Store.CompanyCMYKColor](T1.CompanyCMYKColor_ColorId, T1.CompanyCMYKColor_CompanyId, T1.CompanyCMYKColor_ColorName, T1.CompanyCMYKColor_ColorC, T1.CompanyCMYKColor_ColorM, T1.CompanyCMYKColor_ColorY, T1.CompanyCMYKColor_ColorK)
    FROM (
        SELECT 
            T.ColorId AS CompanyCMYKColor_ColorId, 
            T.CompanyId AS CompanyCMYKColor_CompanyId, 
            T.ColorName AS CompanyCMYKColor_ColorName, 
            T.ColorC AS CompanyCMYKColor_ColorC, 
            T.ColorM AS CompanyCMYKColor_ColorM, 
            T.ColorY AS CompanyCMYKColor_ColorY, 
            T.ColorK AS CompanyCMYKColor_ColorK, 
            True AS _from0
        FROM BaseDbContext.CompanyCMYKColors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SystemUser
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2967);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SystemUser\r\n        [DomainModels.Store.Syste");
            viewString.Append("mUser](T1.SystemUser_SystemUserId, T1.SystemUser_UserName, T1.SystemUser_Descrip");
            viewString.Append("tion, T1.SystemUser_OrganizationId, T1.SystemUser_DepartmentId, T1.SystemUser_Pa");
            viewString.Append("ssword, T1.SystemUser_FullName, T1.SystemUser_Email, T1.SystemUser_Mobile, T1.Sy");
            viewString.Append("stemUser_UserType, T1.SystemUser_RoleId, T1.SystemUser_IsAccountDisabled, T1.Sys");
            viewString.Append("temUser_IsTillSupervisor, T1.SystemUser_CostPerHour, T1.SystemUser_CurrentMachin");
            viewString.Append("eName, T1.SystemUser_CurrentMachineIP, T1.SystemUser_LockedBy, T1.SystemUser_IsS");
            viewString.Append("cheduleable, T1.SystemUser_CompanySiteId, T1.SystemUser_ReplyEmail, T1.SystemUse");
            viewString.Append("r_CanSendEmail, T1.SystemUser_IsSystemUser, T1.SystemUser_CreatedBy, T1.SystemUs");
            viewString.Append("er_CreatedDate, T1.SystemUser_ModifiedBy, T1.SystemUser_ModifiedDate, T1.SystemU");
            viewString.Append("ser_EmailSignature, T1.SystemUser_SmtpServer, T1.SystemUser_SmtpUserName, T1.Sys");
            viewString.Append("temUser_SmtpPassword, T1.SystemUser_UserAuthToken, T1.SystemUser_canDesignTempla");
            viewString.Append("te, T1.SystemUser_canApproveTemplate)\r\n    FROM (\r\n        SELECT \r\n            ");
            viewString.Append("T.SystemUserId AS SystemUser_SystemUserId, \r\n            T.UserName AS SystemUse");
            viewString.Append("r_UserName, \r\n            T.Description AS SystemUser_Description, \r\n           ");
            viewString.Append(" T.OrganizationId AS SystemUser_OrganizationId, \r\n            T.DepartmentId AS ");
            viewString.Append("SystemUser_DepartmentId, \r\n            T.Password AS SystemUser_Password, \r\n    ");
            viewString.Append("        T.FullName AS SystemUser_FullName, \r\n            T.Email AS SystemUser_E");
            viewString.Append("mail, \r\n            T.Mobile AS SystemUser_Mobile, \r\n            T.UserType AS S");
            viewString.Append("ystemUser_UserType, \r\n            T.RoleId AS SystemUser_RoleId, \r\n            T");
            viewString.Append(".IsAccountDisabled AS SystemUser_IsAccountDisabled, \r\n            T.IsTillSuperv");
            viewString.Append("isor AS SystemUser_IsTillSupervisor, \r\n            T.CostPerHour AS SystemUser_C");
            viewString.Append("ostPerHour, \r\n            T.CurrentMachineName AS SystemUser_CurrentMachineName,");
            viewString.Append(" \r\n            T.CurrentMachineIp AS SystemUser_CurrentMachineIP, \r\n            ");
            viewString.Append("T.LockedBy AS SystemUser_LockedBy, \r\n            T.IsScheduleable AS SystemUser_");
            viewString.Append("IsScheduleable, \r\n            T.CompanySiteId AS SystemUser_CompanySiteId, \r\n   ");
            viewString.Append("         T.ReplyEmail AS SystemUser_ReplyEmail, \r\n            T.CanSendEmail AS ");
            viewString.Append("SystemUser_CanSendEmail, \r\n            T.IsSystemUser AS SystemUser_IsSystemUser");
            viewString.Append(", \r\n            T.CreatedBy AS SystemUser_CreatedBy, \r\n            T.CreatedDate");
            viewString.Append(" AS SystemUser_CreatedDate, \r\n            T.ModifiedBy AS SystemUser_ModifiedBy,");
            viewString.Append(" \r\n            T.ModifiedDate AS SystemUser_ModifiedDate, \r\n            T.EmailS");
            viewString.Append("ignature AS SystemUser_EmailSignature, \r\n            T.SmtpServer AS SystemUser_");
            viewString.Append("SmtpServer, \r\n            T.SmtpUserName AS SystemUser_SmtpUserName, \r\n         ");
            viewString.Append("   T.SmtpPassword AS SystemUser_SmtpPassword, \r\n            T.UserAuthToken AS S");
            viewString.Append("ystemUser_UserAuthToken, \r\n            T.CanDesignTemplate AS SystemUser_canDesi");
            viewString.Append("gnTemplate, \r\n            T.CanApproveTemplate AS SystemUser_canApproveTemplate,");
            viewString.Append(" \r\n            True AS _from0\r\n        FROM BaseDbContext.SystemUsers AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SystemUser", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemAddonCostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemAddonCostCentre", @"
    SELECT VALUE -- Constructing ItemAddonCostCentre
        [DomainModels.Store.ItemAddonCostCentre](T1.ItemAddonCostCentre_ProductAddOnId, T1.ItemAddonCostCentre_ItemStockOptionId, T1.ItemAddonCostCentre_CostCentreId, T1.ItemAddonCostCentre_DiscountPercentage, T1.ItemAddonCostCentre_IsDiscounted, T1.ItemAddonCostCentre_Sequence, T1.ItemAddonCostCentre_IsMandatory)
    FROM (
        SELECT 
            T.ProductAddOnId AS ItemAddonCostCentre_ProductAddOnId, 
            T.ItemStockOptionId AS ItemAddonCostCentre_ItemStockOptionId, 
            T.CostCentreId AS ItemAddonCostCentre_CostCentreId, 
            T.DiscountPercentage AS ItemAddonCostCentre_DiscountPercentage, 
            T.IsDiscounted AS ItemAddonCostCentre_IsDiscounted, 
            T.Sequence AS ItemAddonCostCentre_Sequence, 
            T.IsMandatory AS ItemAddonCostCentre_IsMandatory, 
            True AS _from0
        FROM BaseDbContext.ItemAddonCostCentres AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemVideo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemVideo", @"
    SELECT VALUE -- Constructing ItemVideo
        [DomainModels.Store.ItemVideo](T1.ItemVideo_VideoId, T1.ItemVideo_VideoLink, T1.ItemVideo_Caption, T1.ItemVideo_ItemId)
    FROM (
        SELECT 
            T.VideoId AS ItemVideo_VideoId, 
            T.VideoLink AS ItemVideo_VideoLink, 
            T.Caption AS ItemVideo_Caption, 
            T.ItemId AS ItemVideo_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemVideos AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Address
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2477);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Address\r\n        [DomainModels.Store.Address]");
            viewString.Append("(T1.Address_AddressId, T1.Address_CompanyId, T1.Address_AddressName, T1.Address_");
            viewString.Append("Address1, T1.Address_Address2, T1.Address_Address3, T1.Address_City, T1.Address_");
            viewString.Append("StateId, T1.Address_CountryId, T1.Address_PostCode, T1.Address_Fax, T1.Address_E");
            viewString.Append("mail, T1.Address_URL, T1.Address_Tel1, T1.Address_Tel2, T1.Address_Extension1, T");
            viewString.Append("1.Address_Extension2, T1.Address_Reference, T1.Address_FAO, T1.Address_IsDefault");
            viewString.Append("Address, T1.Address_IsDefaultShippingAddress, T1.Address_isArchived, T1.Address_");
            viewString.Append("TerritoryId, T1.Address_GeoLatitude, T1.Address_GeoLongitude, T1.Address_isPriva");
            viewString.Append("te, T1.Address_ContactId, T1.Address_isDefaultTerrorityBilling, T1.Address_isDef");
            viewString.Append("aultTerrorityShipping, T1.Address_OrganisationId, T1.Address_DisplayOnContactUs)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.AddressId AS Address_AddressId, \r\n ");
            viewString.Append("           T.CompanyId AS Address_CompanyId, \r\n            T.AddressName AS Addr");
            viewString.Append("ess_AddressName, \r\n            T.Address1 AS Address_Address1, \r\n            T.A");
            viewString.Append("ddress2 AS Address_Address2, \r\n            T.Address3 AS Address_Address3, \r\n   ");
            viewString.Append("         T.City AS Address_City, \r\n            T.StateId AS Address_StateId, \r\n ");
            viewString.Append("           T.CountryId AS Address_CountryId, \r\n            T.PostCode AS Address");
            viewString.Append("_PostCode, \r\n            T.Fax AS Address_Fax, \r\n            T.Email AS Address_");
            viewString.Append("Email, \r\n            T.URL AS Address_URL, \r\n            T.Tel1 AS Address_Tel1,");
            viewString.Append(" \r\n            T.Tel2 AS Address_Tel2, \r\n            T.Extension1 AS Address_Ext");
            viewString.Append("ension1, \r\n            T.Extension2 AS Address_Extension2, \r\n            T.Refer");
            viewString.Append("ence AS Address_Reference, \r\n            T.FAO AS Address_FAO, \r\n            T.I");
            viewString.Append("sDefaultAddress AS Address_IsDefaultAddress, \r\n            T.IsDefaultShippingAd");
            viewString.Append("dress AS Address_IsDefaultShippingAddress, \r\n            T.isArchived AS Address");
            viewString.Append("_isArchived, \r\n            T.TerritoryId AS Address_TerritoryId, \r\n            T");
            viewString.Append(".GeoLatitude AS Address_GeoLatitude, \r\n            T.GeoLongitude AS Address_Geo");
            viewString.Append("Longitude, \r\n            T.isPrivate AS Address_isPrivate, \r\n            T.Conta");
            viewString.Append("ctId AS Address_ContactId, \r\n            T.isDefaultTerrorityBilling AS Address_");
            viewString.Append("isDefaultTerrorityBilling, \r\n            T.isDefaultTerrorityShipping AS Address");
            viewString.Append("_isDefaultTerrorityShipping, \r\n            T.OrganisationId AS Address_Organisat");
            viewString.Append("ionId, \r\n            T.DisplayOnContactUs AS Address_DisplayOnContactUs, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM BaseDbContext.Addresses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Address", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Template
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4809);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Template\r\n        [DomainModels.Store.Templat");
            viewString.Append("e](T1.Template_ProductId, T1.Template_Code, T1.Template_ProductName, T1.Template");
            viewString.Append("_Description, T1.Template_LowResPDFTemplates, T1.Template_BackgroundArtwork, T1.");
            viewString.Append("Template_Side2LowResPDFTemplates, T1.Template_Side2BackgroundArtwork, T1.Templat");
            viewString.Append("e_Thumbnail, T1.Template_Image, T1.Template_IsDisabled, T1.Template_PTempId, T1.");
            viewString.Append("Template_IsDoubleSide, T1.Template_IsUsePDFFile, T1.Template_PDFTemplateWidth, T");
            viewString.Append("1.Template_PDFTemplateHeight, T1.Template_IsUseBackGroundColor, T1.Template_BgR,");
            viewString.Append(" T1.Template_BgG, T1.Template_BgB, T1.Template_IsUseSide2BackGroundColor, T1.Tem");
            viewString.Append("plate_Side2BgR, T1.Template_Side2BgG, T1.Template_Side2BgB, T1.Template_CuttingM");
            viewString.Append("argin, T1.Template_MultiPageCount, T1.Template_Orientation, T1.Template_Matching");
            viewString.Append("SetTheme, T1.Template_BaseColorID, T1.Template_SubmittedBy, T1.Template_Submitte");
            viewString.Append("dByName, T1.Template_SubmitDate, T1.Template_Status, T1.Template_ApprovedBy, T1.");
            viewString.Append("Template_ApprovedByName, T1.Template_UserRating, T1.Template_UsedCount, T1.Templ");
            viewString.Append("ate_MPCRating, T1.Template_RejectionReason, T1.Template_ApprovalDate, T1.Templat");
            viewString.Append("e_TempString, T1.Template_MatchingSetID, T1.Template_FullView, T1.Template_SLThu");
            viewString.Append("mbnail, T1.Template_SuperView, T1.Template_ColorHex, T1.Template_TemplateOwner, ");
            viewString.Append("T1.Template_TemplateOwnerName, T1.Template_IsPrivate, T1.Template_ApprovedDate, ");
            viewString.Append("T1.Template_IsCorporateEditable, T1.Template_TemplateType, T1.Template_isWaterma");
            viewString.Append("rkText, T1.Template_isSpotTemplate, T1.Template_isCreatedManual, T1.Template_isE");
            viewString.Append("ditorChoice, T1.Template_ProductCategoryId)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.ProductId AS Template_ProductId, \r\n            T.Code AS Template_Code, ");
            viewString.Append("\r\n            T.ProductName AS Template_ProductName, \r\n            T.Description");
            viewString.Append(" AS Template_Description, \r\n            T.LowResPDFTemplates AS Template_LowResP");
            viewString.Append("DFTemplates, \r\n            T.BackgroundArtwork AS Template_BackgroundArtwork, \r\n");
            viewString.Append("            T.Side2LowResPDFTemplates AS Template_Side2LowResPDFTemplates, \r\n   ");
            viewString.Append("         T.Side2BackgroundArtwork AS Template_Side2BackgroundArtwork, \r\n        ");
            viewString.Append("    T.Thumbnail AS Template_Thumbnail, \r\n            T.Image AS Template_Image, ");
            viewString.Append("\r\n            T.IsDisabled AS Template_IsDisabled, \r\n            T.PTempId AS Te");
            viewString.Append("mplate_PTempId, \r\n            T.IsDoubleSide AS Template_IsDoubleSide, \r\n       ");
            viewString.Append("     T.IsUsePDFFile AS Template_IsUsePDFFile, \r\n            T.PDFTemplateWidth A");
            viewString.Append("S Template_PDFTemplateWidth, \r\n            T.PDFTemplateHeight AS Template_PDFTe");
            viewString.Append("mplateHeight, \r\n            T.IsUseBackGroundColor AS Template_IsUseBackGroundCo");
            viewString.Append("lor, \r\n            T.BgR AS Template_BgR, \r\n            T.BgG AS Template_BgG, \r");
            viewString.Append("\n            T.BgB AS Template_BgB, \r\n            T.IsUseSide2BackGroundColor AS");
            viewString.Append(" Template_IsUseSide2BackGroundColor, \r\n            T.Side2BgR AS Template_Side2B");
            viewString.Append("gR, \r\n            T.Side2BgG AS Template_Side2BgG, \r\n            T.Side2BgB AS T");
            viewString.Append("emplate_Side2BgB, \r\n            T.CuttingMargin AS Template_CuttingMargin, \r\n   ");
            viewString.Append("         T.MultiPageCount AS Template_MultiPageCount, \r\n            T.Orientatio");
            viewString.Append("n AS Template_Orientation, \r\n            T.MatchingSetTheme AS Template_Matching");
            viewString.Append("SetTheme, \r\n            T.BaseColorID AS Template_BaseColorID, \r\n            T.S");
            viewString.Append("ubmittedBy AS Template_SubmittedBy, \r\n            T.SubmittedByName AS Template_");
            viewString.Append("SubmittedByName, \r\n            T.SubmitDate AS Template_SubmitDate, \r\n          ");
            viewString.Append("  T.Status AS Template_Status, \r\n            T.ApprovedBy AS Template_ApprovedBy");
            viewString.Append(", \r\n            T.ApprovedByName AS Template_ApprovedByName, \r\n            T.Use");
            viewString.Append("rRating AS Template_UserRating, \r\n            T.UsedCount AS Template_UsedCount,");
            viewString.Append(" \r\n            T.MPCRating AS Template_MPCRating, \r\n            T.RejectionReaso");
            viewString.Append("n AS Template_RejectionReason, \r\n            T.ApprovalDate AS Template_Approval");
            viewString.Append("Date, \r\n            T.TempString AS Template_TempString, \r\n            T.Matchin");
            viewString.Append("gSetID AS Template_MatchingSetID, \r\n            T.FullView AS Template_FullView,");
            viewString.Append(" \r\n            T.SLThumbnail AS Template_SLThumbnail, \r\n            T.SuperView ");
            viewString.Append("AS Template_SuperView, \r\n            T.ColorHex AS Template_ColorHex, \r\n        ");
            viewString.Append("    T.TemplateOwner AS Template_TemplateOwner, \r\n            T.TemplateOwnerName");
            viewString.Append(" AS Template_TemplateOwnerName, \r\n            T.IsPrivate AS Template_IsPrivate,");
            viewString.Append(" \r\n            T.ApprovedDate AS Template_ApprovedDate, \r\n            T.IsCorpor");
            viewString.Append("ateEditable AS Template_IsCorporateEditable, \r\n            T.TemplateType AS Tem");
            viewString.Append("plate_TemplateType, \r\n            T.isWatermarkText AS Template_isWatermarkText,");
            viewString.Append(" \r\n            T.isSpotTemplate AS Template_isSpotTemplate, \r\n            T.isCr");
            viewString.Append("eatedManual AS Template_isCreatedManual, \r\n            T.isEditorChoice AS Templ");
            viewString.Append("ate_isEditorChoice, \r\n            T.ProductCategoryId AS Template_ProductCategor");
            viewString.Append("yId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Templates AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Template", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplatePage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplatePage", "\r\n    SELECT VALUE -- Constructing TemplatePage\r\n        [DomainModels.Store.Temp" +
                    "latePage](T1.TemplatePage_ProductPageId, T1.TemplatePage_ProductId, T1.TemplateP" +
                    "age_PageNo, T1.TemplatePage_PageType, T1.TemplatePage_Orientation, T1.TemplatePa" +
                    "ge_BackGroundType, T1.TemplatePage_BackgroundFileName, T1.TemplatePage_ColorC, T" +
                    "1.TemplatePage_ColorM, T1.TemplatePage_ColorY, T1.TemplatePage_PageName, T1.Temp" +
                    "latePage_ColorK, T1.TemplatePage_IsPrintable, T1.TemplatePage_hasOverlayObjects," +
                    " T1.TemplatePage_Width, T1.TemplatePage_Height)\r\n    FROM (\r\n        SELECT \r\n  " +
                    "          T.ProductPageId AS TemplatePage_ProductPageId, \r\n            T.Product" +
                    "Id AS TemplatePage_ProductId, \r\n            T.PageNo AS TemplatePage_PageNo, \r\n " +
                    "           T.PageType AS TemplatePage_PageType, \r\n            T.Orientation AS T" +
                    "emplatePage_Orientation, \r\n            T.BackGroundType AS TemplatePage_BackGrou" +
                    "ndType, \r\n            T.BackgroundFileName AS TemplatePage_BackgroundFileName, \r" +
                    "\n            T.ColorC AS TemplatePage_ColorC, \r\n            T.ColorM AS Template" +
                    "Page_ColorM, \r\n            T.ColorY AS TemplatePage_ColorY, \r\n            T.Page" +
                    "Name AS TemplatePage_PageName, \r\n            T.ColorK AS TemplatePage_ColorK, \r\n" +
                    "            T.IsPrintable AS TemplatePage_IsPrintable, \r\n            T.hasOverla" +
                    "yObjects AS TemplatePage_hasOverlayObjects, \r\n            T.Width AS TemplatePag" +
                    "e_Width, \r\n            T.Height AS TemplatePage_Height, \r\n            True AS _f" +
                    "rom0\r\n        FROM BaseDbContext.TemplatePages AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPageTag
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPageTag", @"
    SELECT VALUE -- Constructing CmsPageTag
        [DomainModels.Store.CmsPageTag](T1.CmsPageTag_TagId, T1.CmsPageTag_PageId, T1.CmsPageTag_PageTagId, T1.CmsPageTag_CompanyId)
    FROM (
        SELECT 
            T.TagId AS CmsPageTag_TagId, 
            T.PageId AS CmsPageTag_PageId, 
            T.PageTagId AS CmsPageTag_PageTagId, 
            T.CompanyId AS CmsPageTag_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CmsPageTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsTags", @"
    SELECT VALUE -- Constructing CmsTags
        [DomainModels.Store.CmsTags](T1.CmsTags_TagId, T1.CmsTags_TagName, T1.CmsTags_TagSlug, T1.CmsTags_Description, T1.CmsTags_isDisplay)
    FROM (
        SELECT 
            T.TagId AS CmsTags_TagId, 
            T.TagName AS CmsTags_TagName, 
            T.TagSlug AS CmsTags_TagSlug, 
            T.Description AS CmsTags_Description, 
            T.IsDisplay AS CmsTags_isDisplay, 
            True AS _from0
        FROM BaseDbContext.CmsTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreType", @"
    SELECT VALUE -- Constructing CostCentreType
        [DomainModels.Store.CostCentreType](T1.CostCentreType_TypeId, T1.CostCentreType_TypeName, T1.CostCentreType_IsSystem, T1.CostCentreType_IsExternal, T1.CostCentreType_CompanyId)
    FROM (
        SELECT 
            T.TypeId AS CostCentreType_TypeId, 
            T.TypeName AS CostCentreType_TypeName, 
            T.IsSystem AS CostCentreType_IsSystem, 
            T.IsExternal AS CostCentreType_IsExternal, 
            T.CompanyId AS CostCentreType_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CostCentreTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateBackgroundImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2127);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateBackgroundImage\r\n        [DomainModel");
            viewString.Append("s.Store.TemplateBackgroundImage](T1.TemplateBackgroundImage_Id, T1.TemplateBackg");
            viewString.Append("roundImage_ProductId, T1.TemplateBackgroundImage_ImageName, T1.TemplateBackgroun");
            viewString.Append("dImage_Name, T1.TemplateBackgroundImage_flgPhotobook, T1.TemplateBackgroundImage");
            viewString.Append("_flgCover, T1.TemplateBackgroundImage_BackgroundImageAbsolutePath, T1.TemplateBa");
            viewString.Append("ckgroundImage_BackgroundImageRelativePath, T1.TemplateBackgroundImage_ImageType,");
            viewString.Append(" T1.TemplateBackgroundImage_ImageWidth, T1.TemplateBackgroundImage_ImageHeight, ");
            viewString.Append("T1.TemplateBackgroundImage_ImageTitle, T1.TemplateBackgroundImage_ImageDescripti");
            viewString.Append("on, T1.TemplateBackgroundImage_ImageKeywords, T1.TemplateBackgroundImage_Uploade");
            viewString.Append("dFrom, T1.TemplateBackgroundImage_ContactCompanyId, T1.TemplateBackgroundImage_C");
            viewString.Append("ontactId)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS TemplateBackgroundIm");
            viewString.Append("age_Id, \r\n            T.ProductId AS TemplateBackgroundImage_ProductId, \r\n      ");
            viewString.Append("      T.ImageName AS TemplateBackgroundImage_ImageName, \r\n            T.Name AS ");
            viewString.Append("TemplateBackgroundImage_Name, \r\n            T.flgPhotobook AS TemplateBackground");
            viewString.Append("Image_flgPhotobook, \r\n            T.flgCover AS TemplateBackgroundImage_flgCover");
            viewString.Append(", \r\n            T.BackgroundImageAbsolutePath AS TemplateBackgroundImage_Backgro");
            viewString.Append("undImageAbsolutePath, \r\n            T.BackgroundImageRelativePath AS TemplateBac");
            viewString.Append("kgroundImage_BackgroundImageRelativePath, \r\n            T.ImageType AS TemplateB");
            viewString.Append("ackgroundImage_ImageType, \r\n            T.ImageWidth AS TemplateBackgroundImage_");
            viewString.Append("ImageWidth, \r\n            T.ImageHeight AS TemplateBackgroundImage_ImageHeight, ");
            viewString.Append("\r\n            T.ImageTitle AS TemplateBackgroundImage_ImageTitle, \r\n            ");
            viewString.Append("T.ImageDescription AS TemplateBackgroundImage_ImageDescription, \r\n            T.");
            viewString.Append("ImageKeywords AS TemplateBackgroundImage_ImageKeywords, \r\n            T.Uploaded");
            viewString.Append("From AS TemplateBackgroundImage_UploadedFrom, \r\n            T.ContactCompanyId A");
            viewString.Append("S TemplateBackgroundImage_ContactCompanyId, \r\n            T.ContactId AS Templat");
            viewString.Append("eBackgroundImage_ContactId, \r\n            True AS _from0\r\n        FROM BaseDbCon");
            viewString.Append("text.TemplateBackgroundImages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateBackgroundImage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateObject
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5949);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateObject\r\n        [DomainModels.Store.T");
            viewString.Append("emplateObject](T1.TemplateObject_ObjectId, T1.TemplateObject_ObjectType, T1.Temp");
            viewString.Append("lateObject_Name, T1.TemplateObject_IsEditable, T1.TemplateObject_IsHidden, T1.Te");
            viewString.Append("mplateObject_IsMandatory, T1.TemplateObject_PositionX, T1.TemplateObject_Positio");
            viewString.Append("nY, T1.TemplateObject_MaxHeight, T1.TemplateObject_MaxWidth, T1.TemplateObject_M");
            viewString.Append("axCharacters, T1.TemplateObject_RotationAngle, T1.TemplateObject_IsFontCustom, T");
            viewString.Append("1.TemplateObject_IsFontNamePrivate, T1.TemplateObject_FontName, T1.TemplateObjec");
            viewString.Append("t_FontSize, T1.TemplateObject_FontStyleId, T1.TemplateObject_IsBold, T1.Template");
            viewString.Append("Object_IsItalic, T1.TemplateObject_Allignment, T1.TemplateObject_VAllignment, T1");
            viewString.Append(".TemplateObject_Indent, T1.TemplateObject_IsUnderlinedText, T1.TemplateObject_Co");
            viewString.Append("lorType, T1.TemplateObject_ColorStyleId, T1.TemplateObject_PalleteId, T1.Templat");
            viewString.Append("eObject_ColorName, T1.TemplateObject_ColorC, T1.TemplateObject_ColorM, T1.Templa");
            viewString.Append("teObject_ColorY, T1.TemplateObject_ColorK, T1.TemplateObject_Tint, T1.TemplateOb");
            viewString.Append("ject_IsSpotColor, T1.TemplateObject_SpotColorName, T1.TemplateObject_ContentStri");
            viewString.Append("ng, T1.TemplateObject_ContentCaseType, T1.TemplateObject_ProductId, T1.TemplateO");
            viewString.Append("bject_DisplayOrderPdf, T1.TemplateObject_DisplayOrderTxtControl, T1.TemplateObje");
            viewString.Append("ct_IsRequireNumericValue, T1.TemplateObject_RColor, T1.TemplateObject_GColor, T1");
            viewString.Append(".TemplateObject_BColor, T1.TemplateObject_isSide2Object, T1.TemplateObject_LineS");
            viewString.Append("pacing, T1.TemplateObject_ProductPageId, T1.TemplateObject_ParentId, T1.Template");
            viewString.Append("Object_CircleRadiusX, T1.TemplateObject_Opacity, T1.TemplateObject_IsNewLine, T1");
            viewString.Append(".TemplateObject_TCtlName, T1.TemplateObject_ExField1, T1.TemplateObject_ExField2");
            viewString.Append(", T1.TemplateObject_IsPositionLocked, T1.TemplateObject_ColorHex, T1.TemplateObj");
            viewString.Append("ect_CircleRadiusY, T1.TemplateObject_IsTextEditable, T1.TemplateObject_QuickText");
            viewString.Append("Order, T1.TemplateObject_IsQuickText, T1.TemplateObject_CharSpacing, T1.Template");
            viewString.Append("Object_watermarkText, T1.TemplateObject_textStyles, T1.TemplateObject_AutoShrink");
            viewString.Append("Text, T1.TemplateObject_IsOverlayObject, T1.TemplateObject_ClippedInfo)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.ObjectId AS TemplateObject_ObjectId, \r\n     ");
            viewString.Append("       T.ObjectType AS TemplateObject_ObjectType, \r\n            T.Name AS Templa");
            viewString.Append("teObject_Name, \r\n            T.IsEditable AS TemplateObject_IsEditable, \r\n      ");
            viewString.Append("      T.IsHidden AS TemplateObject_IsHidden, \r\n            T.IsMandatory AS Temp");
            viewString.Append("lateObject_IsMandatory, \r\n            T.PositionX AS TemplateObject_PositionX, \r");
            viewString.Append("\n            T.PositionY AS TemplateObject_PositionY, \r\n            T.MaxHeight ");
            viewString.Append("AS TemplateObject_MaxHeight, \r\n            T.MaxWidth AS TemplateObject_MaxWidth");
            viewString.Append(", \r\n            T.MaxCharacters AS TemplateObject_MaxCharacters, \r\n            T");
            viewString.Append(".RotationAngle AS TemplateObject_RotationAngle, \r\n            T.IsFontCustom AS ");
            viewString.Append("TemplateObject_IsFontCustom, \r\n            T.IsFontNamePrivate AS TemplateObject");
            viewString.Append("_IsFontNamePrivate, \r\n            T.FontName AS TemplateObject_FontName, \r\n     ");
            viewString.Append("       T.FontSize AS TemplateObject_FontSize, \r\n            T.FontStyleId AS Tem");
            viewString.Append("plateObject_FontStyleId, \r\n            T.IsBold AS TemplateObject_IsBold, \r\n    ");
            viewString.Append("        T.IsItalic AS TemplateObject_IsItalic, \r\n            T.Allignment AS Tem");
            viewString.Append("plateObject_Allignment, \r\n            T.VAllignment AS TemplateObject_VAllignmen");
            viewString.Append("t, \r\n            T.Indent AS TemplateObject_Indent, \r\n            T.IsUnderlined");
            viewString.Append("Text AS TemplateObject_IsUnderlinedText, \r\n            T.ColorType AS TemplateOb");
            viewString.Append("ject_ColorType, \r\n            T.ColorStyleId AS TemplateObject_ColorStyleId, \r\n ");
            viewString.Append("           T.PalleteId AS TemplateObject_PalleteId, \r\n            T.ColorName AS");
            viewString.Append(" TemplateObject_ColorName, \r\n            T.ColorC AS TemplateObject_ColorC, \r\n  ");
            viewString.Append("          T.ColorM AS TemplateObject_ColorM, \r\n            T.ColorY AS TemplateO");
            viewString.Append("bject_ColorY, \r\n            T.ColorK AS TemplateObject_ColorK, \r\n            T.T");
            viewString.Append("int AS TemplateObject_Tint, \r\n            T.IsSpotColor AS TemplateObject_IsSpot");
            viewString.Append("Color, \r\n            T.SpotColorName AS TemplateObject_SpotColorName, \r\n        ");
            viewString.Append("    T.ContentString AS TemplateObject_ContentString, \r\n            T.ContentCase");
            viewString.Append("Type AS TemplateObject_ContentCaseType, \r\n            T.ProductId AS TemplateObj");
            viewString.Append("ect_ProductId, \r\n            T.DisplayOrderPdf AS TemplateObject_DisplayOrderPdf");
            viewString.Append(", \r\n            T.DisplayOrderTxtControl AS TemplateObject_DisplayOrderTxtContro");
            viewString.Append("l, \r\n            T.IsRequireNumericValue AS TemplateObject_IsRequireNumericValue");
            viewString.Append(", \r\n            T.RColor AS TemplateObject_RColor, \r\n            T.GColor AS Tem");
            viewString.Append("plateObject_GColor, \r\n            T.BColor AS TemplateObject_BColor, \r\n         ");
            viewString.Append("   T.isSide2Object AS TemplateObject_isSide2Object, \r\n            T.LineSpacing ");
            viewString.Append("AS TemplateObject_LineSpacing, \r\n            T.ProductPageId AS TemplateObject_P");
            viewString.Append("roductPageId, \r\n            T.ParentId AS TemplateObject_ParentId, \r\n           ");
            viewString.Append(" T.CircleRadiusX AS TemplateObject_CircleRadiusX, \r\n            T.Opacity AS Tem");
            viewString.Append("plateObject_Opacity, \r\n            T.IsNewLine AS TemplateObject_IsNewLine, \r\n  ");
            viewString.Append("          T.TCtlName AS TemplateObject_TCtlName, \r\n            T.ExField1 AS Tem");
            viewString.Append("plateObject_ExField1, \r\n            T.ExField2 AS TemplateObject_ExField2, \r\n   ");
            viewString.Append("         T.IsPositionLocked AS TemplateObject_IsPositionLocked, \r\n            T.");
            viewString.Append("ColorHex AS TemplateObject_ColorHex, \r\n            T.CircleRadiusY AS TemplateOb");
            viewString.Append("ject_CircleRadiusY, \r\n            T.IsTextEditable AS TemplateObject_IsTextEdita");
            viewString.Append("ble, \r\n            T.QuickTextOrder AS TemplateObject_QuickTextOrder, \r\n        ");
            viewString.Append("    T.IsQuickText AS TemplateObject_IsQuickText, \r\n            T.CharSpacing AS ");
            viewString.Append("TemplateObject_CharSpacing, \r\n            T.watermarkText AS TemplateObject_wate");
            viewString.Append("rmarkText, \r\n            T.textStyles AS TemplateObject_textStyles, \r\n          ");
            viewString.Append("  T.AutoShrinkText AS TemplateObject_AutoShrinkText, \r\n            T.IsOverlayOb");
            viewString.Append("ject AS TemplateObject_IsOverlayObject, \r\n            T.ClippedInfo AS TemplateO");
            viewString.Append("bject_ClippedInfo, \r\n            True AS _from0\r\n        FROM BaseDbContext.Temp");
            viewString.Append("lateObjects AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateObject", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStateTax
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView62()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStateTax", @"
    SELECT VALUE -- Constructing ItemStateTax
        [DomainModels.Store.ItemStateTax](T1.ItemStateTax_ItemStateTaxId, T1.ItemStateTax_CountryId, T1.ItemStateTax_StateId, T1.ItemStateTax_TaxRate, T1.ItemStateTax_ItemId)
    FROM (
        SELECT 
            T.ItemStateTaxId AS ItemStateTax_ItemStateTaxId, 
            T.CountryId AS ItemStateTax_CountryId, 
            T.StateId AS ItemStateTax_StateId, 
            T.TaxRate AS ItemStateTax_TaxRate, 
            T.ItemId AS ItemStateTax_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemStateTaxes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategoryItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView63()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategoryItem", @"
    SELECT VALUE -- Constructing ProductCategoryItem
        [DomainModels.Store.ProductCategoryItem](T1.ProductCategoryItem_ProductCategoryItemId, T1.ProductCategoryItem_CategoryId, T1.ProductCategoryItem_ItemId)
    FROM (
        SELECT 
            T.ProductCategoryItemId AS ProductCategoryItem_ProductCategoryItemId, 
            T.CategoryId AS ProductCategoryItem_CategoryId, 
            T.ItemId AS ProductCategoryItem_ItemId, 
            True AS _from0
        FROM BaseDbContext.ProductCategoryItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateColorStyle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView64()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateColorStyle", @"
    SELECT VALUE -- Constructing TemplateColorStyle
        [DomainModels.Store.TemplateColorStyle](T1.TemplateColorStyle_PelleteId, T1.TemplateColorStyle_ProductId, T1.TemplateColorStyle_Name, T1.TemplateColorStyle_ColorC, T1.TemplateColorStyle_ColorM, T1.TemplateColorStyle_ColorY, T1.TemplateColorStyle_ColorK, T1.TemplateColorStyle_SpotColor, T1.TemplateColorStyle_IsSpotColor, T1.TemplateColorStyle_Field1, T1.TemplateColorStyle_ColorHex, T1.TemplateColorStyle_IsColorActive, T1.TemplateColorStyle_CustomerId)
    FROM (
        SELECT 
            T.PelleteId AS TemplateColorStyle_PelleteId, 
            T.ProductId AS TemplateColorStyle_ProductId, 
            T.Name AS TemplateColorStyle_Name, 
            T.ColorC AS TemplateColorStyle_ColorC, 
            T.ColorM AS TemplateColorStyle_ColorM, 
            T.ColorY AS TemplateColorStyle_ColorY, 
            T.ColorK AS TemplateColorStyle_ColorK, 
            T.SpotColor AS TemplateColorStyle_SpotColor, 
            T.IsSpotColor AS TemplateColorStyle_IsSpotColor, 
            T.Field1 AS TemplateColorStyle_Field1, 
            T.ColorHex AS TemplateColorStyle_ColorHex, 
            T.IsColorActive AS TemplateColorStyle_IsColorActive, 
            T.CustomerId AS TemplateColorStyle_CustomerId, 
            True AS _from0
        FROM BaseDbContext.TemplateColorStyles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateFont
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView65()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateFont", @"
    SELECT VALUE -- Constructing TemplateFont
        [DomainModels.Store.TemplateFont](T1.TemplateFont_ProductFontId, T1.TemplateFont_ProductId, T1.TemplateFont_FontName, T1.TemplateFont_FontDisplayName, T1.TemplateFont_FontFile, T1.TemplateFont_DisplayIndex, T1.TemplateFont_IsPrivateFont, T1.TemplateFont_IsEnable, T1.TemplateFont_FontBytes, T1.TemplateFont_FontPath, T1.TemplateFont_CustomerId)
    FROM (
        SELECT 
            T.ProductFontId AS TemplateFont_ProductFontId, 
            T.ProductId AS TemplateFont_ProductId, 
            T.FontName AS TemplateFont_FontName, 
            T.FontDisplayName AS TemplateFont_FontDisplayName, 
            T.FontFile AS TemplateFont_FontFile, 
            T.DisplayIndex AS TemplateFont_DisplayIndex, 
            T.IsPrivateFont AS TemplateFont_IsPrivateFont, 
            T.IsEnable AS TemplateFont_IsEnable, 
            T.FontBytes AS TemplateFont_FontBytes, 
            T.FontPath AS TemplateFont_FontPath, 
            T.CustomerId AS TemplateFont_CustomerId, 
            True AS _from0
        FROM BaseDbContext.TemplateFonts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView66()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9649);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.");
            viewString.Append("Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL, T1");
            viewString.Append(".Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Company_T");
            viewString.Append("ypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company_Acc");
            viewString.Append("ountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsCusto");
            viewString.Append("mer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLastUpda");
            viewString.Append("tedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedBy, T");
            viewString.Append("1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, T1.C");
            viewString.Append("ompany_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_IsGene");
            viewString.Append("ral, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.Comp");
            viewString.Append("any_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequired");
            viewString.Append(", T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTrackingPa");
            viewString.Append("th, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.Compa");
            viewString.Append("ny_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeaturedPr");
            viewString.Append("oducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseUsIco");
            viewString.Append("ns, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.Compa");
            viewString.Append("ny_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBroker");
            viewString.Append("Banners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, T1.C");
            viewString.Append("ompany_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline, T1.");
            viewString.Append("Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T1.Co");
            viewString.Append("mpany_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Company_Li");
            viewString.Append("nkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_isSho");
            viewString.Append("wGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company_Cor");
            viewString.Append("eCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSecondar");
            viewString.Append("yPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowRegis");
            viewString.Append("trationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstTime,");
            viewString.Append(" T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppId, T");
            viewString.Append("1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1");
            viewString.Append(".Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlaceOrde");
            viewString.Append("rWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, T1.C");
            viewString.Append("ompany_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerArtwor");
            viewString.Append("kOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_makeEmai");
            viewString.Append("lBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.Compa");
            viewString.Append("ny_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Producti");
            viewString.Append("onManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotificati");
            viewString.Append("onManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnChecko");
            viewString.Append("ut, T1.Company_DeliveryPickUpAddressId, T1.Company_TaxRate, T1.Company_IsDisplay");
            viewString.Append("DiscountVoucherCode, T1.Company_IsDisplayCorporateBinding, T1.Company_MapImageUr");
            viewString.Append("l, T1.Company_PickupAddressId, T1.Company_TaxLabel)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS");
            viewString.Append(" Company_AccountNumber, \r\n            T.Name AS Company_Name, \r\n            T.UR");
            viewString.Append("L AS Company_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n");
            viewString.Append("            T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Compa");
            viewString.Append("ny_Terms, \r\n            T.TypeId AS Company_TypeId, \r\n            T.DefaultNomin");
            viewString.Append("alCode AS Company_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Company");
            viewString.Append("_DefaultMarkUpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate, \r\n");
            viewString.Append("            T.AccountManagerId AS Company_AccountManagerId, \r\n            T.Stat");
            viewString.Append("us AS Company_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n      ");
            viewString.Append("      T.Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Company_");
            viewString.Append("NotesLastUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpd");
            viewString.Append("atedBy, \r\n            T.AccountStatusId AS Company_AccountStatusId, \r\n          ");
            viewString.Append("  T.IsDisabled AS Company_IsDisabled, \r\n            T.LockedBy AS Company_Locked");
            viewString.Append("By, \r\n            T.AccountBalance AS Company_AccountBalance, \r\n            T.Cr");
            viewString.Append("eationDate AS Company_CreationDate, \r\n            T.VATRegNumber AS Company_VATR");
            viewString.Append("egNumber, \r\n            T.VATRegReference AS Company_VATRegReference, \r\n        ");
            viewString.Append("    T.FlagId AS Company_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n  ");
            viewString.Append("          T.IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS Compa");
            viewString.Append("ny_SalesPerson, \r\n            T.Image AS Company_Image, \r\n            T.WebAcces");
            viewString.Append("sCode AS Company_WebAccessCode, \r\n            T.isArchived AS Company_isArchived");
            viewString.Append(", \r\n            T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, ");
            viewString.Append("\r\n            T.PONumberRequired AS Company_PONumberRequired, \r\n            T.Sh");
            viewString.Append("owPrices AS Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_Carrie");
            viewString.Append("rWebPath, \r\n            T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n");
            viewString.Append("            T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n    ");
            viewString.Append("        T.isDisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            T.is");
            viewString.Append("DisplayMenuBar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners AS ");
            viewString.Append("Company_isDisplayBanners, \r\n            T.isDisplayFeaturedProducts AS Company_i");
            viewString.Append("sDisplayFeaturedProducts, \r\n            T.isDisplayPromotionalProducts AS Compan");
            viewString.Append("y_isDisplayPromotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Compan");
            viewString.Append("y_isDisplayChooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company_isD");
            viewString.Append("isplaySecondaryPages, \r\n            T.isDisplaySiteFooter AS Company_isDisplaySi");
            viewString.Append("teFooter, \r\n            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n");
            viewString.Append("            T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.isDi");
            viewString.Append("splaylBrokerBanners AS Company_isDisplaylBrokerBanners, \r\n            T.isBroker");
            viewString.Append("CanLaminate AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRoundCorn");
            viewString.Append("er AS Company_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSameDay ");
            viewString.Append("AS Company_isBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPaymentOn");
            viewString.Append("line AS Company_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrderApp");
            viewString.Append("rovalRequired AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBroker");
            viewString.Append("PaymentRequired AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteLabel");
            viewString.Append(" AS Company_isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n  ");
            viewString.Append("          T.FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS C");
            viewString.Append("ompany_LinkedinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n    ");
            viewString.Append("        T.WebAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoog");
            viewString.Append("leMap AS Company_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isT");
            viewString.Append("extWatermark, \r\n            T.WatermarkText AS Company_WatermarkText, \r\n        ");
            viewString.Append("    T.CoreCustomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundI");
            viewString.Append("mage AS Company_StoreBackgroundImage, \r\n            T.isDisplayBrokerSecondaryPa");
            viewString.Append("ges AS Company_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS Com");
            viewString.Append("pany_PriceFlagId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n      ");
            viewString.Append("      T.isAllowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n    ");
            viewString.Append("        T.MarketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n        ");
            viewString.Append("    T.isLoginFirstTime AS Company_isLoginFirstTime, \r\n            T.facebookAppI");
            viewString.Append("d AS Company_facebookAppId, \r\n            T.facebookAppKey AS Company_facebookAp");
            viewString.Append("pKey, \r\n            T.twitterAppId AS Company_twitterAppId, \r\n            T.twit");
            viewString.Append("terAppKey AS Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Compan");
            viewString.Append("y_isStoreModePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n        ");
            viewString.Append("    T.TaxPercentageId AS Company_TaxPercentageId, \r\n            T.XeroAccessCode");
            viewString.Append(" AS Company_XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS ");
            viewString.Append("Company_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS ");
            viewString.Append("Company_CanUserEditProfile, \r\n            T.OrganisationId AS Company_Organisati");
            viewString.Append("onId, \r\n            T.includeEmailBrokerArtworkOrderReport AS Company_includeEma");
            viewString.Append("ilBrokerArtworkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS");
            viewString.Append(" Company_includeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerAr");
            viewString.Append("tworkOrderJobCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n          ");
            viewString.Append("  T.makeEmailBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtwork");
            viewString.Append("OrderProductionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAn");
            viewString.Append("dOrderManagerId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrd");
            viewString.Append("erManagerId2, \r\n            T.ProductionManagerId1 AS Company_ProductionManagerI");
            viewString.Append("d1, \r\n            T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n    ");
            viewString.Append("        T.StockNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n");
            viewString.Append("            T.StockNotificationManagerId2 AS Company_StockNotificationManagerId2");
            viewString.Append(", \r\n            T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            ");
            viewString.Append("T.IsDisplayDeliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n        ");
            viewString.Append("    T.DeliveryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            ");
            viewString.Append("T.TaxRate AS Company_TaxRate, \r\n            T.IsDisplayDiscountVoucherCode AS Co");
            viewString.Append("mpany_IsDisplayDiscountVoucherCode, \r\n            T.IsDisplayCorporateBinding AS");
            viewString.Append(" Company_IsDisplayCorporateBinding, \r\n            T.MapImageURL AS Company_MapIm");
            viewString.Append("ageUrl, \r\n            T.PickupAddressId AS Company_PickupAddressId, \r\n          ");
            viewString.Append("  T.TaxLabel AS Company_TaxLabel, \r\n            True AS _from0\r\n        FROM Dom");
            viewString.Append("ainModelsStoreContainer.Company AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView67()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgets", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgets
        [DomainModels.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidget AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgetParams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView68()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgetParams", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParams
        [DomainModels.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidgetParam AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBanners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView69()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBanners", @"
    SELECT VALUE -- Constructing CompanyBanners
        [DomainModels.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBanner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBannerSets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView70()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBannerSets", @"
    SELECT VALUE -- Constructing CompanyBannerSets
        [DomainModels.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBannerSet AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView71()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyDomains", @"
    SELECT VALUE -- Constructing CompanyDomains
        [DomainModels.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyDomain AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Organisations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView72()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2636);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisations\r\n        [DomainModels.Organisa");
            viewString.Append("tion](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.Organ");
            viewString.Append("isation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Organis");
            viewString.Append("ation_City, T1.Organisation_ZipCode, T1.Organisation_Tel, T1.Organisation_Fax, T");
            viewString.Append("1.Organisation_Mobile, T1.Organisation_Email, T1.Organisation_URL, T1.Organisati");
            viewString.Append("on_WebsiteLogo, T1.Organisation_MISLogo, T1.Organisation_TaxRegistrationNo, T1.O");
            viewString.Append("rganisation_LicenseLevel, T1.Organisation_CustomerAccountNumber, T1.Organisation");
            viewString.Append("_SmtpServer, T1.Organisation_SmtpUserName, T1.Organisation_SmtpPassword, T1.Orga");
            viewString.Append("nisation_VATRegNumber, T1.Organisation_SystemLengthUnit, T1.Organisation_SystemW");
            viewString.Append("eightUnit, T1.Organisation_CurrencyId, T1.Organisation_LanguageId, T1.Organisati");
            viewString.Append("on_UserDomainKey, T1.Organisation_MISLogoStreamId, T1.Organisation_StateId, T1.O");
            viewString.Append("rganisation_CountryId)\r\n    FROM (\r\n        SELECT \r\n            T.OrganisationI");
            viewString.Append("d AS Organisation_OrganisationId, \r\n            T.OrganisationName AS Organisati");
            viewString.Append("on_OrganisationName, \r\n            T.Address1 AS Organisation_Address1, \r\n      ");
            viewString.Append("      T.Address2 AS Organisation_Address2, \r\n            T.Address3 AS Organisat");
            viewString.Append("ion_Address3, \r\n            T.City AS Organisation_City, \r\n            T.ZipCode");
            viewString.Append(" AS Organisation_ZipCode, \r\n            T.Tel AS Organisation_Tel, \r\n           ");
            viewString.Append(" T.Fax AS Organisation_Fax, \r\n            T.Mobile AS Organisation_Mobile, \r\n   ");
            viewString.Append("         T.Email AS Organisation_Email, \r\n            T.URL AS Organisation_URL,");
            viewString.Append(" \r\n            T.WebsiteLogo AS Organisation_WebsiteLogo, \r\n            T.MISLog");
            viewString.Append("o AS Organisation_MISLogo, \r\n            T.TaxRegistrationNo AS Organisation_Tax");
            viewString.Append("RegistrationNo, \r\n            T.LicenseLevel AS Organisation_LicenseLevel, \r\n   ");
            viewString.Append("         T.CustomerAccountNumber AS Organisation_CustomerAccountNumber, \r\n      ");
            viewString.Append("      T.SmtpServer AS Organisation_SmtpServer, \r\n            T.SmtpUserName AS O");
            viewString.Append("rganisation_SmtpUserName, \r\n            T.SmtpPassword AS Organisation_SmtpPassw");
            viewString.Append("ord, \r\n            T.VATRegNumber AS Organisation_VATRegNumber, \r\n            T.");
            viewString.Append("SystemLengthUnit AS Organisation_SystemLengthUnit, \r\n            T.SystemWeightU");
            viewString.Append("nit AS Organisation_SystemWeightUnit, \r\n            T.CurrencyId AS Organisation");
            viewString.Append("_CurrencyId, \r\n            T.LanguageId AS Organisation_LanguageId, \r\n          ");
            viewString.Append("  T.UserDomainKey AS Organisation_UserDomainKey, \r\n            T.MISLogoStreamId");
            viewString.Append(" AS Organisation_MISLogoStreamId, \r\n            T.StateId AS Organisation_StateI");
            viewString.Append("d, \r\n            T.CountryId AS Organisation_CountryId, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM DomainModelsStoreContainer.Organisation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Organisations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView73()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6019);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategories\r\n        [DomainModels.Prod");
            viewString.Append("uctCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_CategoryNa");
            viewString.Append("me, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.ProductC");
            viewString.Append("ategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_CompanyId,");
            viewString.Append(" T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Produc");
            viewString.Append("tCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_isEnab");
            viewString.Append("led, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMapped");
            viewString.Append("CategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished, T1.");
            viewString.Append("ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCatego");
            viewString.Append("ry_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCategory_i");
            viewString.Append("sLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRestrict");
            viewString.Append("ions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction, T1");
            viewString.Append(".ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Produc");
            viewString.Append("tCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleFacto");
            viewString.Append("r, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeywords, T");
            viewString.Append("1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductCateg");
            viewString.Append("ory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCatego");
            viewString.Append("ry_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1.Pro");
            viewString.Append("ductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCategor");
            viewString.Append("y_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCategory_");
            viewString.Append("DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory_Pro");
            viewString.Append("ductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCatego");
            viewString.Append("ry_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCategory_");
            viewString.Append("IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsShowSt");
            viewString.Append("ockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_IsSho");
            viewString.Append("wProductShortDescription, T1.ProductCategory_ImageStreamId, T1.ProductCategory_T");
            viewString.Append("humbnailStreamId)\r\n    FROM (\r\n        SELECT \r\n            T.ProductCategoryId ");
            viewString.Append("AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName AS ProductCat");
            viewString.Append("egory_CategoryName, \r\n            T.ContentType AS ProductCategory_ContentType, ");
            viewString.Append("\r\n            T.Description1 AS ProductCategory_Description1, \r\n            T.De");
            viewString.Append("scription2 AS ProductCategory_Description2, \r\n            T.LockedBy AS ProductC");
            viewString.Append("ategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_CompanyId, \r\n    ");
            viewString.Append("        T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n            T.");
            viewString.Append("DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImagePath AS Produ");
            viewString.Append("ctCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCategory_Thumbnail");
            viewString.Append("Path, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n            T.is");
            viewString.Append("MarketPlace AS ProductCategory_isMarketPlace, \r\n            T.TemplateDesignerMa");
            viewString.Append("ppedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryName, \r\n      ");
            viewString.Append("      T.isArchived AS ProductCategory_isArchived, \r\n            T.isPublished AS");
            viewString.Append(" ProductCategory_isPublished, \r\n            T.TrimmedWidth AS ProductCategory_Tr");
            viewString.Append("immedWidth, \r\n            T.TrimmedHeight AS ProductCategory_TrimmedHeight, \r\n  ");
            viewString.Append("          T.isColorImposition AS ProductCategory_isColorImposition, \r\n          ");
            viewString.Append("  T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n            T.isLi");
            viewString.Append("nkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.Sides AS Pro");
            viewString.Append("ductCategory_Sides, \r\n            T.ApplySizeRestrictions AS ProductCategory_App");
            viewString.Append("lySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategory_ApplyFoldL");
            viewString.Append("ines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestriction, \r\n  ");
            viewString.Append("          T.HeightRestriction AS ProductCategory_HeightRestriction, \r\n          ");
            viewString.Append("  T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            T.RegionId A");
            viewString.Append("S ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCategory_ZoomFa");
            viewString.Append("ctor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n            ");
            viewString.Append("T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, \r\n          ");
            viewString.Append("  T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.MetaDescriptio");
            viewString.Append("n AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS ProductCatego");
            viewString.Append("ry_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_OrganisationId, ");
            viewString.Append("\r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCategoryDisplayMod");
            viewString.Append("e1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCategoryDispla");
            viewString.Append("yMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory_SubCategory");
            viewString.Append("DisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_CategoryURLTe");
            viewString.Append("xt, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n            ");
            viewString.Append("T.ShortDescription AS ProductCategory_ShortDescription, \r\n            T.Secondar");
            viewString.Append("yDescription AS ProductCategory_SecondaryDescription, \r\n            T.DefaultSor");
            viewString.Append("tBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDisplayColumns AS ");
            viewString.Append("ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisplayRows AS P");
            viewString.Append("roductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeaturedproducts AS");
            viewString.Append(" ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAvailablity AS");
            viewString.Append(" ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoints AS Produc");
            viewString.Append("tCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS ProductCategory");
            viewString.Append("_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory_IsShowSaleP");
            viewString.Append("rice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowStockStatus, \r\n");
            viewString.Append("            T.IsShowProductDescription AS ProductCategory_IsShowProductDescripti");
            viewString.Append("on, \r\n            T.IsShowProductShortDescription AS ProductCategory_IsShowProdu");
            viewString.Append("ctShortDescription, \r\n            T.ImageStreamId AS ProductCategory_ImageStream");
            viewString.Append("Id, \r\n            T.ThumbnailStreamId AS ProductCategory_ThumbnailStreamId, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM DomainModelsStoreContainer.ProductCategor");
            viewString.Append("y AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategories", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView74()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Widget](T1.Widget_WidgetId, T1.Widget_WidgetCode, T1.Widget_WidgetName, T1.Widget_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widget_WidgetId, 
            T.WidgetCode AS Widget_WidgetCode, 
            T.WidgetName AS Widget_WidgetName, 
            T.WidgetControlName AS Widget_WidgetControlName, 
            True AS _from0
        FROM DomainModelsStoreContainer.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView75()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCategories", "\r\n    SELECT VALUE -- Constructing StockCategories\r\n        [DomainModels.StockCa" +
                    "tegory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory_Nam" +
                    "e, T1.StockCategory_Description, T1.StockCategory_Fixed, T1.StockCategory_ItemWe" +
                    "ight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.StockCate" +
                    "gory_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCoated" +
                    ", T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCategory_R" +
                    "ecLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Flag2, " +
                    "T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r\n   " +
                    " FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_CategoryId, " +
                    "\r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCategor" +
                    "y_Name, \r\n            T.Description AS StockCategory_Description, \r\n            " +
                    "T.fixed AS StockCategory_Fixed, \r\n            T.ItemWeight AS StockCategory_Item" +
                    "Weight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n            T." +
                    "ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSize AS" +
                    " StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategory_It" +
                    "emCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n        " +
                    "    T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge AS " +
                    "StockCategory_ItemCharge, \r\n            T.recLock AS StockCategory_RecLock, \r\n  " +
                    "          T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCategory" +
                    "_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 AS S" +
                    "tockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n            " +
                    "T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n        FR" +
                    "OM DomainModelsStoreContainer.StockCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockSubCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView76()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockSubCategories", @"
    SELECT VALUE -- Constructing StockSubCategories
        [DomainModels.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockSubCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView77()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2777);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPages\r\n        [DomainModels.CmsPage](T1.C");
            viewString.Append("msPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTitle, ");
            viewString.Append("T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, T1.[C");
            viewString.Append("msPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsPage.M");
            viewString.Append("eta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPage.Me");
            viewString.Append("ta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateContent");
            viewString.Append("], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent], T1.");
            viewString.Append("[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.CmsPage_");
            viewString.Append("CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.CmsPag");
            viewString.Append("e_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_PageK");
            viewString.Append("eywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, T1.Cm");
            viewString.Append("sPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS CmsP");
            viewString.Append("age_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.PageTi");
            viewString.Append("tle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r\n    ");
            viewString.Append("        T.description AS CmsPage_description, \r\n            T.PageRelativePath A");
            viewString.Append("S CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder, \r\n  ");
            viewString.Append("          T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n            ");
            viewString.Append("T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n            T.");
            viewString.Append("Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r\n    ");
            viewString.Append("        T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n            ");
            viewString.Append("T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_Autho");
            viewString.Append("rContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent AS [C");
            viewString.Append("msPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.Meta_");
            viewString.Append("LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta_Revi");
            viewString.Append("sitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n        ");
            viewString.Append("    T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPage_isU");
            viewString.Append("serDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n            T.is");
            viewString.Append("PromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialOffer ");
            viewString.Append("AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r\n    ");
            viewString.Append("        T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.PageBann");
            viewString.Append("er AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywords, ");
            viewString.Append("\r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay AS Cms");
            viewString.Append("Page_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n            T.");
            viewString.Append("OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM DomainModelsStoreContainer.CmsPage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCostAndPrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView78()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCostAndPrices", @"
    SELECT VALUE -- Constructing StockCostAndPrices
        [DomainModels.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockCostAndPrice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView79()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5768);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItems\r\n        [DomainModels.StockItem](");
            viewString.Append("T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.Stock");
            viewString.Append("Item_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.StockIt");
            viewString.Append("em_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1.Stoc");
            viewString.Append("kItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T1.Sto");
            viewString.Append("ckItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.StockItem");
            viewString.Append("_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifiedBy, ");
            viewString.Append("T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.StockI");
            viewString.Append("tem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, T1.St");
            viewString.Append("ockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProcessing");
            viewString.Append("Charge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQtyRat");
            viewString.Append("e, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_LockedBy, ");
            viewString.Append("T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderDate, ");
            viewString.Append("T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.StockItem");
            viewString.Append("_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSizeSel");
            viewString.Append("ectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.StockIte");
            viewString.Append("m_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.StockItem");
            viewString.Append("_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.StockItem");
            viewString.Append("_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockItem_De");
            viewString.Append("partmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.StockIt");
            viewString.Append("em_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_InkStan");
            viewString.Append("dards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCode, T1");
            viewString.Append(".StockItem_OrganisationId, T1.StockItem_ThresholdLevel, T1.StockItem_ThresholdPr");
            viewString.Append("oductionQuantity, T1.StockItem_isAllowBackOrder)\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.StockItemId AS StockItem_StockItemId, \r\n            T.ItemCode AS S");
            viewString.Append("tockItem_ItemCode, \r\n            T.ItemName AS StockItem_ItemName, \r\n           ");
            viewString.Append(" T.AlternateName AS StockItem_AlternateName, \r\n            T.ItemWeight AS Stock");
            viewString.Append("Item_ItemWeight, \r\n            T.ItemColour AS StockItem_ItemColour, \r\n         ");
            viewString.Append("   T.ItemSizeCustom AS StockItem_ItemSizeCustom, \r\n            T.ItemSizeId AS S");
            viewString.Append("tockItem_ItemSizeId, \r\n            T.ItemSizeHeight AS StockItem_ItemSizeHeight,");
            viewString.Append(" \r\n            T.ItemSizeWidth AS StockItem_ItemSizeWidth, \r\n            T.ItemS");
            viewString.Append("izeDim AS StockItem_ItemSizeDim, \r\n            T.ItemUnitSize AS StockItem_ItemU");
            viewString.Append("nitSize, \r\n            T.SupplierId AS StockItem_SupplierId, \r\n            T.Cos");
            viewString.Append("tPrice AS StockItem_CostPrice, \r\n            T.CategoryId AS StockItem_CategoryI");
            viewString.Append("d, \r\n            T.SubCategoryId AS StockItem_SubCategoryId, \r\n            T.Las");
            viewString.Append("tModifiedDateTime AS StockItem_LastModifiedDateTime, \r\n            T.LastModifie");
            viewString.Append("dBy AS StockItem_LastModifiedBy, \r\n            T.StockLevel AS StockItem_StockLe");
            viewString.Append("vel, \r\n            T.PackageQty AS StockItem_PackageQty, \r\n            T.Status ");
            viewString.Append("AS StockItem_Status, \r\n            T.ReOrderLevel AS StockItem_ReOrderLevel, \r\n ");
            viewString.Append("           T.StockLocation AS StockItem_StockLocation, \r\n            T.ItemCoate");
            viewString.Append("dType AS StockItem_ItemCoatedType, \r\n            T.ItemExposure AS StockItem_Ite");
            viewString.Append("mExposure, \r\n            T.ItemExposureTime AS StockItem_ItemExposureTime, \r\n   ");
            viewString.Append("         T.ItemProcessingCharge AS StockItem_ItemProcessingCharge, \r\n           ");
            viewString.Append(" T.ItemType AS StockItem_ItemType, \r\n            T.StockCreated AS StockItem_Sto");
            viewString.Append("ckCreated, \r\n            T.PerQtyRate AS StockItem_PerQtyRate, \r\n            T.P");
            viewString.Append("erQtyQty AS StockItem_PerQtyQty, \r\n            T.ItemDescription AS StockItem_It");
            viewString.Append("emDescription, \r\n            T.LockedBy AS StockItem_LockedBy, \r\n            T.R");
            viewString.Append("eorderQty AS StockItem_ReorderQty, \r\n            T.LastOrderQty AS StockItem_Las");
            viewString.Append("tOrderQty, \r\n            T.LastOrderDate AS StockItem_LastOrderDate, \r\n         ");
            viewString.Append("   T.inStock AS StockItem_inStock, \r\n            T.onOrder AS StockItem_onOrder,");
            viewString.Append(" \r\n            T.Allocated AS StockItem_Allocated, \r\n            T.TaxID AS Stoc");
            viewString.Append("kItem_TaxID, \r\n            T.unitRate AS StockItem_unitRate, \r\n            T.Ite");
            viewString.Append("mCoated AS StockItem_ItemCoated, \r\n            T.ItemSizeSelectedUnit AS StockIt");
            viewString.Append("em_ItemSizeSelectedUnit, \r\n            T.ItemWeightSelectedUnit AS StockItem_Ite");
            viewString.Append("mWeightSelectedUnit, \r\n            T.FlagID AS StockItem_FlagID, \r\n            T");
            viewString.Append(".InkAbsorption AS StockItem_InkAbsorption, \r\n            T.WashupCounter AS Stoc");
            viewString.Append("kItem_WashupCounter, \r\n            T.InkYield AS StockItem_InkYield, \r\n         ");
            viewString.Append("   T.PaperBasicAreaId AS StockItem_PaperBasicAreaId, \r\n            T.PaperType A");
            viewString.Append("S StockItem_PaperType, \r\n            T.PerQtyType AS StockItem_PerQtyType, \r\n   ");
            viewString.Append("         T.RollWidth AS StockItem_RollWidth, \r\n            T.RollLength AS Stock");
            viewString.Append("Item_RollLength, \r\n            T.RollStandards AS StockItem_RollStandards, \r\n   ");
            viewString.Append("         T.DepartmentId AS StockItem_DepartmentId, \r\n            T.InkYieldStand");
            viewString.Append("ards AS StockItem_InkYieldStandards, \r\n            T.PerQtyPrice AS StockItem_Pe");
            viewString.Append("rQtyPrice, \r\n            T.PackPrice AS StockItem_PackPrice, \r\n            T.Reg");
            viewString.Append("ion AS StockItem_Region, \r\n            T.isDisabled AS StockItem_isDisabled, \r\n ");
            viewString.Append("           T.InkStandards AS StockItem_InkStandards, \r\n            T.BarCode AS ");
            viewString.Append("StockItem_BarCode, \r\n            T.Image AS StockItem_Image, \r\n            T.Xer");
            viewString.Append("oAccessCode AS StockItem_XeroAccessCode, \r\n            T.OrganisationId AS Stock");
            viewString.Append("Item_OrganisationId, \r\n            T.ThresholdLevel AS StockItem_ThresholdLevel,");
            viewString.Append(" \r\n            T.ThresholdProductionQuantity AS StockItem_ThresholdProductionQua");
            viewString.Append("ntity, \r\n            T.isAllowBackOrder AS StockItem_isAllowBackOrder, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM DomainModelsStoreContainer.StockItem AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockItems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PageCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView80()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PageCategories", @"
    SELECT VALUE -- Constructing PageCategories
        [DomainModels.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM DomainModelsStoreContainer.PageCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView81()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7963);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CompanyContacts\r\n        [DomainModels.Compan");
            viewString.Append("yContact](T1.CompanyContact_ContactId, T1.CompanyContact_AddressId, T1.CompanyCo");
            viewString.Append("ntact_CompanyId, T1.CompanyContact_FirstName, T1.CompanyContact_MiddleName, T1.C");
            viewString.Append("ompanyContact_LastName, T1.CompanyContact_Title, T1.CompanyContact_HomeTel1, T1.");
            viewString.Append("CompanyContact_HomeTel2, T1.CompanyContact_HomeExtension1, T1.CompanyContact_Hom");
            viewString.Append("eExtension2, T1.CompanyContact_Mobile, T1.CompanyContact_Email, T1.CompanyContac");
            viewString.Append("t_FAX, T1.CompanyContact_JobTitle, T1.CompanyContact_DOB, T1.CompanyContact_Note");
            viewString.Append("s, T1.CompanyContact_IsDefaultContact, T1.CompanyContact_HomeAddress1, T1.Compan");
            viewString.Append("yContact_HomeAddress2, T1.CompanyContact_HomeCity, T1.CompanyContact_HomeState, ");
            viewString.Append("T1.CompanyContact_HomePostCode, T1.CompanyContact_HomeCountry, T1.CompanyContact");
            viewString.Append("_SecretQuestion, T1.CompanyContact_SecretAnswer, T1.CompanyContact_Password, T1.");
            viewString.Append("CompanyContact_URL, T1.CompanyContact_IsEmailSubscription, T1.CompanyContact_IsN");
            viewString.Append("ewsLetterSubscription, T1.CompanyContact_image, T1.CompanyContact_quickFullName,");
            viewString.Append(" T1.CompanyContact_quickTitle, T1.CompanyContact_quickCompanyName, T1.CompanyCon");
            viewString.Append("tact_quickAddress1, T1.CompanyContact_quickAddress2, T1.CompanyContact_quickAddr");
            viewString.Append("ess3, T1.CompanyContact_quickPhone, T1.CompanyContact_quickFax, T1.CompanyContac");
            viewString.Append("t_quickEmail, T1.CompanyContact_quickWebsite, T1.CompanyContact_quickCompMessage");
            viewString.Append(", T1.CompanyContact_QuestionId, T1.CompanyContact_IsApprover, T1.CompanyContact_");
            viewString.Append("isWebAccess, T1.CompanyContact_isPlaceOrder, T1.CompanyContact_CreditLimit, T1.C");
            viewString.Append("ompanyContact_isArchived, T1.CompanyContact_ContactRoleId, T1.CompanyContact_Ter");
            viewString.Append("ritoryId, T1.CompanyContact_ClaimIdentifer, T1.CompanyContact_AuthentifiedBy, T1");
            viewString.Append(".CompanyContact_IsPayByPersonalCreditCard, T1.CompanyContact_IsPricingshown, T1.");
            viewString.Append("CompanyContact_SkypeId, T1.CompanyContact_LinkedinURL, T1.CompanyContact_Faceboo");
            viewString.Append("kURL, T1.CompanyContact_TwitterURL, T1.CompanyContact_authenticationToken, T1.Co");
            viewString.Append("mpanyContact_twitterScreenName, T1.CompanyContact_ShippingAddressId, T1.CompanyC");
            viewString.Append("ontact_isUserLoginFirstTime, T1.CompanyContact_quickMobileNumber, T1.CompanyCont");
            viewString.Append("act_quickTwitterId, T1.CompanyContact_quickFacebookId, T1.CompanyContact_quickLi");
            viewString.Append("nkedInId, T1.CompanyContact_quickOtherId, T1.CompanyContact_POBoxAddress, T1.Com");
            viewString.Append("panyContact_CorporateUnit, T1.CompanyContact_OfficeTradingName, T1.CompanyContac");
            viewString.Append("t_ContractorName, T1.CompanyContact_BPayCRN, T1.CompanyContact_ABN, T1.CompanyCo");
            viewString.Append("ntact_ACN, T1.CompanyContact_AdditionalField1, T1.CompanyContact_AdditionalField");
            viewString.Append("2, T1.CompanyContact_AdditionalField3, T1.CompanyContact_AdditionalField4, T1.Co");
            viewString.Append("mpanyContact_AdditionalField5, T1.CompanyContact_canUserPlaceOrderWithoutApprova");
            viewString.Append("l, T1.CompanyContact_CanUserEditProfile, T1.CompanyContact_canPlaceDirectOrder, ");
            viewString.Append("T1.CompanyContact_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.Co");
            viewString.Append("ntactId AS CompanyContact_ContactId, \r\n            T.AddressId AS CompanyContact");
            viewString.Append("_AddressId, \r\n            T.CompanyId AS CompanyContact_CompanyId, \r\n           ");
            viewString.Append(" T.FirstName AS CompanyContact_FirstName, \r\n            T.MiddleName AS CompanyC");
            viewString.Append("ontact_MiddleName, \r\n            T.LastName AS CompanyContact_LastName, \r\n      ");
            viewString.Append("      T.Title AS CompanyContact_Title, \r\n            T.HomeTel1 AS CompanyContac");
            viewString.Append("t_HomeTel1, \r\n            T.HomeTel2 AS CompanyContact_HomeTel2, \r\n            T");
            viewString.Append(".HomeExtension1 AS CompanyContact_HomeExtension1, \r\n            T.HomeExtension2");
            viewString.Append(" AS CompanyContact_HomeExtension2, \r\n            T.Mobile AS CompanyContact_Mobi");
            viewString.Append("le, \r\n            T.Email AS CompanyContact_Email, \r\n            T.FAX AS Compan");
            viewString.Append("yContact_FAX, \r\n            T.JobTitle AS CompanyContact_JobTitle, \r\n           ");
            viewString.Append(" T.DOB AS CompanyContact_DOB, \r\n            T.Notes AS CompanyContact_Notes, \r\n ");
            viewString.Append("           T.IsDefaultContact AS CompanyContact_IsDefaultContact, \r\n            ");
            viewString.Append("T.HomeAddress1 AS CompanyContact_HomeAddress1, \r\n            T.HomeAddress2 AS C");
            viewString.Append("ompanyContact_HomeAddress2, \r\n            T.HomeCity AS CompanyContact_HomeCity,");
            viewString.Append(" \r\n            T.HomeState AS CompanyContact_HomeState, \r\n            T.HomePost");
            viewString.Append("Code AS CompanyContact_HomePostCode, \r\n            T.HomeCountry AS CompanyConta");
            viewString.Append("ct_HomeCountry, \r\n            T.SecretQuestion AS CompanyContact_SecretQuestion,");
            viewString.Append(" \r\n            T.SecretAnswer AS CompanyContact_SecretAnswer, \r\n            T.Pa");
            viewString.Append("ssword AS CompanyContact_Password, \r\n            T.URL AS CompanyContact_URL, \r\n");
            viewString.Append("            T.IsEmailSubscription AS CompanyContact_IsEmailSubscription, \r\n     ");
            viewString.Append("       T.IsNewsLetterSubscription AS CompanyContact_IsNewsLetterSubscription, \r\n");
            viewString.Append("            T.image AS CompanyContact_image, \r\n            T.quickFullName AS Co");
            viewString.Append("mpanyContact_quickFullName, \r\n            T.quickTitle AS CompanyContact_quickTi");
            viewString.Append("tle, \r\n            T.quickCompanyName AS CompanyContact_quickCompanyName, \r\n    ");
            viewString.Append("        T.quickAddress1 AS CompanyContact_quickAddress1, \r\n            T.quickAd");
            viewString.Append("dress2 AS CompanyContact_quickAddress2, \r\n            T.quickAddress3 AS Company");
            viewString.Append("Contact_quickAddress3, \r\n            T.quickPhone AS CompanyContact_quickPhone, ");
            viewString.Append("\r\n            T.quickFax AS CompanyContact_quickFax, \r\n            T.quickEmail ");
            viewString.Append("AS CompanyContact_quickEmail, \r\n            T.quickWebsite AS CompanyContact_qui");
            viewString.Append("ckWebsite, \r\n            T.quickCompMessage AS CompanyContact_quickCompMessage, ");
            viewString.Append("\r\n            T.QuestionId AS CompanyContact_QuestionId, \r\n            T.IsAppro");
            viewString.Append("ver AS CompanyContact_IsApprover, \r\n            T.isWebAccess AS CompanyContact_");
            viewString.Append("isWebAccess, \r\n            T.isPlaceOrder AS CompanyContact_isPlaceOrder, \r\n    ");
            viewString.Append("        T.CreditLimit AS CompanyContact_CreditLimit, \r\n            T.isArchived ");
            viewString.Append("AS CompanyContact_isArchived, \r\n            T.ContactRoleId AS CompanyContact_Co");
            viewString.Append("ntactRoleId, \r\n            T.TerritoryId AS CompanyContact_TerritoryId, \r\n      ");
            viewString.Append("      T.ClaimIdentifer AS CompanyContact_ClaimIdentifer, \r\n            T.Authent");
            viewString.Append("ifiedBy AS CompanyContact_AuthentifiedBy, \r\n            T.IsPayByPersonalCreditC");
            viewString.Append("ard AS CompanyContact_IsPayByPersonalCreditCard, \r\n            T.IsPricingshown ");
            viewString.Append("AS CompanyContact_IsPricingshown, \r\n            T.SkypeId AS CompanyContact_Skyp");
            viewString.Append("eId, \r\n            T.LinkedinURL AS CompanyContact_LinkedinURL, \r\n            T.");
            viewString.Append("FacebookURL AS CompanyContact_FacebookURL, \r\n            T.TwitterURL AS Company");
            viewString.Append("Contact_TwitterURL, \r\n            T.authenticationToken AS CompanyContact_authen");
            viewString.Append("ticationToken, \r\n            T.twitterScreenName AS CompanyContact_twitterScreen");
            viewString.Append("Name, \r\n            T.ShippingAddressId AS CompanyContact_ShippingAddressId, \r\n ");
            viewString.Append("           T.isUserLoginFirstTime AS CompanyContact_isUserLoginFirstTime, \r\n    ");
            viewString.Append("        T.quickMobileNumber AS CompanyContact_quickMobileNumber, \r\n            T");
            viewString.Append(".quickTwitterId AS CompanyContact_quickTwitterId, \r\n            T.quickFacebookI");
            viewString.Append("d AS CompanyContact_quickFacebookId, \r\n            T.quickLinkedInId AS CompanyC");
            viewString.Append("ontact_quickLinkedInId, \r\n            T.quickOtherId AS CompanyContact_quickOthe");
            viewString.Append("rId, \r\n            T.POBoxAddress AS CompanyContact_POBoxAddress, \r\n            ");
            viewString.Append("T.CorporateUnit AS CompanyContact_CorporateUnit, \r\n            T.OfficeTradingNa");
            viewString.Append("me AS CompanyContact_OfficeTradingName, \r\n            T.ContractorName AS Compan");
            viewString.Append("yContact_ContractorName, \r\n            T.BPayCRN AS CompanyContact_BPayCRN, \r\n  ");
            viewString.Append("          T.ABN AS CompanyContact_ABN, \r\n            T.ACN AS CompanyContact_ACN");
            viewString.Append(", \r\n            T.AdditionalField1 AS CompanyContact_AdditionalField1, \r\n       ");
            viewString.Append("     T.AdditionalField2 AS CompanyContact_AdditionalField2, \r\n            T.Addi");
            viewString.Append("tionalField3 AS CompanyContact_AdditionalField3, \r\n            T.AdditionalField");
            viewString.Append("4 AS CompanyContact_AdditionalField4, \r\n            T.AdditionalField5 AS Compan");
            viewString.Append("yContact_AdditionalField5, \r\n            T.canUserPlaceOrderWithoutApproval AS C");
            viewString.Append("ompanyContact_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfi");
            viewString.Append("le AS CompanyContact_CanUserEditProfile, \r\n            T.canPlaceDirectOrder AS ");
            viewString.Append("CompanyContact_canPlaceDirectOrder, \r\n            T.OrganisationId AS CompanyCon");
            viewString.Append("tact_OrganisationId, \r\n            True AS _from0\r\n        FROM DomainModelsStor");
            viewString.Append("eContainer.CompanyContact AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyContacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyContactRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView82()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyContactRoles", @"
    SELECT VALUE -- Constructing CompanyContactRoles
        [DomainModels.CompanyContactRole](T1.CompanyContactRole_ContactRoleId, T1.CompanyContactRole_ContactRoleName)
    FROM (
        SELECT 
            T.ContactRoleId AS CompanyContactRole_ContactRoleId, 
            T.ContactRoleName AS CompanyContactRole_ContactRoleName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyContactRole AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView83()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyTerritories", @"
    SELECT VALUE -- Constructing CompanyTerritories
        [DomainModels.CompanyTerritory](T1.CompanyTerritory_TerritoryId, T1.CompanyTerritory_TerritoryName, T1.CompanyTerritory_CompanyId, T1.CompanyTerritory_TerritoryCode, T1.CompanyTerritory_isDefault)
    FROM (
        SELECT 
            T.TerritoryId AS CompanyTerritory_TerritoryId, 
            T.TerritoryName AS CompanyTerritory_TerritoryName, 
            T.CompanyId AS CompanyTerritory_CompanyId, 
            T.TerritoryCode AS CompanyTerritory_TerritoryCode, 
            T.isDefault AS CompanyTerritory_isDefault, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyTerritory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView84()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyTypes", @"
    SELECT VALUE -- Constructing CompanyTypes
        [DomainModels.CompanyType](T1.CompanyType_TypeId, T1.CompanyType_IsFixed, T1.CompanyType_TypeName)
    FROM (
        SELECT 
            T.TypeId AS CompanyType_TypeId, 
            T.IsFixed AS CompanyType_IsFixed, 
            T.TypeName AS CompanyType_TypeName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView85()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(12364);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CostCentres\r\n        [DomainModels.CostCentre");
            viewString.Append("](T1.CostCentre_CostCentreId, T1.CostCentre_Name, T1.CostCentre_Description, T1.");
            viewString.Append("CostCentre_Type, T1.CostCentre_CreatedBy, T1.CostCentre_LockedBy, T1.CostCentre_");
            viewString.Append("LastModifiedBy, T1.CostCentre_MinimumCost, T1.CostCentre_SetupCost, T1.CostCentr");
            viewString.Append("e_SetupTime, T1.CostCentre_DefaultVA, T1.CostCentre_DefaultVAId, T1.CostCentre_O");
            viewString.Append("verHeadRate, T1.CostCentre_HourlyCharge, T1.CostCentre_CostPerThousand, T1.CostC");
            viewString.Append("entre_CreationDate, T1.CostCentre_LastModifiedDate, T1.CostCentre_PreferredSuppl");
            viewString.Append("ierId, T1.CostCentre_CodeFileName, T1.CostCentre_nominalCode, T1.CostCentre_Comp");
            viewString.Append("letionTime, T1.CostCentre_HeaderCode, T1.CostCentre_MiddleCode, T1.CostCentre_Fo");
            viewString.Append("oterCode, T1.CostCentre_strCostPlantParsed, T1.CostCentre_strCostPlantUnParsed, ");
            viewString.Append("T1.CostCentre_strCostLabourParsed, T1.CostCentre_strCostLabourUnParsed, T1.CostC");
            viewString.Append("entre_strCostMaterialParsed, T1.CostCentre_strCostMaterialUnParsed, T1.CostCentr");
            viewString.Append("e_strPricePlantParsed, T1.CostCentre_strPricePlantUnParsed, T1.CostCentre_strPri");
            viewString.Append("ceLabourParsed, T1.CostCentre_strPriceLabourUnParsed, T1.CostCentre_strPriceMate");
            viewString.Append("rialParsed, T1.CostCentre_strPriceMaterialUnParsed, T1.CostCentre_strActualCostP");
            viewString.Append("lantParsed, T1.CostCentre_strActualCostPlantUnParsed, T1.CostCentre_strActualCos");
            viewString.Append("tLabourParsed, T1.CostCentre_strActualCostLabourUnParsed, T1.CostCentre_strActua");
            viewString.Append("lCostMaterialParsed, T1.CostCentre_strActualCostMaterialUnParsed, T1.CostCentre_");
            viewString.Append("strTimeParsed, T1.CostCentre_strTimeUnParsed, T1.CostCentre_IsDisabled, T1.CostC");
            viewString.Append("entre_IsDirectCost, T1.CostCentre_SetupSpoilage, T1.CostCentre_RunningSpoilage, ");
            viewString.Append("T1.CostCentre_CalculationMethodType, T1.CostCentre_NoOfHours, T1.CostCentre_PerH");
            viewString.Append("ourCost, T1.CostCentre_PerHourPrice, T1.CostCentre_UnitQuantity, T1.CostCentre_Q");
            viewString.Append("uantitySourceType, T1.CostCentre_QuantityVariableId, T1.CostCentre_QuantityQuest");
            viewString.Append("ionString, T1.CostCentre_QuantityQuestionDefaultValue, T1.CostCentre_QuantityCal");
            viewString.Append("culationString, T1.CostCentre_CostPerUnitQuantity, T1.CostCentre_PricePerUnitQua");
            viewString.Append("ntity, T1.CostCentre_TimePerUnitQuantity, T1.CostCentre_TimeRunSpeed, T1.CostCen");
            viewString.Append("tre_TimeNoOfPasses, T1.CostCentre_TimeSourceType, T1.CostCentre_TimeVariableId, ");
            viewString.Append("T1.CostCentre_TimeQuestionString, T1.CostCentre_TimeQuestionDefaultValue, T1.Cos");
            viewString.Append("tCentre_TimeCalculationString, T1.CostCentre_Priority, T1.CostCentre_CostQuestio");
            viewString.Append("nString, T1.CostCentre_CostDefaultValue, T1.CostCentre_PriceQuestionString, T1.C");
            viewString.Append("ostCentre_PriceDefaultValue, T1.CostCentre_EstimatedTimeQuestionString, T1.CostC");
            viewString.Append("entre_EstimatedTimeDefaultValue, T1.CostCentre_Sequence, T1.CostCentre_CompleteC");
            viewString.Append("ode, T1.CostCentre_ItemDescription, T1.CostCentre_CompanyId, T1.CostCentre_Syste");
            viewString.Append("mTypeId, T1.CostCentre_FlagId, T1.CostCentre_IsScheduleable, T1.CostCentre_Syste");
            viewString.Append("mSiteId, T1.CostCentre_IsPrintOnJobCard, T1.CostCentre_WebStoreDesc, T1.CostCent");
            viewString.Append("re_isPublished, T1.CostCentre_EstimateProductionTime, T1.CostCentre_MainImageURL");
            viewString.Append(", T1.CostCentre_ThumbnailImageURL, T1.CostCentre_isOption1, T1.CostCentre_isOpti");
            viewString.Append("on2, T1.CostCentre_isOption3, T1.CostCentre_TextOption1, T1.CostCentre_TextOptio");
            viewString.Append("n2, T1.CostCentre_TextOption3, T1.CostCentre_CCIDOption1, T1.CostCentre_CCIDOpti");
            viewString.Append("on2, T1.CostCentre_CCIDOption3, T1.CostCentre_SetupCharge2, T1.CostCentre_SetupC");
            viewString.Append("harge3, T1.CostCentre_MinimumCost2, T1.CostCentre_MinimumCost3, T1.CostCentre_Pr");
            viewString.Append("icePerUnitQuantity2, T1.CostCentre_PricePerUnitQuantity3, T1.CostCentre_Quantity");
            viewString.Append("VariableID2, T1.CostCentre_QuantityVariableID3, T1.CostCentre_QuantitySourceType");
            viewString.Append("2, T1.CostCentre_QuantitySourceType3, T1.CostCentre_QuantityQuestionString2, T1.");
            viewString.Append("CostCentre_QuantityQuestionString3, T1.CostCentre_QuantityQuestionDefaultValue2,");
            viewString.Append(" T1.CostCentre_QuantityQuestionDefaultValue3, T1.CostCentre_DefaultVAId2, T1.Cos");
            viewString.Append("tCentre_DefaultVAId3, T1.CostCentre_IsPrintOnJobCard2, T1.CostCentre_IsPrintOnJo");
            viewString.Append("bCard3, T1.CostCentre_IsDirectCost2, T1.CostCentre_IsDirectCost3, T1.CostCentre_");
            viewString.Append("PreferredSupplierID2, T1.CostCentre_PreferredSupplierID3, T1.CostCentre_Estimate");
            viewString.Append("ProductionTime2, T1.CostCentre_EstimateProductionTime3, T1.CostCentre_DeliveryCh");
            viewString.Append("arges, T1.CostCentre_isFromMIS, T1.CostCentre_XeroAccessCode, T1.CostCentre_Orga");
            viewString.Append("nisationId)\r\n    FROM (\r\n        SELECT \r\n            T.CostCentreId AS CostCent");
            viewString.Append("re_CostCentreId, \r\n            T.Name AS CostCentre_Name, \r\n            T.Descri");
            viewString.Append("ption AS CostCentre_Description, \r\n            T.Type AS CostCentre_Type, \r\n    ");
            viewString.Append("        T.CreatedBy AS CostCentre_CreatedBy, \r\n            T.LockedBy AS CostCen");
            viewString.Append("tre_LockedBy, \r\n            T.LastModifiedBy AS CostCentre_LastModifiedBy, \r\n   ");
            viewString.Append("         T.MinimumCost AS CostCentre_MinimumCost, \r\n            T.SetupCost AS C");
            viewString.Append("ostCentre_SetupCost, \r\n            T.SetupTime AS CostCentre_SetupTime, \r\n      ");
            viewString.Append("      T.DefaultVA AS CostCentre_DefaultVA, \r\n            T.DefaultVAId AS CostCe");
            viewString.Append("ntre_DefaultVAId, \r\n            T.OverHeadRate AS CostCentre_OverHeadRate, \r\n   ");
            viewString.Append("         T.HourlyCharge AS CostCentre_HourlyCharge, \r\n            T.CostPerThous");
            viewString.Append("and AS CostCentre_CostPerThousand, \r\n            T.CreationDate AS CostCentre_Cr");
            viewString.Append("eationDate, \r\n            T.LastModifiedDate AS CostCentre_LastModifiedDate, \r\n ");
            viewString.Append("           T.PreferredSupplierId AS CostCentre_PreferredSupplierId, \r\n          ");
            viewString.Append("  T.CodeFileName AS CostCentre_CodeFileName, \r\n            T.nominalCode AS Cost");
            viewString.Append("Centre_nominalCode, \r\n            T.CompletionTime AS CostCentre_CompletionTime,");
            viewString.Append(" \r\n            T.HeaderCode AS CostCentre_HeaderCode, \r\n            T.MiddleCode");
            viewString.Append(" AS CostCentre_MiddleCode, \r\n            T.FooterCode AS CostCentre_FooterCode, ");
            viewString.Append("\r\n            T.strCostPlantParsed AS CostCentre_strCostPlantParsed, \r\n         ");
            viewString.Append("   T.strCostPlantUnParsed AS CostCentre_strCostPlantUnParsed, \r\n            T.st");
            viewString.Append("rCostLabourParsed AS CostCentre_strCostLabourParsed, \r\n            T.strCostLabo");
            viewString.Append("urUnParsed AS CostCentre_strCostLabourUnParsed, \r\n            T.strCostMaterialP");
            viewString.Append("arsed AS CostCentre_strCostMaterialParsed, \r\n            T.strCostMaterialUnPars");
            viewString.Append("ed AS CostCentre_strCostMaterialUnParsed, \r\n            T.strPricePlantParsed AS");
            viewString.Append(" CostCentre_strPricePlantParsed, \r\n            T.strPricePlantUnParsed AS CostCe");
            viewString.Append("ntre_strPricePlantUnParsed, \r\n            T.strPriceLabourParsed AS CostCentre_s");
            viewString.Append("trPriceLabourParsed, \r\n            T.strPriceLabourUnParsed AS CostCentre_strPri");
            viewString.Append("ceLabourUnParsed, \r\n            T.strPriceMaterialParsed AS CostCentre_strPriceM");
            viewString.Append("aterialParsed, \r\n            T.strPriceMaterialUnParsed AS CostCentre_strPriceMa");
            viewString.Append("terialUnParsed, \r\n            T.strActualCostPlantParsed AS CostCentre_strActual");
            viewString.Append("CostPlantParsed, \r\n            T.strActualCostPlantUnParsed AS CostCentre_strAct");
            viewString.Append("ualCostPlantUnParsed, \r\n            T.strActualCostLabourParsed AS CostCentre_st");
            viewString.Append("rActualCostLabourParsed, \r\n            T.strActualCostLabourUnParsed AS CostCent");
            viewString.Append("re_strActualCostLabourUnParsed, \r\n            T.strActualCostMaterialParsed AS C");
            viewString.Append("ostCentre_strActualCostMaterialParsed, \r\n            T.strActualCostMaterialUnPa");
            viewString.Append("rsed AS CostCentre_strActualCostMaterialUnParsed, \r\n            T.strTimeParsed ");
            viewString.Append("AS CostCentre_strTimeParsed, \r\n            T.strTimeUnParsed AS CostCentre_strTi");
            viewString.Append("meUnParsed, \r\n            T.IsDisabled AS CostCentre_IsDisabled, \r\n            T");
            viewString.Append(".IsDirectCost AS CostCentre_IsDirectCost, \r\n            T.SetupSpoilage AS CostC");
            viewString.Append("entre_SetupSpoilage, \r\n            T.RunningSpoilage AS CostCentre_RunningSpoila");
            viewString.Append("ge, \r\n            T.CalculationMethodType AS CostCentre_CalculationMethodType, \r");
            viewString.Append("\n            T.NoOfHours AS CostCentre_NoOfHours, \r\n            T.PerHourCost AS");
            viewString.Append(" CostCentre_PerHourCost, \r\n            T.PerHourPrice AS CostCentre_PerHourPrice");
            viewString.Append(", \r\n            T.UnitQuantity AS CostCentre_UnitQuantity, \r\n            T.Quant");
            viewString.Append("itySourceType AS CostCentre_QuantitySourceType, \r\n            T.QuantityVariable");
            viewString.Append("Id AS CostCentre_QuantityVariableId, \r\n            T.QuantityQuestionString AS C");
            viewString.Append("ostCentre_QuantityQuestionString, \r\n            T.QuantityQuestionDefaultValue A");
            viewString.Append("S CostCentre_QuantityQuestionDefaultValue, \r\n            T.QuantityCalculationSt");
            viewString.Append("ring AS CostCentre_QuantityCalculationString, \r\n            T.CostPerUnitQuantit");
            viewString.Append("y AS CostCentre_CostPerUnitQuantity, \r\n            T.PricePerUnitQuantity AS Cos");
            viewString.Append("tCentre_PricePerUnitQuantity, \r\n            T.TimePerUnitQuantity AS CostCentre_");
            viewString.Append("TimePerUnitQuantity, \r\n            T.TimeRunSpeed AS CostCentre_TimeRunSpeed, \r\n");
            viewString.Append("            T.TimeNoOfPasses AS CostCentre_TimeNoOfPasses, \r\n            T.TimeS");
            viewString.Append("ourceType AS CostCentre_TimeSourceType, \r\n            T.TimeVariableId AS CostCe");
            viewString.Append("ntre_TimeVariableId, \r\n            T.TimeQuestionString AS CostCentre_TimeQuesti");
            viewString.Append("onString, \r\n            T.TimeQuestionDefaultValue AS CostCentre_TimeQuestionDef");
            viewString.Append("aultValue, \r\n            T.TimeCalculationString AS CostCentre_TimeCalculationSt");
            viewString.Append("ring, \r\n            T.Priority AS CostCentre_Priority, \r\n            T.CostQuest");
            viewString.Append("ionString AS CostCentre_CostQuestionString, \r\n            T.CostDefaultValue AS ");
            viewString.Append("CostCentre_CostDefaultValue, \r\n            T.PriceQuestionString AS CostCentre_P");
            viewString.Append("riceQuestionString, \r\n            T.PriceDefaultValue AS CostCentre_PriceDefault");
            viewString.Append("Value, \r\n            T.EstimatedTimeQuestionString AS CostCentre_EstimatedTimeQu");
            viewString.Append("estionString, \r\n            T.EstimatedTimeDefaultValue AS CostCentre_EstimatedT");
            viewString.Append("imeDefaultValue, \r\n            T.Sequence AS CostCentre_Sequence, \r\n            ");
            viewString.Append("T.CompleteCode AS CostCentre_CompleteCode, \r\n            T.ItemDescription AS Co");
            viewString.Append("stCentre_ItemDescription, \r\n            T.CompanyId AS CostCentre_CompanyId, \r\n ");
            viewString.Append("           T.SystemTypeId AS CostCentre_SystemTypeId, \r\n            T.FlagId AS ");
            viewString.Append("CostCentre_FlagId, \r\n            T.IsScheduleable AS CostCentre_IsScheduleable, ");
            viewString.Append("\r\n            T.SystemSiteId AS CostCentre_SystemSiteId, \r\n            T.IsPrint");
            viewString.Append("OnJobCard AS CostCentre_IsPrintOnJobCard, \r\n            T.WebStoreDesc AS CostCe");
            viewString.Append("ntre_WebStoreDesc, \r\n            T.isPublished AS CostCentre_isPublished, \r\n    ");
            viewString.Append("        T.EstimateProductionTime AS CostCentre_EstimateProductionTime, \r\n       ");
            viewString.Append("     T.MainImageURL AS CostCentre_MainImageURL, \r\n            T.ThumbnailImageUR");
            viewString.Append("L AS CostCentre_ThumbnailImageURL, \r\n            T.isOption1 AS CostCentre_isOpt");
            viewString.Append("ion1, \r\n            T.isOption2 AS CostCentre_isOption2, \r\n            T.isOptio");
            viewString.Append("n3 AS CostCentre_isOption3, \r\n            T.TextOption1 AS CostCentre_TextOption");
            viewString.Append("1, \r\n            T.TextOption2 AS CostCentre_TextOption2, \r\n            T.TextOp");
            viewString.Append("tion3 AS CostCentre_TextOption3, \r\n            T.CCIDOption1 AS CostCentre_CCIDO");
            viewString.Append("ption1, \r\n            T.CCIDOption2 AS CostCentre_CCIDOption2, \r\n            T.C");
            viewString.Append("CIDOption3 AS CostCentre_CCIDOption3, \r\n            T.SetupCharge2 AS CostCentre");
            viewString.Append("_SetupCharge2, \r\n            T.SetupCharge3 AS CostCentre_SetupCharge3, \r\n      ");
            viewString.Append("      T.MinimumCost2 AS CostCentre_MinimumCost2, \r\n            T.MinimumCost3 AS");
            viewString.Append(" CostCentre_MinimumCost3, \r\n            T.PricePerUnitQuantity2 AS CostCentre_Pr");
            viewString.Append("icePerUnitQuantity2, \r\n            T.PricePerUnitQuantity3 AS CostCentre_PricePe");
            viewString.Append("rUnitQuantity3, \r\n            T.QuantityVariableID2 AS CostCentre_QuantityVariab");
            viewString.Append("leID2, \r\n            T.QuantityVariableID3 AS CostCentre_QuantityVariableID3, \r\n");
            viewString.Append("            T.QuantitySourceType2 AS CostCentre_QuantitySourceType2, \r\n         ");
            viewString.Append("   T.QuantitySourceType3 AS CostCentre_QuantitySourceType3, \r\n            T.Quan");
            viewString.Append("tityQuestionString2 AS CostCentre_QuantityQuestionString2, \r\n            T.Quant");
            viewString.Append("ityQuestionString3 AS CostCentre_QuantityQuestionString3, \r\n            T.Quanti");
            viewString.Append("tyQuestionDefaultValue2 AS CostCentre_QuantityQuestionDefaultValue2, \r\n         ");
            viewString.Append("   T.QuantityQuestionDefaultValue3 AS CostCentre_QuantityQuestionDefaultValue3, ");
            viewString.Append("\r\n            T.DefaultVAId2 AS CostCentre_DefaultVAId2, \r\n            T.Default");
            viewString.Append("VAId3 AS CostCentre_DefaultVAId3, \r\n            T.IsPrintOnJobCard2 AS CostCentr");
            viewString.Append("e_IsPrintOnJobCard2, \r\n            T.IsPrintOnJobCard3 AS CostCentre_IsPrintOnJo");
            viewString.Append("bCard3, \r\n            T.IsDirectCost2 AS CostCentre_IsDirectCost2, \r\n           ");
            viewString.Append(" T.IsDirectCost3 AS CostCentre_IsDirectCost3, \r\n            T.PreferredSupplierI");
            viewString.Append("D2 AS CostCentre_PreferredSupplierID2, \r\n            T.PreferredSupplierID3 AS C");
            viewString.Append("ostCentre_PreferredSupplierID3, \r\n            T.EstimateProductionTime2 AS CostC");
            viewString.Append("entre_EstimateProductionTime2, \r\n            T.EstimateProductionTime3 AS CostCe");
            viewString.Append("ntre_EstimateProductionTime3, \r\n            T.DeliveryCharges AS CostCentre_Deli");
            viewString.Append("veryCharges, \r\n            T.isFromMIS AS CostCentre_isFromMIS, \r\n            T.");
            viewString.Append("XeroAccessCode AS CostCentre_XeroAccessCode, \r\n            T.OrganisationId AS C");
            viewString.Append("ostCentre_OrganisationId, \r\n            True AS _from0\r\n        FROM DomainModel");
            viewString.Append("sStoreContainer.CostCentre AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentres", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemAttachments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView86()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemAttachments", "\r\n    SELECT VALUE -- Constructing ItemAttachments\r\n        [DomainModels.ItemAtt" +
                    "achment](T1.ItemAttachment_ItemAttachmentId, T1.ItemAttachment_FileTitle, T1.Ite" +
                    "mAttachment_isFromCustomer, T1.ItemAttachment_CompanyId, T1.ItemAttachment_Conta" +
                    "ctId, T1.ItemAttachment_SystemUserId, T1.ItemAttachment_UploadDate, T1.ItemAttac" +
                    "hment_UploadTime, T1.ItemAttachment_Version, T1.ItemAttachment_ItemId, T1.ItemAt" +
                    "tachment_Comments, T1.ItemAttachment_Type, T1.ItemAttachment_IsApproved, T1.Item" +
                    "Attachment_FileName, T1.ItemAttachment_FolderPath, T1.ItemAttachment_FileType, T" +
                    "1.ItemAttachment_ContentType, T1.ItemAttachment_Parent, T1.ItemAttachment_Approv" +
                    "eDate)\r\n    FROM (\r\n        SELECT \r\n            T.ItemAttachmentId AS ItemAttac" +
                    "hment_ItemAttachmentId, \r\n            T.FileTitle AS ItemAttachment_FileTitle, \r" +
                    "\n            T.isFromCustomer AS ItemAttachment_isFromCustomer, \r\n            T." +
                    "CompanyId AS ItemAttachment_CompanyId, \r\n            T.ContactId AS ItemAttachme" +
                    "nt_ContactId, \r\n            T.SystemUserId AS ItemAttachment_SystemUserId, \r\n   " +
                    "         T.UploadDate AS ItemAttachment_UploadDate, \r\n            T.UploadTime A" +
                    "S ItemAttachment_UploadTime, \r\n            T.Version AS ItemAttachment_Version, " +
                    "\r\n            T.ItemId AS ItemAttachment_ItemId, \r\n            T.Comments AS Ite" +
                    "mAttachment_Comments, \r\n            T.Type AS ItemAttachment_Type, \r\n           " +
                    " T.IsApproved AS ItemAttachment_IsApproved, \r\n            T.FileName AS ItemAtta" +
                    "chment_FileName, \r\n            T.FolderPath AS ItemAttachment_FolderPath, \r\n    " +
                    "        T.FileType AS ItemAttachment_FileType, \r\n            T.ContentType AS It" +
                    "emAttachment_ContentType, \r\n            T.Parent AS ItemAttachment_Parent, \r\n   " +
                    "         T.ApproveDate AS ItemAttachment_ApproveDate, \r\n            True AS _fro" +
                    "m0\r\n        FROM DomainModelsStoreContainer.ItemAttachment AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView87()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemImages", @"
    SELECT VALUE -- Constructing ItemImages
        [DomainModels.ItemImage](T1.ItemImage_ProductImageId, T1.ItemImage_ItemId, T1.ItemImage_ImageTitle, T1.ItemImage_ImageURL, T1.ItemImage_ImageType, T1.ItemImage_ImageName, T1.ItemImage_UploadDate)
    FROM (
        SELECT 
            T.ProductImageId AS ItemImage_ProductImageId, 
            T.ItemId AS ItemImage_ItemId, 
            T.ImageTitle AS ItemImage_ImageTitle, 
            T.ImageURL AS ItemImage_ImageURL, 
            T.ImageType AS ItemImage_ImageType, 
            T.ImageName AS ItemImage_ImageName, 
            T.UploadDate AS ItemImage_UploadDate, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemImage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemPriceMatrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView88()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2163);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemPriceMatrices\r\n        [DomainModels.Item");
            viewString.Append("PriceMatrix](T1.ItemPriceMatrix_PriceMatrixId, T1.ItemPriceMatrix_Quantity, T1.I");
            viewString.Append("temPriceMatrix_Price, T1.ItemPriceMatrix_ItemId, T1.ItemPriceMatrix_PricePaperTy");
            viewString.Append("pe1, T1.ItemPriceMatrix_PricePaperType2, T1.ItemPriceMatrix_PricePaperType3, T1.");
            viewString.Append("ItemPriceMatrix_QtyRangeFrom, T1.ItemPriceMatrix_QtyRangeTo, T1.ItemPriceMatrix_");
            viewString.Append("SupplierId, T1.ItemPriceMatrix_PriceStockType4, T1.ItemPriceMatrix_PriceStockTyp");
            viewString.Append("e5, T1.ItemPriceMatrix_PriceStockType6, T1.ItemPriceMatrix_PriceStockType7, T1.I");
            viewString.Append("temPriceMatrix_PriceStockType8, T1.ItemPriceMatrix_PriceStockType9, T1.ItemPrice");
            viewString.Append("Matrix_PriceStockType10, T1.ItemPriceMatrix_PriceStockType11, T1.ItemPriceMatrix");
            viewString.Append("_FlagId, T1.ItemPriceMatrix_SupplierSequence)\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.PriceMatrixId AS ItemPriceMatrix_PriceMatrixId, \r\n            T.Quanti");
            viewString.Append("ty AS ItemPriceMatrix_Quantity, \r\n            T.Price AS ItemPriceMatrix_Price, ");
            viewString.Append("\r\n            T.ItemId AS ItemPriceMatrix_ItemId, \r\n            T.PricePaperType");
            viewString.Append("1 AS ItemPriceMatrix_PricePaperType1, \r\n            T.PricePaperType2 AS ItemPri");
            viewString.Append("ceMatrix_PricePaperType2, \r\n            T.PricePaperType3 AS ItemPriceMatrix_Pri");
            viewString.Append("cePaperType3, \r\n            T.QtyRangeFrom AS ItemPriceMatrix_QtyRangeFrom, \r\n  ");
            viewString.Append("          T.QtyRangeTo AS ItemPriceMatrix_QtyRangeTo, \r\n            T.SupplierId");
            viewString.Append(" AS ItemPriceMatrix_SupplierId, \r\n            T.PriceStockType4 AS ItemPriceMatr");
            viewString.Append("ix_PriceStockType4, \r\n            T.PriceStockType5 AS ItemPriceMatrix_PriceStoc");
            viewString.Append("kType5, \r\n            T.PriceStockType6 AS ItemPriceMatrix_PriceStockType6, \r\n  ");
            viewString.Append("          T.PriceStockType7 AS ItemPriceMatrix_PriceStockType7, \r\n            T.");
            viewString.Append("PriceStockType8 AS ItemPriceMatrix_PriceStockType8, \r\n            T.PriceStockTy");
            viewString.Append("pe9 AS ItemPriceMatrix_PriceStockType9, \r\n            T.PriceStockType10 AS Item");
            viewString.Append("PriceMatrix_PriceStockType10, \r\n            T.PriceStockType11 AS ItemPriceMatri");
            viewString.Append("x_PriceStockType11, \r\n            T.FlagId AS ItemPriceMatrix_FlagId, \r\n        ");
            viewString.Append("    T.SupplierSequence AS ItemPriceMatrix_SupplierSequence, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM DomainModelsStoreContainer.ItemPriceMatrix AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemPriceMatrices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemRelatedItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView89()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemRelatedItems", @"
    SELECT VALUE -- Constructing ItemRelatedItems
        [DomainModels.ItemRelatedItem](T1.ItemRelatedItem_ItemId, T1.ItemRelatedItem_Id, T1.ItemRelatedItem_RelatedItemId)
    FROM (
        SELECT 
            T.ItemId AS ItemRelatedItem_ItemId, 
            T.Id AS ItemRelatedItem_Id, 
            T.RelatedItemId AS ItemRelatedItem_RelatedItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemRelatedItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Items
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView90()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(16848);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Items\r\n        [DomainModels.Item](T1.Item_It");
            viewString.Append("emId, T1.Item_ItemCode, T1.Item_EstimateId, T1.Item_InvoiceId, T1.Item_Title, T1");
            viewString.Append(".Item_Tax1, T1.Item_Tax2, T1.Item_Tax3, T1.Item_CreatedBy, T1.Item_StatusId, T1.");
            viewString.Append("Item_ItemCreationDateTime, T1.Item_ItemLastUpdateDateTime, T1.Item_IsMultipleQty");
            viewString.Append(", T1.Item_RunOnQty, T1.Item_RunonCostCentreProfit, T1.Item_RunonBaseCharge, T1.I");
            viewString.Append("tem_RunOnMarkUpId, T1.Item_RunonPercentageValue, T1.Item_RunOnMarkUpValue, T1.It");
            viewString.Append("em_RunOnNetTotal, T1.Item_Qty1, T1.Item_Qty2, T1.Item_Qty3, T1.Item_Qty1CostCent");
            viewString.Append("reProfit, T1.Item_Qty2CostCentreProfit, T1.Item_Qty3CostCentreProfit, T1.Item_Qt");
            viewString.Append("y1BaseCharge1, T1.Item_Qty2BaseCharge2, T1.Item_Qty3BaseCharge3, T1.Item_Qty1Mar");
            viewString.Append("kUpId1, T1.Item_Qty2MarkUpId2, T1.Item_Qty3MarkUpId3, T1.Item_Qty1MarkUpPercenta");
            viewString.Append("geValue, T1.Item_Qty2MarkUpPercentageValue, T1.Item_Qty3MarkUpPercentageValue, T");
            viewString.Append("1.Item_Qty1MarkUp1Value, T1.Item_Qty2MarkUp2Value, T1.Item_Qty3MarkUp3Value, T1.");
            viewString.Append("Item_Qty1NetTotal, T1.Item_Qty2NetTotal, T1.Item_Qty3NetTotal, T1.Item_Qty1Tax1V");
            viewString.Append("alue, T1.Item_Qty1Tax2Value, T1.Item_Qty1Tax3Value, T1.Item_Qty1GrossTotal, T1.I");
            viewString.Append("tem_Qty2Tax1Value, T1.Item_Qty2Tax2Value, T1.Item_Qty2Tax3Value, T1.Item_Qty2Gro");
            viewString.Append("ssTotal, T1.Item_Qty3Tax1Value, T1.Item_Qty3Tax2Value, T1.Item_Qty3Tax3Value, T1");
            viewString.Append(".Item_Qty3GrossTotal, T1.Item_IsDescriptionLocked, T1.Item_Qty1Title, T1.Item_Qt");
            viewString.Append("y2Title, T1.Item_Qty3Title, T1.Item_RunonTitle, T1.Item_AdditionalInformation, T");
            viewString.Append("1.Item_Qty2Description, T1.Item_Qty3Description, T1.Item_RunonDescription, T1.It");
            viewString.Append("em_EstimateDescriptionTitle1, T1.Item_EstimateDescriptionTitle2, T1.Item_Estimat");
            viewString.Append("eDescriptionTitle3, T1.Item_EstimateDescriptionTitle4, T1.Item_EstimateDescripti");
            viewString.Append("onTitle5, T1.Item_EstimateDescriptionTitle6, T1.Item_EstimateDescriptionTitle7, ");
            viewString.Append("T1.Item_EstimateDescriptionTitle8, T1.Item_EstimateDescriptionTitle9, T1.Item_Es");
            viewString.Append("timateDescriptionTitle10, T1.Item_EstimateDescription1, T1.Item_EstimateDescript");
            viewString.Append("ion2, T1.Item_EstimateDescription3, T1.Item_EstimateDescription4, T1.Item_Estima");
            viewString.Append("teDescription5, T1.Item_EstimateDescription6, T1.Item_EstimateDescription7, T1.I");
            viewString.Append("tem_EstimateDescription8, T1.Item_EstimateDescription9, T1.Item_EstimateDescript");
            viewString.Append("ion10, T1.Item_JobDescriptionTitle1, T1.Item_JobDescriptionTitle2, T1.Item_JobDe");
            viewString.Append("scriptionTitle3, T1.Item_JobDescriptionTitle4, T1.Item_JobDescriptionTitle5, T1.");
            viewString.Append("Item_JobDescriptionTitle6, T1.Item_JobDescriptionTitle7, T1.Item_JobDescriptionT");
            viewString.Append("itle8, T1.Item_JobDescriptionTitle9, T1.Item_JobDescriptionTitle10, T1.Item_JobD");
            viewString.Append("escription1, T1.Item_JobDescription2, T1.Item_JobDescription3, T1.Item_JobDescri");
            viewString.Append("ption4, T1.Item_JobDescription5, T1.Item_JobDescription6, T1.Item_JobDescription");
            viewString.Append("7, T1.Item_JobDescription8, T1.Item_JobDescription9, T1.Item_JobDescription10, T");
            viewString.Append("1.Item_IsParagraphDescription, T1.Item_EstimateDescription, T1.Item_JobDescripti");
            viewString.Append("on, T1.Item_InvoiceDescription, T1.Item_JobCode, T1.Item_JobManagerId, T1.Item_J");
            viewString.Append("obEstimatedStartDateTime, T1.Item_JobEstimatedCompletionDateTime, T1.Item_JobCre");
            viewString.Append("ationDateTime, T1.Item_JobProgressedBy, T1.Item_JobSelectedQty, T1.Item_JobStatu");
            viewString.Append("sId, T1.Item_IsJobCardPrinted, T1.Item_IsItemLibraray, T1.Item_ItemLibrarayGroup");
            viewString.Append("Id, T1.Item_PayInFullInvoiceId, T1.Item_IsGroupItem, T1.Item_ItemType, T1.Item_I");
            viewString.Append("sIncludedInPipeLine, T1.Item_IsRunOnQty, T1.Item_CanCopyToEstimate, T1.Item_Flag");
            viewString.Append("Id, T1.Item_CostCenterDescriptions, T1.Item_IsRead, T1.Item_IsScheduled, T1.Item");
            viewString.Append("_IsPaperStatusChanged, T1.Item_IsJobCardCreated, T1.Item_IsAttachmentAdded, T1.I");
            viewString.Append("tem_IsItemValueChanged, T1.Item_DepartmentId, T1.Item_ItemNotes, T1.Item_Updated");
            viewString.Append("By, T1.Item_LastUpdate, T1.Item_JobActualStartDateTime, T1.Item_JobActualComplet");
            viewString.Append("ionDateTime, T1.Item_IsJobCostingDone, T1.Item_ProductName, T1.Item_ImagePath, T");
            viewString.Append("1.Item_ThumbnailPath, T1.Item_ProductSpecification, T1.Item_CompleteSpecificatio");
            viewString.Append("n, T1.Item_DesignGuideLines, T1.Item_ProductCode, T1.Item_IsPublished, T1.Item_C");
            viewString.Append("ompanyId, T1.Item_PriceDiscountPercentage, T1.Item_IsEnabled, T1.Item_IsSpecialI");
            viewString.Append("tem, T1.Item_IconPath, T1.Item_IsPopular, T1.Item_IsFeatured, T1.Item_IsPromotio");
            viewString.Append("nal, T1.Item_TipsAndHints, T1.Item_FactSheetFileName, T1.Item_IsArchived, T1.Ite");
            viewString.Append("m_NominalCodeId, T1.Item_RefItemId, T1.Item_TemplateId, T1.Item_WebDescription, ");
            viewString.Append("T1.Item_ItemTypeId, T1.Item_IsOrderedItem, T1.Item_JobCardPrintedBy, T1.Item_Job");
            viewString.Append("CardLastPrintedDate, T1.Item_EstimateProductionTime, T1.Item_SortOrder, T1.Item_");
            viewString.Append("LayoutGridContent, T1.Item_HowToVideoContent, T1.Item_File1, T1.Item_File2, T1.I");
            viewString.Append("tem_File3, T1.Item_File4, T1.Item_File5, T1.Item_GridImage, T1.Item_IsQtyRanged,");
            viewString.Append(" T1.Item_CostCentreProfitBroker, T1.Item_BaseChargeBroker, T1.Item_MarkUpValueBr");
            viewString.Append("oker, T1.Item_NetTotalBroker, T1.Item_TaxValueBroker, T1.Item_GrossTotalBroker, ");
            viewString.Append("T1.Item_IsCmyk, T1.Item_SupplierId, T1.Item_IsStockControl, T1.Item_IsUploadImag");
            viewString.Append("e, T1.Item_IsMarketingBrief, T1.Item_SupplierId2, T1.Item_FinishedGoodId, T1.Ite");
            viewString.Append("m_IsFinishedGoodPrivate, T1.Item_MetaKeywords, T1.Item_MetaDescription, T1.Item_");
            viewString.Append("MetaTitle, T1.Item_IsTemplateDesignMode, T1.Item_XeroAccessCode, T1.Item_Default");
            viewString.Append("ItemTax, T1.Item_OrganisationId, T1.Item_PackagingWeight, T1.Item_IsVdpProduct, ");
            viewString.Append("T1.Item_ProductType, T1.Item_TemplateType, T1.Item_DesignerCategoryId, T1.Item_S");
            viewString.Append("calar, T1.Item_ZoomFactor)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId AS");
            viewString.Append(" Item_ItemId, \r\n            T.ItemCode AS Item_ItemCode, \r\n            T.Estimat");
            viewString.Append("eId AS Item_EstimateId, \r\n            T.InvoiceId AS Item_InvoiceId, \r\n         ");
            viewString.Append("   T.Title AS Item_Title, \r\n            T.Tax1 AS Item_Tax1, \r\n            T.Tax");
            viewString.Append("2 AS Item_Tax2, \r\n            T.Tax3 AS Item_Tax3, \r\n            T.CreatedBy AS ");
            viewString.Append("Item_CreatedBy, \r\n            T.Status AS Item_StatusId, \r\n            T.ItemCre");
            viewString.Append("ationDateTime AS Item_ItemCreationDateTime, \r\n            T.ItemLastUpdateDateTi");
            viewString.Append("me AS Item_ItemLastUpdateDateTime, \r\n            T.IsMultipleQty AS Item_IsMulti");
            viewString.Append("pleQty, \r\n            T.RunOnQty AS Item_RunOnQty, \r\n            T.RunonCostCent");
            viewString.Append("reProfit AS Item_RunonCostCentreProfit, \r\n            T.RunonBaseCharge AS Item_");
            viewString.Append("RunonBaseCharge, \r\n            T.RunOnMarkUpID AS Item_RunOnMarkUpId, \r\n        ");
            viewString.Append("    T.RunonPercentageValue AS Item_RunonPercentageValue, \r\n            T.RunOnMa");
            viewString.Append("rkUpValue AS Item_RunOnMarkUpValue, \r\n            T.RunOnNetTotal AS Item_RunOnN");
            viewString.Append("etTotal, \r\n            T.Qty1 AS Item_Qty1, \r\n            T.Qty2 AS Item_Qty2, \r");
            viewString.Append("\n            T.Qty3 AS Item_Qty3, \r\n            T.Qty1CostCentreProfit AS Item_Q");
            viewString.Append("ty1CostCentreProfit, \r\n            T.Qty2CostCentreProfit AS Item_Qty2CostCentre");
            viewString.Append("Profit, \r\n            T.Qty3CostCentreProfit AS Item_Qty3CostCentreProfit, \r\n   ");
            viewString.Append("         T.Qty1BaseCharge1 AS Item_Qty1BaseCharge1, \r\n            T.Qty2BaseChar");
            viewString.Append("ge2 AS Item_Qty2BaseCharge2, \r\n            T.Qty3BaseCharge3 AS Item_Qty3BaseCha");
            viewString.Append("rge3, \r\n            T.Qty1MarkUpID1 AS Item_Qty1MarkUpId1, \r\n            T.Qty2M");
            viewString.Append("arkUpID2 AS Item_Qty2MarkUpId2, \r\n            T.Qty3MarkUpID3 AS Item_Qty3MarkUp");
            viewString.Append("Id3, \r\n            T.Qty1MarkUpPercentageValue AS Item_Qty1MarkUpPercentageValue");
            viewString.Append(", \r\n            T.Qty2MarkUpPercentageValue AS Item_Qty2MarkUpPercentageValue, \r");
            viewString.Append("\n            T.Qty3MarkUpPercentageValue AS Item_Qty3MarkUpPercentageValue, \r\n  ");
            viewString.Append("          T.Qty1MarkUp1Value AS Item_Qty1MarkUp1Value, \r\n            T.Qty2MarkU");
            viewString.Append("p2Value AS Item_Qty2MarkUp2Value, \r\n            T.Qty3MarkUp3Value AS Item_Qty3M");
            viewString.Append("arkUp3Value, \r\n            T.Qty1NetTotal AS Item_Qty1NetTotal, \r\n            T.");
            viewString.Append("Qty2NetTotal AS Item_Qty2NetTotal, \r\n            T.Qty3NetTotal AS Item_Qty3NetT");
            viewString.Append("otal, \r\n            T.Qty1Tax1Value AS Item_Qty1Tax1Value, \r\n            T.Qty1T");
            viewString.Append("ax2Value AS Item_Qty1Tax2Value, \r\n            T.Qty1Tax3Value AS Item_Qty1Tax3Va");
            viewString.Append("lue, \r\n            T.Qty1GrossTotal AS Item_Qty1GrossTotal, \r\n            T.Qty2");
            viewString.Append("Tax1Value AS Item_Qty2Tax1Value, \r\n            T.Qty2Tax2Value AS Item_Qty2Tax2V");
            viewString.Append("alue, \r\n            T.Qty2Tax3Value AS Item_Qty2Tax3Value, \r\n            T.Qty2g");
            viewString.Append("rossTotal AS Item_Qty2GrossTotal, \r\n            T.Qty3Tax1Value AS Item_Qty3Tax1");
            viewString.Append("Value, \r\n            T.Qty3Tax2Value AS Item_Qty3Tax2Value, \r\n            T.Qty3");
            viewString.Append("Tax3Value AS Item_Qty3Tax3Value, \r\n            T.Qty3GrossTotal AS Item_Qty3Gros");
            viewString.Append("sTotal, \r\n            T.IsDescriptionLocked AS Item_IsDescriptionLocked, \r\n     ");
            viewString.Append("       T.qty1title AS Item_Qty1Title, \r\n            T.qty2title AS Item_Qty2Titl");
            viewString.Append("e, \r\n            T.qty3Title AS Item_Qty3Title, \r\n            T.RunonTitle AS It");
            viewString.Append("em_RunonTitle, \r\n            T.AdditionalInformation AS Item_AdditionalInformati");
            viewString.Append("on, \r\n            T.qty2Description AS Item_Qty2Description, \r\n            T.qty");
            viewString.Append("3Description AS Item_Qty3Description, \r\n            T.RunonDescription AS Item_R");
            viewString.Append("unonDescription, \r\n            T.EstimateDescriptionTitle1 AS Item_EstimateDescr");
            viewString.Append("iptionTitle1, \r\n            T.EstimateDescriptionTitle2 AS Item_EstimateDescript");
            viewString.Append("ionTitle2, \r\n            T.EstimateDescriptionTitle3 AS Item_EstimateDescription");
            viewString.Append("Title3, \r\n            T.EstimateDescriptionTitle4 AS Item_EstimateDescriptionTit");
            viewString.Append("le4, \r\n            T.EstimateDescriptionTitle5 AS Item_EstimateDescriptionTitle5");
            viewString.Append(", \r\n            T.EstimateDescriptionTitle6 AS Item_EstimateDescriptionTitle6, \r");
            viewString.Append("\n            T.EstimateDescriptionTitle7 AS Item_EstimateDescriptionTitle7, \r\n  ");
            viewString.Append("          T.EstimateDescriptionTitle8 AS Item_EstimateDescriptionTitle8, \r\n     ");
            viewString.Append("       T.EstimateDescriptionTitle9 AS Item_EstimateDescriptionTitle9, \r\n        ");
            viewString.Append("    T.EstimateDescriptionTitle10 AS Item_EstimateDescriptionTitle10, \r\n         ");
            viewString.Append("   T.EstimateDescription1 AS Item_EstimateDescription1, \r\n            T.Estimate");
            viewString.Append("Description2 AS Item_EstimateDescription2, \r\n            T.EstimateDescription3 ");
            viewString.Append("AS Item_EstimateDescription3, \r\n            T.EstimateDescription4 AS Item_Estim");
            viewString.Append("ateDescription4, \r\n            T.EstimateDescription5 AS Item_EstimateDescriptio");
            viewString.Append("n5, \r\n            T.EstimateDescription6 AS Item_EstimateDescription6, \r\n       ");
            viewString.Append("     T.EstimateDescription7 AS Item_EstimateDescription7, \r\n            T.Estima");
            viewString.Append("teDescription8 AS Item_EstimateDescription8, \r\n            T.EstimateDescription");
            viewString.Append("9 AS Item_EstimateDescription9, \r\n            T.EstimateDescription10 AS Item_Es");
            viewString.Append("timateDescription10, \r\n            T.JobDescriptionTitle1 AS Item_JobDescription");
            viewString.Append("Title1, \r\n            T.JobDescriptionTitle2 AS Item_JobDescriptionTitle2, \r\n   ");
            viewString.Append("         T.JobDescriptionTitle3 AS Item_JobDescriptionTitle3, \r\n            T.Jo");
            viewString.Append("bDescriptionTitle4 AS Item_JobDescriptionTitle4, \r\n            T.JobDescriptionT");
            viewString.Append("itle5 AS Item_JobDescriptionTitle5, \r\n            T.JobDescriptionTitle6 AS Item");
            viewString.Append("_JobDescriptionTitle6, \r\n            T.JobDescriptionTitle7 AS Item_JobDescripti");
            viewString.Append("onTitle7, \r\n            T.JobDescriptionTitle8 AS Item_JobDescriptionTitle8, \r\n ");
            viewString.Append("           T.JobDescriptionTitle9 AS Item_JobDescriptionTitle9, \r\n            T.");
            viewString.Append("JobDescriptionTitle10 AS Item_JobDescriptionTitle10, \r\n            T.JobDescript");
            viewString.Append("ion1 AS Item_JobDescription1, \r\n            T.JobDescription2 AS Item_JobDescrip");
            viewString.Append("tion2, \r\n            T.JobDescription3 AS Item_JobDescription3, \r\n            T.");
            viewString.Append("JobDescription4 AS Item_JobDescription4, \r\n            T.JobDescription5 AS Item");
            viewString.Append("_JobDescription5, \r\n            T.JobDescription6 AS Item_JobDescription6, \r\n   ");
            viewString.Append("         T.JobDescription7 AS Item_JobDescription7, \r\n            T.JobDescripti");
            viewString.Append("on8 AS Item_JobDescription8, \r\n            T.JobDescription9 AS Item_JobDescript");
            viewString.Append("ion9, \r\n            T.JobDescription10 AS Item_JobDescription10, \r\n            T");
            viewString.Append(".IsParagraphDescription AS Item_IsParagraphDescription, \r\n            T.Estimate");
            viewString.Append("Description AS Item_EstimateDescription, \r\n            T.JobDescription AS Item_");
            viewString.Append("JobDescription, \r\n            T.InvoiceDescription AS Item_InvoiceDescription, \r");
            viewString.Append("\n            T.JobCode AS Item_JobCode, \r\n            T.JobManagerId AS Item_Job");
            viewString.Append("ManagerId, \r\n            T.JobEstimatedStartDateTime AS Item_JobEstimatedStartDa");
            viewString.Append("teTime, \r\n            T.JobEstimatedCompletionDateTime AS Item_JobEstimatedCompl");
            viewString.Append("etionDateTime, \r\n            T.JobCreationDateTime AS Item_JobCreationDateTime, ");
            viewString.Append("\r\n            T.JobProgressedBy AS Item_JobProgressedBy, \r\n            T.jobSele");
            viewString.Append("ctedQty AS Item_JobSelectedQty, \r\n            T.JobStatusId AS Item_JobStatusId,");
            viewString.Append(" \r\n            T.IsJobCardPrinted AS Item_IsJobCardPrinted, \r\n            T.IsIt");
            viewString.Append("emLibraray AS Item_IsItemLibraray, \r\n            T.ItemLibrarayGroupId AS Item_I");
            viewString.Append("temLibrarayGroupId, \r\n            T.PayInFullInvoiceId AS Item_PayInFullInvoiceI");
            viewString.Append("d, \r\n            T.IsGroupItem AS Item_IsGroupItem, \r\n            T.ItemType AS ");
            viewString.Append("Item_ItemType, \r\n            T.IsIncludedInPipeLine AS Item_IsIncludedInPipeLine");
            viewString.Append(", \r\n            T.IsRunOnQty AS Item_IsRunOnQty, \r\n            T.CanCopyToEstima");
            viewString.Append("te AS Item_CanCopyToEstimate, \r\n            T.FlagId AS Item_FlagId, \r\n         ");
            viewString.Append("   T.CostCenterDescriptions AS Item_CostCenterDescriptions, \r\n            T.IsRe");
            viewString.Append("ad AS Item_IsRead, \r\n            T.IsScheduled AS Item_IsScheduled, \r\n          ");
            viewString.Append("  T.IsPaperStatusChanged AS Item_IsPaperStatusChanged, \r\n            T.IsJobCard");
            viewString.Append("Created AS Item_IsJobCardCreated, \r\n            T.IsAttachmentAdded AS Item_IsAt");
            viewString.Append("tachmentAdded, \r\n            T.IsItemValueChanged AS Item_IsItemValueChanged, \r\n");
            viewString.Append("            T.DepartmentId AS Item_DepartmentId, \r\n            T.ItemNotes AS It");
            viewString.Append("em_ItemNotes, \r\n            T.UpdatedBy AS Item_UpdatedBy, \r\n            T.LastU");
            viewString.Append("pdate AS Item_LastUpdate, \r\n            T.JobActualStartDateTime AS Item_JobActu");
            viewString.Append("alStartDateTime, \r\n            T.JobActualCompletionDateTime AS Item_JobActualCo");
            viewString.Append("mpletionDateTime, \r\n            T.IsJobCostingDone AS Item_IsJobCostingDone, \r\n ");
            viewString.Append("           T.ProductName AS Item_ProductName, \r\n            T.ImagePath AS Item_");
            viewString.Append("ImagePath, \r\n            T.ThumbnailPath AS Item_ThumbnailPath, \r\n            T.");
            viewString.Append("ProductSpecification AS Item_ProductSpecification, \r\n            T.CompleteSpeci");
            viewString.Append("fication AS Item_CompleteSpecification, \r\n            T.DesignGuideLines AS Item");
            viewString.Append("_DesignGuideLines, \r\n            T.ProductCode AS Item_ProductCode, \r\n          ");
            viewString.Append("  T.IsPublished AS Item_IsPublished, \r\n            T.CompanyId AS Item_CompanyId");
            viewString.Append(", \r\n            T.PriceDiscountPercentage AS Item_PriceDiscountPercentage, \r\n   ");
            viewString.Append("         T.IsEnabled AS Item_IsEnabled, \r\n            T.IsSpecialItem AS Item_Is");
            viewString.Append("SpecialItem, \r\n            T.IconPath AS Item_IconPath, \r\n            T.IsPopula");
            viewString.Append("r AS Item_IsPopular, \r\n            T.IsFeatured AS Item_IsFeatured, \r\n          ");
            viewString.Append("  T.IsPromotional AS Item_IsPromotional, \r\n            T.TipsAndHints AS Item_Ti");
            viewString.Append("psAndHints, \r\n            T.FactSheetFileName AS Item_FactSheetFileName, \r\n     ");
            viewString.Append("       T.IsArchived AS Item_IsArchived, \r\n            T.NominalCodeId AS Item_No");
            viewString.Append("minalCodeId, \r\n            T.RefItemId AS Item_RefItemId, \r\n            T.Templa");
            viewString.Append("teId AS Item_TemplateId, \r\n            T.WebDescription AS Item_WebDescription, ");
            viewString.Append("\r\n            T.ItemTypeId AS Item_ItemTypeId, \r\n            T.IsOrderedItem AS ");
            viewString.Append("Item_IsOrderedItem, \r\n            T.JobCardPrintedBy AS Item_JobCardPrintedBy, \r");
            viewString.Append("\n            T.JobCardLastPrintedDate AS Item_JobCardLastPrintedDate, \r\n        ");
            viewString.Append("    T.EstimateProductionTime AS Item_EstimateProductionTime, \r\n            T.Sor");
            viewString.Append("tOrder AS Item_SortOrder, \r\n            T.LayoutGridContent AS Item_LayoutGridCo");
            viewString.Append("ntent, \r\n            T.HowToVideoContent AS Item_HowToVideoContent, \r\n          ");
            viewString.Append("  T.file1 AS Item_File1, \r\n            T.file2 AS Item_File2, \r\n            T.fi");
            viewString.Append("le3 AS Item_File3, \r\n            T.file4 AS Item_File4, \r\n            T.file5 AS");
            viewString.Append(" Item_File5, \r\n            T.GridImage AS Item_GridImage, \r\n            T.isQtyR");
            viewString.Append("anged AS Item_IsQtyRanged, \r\n            T.CostCentreProfitBroker AS Item_CostCe");
            viewString.Append("ntreProfitBroker, \r\n            T.BaseChargeBroker AS Item_BaseChargeBroker, \r\n ");
            viewString.Append("           T.MarkUpValueBroker AS Item_MarkUpValueBroker, \r\n            T.NetTot");
            viewString.Append("alBroker AS Item_NetTotalBroker, \r\n            T.TaxValueBroker AS Item_TaxValue");
            viewString.Append("Broker, \r\n            T.GrossTotalBroker AS Item_GrossTotalBroker, \r\n           ");
            viewString.Append(" T.isCMYK AS Item_IsCmyk, \r\n            T.SupplierId AS Item_SupplierId, \r\n     ");
            viewString.Append("       T.isStockControl AS Item_IsStockControl, \r\n            T.isUploadImage AS");
            viewString.Append(" Item_IsUploadImage, \r\n            T.isMarketingBrief AS Item_IsMarketingBrief, ");
            viewString.Append("\r\n            T.SupplierID2 AS Item_SupplierId2, \r\n            T.FinishedGoodId ");
            viewString.Append("AS Item_FinishedGoodId, \r\n            T.IsFinishedGoodPrivate AS Item_IsFinished");
            viewString.Append("GoodPrivate, \r\n            T.MetaKeywords AS Item_MetaKeywords, \r\n            T.");
            viewString.Append("MetaDescription AS Item_MetaDescription, \r\n            T.MetaTitle AS Item_MetaT");
            viewString.Append("itle, \r\n            T.isTemplateDesignMode AS Item_IsTemplateDesignMode, \r\n     ");
            viewString.Append("       T.XeroAccessCode AS Item_XeroAccessCode, \r\n            T.DefaultItemTax A");
            viewString.Append("S Item_DefaultItemTax, \r\n            T.OrganisationId AS Item_OrganisationId, \r\n");
            viewString.Append("            T.PackagingWeight AS Item_PackagingWeight, \r\n            T.IsVDPProd");
            viewString.Append("uct AS Item_IsVdpProduct, \r\n            T.ProductType AS Item_ProductType, \r\n   ");
            viewString.Append("         T.TemplateType AS Item_TemplateType, \r\n            T.DesignerCategoryId");
            viewString.Append(" AS Item_DesignerCategoryId, \r\n            T.Scalar AS Item_Scalar, \r\n          ");
            viewString.Append("  T.ZoomFactor AS Item_ZoomFactor, \r\n            True AS _from0\r\n        FROM Do");
            viewString.Append("mainModelsStoreContainer.Items AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Items", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemSections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView91()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(15739);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemSections\r\n        [DomainModels.ItemSecti");
            viewString.Append("on](T1.ItemSection_ItemSectionId, T1.ItemSection_SectionNo, T1.ItemSection_Secti");
            viewString.Append("onName, T1.ItemSection_IsMainSection, T1.ItemSection_IsMultipleQty, T1.ItemSecti");
            viewString.Append("on_IsRunOnQty, T1.ItemSection_ItemId, T1.ItemSection_Qty1, T1.ItemSection_Qty2, ");
            viewString.Append("T1.ItemSection_Qty3, T1.ItemSection_Qty4, T1.ItemSection_Qty5, T1.ItemSection_Qt");
            viewString.Append("y1Profit, T1.ItemSection_Qty2Profit, T1.ItemSection_Qty3Profit, T1.ItemSection_Q");
            viewString.Append("ty4Profit, T1.ItemSection_Qty5Profit, T1.ItemSection_BaseCharge1, T1.ItemSection");
            viewString.Append("_BaseCharge2, T1.ItemSection_Basecharge3, T1.ItemSection_BaseCharge4, T1.ItemSec");
            viewString.Append("tion_BaseCharge5, T1.ItemSection_RunOnQty, T1.ItemSection_RunOnBaseCharge, T1.It");
            viewString.Append("emSection_RunonProfit, T1.ItemSection_SectionSizeId, T1.ItemSection_IsSectionSiz");
            viewString.Append("eCustom, T1.ItemSection_SectionSizeHeight, T1.ItemSection_SectionSizeWidth, T1.I");
            viewString.Append("temSection_ItemSizeId, T1.ItemSection_IsItemSizeCustom, T1.ItemSection_ItemSizeH");
            viewString.Append("eight, T1.ItemSection_ItemSizeWidth, T1.ItemSection_GuillotineId, T1.ItemSection");
            viewString.Append("_IncludeGutter, T1.ItemSection_PressId, T1.ItemSection_FilmId, T1.ItemSection_Pl");
            viewString.Append("ateId, T1.ItemSection_ItemGutterHorizontal, T1.ItemSection_ItemGutterVertical, T");
            viewString.Append("1.ItemSection_IsPressrestrictionApplied, T1.ItemSection_IsDoubleSided, T1.ItemSe");
            viewString.Append("ction_IsWashup, T1.ItemSection_PrintViewLayoutLandScape, T1.ItemSection_PrintVie");
            viewString.Append("wLayoutPortrait, T1.ItemSection_PrintViewLayout, T1.ItemSection_SetupSpoilage, T");
            viewString.Append("1.ItemSection_RunningSpoilage, T1.ItemSection_RunningSpoilageValue, T1.ItemSecti");
            viewString.Append("on_EstimateForWholePacks, T1.ItemSection_IsFirstTrim, T1.ItemSection_IsSecondTri");
            viewString.Append("m, T1.ItemSection_PaperQty, T1.ItemSection_ImpressionQty1, T1.ItemSection_Impres");
            viewString.Append("sionQty2, T1.ItemSection_ImpressionQty3, T1.ItemSection_ImpressionQty4, T1.ItemS");
            viewString.Append("ection_ImpressionQty5, T1.ItemSection_FilmQty, T1.ItemSection_IsFilmSupplied, T1");
            viewString.Append(".ItemSection_IsPlateSupplied, T1.ItemSection_IsPaperSupplied, T1.ItemSection_Was");
            viewString.Append("hupQty, T1.ItemSection_MakeReadyQty, T1.ItemSection_IsPaperCoated, T1.ItemSectio");
            viewString.Append("n_GuillotineFirstCut, T1.ItemSection_GuillotineSecondCut, T1.ItemSection_Guillot");
            viewString.Append("ineCutTime, T1.ItemSection_GuillotineQty1BundlesFirstTrim, T1.ItemSection_Guillo");
            viewString.Append("tineQty2BundlesFirstTrim, T1.ItemSection_GuillotineQty3BundlesFirstTrim, T1.Item");
            viewString.Append("Section_GuillotineQty1BundlesSecondTrim, T1.ItemSection_GuillotineQty2BundlesSec");
            viewString.Append("ondTrim, T1.ItemSection_GuillotineQty3BundlesSecondTrim, T1.ItemSection_Guilloti");
            viewString.Append("neQty1FirstTrimCuts, T1.ItemSection_GuillotineQty2FirstTrimCuts, T1.ItemSection_");
            viewString.Append("GuillotineQty3FirstTrimCuts, T1.ItemSection_GuillotineQty1SecondTrimCuts, T1.Ite");
            viewString.Append("mSection_GuillotineQty2SecondTrimCuts, T1.ItemSection_GuillotineQty3SecondTrimCu");
            viewString.Append("ts, T1.ItemSection_GuillotineQty1TotalsCuts, T1.ItemSection_GuillotineQty2Totals");
            viewString.Append("Cuts, T1.ItemSection_GuillotineQty3TotalsCuts, T1.ItemSection_AdditionalFilmUsed");
            viewString.Append(", T1.ItemSection_AdditionalPlateUsed, T1.ItemSection_IsFilmUsed, T1.ItemSection_");
            viewString.Append("IsPlateUsed, T1.ItemSection_NoofUniqueInks, T1.ItemSection_WizardRunMode, T1.Ite");
            viewString.Append("mSection_OverAllPTV, T1.ItemSection_ItemPTV, T1.ItemSection_Side1Inks, T1.ItemSe");
            viewString.Append("ction_Side2Inks, T1.ItemSection_IsSwingApplied, T1.ItemSection_SectionType, T1.I");
            viewString.Append("temSection_IsMakeReadyUsed, T1.ItemSection_isWorknTurn, T1.ItemSection_isWorkntu");
            viewString.Append("mble, T1.ItemSection_QuestionQueue, T1.ItemSection_StockQueue, T1.ItemSection_In");
            viewString.Append("putQueue, T1.ItemSection_CostCentreQueue, T1.ItemSection_PressSpeed1, T1.ItemSec");
            viewString.Append("tion_PressSpeed2, T1.ItemSection_PressSpeed3, T1.ItemSection_PressSpeed4, T1.Ite");
            viewString.Append("mSection_PressSpeed5, T1.ItemSection_PrintSheetQty1, T1.ItemSection_PrintSheetQt");
            viewString.Append("y2, T1.ItemSection_PrintSheetQty3, T1.ItemSection_PrintSheetQty4, T1.ItemSection");
            viewString.Append("_PrintSheetQty5, T1.ItemSection_PressHourlyCharge, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady1, T1.ItemSection_PrintChargeExMakeReady2, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady3, T1.ItemSection_PrintChargeExMakeReady4, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady5, T1.ItemSection_PaperGsm, T1.ItemSection_PaperPackPrice, T1.ItemSectio");
            viewString.Append("n_PTVRows, T1.ItemSection_PTVColoumns, T1.ItemSection_PaperWeight1, T1.ItemSecti");
            viewString.Append("on_PaperWeight2, T1.ItemSection_PaperWeight3, T1.ItemSection_PaperWeight4, T1.It");
            viewString.Append("emSection_PaperWeight5, T1.ItemSection_FinishedItemQty1, T1.ItemSection_Finished");
            viewString.Append("ItemQty2, T1.ItemSection_FinishedItemQty3, T1.ItemSection_FinishedItemQty4, T1.I");
            viewString.Append("temSection_FinishedItemQty5, T1.ItemSection_ProfileId, T1.ItemSection_SelectedPr");
            viewString.Append("essCalculationMethodId, T1.ItemSection_SectionNotes, T1.ItemSection_IsScheduled,");
            viewString.Append(" T1.ItemSection_ImageType, T1.ItemSection_WebClylinderHeight, T1.ItemSection_Web");
            viewString.Append("CylinderWidth, T1.ItemSection_WebCylinderId, T1.ItemSection_WebPaperLengthWithSp");
            viewString.Append(", T1.ItemSection_WebPaperLengthWoSp, T1.ItemSection_WebReelMakereadyQty, T1.Item");
            viewString.Append("Section_WebStockPaperCost, T1.ItemSection_WebSpoilageType, T1.ItemSection_PressP");
            viewString.Append("assesQty, T1.ItemSection_PrintingType, T1.ItemSection_PadsLeafQty, T1.ItemSectio");
            viewString.Append("n_PadsQuantity, T1.ItemSection_LastUpdateDate, T1.ItemSection_LastUpdatedBy, T1.");
            viewString.Append("ItemSection_Qty1MarkUpID, T1.ItemSection_Qty2MarkUpID, T1.ItemSection_Qty3MarkUp");
            viewString.Append("ID, T1.ItemSection_StockItemID1, T1.ItemSection_StockItemID2, T1.ItemSection_Sto");
            viewString.Append("ckItemID3, T1.ItemSection_Side1PlateQty, T1.ItemSection_IsPortrait, T1.ItemSecti");
            viewString.Append("on_Side2PlateQty, T1.ItemSection_InkColorType, T1.ItemSection_BaseCharge1Broker,");
            viewString.Append(" T1.ItemSection_PlateInkId, T1.ItemSection_SimilarSections)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.ItemSectionId AS ItemSection_ItemSectionId, \r\n          ");
            viewString.Append("  T.SectionNo AS ItemSection_SectionNo, \r\n            T.SectionName AS ItemSecti");
            viewString.Append("on_SectionName, \r\n            T.IsMainSection AS ItemSection_IsMainSection, \r\n  ");
            viewString.Append("          T.IsMultipleQty AS ItemSection_IsMultipleQty, \r\n            T.IsRunOnQ");
            viewString.Append("ty AS ItemSection_IsRunOnQty, \r\n            T.ItemId AS ItemSection_ItemId, \r\n  ");
            viewString.Append("          T.Qty1 AS ItemSection_Qty1, \r\n            T.Qty2 AS ItemSection_Qty2, ");
            viewString.Append("\r\n            T.Qty3 AS ItemSection_Qty3, \r\n            T.Qty4 AS ItemSection_Qt");
            viewString.Append("y4, \r\n            T.Qty5 AS ItemSection_Qty5, \r\n            T.Qty1Profit AS Item");
            viewString.Append("Section_Qty1Profit, \r\n            T.Qty2Profit AS ItemSection_Qty2Profit, \r\n    ");
            viewString.Append("        T.Qty3Profit AS ItemSection_Qty3Profit, \r\n            T.Qty4Profit AS It");
            viewString.Append("emSection_Qty4Profit, \r\n            T.Qty5Profit AS ItemSection_Qty5Profit, \r\n  ");
            viewString.Append("          T.BaseCharge1 AS ItemSection_BaseCharge1, \r\n            T.BaseCharge2 ");
            viewString.Append("AS ItemSection_BaseCharge2, \r\n            T.Basecharge3 AS ItemSection_Basecharg");
            viewString.Append("e3, \r\n            T.BaseCharge4 AS ItemSection_BaseCharge4, \r\n            T.Base");
            viewString.Append("Charge5 AS ItemSection_BaseCharge5, \r\n            T.RunOnQty AS ItemSection_RunO");
            viewString.Append("nQty, \r\n            T.RunOnBaseCharge AS ItemSection_RunOnBaseCharge, \r\n        ");
            viewString.Append("    T.RunonProfit AS ItemSection_RunonProfit, \r\n            T.SectionSizeId AS I");
            viewString.Append("temSection_SectionSizeId, \r\n            T.IsSectionSizeCustom AS ItemSection_IsS");
            viewString.Append("ectionSizeCustom, \r\n            T.SectionSizeHeight AS ItemSection_SectionSizeHe");
            viewString.Append("ight, \r\n            T.SectionSizeWidth AS ItemSection_SectionSizeWidth, \r\n      ");
            viewString.Append("      T.ItemSizeId AS ItemSection_ItemSizeId, \r\n            T.IsItemSizeCustom A");
            viewString.Append("S ItemSection_IsItemSizeCustom, \r\n            T.ItemSizeHeight AS ItemSection_It");
            viewString.Append("emSizeHeight, \r\n            T.ItemSizeWidth AS ItemSection_ItemSizeWidth, \r\n    ");
            viewString.Append("        T.GuillotineId AS ItemSection_GuillotineId, \r\n            T.IncludeGutte");
            viewString.Append("r AS ItemSection_IncludeGutter, \r\n            T.PressId AS ItemSection_PressId, ");
            viewString.Append("\r\n            T.FilmId AS ItemSection_FilmId, \r\n            T.PlateId AS ItemSec");
            viewString.Append("tion_PlateId, \r\n            T.ItemGutterHorizontal AS ItemSection_ItemGutterHori");
            viewString.Append("zontal, \r\n            T.ItemGutterVertical AS ItemSection_ItemGutterVertical, \r\n");
            viewString.Append("            T.IsPressrestrictionApplied AS ItemSection_IsPressrestrictionApplied");
            viewString.Append(", \r\n            T.IsDoubleSided AS ItemSection_IsDoubleSided, \r\n            T.Is");
            viewString.Append("Washup AS ItemSection_IsWashup, \r\n            T.PrintViewLayoutLandScape AS Item");
            viewString.Append("Section_PrintViewLayoutLandScape, \r\n            T.PrintViewLayoutPortrait AS Ite");
            viewString.Append("mSection_PrintViewLayoutPortrait, \r\n            T.PrintViewLayout AS ItemSection");
            viewString.Append("_PrintViewLayout, \r\n            T.SetupSpoilage AS ItemSection_SetupSpoilage, \r\n");
            viewString.Append("            T.RunningSpoilage AS ItemSection_RunningSpoilage, \r\n            T.Ru");
            viewString.Append("nningSpoilageValue AS ItemSection_RunningSpoilageValue, \r\n            T.Estimate");
            viewString.Append("ForWholePacks AS ItemSection_EstimateForWholePacks, \r\n            T.IsFirstTrim ");
            viewString.Append("AS ItemSection_IsFirstTrim, \r\n            T.IsSecondTrim AS ItemSection_IsSecond");
            viewString.Append("Trim, \r\n            T.PaperQty AS ItemSection_PaperQty, \r\n            T.Impressi");
            viewString.Append("onQty1 AS ItemSection_ImpressionQty1, \r\n            T.ImpressionQty2 AS ItemSect");
            viewString.Append("ion_ImpressionQty2, \r\n            T.ImpressionQty3 AS ItemSection_ImpressionQty3");
            viewString.Append(", \r\n            T.ImpressionQty4 AS ItemSection_ImpressionQty4, \r\n            T.");
            viewString.Append("ImpressionQty5 AS ItemSection_ImpressionQty5, \r\n            T.FilmQty AS ItemSec");
            viewString.Append("tion_FilmQty, \r\n            T.IsFilmSupplied AS ItemSection_IsFilmSupplied, \r\n  ");
            viewString.Append("          T.IsPlateSupplied AS ItemSection_IsPlateSupplied, \r\n            T.IsPa");
            viewString.Append("perSupplied AS ItemSection_IsPaperSupplied, \r\n            T.WashupQty AS ItemSec");
            viewString.Append("tion_WashupQty, \r\n            T.MakeReadyQty AS ItemSection_MakeReadyQty, \r\n    ");
            viewString.Append("        T.IsPaperCoated AS ItemSection_IsPaperCoated, \r\n            T.Guillotine");
            viewString.Append("FirstCut AS ItemSection_GuillotineFirstCut, \r\n            T.GuillotineSecondCut ");
            viewString.Append("AS ItemSection_GuillotineSecondCut, \r\n            T.GuillotineCutTime AS ItemSec");
            viewString.Append("tion_GuillotineCutTime, \r\n            T.GuillotineQty1BundlesFirstTrim AS ItemSe");
            viewString.Append("ction_GuillotineQty1BundlesFirstTrim, \r\n            T.GuillotineQty2BundlesFirst");
            viewString.Append("Trim AS ItemSection_GuillotineQty2BundlesFirstTrim, \r\n            T.GuillotineQt");
            viewString.Append("y3BundlesFirstTrim AS ItemSection_GuillotineQty3BundlesFirstTrim, \r\n            ");
            viewString.Append("T.GuillotineQty1BundlesSecondTrim AS ItemSection_GuillotineQty1BundlesSecondTrim");
            viewString.Append(", \r\n            T.GuillotineQty2BundlesSecondTrim AS ItemSection_GuillotineQty2B");
            viewString.Append("undlesSecondTrim, \r\n            T.GuillotineQty3BundlesSecondTrim AS ItemSection");
            viewString.Append("_GuillotineQty3BundlesSecondTrim, \r\n            T.GuillotineQty1FirstTrimCuts AS");
            viewString.Append(" ItemSection_GuillotineQty1FirstTrimCuts, \r\n            T.GuillotineQty2FirstTri");
            viewString.Append("mCuts AS ItemSection_GuillotineQty2FirstTrimCuts, \r\n            T.GuillotineQty3");
            viewString.Append("FirstTrimCuts AS ItemSection_GuillotineQty3FirstTrimCuts, \r\n            T.Guillo");
            viewString.Append("tineQty1SecondTrimCuts AS ItemSection_GuillotineQty1SecondTrimCuts, \r\n          ");
            viewString.Append("  T.GuillotineQty2SecondTrimCuts AS ItemSection_GuillotineQty2SecondTrimCuts, \r\n");
            viewString.Append("            T.GuillotineQty3SecondTrimCuts AS ItemSection_GuillotineQty3SecondTr");
            viewString.Append("imCuts, \r\n            T.GuillotineQty1TotalsCuts AS ItemSection_GuillotineQty1To");
            viewString.Append("talsCuts, \r\n            T.GuillotineQty2TotalsCuts AS ItemSection_GuillotineQty2");
            viewString.Append("TotalsCuts, \r\n            T.GuillotineQty3TotalsCuts AS ItemSection_GuillotineQt");
            viewString.Append("y3TotalsCuts, \r\n            T.AdditionalFilmUsed AS ItemSection_AdditionalFilmUs");
            viewString.Append("ed, \r\n            T.AdditionalPlateUsed AS ItemSection_AdditionalPlateUsed, \r\n  ");
            viewString.Append("          T.IsFilmUsed AS ItemSection_IsFilmUsed, \r\n            T.IsPlateUsed AS");
            viewString.Append(" ItemSection_IsPlateUsed, \r\n            T.NoofUniqueInks AS ItemSection_NoofUniq");
            viewString.Append("ueInks, \r\n            T.WizardRunMode AS ItemSection_WizardRunMode, \r\n          ");
            viewString.Append("  T.OverAllPTV AS ItemSection_OverAllPTV, \r\n            T.ItemPTV AS ItemSection");
            viewString.Append("_ItemPTV, \r\n            T.Side1Inks AS ItemSection_Side1Inks, \r\n            T.Si");
            viewString.Append("de2Inks AS ItemSection_Side2Inks, \r\n            T.IsSwingApplied AS ItemSection_");
            viewString.Append("IsSwingApplied, \r\n            T.SectionType AS ItemSection_SectionType, \r\n      ");
            viewString.Append("      T.IsMakeReadyUsed AS ItemSection_IsMakeReadyUsed, \r\n            T.isWorknT");
            viewString.Append("urn AS ItemSection_isWorknTurn, \r\n            T.isWorkntumble AS ItemSection_isW");
            viewString.Append("orkntumble, \r\n            T.QuestionQueue AS ItemSection_QuestionQueue, \r\n      ");
            viewString.Append("      T.StockQueue AS ItemSection_StockQueue, \r\n            T.InputQueue AS Item");
            viewString.Append("Section_InputQueue, \r\n            T.CostCentreQueue AS ItemSection_CostCentreQue");
            viewString.Append("ue, \r\n            T.PressSpeed1 AS ItemSection_PressSpeed1, \r\n            T.Pres");
            viewString.Append("sSpeed2 AS ItemSection_PressSpeed2, \r\n            T.PressSpeed3 AS ItemSection_P");
            viewString.Append("ressSpeed3, \r\n            T.PressSpeed4 AS ItemSection_PressSpeed4, \r\n          ");
            viewString.Append("  T.PressSpeed5 AS ItemSection_PressSpeed5, \r\n            T.PrintSheetQty1 AS It");
            viewString.Append("emSection_PrintSheetQty1, \r\n            T.PrintSheetQty2 AS ItemSection_PrintShe");
            viewString.Append("etQty2, \r\n            T.PrintSheetQty3 AS ItemSection_PrintSheetQty3, \r\n        ");
            viewString.Append("    T.PrintSheetQty4 AS ItemSection_PrintSheetQty4, \r\n            T.PrintSheetQt");
            viewString.Append("y5 AS ItemSection_PrintSheetQty5, \r\n            T.PressHourlyCharge AS ItemSecti");
            viewString.Append("on_PressHourlyCharge, \r\n            T.PrintChargeExMakeReady1 AS ItemSection_Pri");
            viewString.Append("ntChargeExMakeReady1, \r\n            T.PrintChargeExMakeReady2 AS ItemSection_Pri");
            viewString.Append("ntChargeExMakeReady2, \r\n            T.PrintChargeExMakeReady3 AS ItemSection_Pri");
            viewString.Append("ntChargeExMakeReady3, \r\n            T.PrintChargeExMakeReady4 AS ItemSection_Pri");
            viewString.Append("ntChargeExMakeReady4, \r\n            T.PrintChargeExMakeReady5 AS ItemSection_Pri");
            viewString.Append("ntChargeExMakeReady5, \r\n            T.PaperGsm AS ItemSection_PaperGsm, \r\n      ");
            viewString.Append("      T.PaperPackPrice AS ItemSection_PaperPackPrice, \r\n            T.PTVRows AS");
            viewString.Append(" ItemSection_PTVRows, \r\n            T.PTVColoumns AS ItemSection_PTVColoumns, \r\n");
            viewString.Append("            T.PaperWeight1 AS ItemSection_PaperWeight1, \r\n            T.PaperWei");
            viewString.Append("ght2 AS ItemSection_PaperWeight2, \r\n            T.PaperWeight3 AS ItemSection_Pa");
            viewString.Append("perWeight3, \r\n            T.PaperWeight4 AS ItemSection_PaperWeight4, \r\n        ");
            viewString.Append("    T.PaperWeight5 AS ItemSection_PaperWeight5, \r\n            T.FinishedItemQty1");
            viewString.Append(" AS ItemSection_FinishedItemQty1, \r\n            T.FinishedItemQty2 AS ItemSectio");
            viewString.Append("n_FinishedItemQty2, \r\n            T.FinishedItemQty3 AS ItemSection_FinishedItem");
            viewString.Append("Qty3, \r\n            T.FinishedItemQty4 AS ItemSection_FinishedItemQty4, \r\n      ");
            viewString.Append("      T.FinishedItemQty5 AS ItemSection_FinishedItemQty5, \r\n            T.Profil");
            viewString.Append("eId AS ItemSection_ProfileId, \r\n            T.SelectedPressCalculationMethodId A");
            viewString.Append("S ItemSection_SelectedPressCalculationMethodId, \r\n            T.SectionNotes AS ");
            viewString.Append("ItemSection_SectionNotes, \r\n            T.IsScheduled AS ItemSection_IsScheduled");
            viewString.Append(", \r\n            T.ImageType AS ItemSection_ImageType, \r\n            T.WebClylind");
            viewString.Append("erHeight AS ItemSection_WebClylinderHeight, \r\n            T.WebCylinderWidth AS ");
            viewString.Append("ItemSection_WebCylinderWidth, \r\n            T.WebCylinderId AS ItemSection_WebCy");
            viewString.Append("linderId, \r\n            T.WebPaperLengthWithSp AS ItemSection_WebPaperLengthWith");
            viewString.Append("Sp, \r\n            T.WebPaperLengthWoSp AS ItemSection_WebPaperLengthWoSp, \r\n    ");
            viewString.Append("        T.WebReelMakereadyQty AS ItemSection_WebReelMakereadyQty, \r\n            ");
            viewString.Append("T.WebStockPaperCost AS ItemSection_WebStockPaperCost, \r\n            T.WebSpoilag");
            viewString.Append("eType AS ItemSection_WebSpoilageType, \r\n            T.PressPassesQty AS ItemSect");
            viewString.Append("ion_PressPassesQty, \r\n            T.PrintingType AS ItemSection_PrintingType, \r\n");
            viewString.Append("            T.PadsLeafQty AS ItemSection_PadsLeafQty, \r\n            T.PadsQuanti");
            viewString.Append("ty AS ItemSection_PadsQuantity, \r\n            T.LastUpdateDate AS ItemSection_La");
            viewString.Append("stUpdateDate, \r\n            T.LastUpdatedBy AS ItemSection_LastUpdatedBy, \r\n    ");
            viewString.Append("        T.Qty1MarkUpID AS ItemSection_Qty1MarkUpID, \r\n            T.Qty2MarkUpID");
            viewString.Append(" AS ItemSection_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS ItemSection_Qty3Ma");
            viewString.Append("rkUpID, \r\n            T.StockItemID1 AS ItemSection_StockItemID1, \r\n            ");
            viewString.Append("T.StockItemID2 AS ItemSection_StockItemID2, \r\n            T.StockItemID3 AS Item");
            viewString.Append("Section_StockItemID3, \r\n            T.Side1PlateQty AS ItemSection_Side1PlateQty");
            viewString.Append(", \r\n            T.IsPortrait AS ItemSection_IsPortrait, \r\n            T.Side2Pla");
            viewString.Append("teQty AS ItemSection_Side2PlateQty, \r\n            T.InkColorType AS ItemSection_");
            viewString.Append("InkColorType, \r\n            T.BaseCharge1Broker AS ItemSection_BaseCharge1Broker");
            viewString.Append(", \r\n            T.PlateInkId AS ItemSection_PlateInkId, \r\n            T.SimilarS");
            viewString.Append("ections AS ItemSection_SimilarSections, \r\n            True AS _from0\r\n        FR");
            viewString.Append("OM DomainModelsStoreContainer.ItemSection AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemSections", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStockOptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView92()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStockOptions", @"
    SELECT VALUE -- Constructing ItemStockOptions
        [DomainModels.ItemStockOption](T1.ItemStockOption_ItemStockOptionId, T1.ItemStockOption_ItemId, T1.ItemStockOption_OptionSequence, T1.ItemStockOption_StockId, T1.ItemStockOption_StockLabel, T1.ItemStockOption_CompanyId, T1.ItemStockOption_ImageURL)
    FROM (
        SELECT 
            T.ItemStockOptionId AS ItemStockOption_ItemStockOptionId, 
            T.ItemId AS ItemStockOption_ItemId, 
            T.OptionSequence AS ItemStockOption_OptionSequence, 
            T.StockId AS ItemStockOption_StockId, 
            T.StockLabel AS ItemStockOption_StockLabel, 
            T.CompanyId AS ItemStockOption_CompanyId, 
            T.ImageURL AS ItemStockOption_ImageURL, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemStockOption AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemVdpPrices1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView93()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemVdpPrices1", @"
    SELECT VALUE -- Constructing ItemVdpPrices1
        [DomainModels.ItemVdpPrice](T1.ItemVdpPrice_ItemVdpPriceId, T1.ItemVdpPrice_ClickRangeTo, T1.ItemVdpPrice_ClickRangeFrom, T1.ItemVdpPrice_PricePerClick, T1.ItemVdpPrice_SetupCharge, T1.ItemVdpPrice_ItemId)
    FROM (
        SELECT 
            T.ItemVDPPriceId AS ItemVdpPrice_ItemVdpPriceId, 
            T.ClickRangeTo AS ItemVdpPrice_ClickRangeTo, 
            T.ClickRangeFrom AS ItemVdpPrice_ClickRangeFrom, 
            T.PricePerClick AS ItemVdpPrice_PricePerClick, 
            T.SetupCharge AS ItemVdpPrice_SetupCharge, 
            T.ItemId AS ItemVdpPrice_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemVDPPrice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Countries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView94()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Countries", @"
    SELECT VALUE -- Constructing Countries
        [DomainModels.Country](T1.Country_CountryId, T1.Country_CountryName, T1.Country_CountryCode)
    FROM (
        SELECT 
            T.CountryID AS Country_CountryId, 
            T.CountryName AS Country_CountryName, 
            T.CountryCode AS Country_CountryCode, 
            True AS _from0
        FROM DomainModelsStoreContainer.Country AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostcentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView95()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(11187);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SectionCostcentres\r\n        [DomainModels.Sec");
            viewString.Append("tionCostcentre](T1.SectionCostcentre_SectionCostcentreId, T1.SectionCostcentre_I");
            viewString.Append("temSectionId, T1.SectionCostcentre_CostCentreId, T1.SectionCostcentre_CostCentre");
            viewString.Append("Type, T1.SectionCostcentre_SystemCostCentreType, T1.SectionCostcentre_Order, T1.");
            viewString.Append("SectionCostcentre_IsDirectCost, T1.SectionCostcentre_IsOptionalExtra, T1.Section");
            viewString.Append("Costcentre_IsPurchaseOrderRaised, T1.SectionCostcentre_Status, T1.SectionCostcen");
            viewString.Append("tre_ActivityUser, T1.SectionCostcentre_IsPrintable, T1.SectionCostcentre_Estimat");
            viewString.Append("edStartTime, T1.SectionCostcentre_EstimatedDuration, T1.SectionCostcentre_Estima");
            viewString.Append("tedEndTime, T1.SectionCostcentre_ActualDuration, T1.SectionCostcentre_ActualStar");
            viewString.Append("tDateTime, T1.SectionCostcentre_ActualEndTime, T1.SectionCostcentre_Qty1Charge, ");
            viewString.Append("T1.SectionCostcentre_Qty2Charge, T1.SectionCostcentre_Qty3Charge, T1.SectionCost");
            viewString.Append("centre_Qty4Charge, T1.SectionCostcentre_Qty5Charge, T1.SectionCostcentre_Qty1Mar");
            viewString.Append("kUpID, T1.SectionCostcentre_Qty2MarkUpID, T1.SectionCostcentre_Qty3MarkUpID, T1.");
            viewString.Append("SectionCostcentre_Qty4MarkUpID, T1.SectionCostcentre_Qty5MarkUpID, T1.SectionCos");
            viewString.Append("tcentre_Qty1MarkUpValue, T1.SectionCostcentre_Qty2MarkUpValue, T1.SectionCostcen");
            viewString.Append("tre_Qty3MarkUpValue, T1.SectionCostcentre_Qty4MarkUpValue, T1.SectionCostcentre_");
            viewString.Append("Qty5MarkUpValue, T1.SectionCostcentre_Qty1NetTotal, T1.SectionCostcentre_Qty2Net");
            viewString.Append("Total, T1.SectionCostcentre_Qty3NetTotal, T1.SectionCostcentre_Qty4NetTotal, T1.");
            viewString.Append("SectionCostcentre_Qty5NetTotal, T1.SectionCostcentre_Qty1EstimatedPlantCost, T1.");
            viewString.Append("SectionCostcentre_Qty1EstimatedLabourCost, T1.SectionCostcentre_Qty1EstimatedSto");
            viewString.Append("ckCost, T1.SectionCostcentre_Qty1EstimatedTime, T1.SectionCostcentre_Qty1QuotedP");
            viewString.Append("lantCharge, T1.SectionCostcentre_Qty1QuotedLabourCharge, T1.SectionCostcentre_Qt");
            viewString.Append("y1QuotedStockCharge, T1.SectionCostcentre_Qty2EstimatedPlantCost, T1.SectionCost");
            viewString.Append("centre_Qty2EstimatedLabourCost, T1.SectionCostcentre_Qty2EstimatedStockCost, T1.");
            viewString.Append("SectionCostcentre_Qty2EstimatedTime, T1.SectionCostcentre_Qty2QuotedPlantCharge,");
            viewString.Append(" T1.SectionCostcentre_Qty2QuotedLabourCharge, T1.SectionCostcentre_Qty2QuotedSto");
            viewString.Append("ckCharge, T1.SectionCostcentre_Qty3EstimatedPlantCost, T1.SectionCostcentre_Qty3");
            viewString.Append("EstimatedLabourCost, T1.SectionCostcentre_Qty3EstimatedStockCost, T1.SectionCost");
            viewString.Append("centre_Qty3EstimatedTime, T1.SectionCostcentre_Qty3QuotedPlantCharge, T1.Section");
            viewString.Append("Costcentre_Qty3QuotedLabourCharge, T1.SectionCostcentre_Qty3QuotedStockCharge, T");
            viewString.Append("1.SectionCostcentre_Qty4EstimatedPlantCost, T1.SectionCostcentre_Qty4EstimatedLa");
            viewString.Append("bourCost, T1.SectionCostcentre_Qty4EstimatedStockCost, T1.SectionCostcentre_Qty4");
            viewString.Append("EstimatedTime, T1.SectionCostcentre_Qty4QuotedPlantCharge, T1.SectionCostcentre_");
            viewString.Append("Qty4QuotedLabourCharge, T1.SectionCostcentre_Qty4QuotedStockCharge, T1.SectionCo");
            viewString.Append("stcentre_Qty5EstimatedPlantCost, T1.SectionCostcentre_Qty5EstimatedLabourCost, T");
            viewString.Append("1.SectionCostcentre_Qty5EstimatedStockCost, T1.SectionCostcentre_Qty5EstimatedTi");
            viewString.Append("me, T1.SectionCostcentre_Qty5QuotedPlantCharge, T1.SectionCostcentre_Qty5QuotedL");
            viewString.Append("abourCharge, T1.SectionCostcentre_Qty5QuotedStockCharge, T1.SectionCostcentre_Ac");
            viewString.Append("tualPlantCost, T1.SectionCostcentre_ActualLabourCost, T1.SectionCostcentre_Actua");
            viewString.Append("lStockCost, T1.SectionCostcentre_Qty1WorkInstructions, T1.SectionCostcentre_Qty2");
            viewString.Append("WorkInstructions, T1.SectionCostcentre_Qty3WorkInstructions, T1.SectionCostcentr");
            viewString.Append("e_Qty4WorkInstructions, T1.SectionCostcentre_Qty5WorkInstructions, T1.SectionCos");
            viewString.Append("tcentre_IsCostCentreUsedinPurchaseOrder, T1.SectionCostcentre_IsMinimumCost, T1.");
            viewString.Append("SectionCostcentre_SetupTime, T1.SectionCostcentre_IsScheduled, T1.SectionCostcen");
            viewString.Append("tre_IsScheduleable, T1.SectionCostcentre_Locked, T1.SectionCostcentre_CostingAct");
            viewString.Append("ualCost, T1.SectionCostcentre_CostingActualTime, T1.SectionCostcentre_CostingAct");
            viewString.Append("ualQty, T1.SectionCostcentre_Name, T1.SectionCostcentre_QtyChargeBroker, T1.Sect");
            viewString.Append("ionCostcentre_MarkUpValueBroker, T1.SectionCostcentre_Qty1, T1.SectionCostcentre");
            viewString.Append("_Qty2, T1.SectionCostcentre_Qty3, T1.SectionCostcentre_SetupCost, T1.SectionCost");
            viewString.Append("centre_PricePerUnitQty)\r\n    FROM (\r\n        SELECT \r\n            T.SectionCostc");
            viewString.Append("entreId AS SectionCostcentre_SectionCostcentreId, \r\n            T.ItemSectionId ");
            viewString.Append("AS SectionCostcentre_ItemSectionId, \r\n            T.CostCentreId AS SectionCostc");
            viewString.Append("entre_CostCentreId, \r\n            T.CostCentreType AS SectionCostcentre_CostCent");
            viewString.Append("reType, \r\n            T.SystemCostCentreType AS SectionCostcentre_SystemCostCent");
            viewString.Append("reType, \r\n            T.[Order] AS SectionCostcentre_Order, \r\n            T.IsDi");
            viewString.Append("rectCost AS SectionCostcentre_IsDirectCost, \r\n            T.IsOptionalExtra AS S");
            viewString.Append("ectionCostcentre_IsOptionalExtra, \r\n            T.IsPurchaseOrderRaised AS Secti");
            viewString.Append("onCostcentre_IsPurchaseOrderRaised, \r\n            T.Status AS SectionCostcentre_");
            viewString.Append("Status, \r\n            T.ActivityUser AS SectionCostcentre_ActivityUser, \r\n      ");
            viewString.Append("      T.IsPrintable AS SectionCostcentre_IsPrintable, \r\n            T.EstimatedS");
            viewString.Append("tartTime AS SectionCostcentre_EstimatedStartTime, \r\n            T.EstimatedDurat");
            viewString.Append("ion AS SectionCostcentre_EstimatedDuration, \r\n            T.EstimatedEndTime AS ");
            viewString.Append("SectionCostcentre_EstimatedEndTime, \r\n            T.ActualDuration AS SectionCos");
            viewString.Append("tcentre_ActualDuration, \r\n            T.ActualStartDateTime AS SectionCostcentre");
            viewString.Append("_ActualStartDateTime, \r\n            T.ActualEndTime AS SectionCostcentre_ActualE");
            viewString.Append("ndTime, \r\n            T.Qty1Charge AS SectionCostcentre_Qty1Charge, \r\n          ");
            viewString.Append("  T.Qty2Charge AS SectionCostcentre_Qty2Charge, \r\n            T.Qty3Charge AS Se");
            viewString.Append("ctionCostcentre_Qty3Charge, \r\n            T.Qty4Charge AS SectionCostcentre_Qty4");
            viewString.Append("Charge, \r\n            T.Qty5Charge AS SectionCostcentre_Qty5Charge, \r\n          ");
            viewString.Append("  T.Qty1MarkUpID AS SectionCostcentre_Qty1MarkUpID, \r\n            T.Qty2MarkUpID");
            viewString.Append(" AS SectionCostcentre_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS SectionCostc");
            viewString.Append("entre_Qty3MarkUpID, \r\n            T.Qty4MarkUpID AS SectionCostcentre_Qty4MarkUp");
            viewString.Append("ID, \r\n            T.Qty5MarkUpID AS SectionCostcentre_Qty5MarkUpID, \r\n          ");
            viewString.Append("  T.Qty1MarkUpValue AS SectionCostcentre_Qty1MarkUpValue, \r\n            T.Qty2Ma");
            viewString.Append("rkUpValue AS SectionCostcentre_Qty2MarkUpValue, \r\n            T.Qty3MarkUpValue ");
            viewString.Append("AS SectionCostcentre_Qty3MarkUpValue, \r\n            T.Qty4MarkUpValue AS Section");
            viewString.Append("Costcentre_Qty4MarkUpValue, \r\n            T.Qty5MarkUpValue AS SectionCostcentre");
            viewString.Append("_Qty5MarkUpValue, \r\n            T.Qty1NetTotal AS SectionCostcentre_Qty1NetTotal");
            viewString.Append(", \r\n            T.Qty2NetTotal AS SectionCostcentre_Qty2NetTotal, \r\n            ");
            viewString.Append("T.Qty3NetTotal AS SectionCostcentre_Qty3NetTotal, \r\n            T.Qty4NetTotal A");
            viewString.Append("S SectionCostcentre_Qty4NetTotal, \r\n            T.Qty5NetTotal AS SectionCostcen");
            viewString.Append("tre_Qty5NetTotal, \r\n            T.Qty1EstimatedPlantCost AS SectionCostcentre_Qt");
            viewString.Append("y1EstimatedPlantCost, \r\n            T.Qty1EstimatedLabourCost AS SectionCostcent");
            viewString.Append("re_Qty1EstimatedLabourCost, \r\n            T.Qty1EstimatedStockCost AS SectionCos");
            viewString.Append("tcentre_Qty1EstimatedStockCost, \r\n            T.Qty1EstimatedTime AS SectionCost");
            viewString.Append("centre_Qty1EstimatedTime, \r\n            T.Qty1QuotedPlantCharge AS SectionCostce");
            viewString.Append("ntre_Qty1QuotedPlantCharge, \r\n            T.Qty1QuotedLabourCharge AS SectionCos");
            viewString.Append("tcentre_Qty1QuotedLabourCharge, \r\n            T.Qty1QuotedStockCharge AS Section");
            viewString.Append("Costcentre_Qty1QuotedStockCharge, \r\n            T.Qty2EstimatedPlantCost AS Sect");
            viewString.Append("ionCostcentre_Qty2EstimatedPlantCost, \r\n            T.Qty2EstimatedLabourCost AS");
            viewString.Append(" SectionCostcentre_Qty2EstimatedLabourCost, \r\n            T.Qty2EstimatedStockCo");
            viewString.Append("st AS SectionCostcentre_Qty2EstimatedStockCost, \r\n            T.Qty2EstimatedTim");
            viewString.Append("e AS SectionCostcentre_Qty2EstimatedTime, \r\n            T.Qty2QuotedPlantCharge ");
            viewString.Append("AS SectionCostcentre_Qty2QuotedPlantCharge, \r\n            T.Qty2QuotedLabourChar");
            viewString.Append("ge AS SectionCostcentre_Qty2QuotedLabourCharge, \r\n            T.Qty2QuotedStockC");
            viewString.Append("harge AS SectionCostcentre_Qty2QuotedStockCharge, \r\n            T.Qty3EstimatedP");
            viewString.Append("lantCost AS SectionCostcentre_Qty3EstimatedPlantCost, \r\n            T.Qty3Estima");
            viewString.Append("tedLabourCost AS SectionCostcentre_Qty3EstimatedLabourCost, \r\n            T.Qty3");
            viewString.Append("EstimatedStockCost AS SectionCostcentre_Qty3EstimatedStockCost, \r\n            T.");
            viewString.Append("Qty3EstimatedTime AS SectionCostcentre_Qty3EstimatedTime, \r\n            T.Qty3Qu");
            viewString.Append("otedPlantCharge AS SectionCostcentre_Qty3QuotedPlantCharge, \r\n            T.Qty3");
            viewString.Append("QuotedLabourCharge AS SectionCostcentre_Qty3QuotedLabourCharge, \r\n            T.");
            viewString.Append("Qty3QuotedStockCharge AS SectionCostcentre_Qty3QuotedStockCharge, \r\n            ");
            viewString.Append("T.Qty4EstimatedPlantCost AS SectionCostcentre_Qty4EstimatedPlantCost, \r\n        ");
            viewString.Append("    T.Qty4EstimatedLabourCost AS SectionCostcentre_Qty4EstimatedLabourCost, \r\n  ");
            viewString.Append("          T.Qty4EstimatedStockCost AS SectionCostcentre_Qty4EstimatedStockCost, ");
            viewString.Append("\r\n            T.Qty4EstimatedTime AS SectionCostcentre_Qty4EstimatedTime, \r\n    ");
            viewString.Append("        T.Qty4QuotedPlantCharge AS SectionCostcentre_Qty4QuotedPlantCharge, \r\n  ");
            viewString.Append("          T.Qty4QuotedLabourCharge AS SectionCostcentre_Qty4QuotedLabourCharge, ");
            viewString.Append("\r\n            T.Qty4QuotedStockCharge AS SectionCostcentre_Qty4QuotedStockCharge");
            viewString.Append(", \r\n            T.Qty5EstimatedPlantCost AS SectionCostcentre_Qty5EstimatedPlant");
            viewString.Append("Cost, \r\n            T.Qty5EstimatedLabourCost AS SectionCostcentre_Qty5Estimated");
            viewString.Append("LabourCost, \r\n            T.Qty5EstimatedStockCost AS SectionCostcentre_Qty5Esti");
            viewString.Append("matedStockCost, \r\n            T.Qty5EstimatedTime AS SectionCostcentre_Qty5Estim");
            viewString.Append("atedTime, \r\n            T.Qty5QuotedPlantCharge AS SectionCostcentre_Qty5QuotedP");
            viewString.Append("lantCharge, \r\n            T.Qty5QuotedLabourCharge AS SectionCostcentre_Qty5Quot");
            viewString.Append("edLabourCharge, \r\n            T.Qty5QuotedStockCharge AS SectionCostcentre_Qty5Q");
            viewString.Append("uotedStockCharge, \r\n            T.ActualPlantCost AS SectionCostcentre_ActualPla");
            viewString.Append("ntCost, \r\n            T.ActualLabourCost AS SectionCostcentre_ActualLabourCost, ");
            viewString.Append("\r\n            T.ActualStockCost AS SectionCostcentre_ActualStockCost, \r\n        ");
            viewString.Append("    T.Qty1WorkInstructions AS SectionCostcentre_Qty1WorkInstructions, \r\n        ");
            viewString.Append("    T.Qty2WorkInstructions AS SectionCostcentre_Qty2WorkInstructions, \r\n        ");
            viewString.Append("    T.Qty3WorkInstructions AS SectionCostcentre_Qty3WorkInstructions, \r\n        ");
            viewString.Append("    T.Qty4WorkInstructions AS SectionCostcentre_Qty4WorkInstructions, \r\n        ");
            viewString.Append("    T.Qty5WorkInstructions AS SectionCostcentre_Qty5WorkInstructions, \r\n        ");
            viewString.Append("    T.IsCostCentreUsedinPurchaseOrder AS SectionCostcentre_IsCostCentreUsedinPur");
            viewString.Append("chaseOrder, \r\n            T.IsMinimumCost AS SectionCostcentre_IsMinimumCost, \r\n");
            viewString.Append("            T.SetupTime AS SectionCostcentre_SetupTime, \r\n            T.IsSchedu");
            viewString.Append("led AS SectionCostcentre_IsScheduled, \r\n            T.IsScheduleable AS SectionC");
            viewString.Append("ostcentre_IsScheduleable, \r\n            T.Locked AS SectionCostcentre_Locked, \r\n");
            viewString.Append("            T.CostingActualCost AS SectionCostcentre_CostingActualCost, \r\n      ");
            viewString.Append("      T.CostingActualTime AS SectionCostcentre_CostingActualTime, \r\n            ");
            viewString.Append("T.CostingActualQty AS SectionCostcentre_CostingActualQty, \r\n            T.Name A");
            viewString.Append("S SectionCostcentre_Name, \r\n            T.QtyChargeBroker AS SectionCostcentre_Q");
            viewString.Append("tyChargeBroker, \r\n            T.MarkUpValueBroker AS SectionCostcentre_MarkUpVal");
            viewString.Append("ueBroker, \r\n            T.Qty1 AS SectionCostcentre_Qty1, \r\n            T.Qty2 A");
            viewString.Append("S SectionCostcentre_Qty2, \r\n            T.Qty3 AS SectionCostcentre_Qty3, \r\n    ");
            viewString.Append("        T.SetupCost AS SectionCostcentre_SetupCost, \r\n            T.PricePerUnit");
            viewString.Append("Qty AS SectionCostcentre_PricePerUnitQty, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM DomainModelsStoreContainer.SectionCostcentre AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostcentres", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostCentreDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView96()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostCentreDetails", @"
    SELECT VALUE -- Constructing SectionCostCentreDetails
        [DomainModels.SectionCostCentreDetail](T1.SectionCostCentreDetail_SectionCostCentreDetailId, T1.SectionCostCentreDetail_SectionCostCentreId, T1.SectionCostCentreDetail_StockId, T1.SectionCostCentreDetail_SupplierId, T1.SectionCostCentreDetail_Qty1, T1.SectionCostCentreDetail_Qty2, T1.SectionCostCentreDetail_Qty3, T1.SectionCostCentreDetail_CostPrice, T1.SectionCostCentreDetail_ActualQtyUsed, T1.SectionCostCentreDetail_StockName, T1.SectionCostCentreDetail_Supplier)
    FROM (
        SELECT 
            T.SectionCostCentreDetailId AS SectionCostCentreDetail_SectionCostCentreDetailId, 
            T.SectionCostCentreId AS SectionCostCentreDetail_SectionCostCentreId, 
            T.StockId AS SectionCostCentreDetail_StockId, 
            T.SupplierId AS SectionCostCentreDetail_SupplierId, 
            T.Qty1 AS SectionCostCentreDetail_Qty1, 
            T.Qty2 AS SectionCostCentreDetail_Qty2, 
            T.Qty3 AS SectionCostCentreDetail_Qty3, 
            T.CostPrice AS SectionCostCentreDetail_CostPrice, 
            T.ActualQtyUsed AS SectionCostCentreDetail_ActualQtyUsed, 
            T.StockName AS SectionCostCentreDetail_StockName, 
            T.Supplier AS SectionCostCentreDetail_Supplier, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionCostCentreDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostCentreResources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView97()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostCentreResources", @"
    SELECT VALUE -- Constructing SectionCostCentreResources
        [DomainModels.SectionCostCentreResource](T1.SectionCostCentreResource_SectionCostCentreResourceId, T1.SectionCostCentreResource_SectionCostcentreId, T1.SectionCostCentreResource_ResourceId, T1.SectionCostCentreResource_ResourceTime, T1.SectionCostCentreResource_IsScheduleable, T1.SectionCostCentreResource_IsScheduled)
    FROM (
        SELECT 
            T.SectionCostCentreResourceId AS SectionCostCentreResource_SectionCostCentreResourceId, 
            T.SectionCostcentreId AS SectionCostCentreResource_SectionCostcentreId, 
            T.ResourceId AS SectionCostCentreResource_ResourceId, 
            T.ResourceTime AS SectionCostCentreResource_ResourceTime, 
            T.IsScheduleable AS SectionCostCentreResource_IsScheduleable, 
            T.IsScheduled AS SectionCostCentreResource_IsScheduled, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionCostCentreResource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.States
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView98()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.States", @"
    SELECT VALUE -- Constructing States
        [DomainModels.State](T1.State_StateId, T1.State_CountryId, T1.State_StateCode, T1.State_StateName)
    FROM (
        SELECT 
            T.StateId AS State_StateId, 
            T.CountryId AS State_CountryId, 
            T.StateCode AS State_StateCode, 
            T.StateName AS State_StateName, 
            True AS _from0
        FROM DomainModelsStoreContainer.State AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Status
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView99()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Status", @"
    SELECT VALUE -- Constructing Status
        [DomainModels.Status](T1.Status_StatusId, T1.Status_StatusName, T1.Status_Description, T1.Status_StatusType)
    FROM (
        SELECT 
            T.StatusId AS Status_StatusId, 
            T.StatusName AS Status_StatusName, 
            T.Description AS Status_Description, 
            T.StatusType AS Status_StatusType, 
            True AS _from0
        FROM DomainModelsStoreContainer.Status AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Estimates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView100()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8312);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Estimates\r\n        [DomainModels.Estimate](T1");
            viewString.Append(".Estimate_EstimateId, T1.[Estimate.Estimate_Code], T1.[Estimate.Estimate_Name], ");
            viewString.Append("T1.Estimate_EnquiryId, T1.Estimate_ContactCompanyId, T1.Estimate_ContactId, T1.E");
            viewString.Append("stimate_StatusId, T1.[Estimate.Estimate_Total], T1.[Estimate.Estimate_ValidUpto]");
            viewString.Append(", T1.Estimate_UserNotes, T1.Estimate_LastUpdatedBy, T1.Estimate_CreationDate, T1");
            viewString.Append(".Estimate_CreationTime, T1.[Estimate.Created_by], T1.Estimate_SalesPersonId, T1.");
            viewString.Append("Estimate_HeadNotes, T1.Estimate_FootNotes, T1.Estimate_EstimateDate, T1.Estimate");
            viewString.Append("_ProjectionDate, T1.Estimate_Greeting, T1.Estimate_AccountNumber, T1.Estimate_Or");
            viewString.Append("derNo, T1.Estimate_SuccessChanceId, T1.Estimate_LockedBy, T1.Estimate_AddressId,");
            viewString.Append(" T1.Estimate_CompanyName, T1.Estimate_SectionFlagId, T1.Estimate_CompanyId, T1.E");
            viewString.Append("stimate_SourceId, T1.Estimate_ProductId, T1.Estimate_IsInPipeLine, T1.[Estimate.");
            viewString.Append("Order_Code], T1.[Estimate.Order_Date], T1.[Estimate.Order_CreationDateTime], T1.");
            viewString.Append("[Estimate.Order_DeliveryDate], T1.[Estimate.Order_ConfirmationDate], T1.[Estimat");
            viewString.Append("e.Order_Status], T1.[Estimate.Order_CompletionDate], T1.Estimate_CompanySiteId, ");
            viewString.Append("T1.Estimate_OrderManagerId, T1.Estimate_ArtworkByDate, T1.Estimate_DataByDate, T");
            viewString.Append("1.Estimate_TargetPrintDate, T1.Estimate_StartDeliveryDate, T1.Estimate_PaperByDa");
            viewString.Append("te, T1.Estimate_TargetBindDate, T1.Estimate_FinishDeliveryDate, T1.Estimate_Clas");
            viewString.Append("sification1Id, T1.Estimate_Classification2ID, T1.Estimate_IsOfficialOrder, T1.Es");
            viewString.Append("timate_CustomerPO, T1.Estimate_OfficialOrderSetBy, T1.Estimate_OfficialOrderSetO");
            viewString.Append("nDateTime, T1.Estimate_IsCreditApproved, T1.Estimate_CreditLimitForJob, T1.Estim");
            viewString.Append("ate_CreditLimitSetBy, T1.Estimate_CreditLimitSetOnDateTime, T1.Estimate_IsJobAll");
            viewString.Append("owedWOCreditCheck, T1.Estimate_AllowJobWOCreditCheckSetBy, T1.Estimate_AllowJobW");
            viewString.Append("OCreditCheckSetOnDateTime, T1.Estimate_NotesUpdateDateTime, T1.Estimate_NotesUpd");
            viewString.Append("atedByUserId, T1.Estimate_OrderSourceId, T1.Estimate_IsRead, T1.Estimate_Estimat");
            viewString.Append("eSentTo, T1.Estimate_EstimateValueChanged, T1.Estimate_NewItemAdded, T1.Estimate");
            viewString.Append("_isEstimate, T1.Estimate_isDirectSale, T1.Estimate_LastUpdateDate, T1.Estimate_N");
            viewString.Append("ominalCode, T1.Estimate_BillingAddressId, T1.Estimate_DeliveryCostCenterId, T1.E");
            viewString.Append("stimate_DeliveryCost, T1.Estimate_DeliveryCompletionTime, T1.Estimate_VoucherDis");
            viewString.Append("countRate, T1.Estimate_ReportSignedBy, T1.Estimate_InvoiceId, T1.Estimate_OrderR");
            viewString.Append("eportSignedBy, T1.Estimate_OrderReportLastPrinted, T1.Estimate_EstimateReportLas");
            viewString.Append("tPrinted, T1.Estimate_isEmailSent, T1.Estimate_DiscountVoucherID, T1.[Estimate.E");
            viewString.Append("stimate_TotalBroker], T1.Estimate_BrokerPO, T1.Estimate_BrokerId, T1.Estimate_Cl");
            viewString.Append("ientStatus, T1.Estimate_ParentId, T1.Estimate_Version, T1.Estimate_RefEstimateId");
            viewString.Append(", T1.Estimate_XeroAccessCode, T1.Estimate_OrganisationId)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.EstimateId AS Estimate_EstimateId, \r\n            T.Estimat");
            viewString.Append("e_Code AS [Estimate.Estimate_Code], \r\n            T.Estimate_Name AS [Estimate.E");
            viewString.Append("stimate_Name], \r\n            T.EnquiryId AS Estimate_EnquiryId, \r\n            T.");
            viewString.Append("ContactCompanyId AS Estimate_ContactCompanyId, \r\n            T.ContactId AS Esti");
            viewString.Append("mate_ContactId, \r\n            T.StatusId AS Estimate_StatusId, \r\n            T.E");
            viewString.Append("stimate_Total AS [Estimate.Estimate_Total], \r\n            T.Estimate_ValidUpto A");
            viewString.Append("S [Estimate.Estimate_ValidUpto], \r\n            T.UserNotes AS Estimate_UserNotes");
            viewString.Append(", \r\n            T.LastUpdatedBy AS Estimate_LastUpdatedBy, \r\n            T.Creat");
            viewString.Append("ionDate AS Estimate_CreationDate, \r\n            T.CreationTime AS Estimate_Creat");
            viewString.Append("ionTime, \r\n            T.Created_by AS [Estimate.Created_by], \r\n            T.Sa");
            viewString.Append("lesPersonId AS Estimate_SalesPersonId, \r\n            T.HeadNotes AS Estimate_Hea");
            viewString.Append("dNotes, \r\n            T.FootNotes AS Estimate_FootNotes, \r\n            T.Estimat");
            viewString.Append("eDate AS Estimate_EstimateDate, \r\n            T.ProjectionDate AS Estimate_Proje");
            viewString.Append("ctionDate, \r\n            T.Greeting AS Estimate_Greeting, \r\n            T.Accoun");
            viewString.Append("tNumber AS Estimate_AccountNumber, \r\n            T.OrderNo AS Estimate_OrderNo, ");
            viewString.Append("\r\n            T.SuccessChanceId AS Estimate_SuccessChanceId, \r\n            T.Loc");
            viewString.Append("kedBy AS Estimate_LockedBy, \r\n            T.AddressId AS Estimate_AddressId, \r\n ");
            viewString.Append("           T.CompanyName AS Estimate_CompanyName, \r\n            T.SectionFlagId ");
            viewString.Append("AS Estimate_SectionFlagId, \r\n            T.CompanyId AS Estimate_CompanyId, \r\n  ");
            viewString.Append("          T.SourceId AS Estimate_SourceId, \r\n            T.ProductId AS Estimate");
            viewString.Append("_ProductId, \r\n            T.IsInPipeLine AS Estimate_IsInPipeLine, \r\n           ");
            viewString.Append(" T.Order_Code AS [Estimate.Order_Code], \r\n            T.Order_Date AS [Estimate.");
            viewString.Append("Order_Date], \r\n            T.Order_CreationDateTime AS [Estimate.Order_CreationD");
            viewString.Append("ateTime], \r\n            T.Order_DeliveryDate AS [Estimate.Order_DeliveryDate], \r");
            viewString.Append("\n            T.Order_ConfirmationDate AS [Estimate.Order_ConfirmationDate], \r\n  ");
            viewString.Append("          T.Order_Status AS [Estimate.Order_Status], \r\n            T.Order_Compl");
            viewString.Append("etionDate AS [Estimate.Order_CompletionDate], \r\n            T.CompanySiteId AS E");
            viewString.Append("stimate_CompanySiteId, \r\n            T.OrderManagerId AS Estimate_OrderManagerId");
            viewString.Append(", \r\n            T.ArtworkByDate AS Estimate_ArtworkByDate, \r\n            T.DataB");
            viewString.Append("yDate AS Estimate_DataByDate, \r\n            T.TargetPrintDate AS Estimate_Target");
            viewString.Append("PrintDate, \r\n            T.StartDeliveryDate AS Estimate_StartDeliveryDate, \r\n  ");
            viewString.Append("          T.PaperByDate AS Estimate_PaperByDate, \r\n            T.TargetBindDate ");
            viewString.Append("AS Estimate_TargetBindDate, \r\n            T.FinishDeliveryDate AS Estimate_Finis");
            viewString.Append("hDeliveryDate, \r\n            T.Classification1Id AS Estimate_Classification1Id, ");
            viewString.Append("\r\n            T.Classification2ID AS Estimate_Classification2ID, \r\n            T");
            viewString.Append(".IsOfficialOrder AS Estimate_IsOfficialOrder, \r\n            T.CustomerPO AS Esti");
            viewString.Append("mate_CustomerPO, \r\n            T.OfficialOrderSetBy AS Estimate_OfficialOrderSet");
            viewString.Append("By, \r\n            T.OfficialOrderSetOnDateTime AS Estimate_OfficialOrderSetOnDat");
            viewString.Append("eTime, \r\n            T.IsCreditApproved AS Estimate_IsCreditApproved, \r\n        ");
            viewString.Append("    T.CreditLimitForJob AS Estimate_CreditLimitForJob, \r\n            T.CreditLim");
            viewString.Append("itSetBy AS Estimate_CreditLimitSetBy, \r\n            T.CreditLimitSetOnDateTime A");
            viewString.Append("S Estimate_CreditLimitSetOnDateTime, \r\n            T.IsJobAllowedWOCreditCheck A");
            viewString.Append("S Estimate_IsJobAllowedWOCreditCheck, \r\n            T.AllowJobWOCreditCheckSetBy");
            viewString.Append(" AS Estimate_AllowJobWOCreditCheckSetBy, \r\n            T.AllowJobWOCreditCheckSe");
            viewString.Append("tOnDateTime AS Estimate_AllowJobWOCreditCheckSetOnDateTime, \r\n            T.Note");
            viewString.Append("sUpdateDateTime AS Estimate_NotesUpdateDateTime, \r\n            T.NotesUpdatedByU");
            viewString.Append("serId AS Estimate_NotesUpdatedByUserId, \r\n            T.OrderSourceId AS Estimat");
            viewString.Append("e_OrderSourceId, \r\n            T.IsRead AS Estimate_IsRead, \r\n            T.Esti");
            viewString.Append("mateSentTo AS Estimate_EstimateSentTo, \r\n            T.EstimateValueChanged AS E");
            viewString.Append("stimate_EstimateValueChanged, \r\n            T.NewItemAdded AS Estimate_NewItemAd");
            viewString.Append("ded, \r\n            T.isEstimate AS Estimate_isEstimate, \r\n            T.isDirect");
            viewString.Append("Sale AS Estimate_isDirectSale, \r\n            T.LastUpdateDate AS Estimate_LastUp");
            viewString.Append("dateDate, \r\n            T.NominalCode AS Estimate_NominalCode, \r\n            T.B");
            viewString.Append("illingAddressId AS Estimate_BillingAddressId, \r\n            T.DeliveryCostCenter");
            viewString.Append("Id AS Estimate_DeliveryCostCenterId, \r\n            T.DeliveryCost AS Estimate_De");
            viewString.Append("liveryCost, \r\n            T.DeliveryCompletionTime AS Estimate_DeliveryCompletio");
            viewString.Append("nTime, \r\n            T.VoucherDiscountRate AS Estimate_VoucherDiscountRate, \r\n  ");
            viewString.Append("          T.ReportSignedBy AS Estimate_ReportSignedBy, \r\n            T.InvoiceId");
            viewString.Append(" AS Estimate_InvoiceId, \r\n            T.OrderReportSignedBy AS Estimate_OrderRep");
            viewString.Append("ortSignedBy, \r\n            T.OrderReportLastPrinted AS Estimate_OrderReportLastP");
            viewString.Append("rinted, \r\n            T.EstimateReportLastPrinted AS Estimate_EstimateReportLast");
            viewString.Append("Printed, \r\n            T.isEmailSent AS Estimate_isEmailSent, \r\n            T.Di");
            viewString.Append("scountVoucherID AS Estimate_DiscountVoucherID, \r\n            T.Estimate_TotalBro");
            viewString.Append("ker AS [Estimate.Estimate_TotalBroker], \r\n            T.BrokerPO AS Estimate_Bro");
            viewString.Append("kerPO, \r\n            T.BrokerId AS Estimate_BrokerId, \r\n            T.ClientStat");
            viewString.Append("us AS Estimate_ClientStatus, \r\n            T.ParentId AS Estimate_ParentId, \r\n  ");
            viewString.Append("          T.Version AS Estimate_Version, \r\n            T.RefEstimateId AS Estima");
            viewString.Append("te_RefEstimateId, \r\n            T.XeroAccessCode AS Estimate_XeroAccessCode, \r\n ");
            viewString.Append("           T.OrganisationId AS Estimate_OrganisationId, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM DomainModelsStoreContainer.Estimate AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Estimates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaymentGateways
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView101()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaymentGateways", @"
    SELECT VALUE -- Constructing PaymentGateways
        [DomainModels.PaymentGateway](T1.PaymentGateway_PaymentGatewayId, T1.PaymentGateway_BusinessEmail, T1.PaymentGateway_IdentityToken, T1.PaymentGateway_isActive, T1.PaymentGateway_CompanyId, T1.PaymentGateway_PaymentMethodId, T1.PaymentGateway_SecureHash)
    FROM (
        SELECT 
            T.PaymentGatewayId AS PaymentGateway_PaymentGatewayId, 
            T.BusinessEmail AS PaymentGateway_BusinessEmail, 
            T.IdentityToken AS PaymentGateway_IdentityToken, 
            T.isActive AS PaymentGateway_isActive, 
            T.CompanyId AS PaymentGateway_CompanyId, 
            T.PaymentMethodId AS PaymentGateway_PaymentMethodId, 
            T.SecureHash AS PaymentGateway_SecureHash, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaymentGateway AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaymentMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView102()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaymentMethods", @"
    SELECT VALUE -- Constructing PaymentMethods
        [DomainModels.PaymentMethod](T1.PaymentMethod_PaymentMethodId, T1.PaymentMethod_MethodName, T1.PaymentMethod_IsActive)
    FROM (
        SELECT 
            T.PaymentMethodId AS PaymentMethod_PaymentMethodId, 
            T.MethodName AS PaymentMethod_MethodName, 
            T.IsActive AS PaymentMethod_IsActive, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaymentMethod AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PrePayments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView103()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PrePayments", @"
    SELECT VALUE -- Constructing PrePayments
        [DomainModels.PrePayment](T1.PrePayment_PrePaymentId, T1.PrePayment_CustomerId, T1.PrePayment_OrderId, T1.PrePayment_Amount, T1.PrePayment_PaymentDate, T1.PrePayment_PayPalResponseId, T1.PrePayment_PaymentMethodId, T1.PrePayment_ReferenceCode, T1.PrePayment_PaymentDescription)
    FROM (
        SELECT 
            T.PrePaymentId AS PrePayment_PrePaymentId, 
            T.CustomerId AS PrePayment_CustomerId, 
            T.OrderId AS PrePayment_OrderId, 
            T.Amount AS PrePayment_Amount, 
            T.PaymentDate AS PrePayment_PaymentDate, 
            T.PayPalResponseId AS PrePayment_PayPalResponseId, 
            T.PaymentMethodId AS PrePayment_PaymentMethodId, 
            T.ReferenceCode AS PrePayment_ReferenceCode, 
            T.PaymentDescription AS PrePayment_PaymentDescription, 
            True AS _from0
        FROM DomainModelsStoreContainer.PrePayment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.RaveReviews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView104()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.RaveReviews", @"
    SELECT VALUE -- Constructing RaveReviews
        [DomainModels.RaveReview](T1.RaveReview_ReviewId, T1.RaveReview_ReviewBy, T1.RaveReview_Review, T1.RaveReview_ReviewDate, T1.RaveReview_isDisplay, T1.RaveReview_SortOrder, T1.RaveReview_OrganisationId, T1.RaveReview_CompanyId)
    FROM (
        SELECT 
            T.ReviewId AS RaveReview_ReviewId, 
            T.ReviewBy AS RaveReview_ReviewBy, 
            T.Review AS RaveReview_Review, 
            T.ReviewDate AS RaveReview_ReviewDate, 
            T.isDisplay AS RaveReview_isDisplay, 
            T.SortOrder AS RaveReview_SortOrder, 
            T.OrganisationId AS RaveReview_OrganisationId, 
            T.CompanyId AS RaveReview_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.RaveReview AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmailEvents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView105()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmailEvents", @"
    SELECT VALUE -- Constructing EmailEvents
        [DomainModels.EmailEvent](T1.EmailEvent_EmailEventId, T1.EmailEvent_EventName, T1.EmailEvent_Description, T1.EmailEvent_EventType)
    FROM (
        SELECT 
            T.EmailEventId AS EmailEvent_EmailEventId, 
            T.EventName AS EmailEvent_EventName, 
            T.Description AS EmailEvent_Description, 
            T.EventType AS EmailEvent_EventType, 
            True AS _from0
        FROM DomainModelsStoreContainer.EmailEvent AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Inquiries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView106()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Inquiries", @"
    SELECT VALUE -- Constructing Inquiries
        [DomainModels.Inquiry](T1.Inquiry_InquiryId, T1.Inquiry_Title, T1.Inquiry_ContactId, T1.Inquiry_CreatedDate, T1.Inquiry_SourceId, T1.Inquiry_ContactCompanyId, T1.Inquiry_RequireByDate, T1.Inquiry_SystemUserId, T1.Inquiry_Status, T1.Inquiry_IsDirectInquiry, T1.Inquiry_FlagId, T1.Inquiry_InquiryCode, T1.Inquiry_CreatedBy, T1.Inquiry_BrokerContactCompanyId, T1.Inquiry_OrganisationId)
    FROM (
        SELECT 
            T.InquiryId AS Inquiry_InquiryId, 
            T.Title AS Inquiry_Title, 
            T.ContactId AS Inquiry_ContactId, 
            T.CreatedDate AS Inquiry_CreatedDate, 
            T.SourceId AS Inquiry_SourceId, 
            T.ContactCompanyId AS Inquiry_ContactCompanyId, 
            T.RequireByDate AS Inquiry_RequireByDate, 
            T.SystemUserId AS Inquiry_SystemUserId, 
            T.Status AS Inquiry_Status, 
            T.IsDirectInquiry AS Inquiry_IsDirectInquiry, 
            T.FlagId AS Inquiry_FlagId, 
            T.InquiryCode AS Inquiry_InquiryCode, 
            T.CreatedBy AS Inquiry_CreatedBy, 
            T.BrokerContactCompanyId AS Inquiry_BrokerContactCompanyId, 
            T.OrganisationId AS Inquiry_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Inquiry AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InquiryAttachments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView107()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InquiryAttachments", @"
    SELECT VALUE -- Constructing InquiryAttachments
        [DomainModels.InquiryAttachment](T1.InquiryAttachment_AttachmentId, T1.InquiryAttachment_OrignalFileName, T1.InquiryAttachment_AttachmentPath, T1.InquiryAttachment_InquiryId, T1.InquiryAttachment_Extension)
    FROM (
        SELECT 
            T.AttachmentId AS InquiryAttachment_AttachmentId, 
            T.OrignalFileName AS InquiryAttachment_OrignalFileName, 
            T.AttachmentPath AS InquiryAttachment_AttachmentPath, 
            T.InquiryId AS InquiryAttachment_InquiryId, 
            T.Extension AS InquiryAttachment_Extension, 
            True AS _from0
        FROM DomainModelsStoreContainer.InquiryAttachment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InquiryItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView108()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InquiryItems", @"
    SELECT VALUE -- Constructing InquiryItems
        [DomainModels.InquiryItem](T1.InquiryItem_InquiryItemId, T1.InquiryItem_Title, T1.InquiryItem_Notes, T1.InquiryItem_DeliveryDate, T1.InquiryItem_InquiryId, T1.InquiryItem_ProductId)
    FROM (
        SELECT 
            T.InquiryItemId AS InquiryItem_InquiryItemId, 
            T.Title AS InquiryItem_Title, 
            T.Notes AS InquiryItem_Notes, 
            T.DeliveryDate AS InquiryItem_DeliveryDate, 
            T.InquiryId AS InquiryItem_InquiryId, 
            T.ProductId AS InquiryItem_ProductId, 
            True AS _from0
        FROM DomainModelsStoreContainer.InquiryItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView109()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3244);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [DomainModels.Invoice](T1.I");
            viewString.Append("nvoice_InvoiceId, T1.Invoice_InvoiceCode, T1.Invoice_InvoiceType, T1.Invoice_Inv");
            viewString.Append("oiceName, T1.Invoice_ContactCompanyID, T1.Invoice_ContactId, T1.Invoice_ContactC");
            viewString.Append("ompany, T1.Invoice_OrderNo, T1.Invoice_InvoiceStatus, T1.Invoice_InvoiceTotal, T");
            viewString.Append("1.Invoice_InvoiceDate, T1.Invoice_LastUpdatedBy, T1.Invoice_CreationDate, T1.Inv");
            viewString.Append("oice_CreatedBy, T1.Invoice_AccountNumber, T1.Invoice_Terms, T1.Invoice_InvoicePo");
            viewString.Append("stingDate, T1.Invoice_InvoicePostedBy, T1.Invoice_LockedBy, T1.Invoice_AddressId");
            viewString.Append(", T1.Invoice_IsArchive, T1.Invoice_TaxValue, T1.Invoice_GrandTotal, T1.Invoice_F");
            viewString.Append("lagID, T1.Invoice_UserNotes, T1.Invoice_NotesUpdateDateTime, T1.Invoice_NotesUpd");
            viewString.Append("atedByUserID, T1.Invoice_SystemSiteId, T1.Invoice_EstimateId, T1.Invoice_IsRead,");
            viewString.Append(" T1.Invoice_IsProformaInvoice, T1.Invoice_IsPrinted, T1.Invoice_LastUpdateDate, ");
            viewString.Append("T1.Invoice_ReportSignedBy, T1.Invoice_ReportLastPrintedDate, T1.Invoice_HeadNote");
            viewString.Append("s, T1.Invoice_FootNotes, T1.Invoice_XeroAccessCode, T1.Invoice_OrganisationId)\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.InvoiceId AS Invoice_InvoiceId, \r\n   ");
            viewString.Append("         T.InvoiceCode AS Invoice_InvoiceCode, \r\n            T.InvoiceType AS In");
            viewString.Append("voice_InvoiceType, \r\n            T.InvoiceName AS Invoice_InvoiceName, \r\n       ");
            viewString.Append("     T.ContactCompanyID AS Invoice_ContactCompanyID, \r\n            T.ContactId A");
            viewString.Append("S Invoice_ContactId, \r\n            T.ContactCompany AS Invoice_ContactCompany, \r");
            viewString.Append("\n            T.OrderNo AS Invoice_OrderNo, \r\n            T.InvoiceStatus AS Invo");
            viewString.Append("ice_InvoiceStatus, \r\n            T.InvoiceTotal AS Invoice_InvoiceTotal, \r\n     ");
            viewString.Append("       T.InvoiceDate AS Invoice_InvoiceDate, \r\n            T.LastUpdatedBy AS In");
            viewString.Append("voice_LastUpdatedBy, \r\n            T.CreationDate AS Invoice_CreationDate, \r\n   ");
            viewString.Append("         T.CreatedBy AS Invoice_CreatedBy, \r\n            T.AccountNumber AS Invo");
            viewString.Append("ice_AccountNumber, \r\n            T.Terms AS Invoice_Terms, \r\n            T.Invoi");
            viewString.Append("cePostingDate AS Invoice_InvoicePostingDate, \r\n            T.InvoicePostedBy AS ");
            viewString.Append("Invoice_InvoicePostedBy, \r\n            T.LockedBy AS Invoice_LockedBy, \r\n       ");
            viewString.Append("     T.AddressId AS Invoice_AddressId, \r\n            T.IsArchive AS Invoice_IsAr");
            viewString.Append("chive, \r\n            T.TaxValue AS Invoice_TaxValue, \r\n            T.GrandTotal ");
            viewString.Append("AS Invoice_GrandTotal, \r\n            T.FlagID AS Invoice_FlagID, \r\n            T");
            viewString.Append(".UserNotes AS Invoice_UserNotes, \r\n            T.NotesUpdateDateTime AS Invoice_");
            viewString.Append("NotesUpdateDateTime, \r\n            T.NotesUpdatedByUserID AS Invoice_NotesUpdate");
            viewString.Append("dByUserID, \r\n            T.SystemSiteId AS Invoice_SystemSiteId, \r\n            T");
            viewString.Append(".EstimateId AS Invoice_EstimateId, \r\n            T.IsRead AS Invoice_IsRead, \r\n ");
            viewString.Append("           T.IsProformaInvoice AS Invoice_IsProformaInvoice, \r\n            T.IsP");
            viewString.Append("rinted AS Invoice_IsPrinted, \r\n            T.LastUpdateDate AS Invoice_LastUpdat");
            viewString.Append("eDate, \r\n            T.ReportSignedBy AS Invoice_ReportSignedBy, \r\n            T");
            viewString.Append(".ReportLastPrintedDate AS Invoice_ReportLastPrintedDate, \r\n            T.HeadNot");
            viewString.Append("es AS Invoice_HeadNotes, \r\n            T.FootNotes AS Invoice_FootNotes, \r\n     ");
            viewString.Append("       T.XeroAccessCode AS Invoice_XeroAccessCode, \r\n            T.OrganisationI");
            viewString.Append("d AS Invoice_OrganisationId, \r\n            True AS _from0\r\n        FROM DomainMo");
            viewString.Append("delsStoreContainer.Invoice AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InvoiceDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView110()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InvoiceDetails", @"
    SELECT VALUE -- Constructing InvoiceDetails
        [DomainModels.InvoiceDetail](T1.InvoiceDetail_InvoiceDetailId, T1.InvoiceDetail_InvoiceId, T1.InvoiceDetail_DetailType, T1.InvoiceDetail_ItemId, T1.InvoiceDetail_InvoiceTitle, T1.InvoiceDetail_NominalCode, T1.InvoiceDetail_ItemCharge, T1.InvoiceDetail_Quantity, T1.InvoiceDetail_ItemTaxValue, T1.InvoiceDetail_FlagId, T1.InvoiceDetail_DepartmentId, T1.InvoiceDetail_Description, T1.InvoiceDetail_ItemType, T1.InvoiceDetail_TaxId)
    FROM (
        SELECT 
            T.InvoiceDetailId AS InvoiceDetail_InvoiceDetailId, 
            T.InvoiceId AS InvoiceDetail_InvoiceId, 
            T.DetailType AS InvoiceDetail_DetailType, 
            T.ItemId AS InvoiceDetail_ItemId, 
            T.InvoiceTitle AS InvoiceDetail_InvoiceTitle, 
            T.NominalCode AS InvoiceDetail_NominalCode, 
            T.ItemCharge AS InvoiceDetail_ItemCharge, 
            T.Quantity AS InvoiceDetail_Quantity, 
            T.ItemTaxValue AS InvoiceDetail_ItemTaxValue, 
            T.FlagId AS InvoiceDetail_FlagId, 
            T.DepartmentId AS InvoiceDetail_DepartmentId, 
            T.Description AS InvoiceDetail_Description, 
            T.ItemType AS InvoiceDetail_ItemType, 
            T.TaxId AS InvoiceDetail_TaxId, 
            True AS _from0
        FROM DomainModelsStoreContainer.InvoiceDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.RegistrationQuestions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView111()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.RegistrationQuestions", @"
    SELECT VALUE -- Constructing RegistrationQuestions
        [DomainModels.RegistrationQuestion](T1.RegistrationQuestion_QuestionId, T1.RegistrationQuestion_Question)
    FROM (
        SELECT 
            T.QuestionId AS RegistrationQuestion_QuestionId, 
            T.Question AS RegistrationQuestion_Question, 
            True AS _from0
        FROM DomainModelsStoreContainer.RegistrationQuestion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Campaigns
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView112()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9031);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Campaigns\r\n        [DomainModels.Campaign](T1");
            viewString.Append(".Campaign_CampaignId, T1.Campaign_CampaignName, T1.Campaign_Description, T1.Camp");
            viewString.Append("aign_DataSourceType, T1.Campaign_RunCampaignFor, T1.Campaign_IncludeCustomers, T");
            viewString.Append("1.Campaign_IncludeSuppliers, T1.Campaign_IncludeProspects, T1.Campaign_IncludeKe");
            viewString.Append("yword, T1.Campaign_SearchKeyword, T1.Campaign_IncludeType, T1.Campaign_IncludeFl");
            viewString.Append("ag, T1.Campaign_IncludeName, T1.Campaign_IncludeAddress, T1.Campaign_IncludeCont");
            viewString.Append("actName, T1.Campaign_SubjectA, T1.Campaign_HTMLMessageA, T1.Campaign_AttachmentF");
            viewString.Append("ileNameFieldName, T1.Campaign_AttachmentType, T1.Campaign_EmailField, T1.Campaig");
            viewString.Append("n_CCEmailField, T1.Campaign_SMTPServer, T1.Campaign_FromAddress, T1.Campaign_Ret");
            viewString.Append("urnPathAddress, T1.Campaign_ReplyToAddress, T1.Campaign_ErrorsToAddress, T1.Camp");
            viewString.Append("aign_SMTPServerType, T1.Campaign_EnableSchedule, T1.Campaign_StartDateTime, T1.C");
            viewString.Append("ampaign_RepeatEvery, T1.Campaign_RepeatInterval, T1.Campaign_LastRunOn, T1.Campa");
            viewString.Append("ign_MessageType, T1.Campaign_ABMessaging, T1.Campaign_SubjectB, T1.Campaign_HTML");
            viewString.Append("MessageB, T1.Campaign_IncludePlainText, T1.Campaign_SMTPDelaySeconds, T1.Campaig");
            viewString.Append("n_EmailAddressLogFiles, T1.Campaign_PlainTextMessageA, T1.Campaign_PlainTextMess");
            viewString.Append("ageB, T1.Campaign_UId, T1.Campaign_Private, T1.Campaign_SubscribeEmailUpdateFiel");
            viewString.Append("d, T1.Campaign_UnsubscribeEmailHyperlinkText, T1.Campaign_SubscribeEmailAddress,");
            viewString.Append(" T1.Campaign_SubscribeEmailHyperlinkText, T1.Campaign_UnSubscribeCount, T1.Campa");
            viewString.Append("ign_SubscribeCount, T1.Campaign_BounceCount, T1.Campaign_LastRunEndDateTime, T1.");
            viewString.Append("Campaign_MessageCount, T1.Campaign_SuccessCount, T1.Campaign_FailedCount, T1.Cam");
            viewString.Append("paign_EnableLogFiles, T1.Campaign_ContinueIfWritebackError, T1.Campaign_EmailFie");
            viewString.Append("ldPreviewColumn2, T1.Campaign_EmailFieldPreviewColumn3, T1.Campaign_AttachmentFi");
            viewString.Append("leName, T1.Campaign_ClearCounters, T1.Campaign_SMTPServer2, T1.Campaign_LockedBy");
            viewString.Append("UID, T1.Campaign_UnSubscribeCountTotal, T1.Campaign_SubscribeCountTotal, T1.Camp");
            viewString.Append("aign_BounceCountTotal, T1.Campaign_EnableEmailAddressCache, T1.Campaign_OpenedCo");
            viewString.Append("unt, T1.Campaign_OpenedCountTotal, T1.Campaign_OpenedEmailUpdateField, T1.Campai");
            viewString.Append("gn_EnableOpenedEmail, T1.Campaign_ABMessagingUpdateField, T1.Campaign_EmailLogFi");
            viewString.Append("leAddress2, T1.Campaign_EmailLogFileAddress3, T1.Campaign_CampaignCategory, T1.C");
            viewString.Append("ampaign_SoftBounceCountTotal, T1.Campaign_SMTPUsername, T1.Campaign_SMTPPassword");
            viewString.Append(", T1.Campaign_EnableWriteBackTab, T1.Campaign_EnableClickThruTab, T1.Campaign_Un");
            viewString.Append("subscribeMethod, T1.Campaign_UseWYSWYG, T1.Campaign_CreationDate, T1.Campaign_St");
            viewString.Append("atus, T1.Campaign_ValidateEmail, T1.Campaign_CampaignType, T1.Campaign_SystemSit");
            viewString.Append("eId, T1.Campaign_IncludeCorporateCustomers, T1.Campaign_IsEnabled, T1.Campaign_S");
            viewString.Append("endEmailAfterDays, T1.Campaign_EmailEvent, T1.Campaign_isSystemEmail, T1.Campaig");
            viewString.Append("n_FlagIDs, T1.Campaign_CustomerTypeIDs, T1.Campaign_GroupIDs, T1.Campaign_FromNa");
            viewString.Append("me, T1.Campaign_CampaignReportId, T1.Campaign_OrganisationId, T1.Campaign_Compan");
            viewString.Append("yId, T1.Campaign_UnsubscribeEmailAddress)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.CampaignId AS Campaign_CampaignId, \r\n            T.CampaignName AS Campaig");
            viewString.Append("n_CampaignName, \r\n            T.Description AS Campaign_Description, \r\n         ");
            viewString.Append("   T.DataSourceType AS Campaign_DataSourceType, \r\n            T.RunCampaignFor A");
            viewString.Append("S Campaign_RunCampaignFor, \r\n            T.IncludeCustomers AS Campaign_IncludeC");
            viewString.Append("ustomers, \r\n            T.IncludeSuppliers AS Campaign_IncludeSuppliers, \r\n     ");
            viewString.Append("       T.IncludeProspects AS Campaign_IncludeProspects, \r\n            T.IncludeK");
            viewString.Append("eyword AS Campaign_IncludeKeyword, \r\n            T.SearchKeyword AS Campaign_Sea");
            viewString.Append("rchKeyword, \r\n            T.IncludeType AS Campaign_IncludeType, \r\n            T");
            viewString.Append(".IncludeFlag AS Campaign_IncludeFlag, \r\n            T.IncludeName AS Campaign_In");
            viewString.Append("cludeName, \r\n            T.IncludeAddress AS Campaign_IncludeAddress, \r\n        ");
            viewString.Append("    T.IncludeContactName AS Campaign_IncludeContactName, \r\n            T.Subject");
            viewString.Append("A AS Campaign_SubjectA, \r\n            T.HTMLMessageA AS Campaign_HTMLMessageA, \r");
            viewString.Append("\n            T.AttachmentFileNameFieldName AS Campaign_AttachmentFileNameFieldNa");
            viewString.Append("me, \r\n            T.AttachmentType AS Campaign_AttachmentType, \r\n            T.E");
            viewString.Append("mailField AS Campaign_EmailField, \r\n            T.CCEmailField AS Campaign_CCEma");
            viewString.Append("ilField, \r\n            T.SMTPServer AS Campaign_SMTPServer, \r\n            T.From");
            viewString.Append("Address AS Campaign_FromAddress, \r\n            T.ReturnPathAddress AS Campaign_R");
            viewString.Append("eturnPathAddress, \r\n            T.ReplyToAddress AS Campaign_ReplyToAddress, \r\n ");
            viewString.Append("           T.ErrorsToAddress AS Campaign_ErrorsToAddress, \r\n            T.SMTPSe");
            viewString.Append("rverType AS Campaign_SMTPServerType, \r\n            T.EnableSchedule AS Campaign_");
            viewString.Append("EnableSchedule, \r\n            T.StartDateTime AS Campaign_StartDateTime, \r\n     ");
            viewString.Append("       T.RepeatEvery AS Campaign_RepeatEvery, \r\n            T.RepeatInterval AS ");
            viewString.Append("Campaign_RepeatInterval, \r\n            T.LastRunOn AS Campaign_LastRunOn, \r\n    ");
            viewString.Append("        T.MessageType AS Campaign_MessageType, \r\n            T.ABMessaging AS Ca");
            viewString.Append("mpaign_ABMessaging, \r\n            T.SubjectB AS Campaign_SubjectB, \r\n           ");
            viewString.Append(" T.HTMLMessageB AS Campaign_HTMLMessageB, \r\n            T.IncludePlainText AS Ca");
            viewString.Append("mpaign_IncludePlainText, \r\n            T.SMTPDelaySeconds AS Campaign_SMTPDelayS");
            viewString.Append("econds, \r\n            T.EmailAddressLogFiles AS Campaign_EmailAddressLogFiles, \r");
            viewString.Append("\n            T.PlainTextMessageA AS Campaign_PlainTextMessageA, \r\n            T.");
            viewString.Append("PlainTextMessageB AS Campaign_PlainTextMessageB, \r\n            T.UId AS Campaign");
            viewString.Append("_UId, \r\n            T.Private AS Campaign_Private, \r\n            T.SubscribeEmai");
            viewString.Append("lUpdateField AS Campaign_SubscribeEmailUpdateField, \r\n            T.UnsubscribeE");
            viewString.Append("mailHyperlinkText AS Campaign_UnsubscribeEmailHyperlinkText, \r\n            T.Sub");
            viewString.Append("scribeEmailAddress AS Campaign_SubscribeEmailAddress, \r\n            T.SubscribeE");
            viewString.Append("mailHyperlinkText AS Campaign_SubscribeEmailHyperlinkText, \r\n            T.UnSub");
            viewString.Append("scribeCount AS Campaign_UnSubscribeCount, \r\n            T.SubscribeCount AS Camp");
            viewString.Append("aign_SubscribeCount, \r\n            T.BounceCount AS Campaign_BounceCount, \r\n    ");
            viewString.Append("        T.LastRunEndDateTime AS Campaign_LastRunEndDateTime, \r\n            T.Mes");
            viewString.Append("sageCount AS Campaign_MessageCount, \r\n            T.SuccessCount AS Campaign_Suc");
            viewString.Append("cessCount, \r\n            T.FailedCount AS Campaign_FailedCount, \r\n            T.");
            viewString.Append("EnableLogFiles AS Campaign_EnableLogFiles, \r\n            T.ContinueIfWritebackEr");
            viewString.Append("ror AS Campaign_ContinueIfWritebackError, \r\n            T.EmailFieldPreviewColum");
            viewString.Append("n2 AS Campaign_EmailFieldPreviewColumn2, \r\n            T.EmailFieldPreviewColumn");
            viewString.Append("3 AS Campaign_EmailFieldPreviewColumn3, \r\n            T.AttachmentFileName AS Ca");
            viewString.Append("mpaign_AttachmentFileName, \r\n            T.ClearCounters AS Campaign_ClearCounte");
            viewString.Append("rs, \r\n            T.SMTPServer2 AS Campaign_SMTPServer2, \r\n            T.LockedB");
            viewString.Append("yUID AS Campaign_LockedByUID, \r\n            T.UnSubscribeCountTotal AS Campaign_");
            viewString.Append("UnSubscribeCountTotal, \r\n            T.SubscribeCountTotal AS Campaign_Subscribe");
            viewString.Append("CountTotal, \r\n            T.BounceCountTotal AS Campaign_BounceCountTotal, \r\n   ");
            viewString.Append("         T.EnableEmailAddressCache AS Campaign_EnableEmailAddressCache, \r\n      ");
            viewString.Append("      T.OpenedCount AS Campaign_OpenedCount, \r\n            T.OpenedCountTotal AS");
            viewString.Append(" Campaign_OpenedCountTotal, \r\n            T.OpenedEmailUpdateField AS Campaign_O");
            viewString.Append("penedEmailUpdateField, \r\n            T.EnableOpenedEmail AS Campaign_EnableOpene");
            viewString.Append("dEmail, \r\n            T.ABMessagingUpdateField AS Campaign_ABMessagingUpdateFiel");
            viewString.Append("d, \r\n            T.EmailLogFileAddress2 AS Campaign_EmailLogFileAddress2, \r\n    ");
            viewString.Append("        T.EmailLogFileAddress3 AS Campaign_EmailLogFileAddress3, \r\n            T");
            viewString.Append(".CampaignCategory AS Campaign_CampaignCategory, \r\n            T.SoftBounceCountT");
            viewString.Append("otal AS Campaign_SoftBounceCountTotal, \r\n            T.SMTPUsername AS Campaign_");
            viewString.Append("SMTPUsername, \r\n            T.SMTPPassword AS Campaign_SMTPPassword, \r\n         ");
            viewString.Append("   T.EnableWriteBackTab AS Campaign_EnableWriteBackTab, \r\n            T.EnableCl");
            viewString.Append("ickThruTab AS Campaign_EnableClickThruTab, \r\n            T.UnsubscribeMethod AS ");
            viewString.Append("Campaign_UnsubscribeMethod, \r\n            T.UseWYSWYG AS Campaign_UseWYSWYG, \r\n ");
            viewString.Append("           T.CreationDate AS Campaign_CreationDate, \r\n            T.Status AS Ca");
            viewString.Append("mpaign_Status, \r\n            T.ValidateEmail AS Campaign_ValidateEmail, \r\n      ");
            viewString.Append("      T.CampaignType AS Campaign_CampaignType, \r\n            T.SystemSiteId AS C");
            viewString.Append("ampaign_SystemSiteId, \r\n            T.IncludeCorporateCustomers AS Campaign_Incl");
            viewString.Append("udeCorporateCustomers, \r\n            T.IsEnabled AS Campaign_IsEnabled, \r\n      ");
            viewString.Append("      T.SendEmailAfterDays AS Campaign_SendEmailAfterDays, \r\n            T.Email");
            viewString.Append("Event AS Campaign_EmailEvent, \r\n            T.isSystemEmail AS Campaign_isSystem");
            viewString.Append("Email, \r\n            T.FlagIDs AS Campaign_FlagIDs, \r\n            T.CustomerType");
            viewString.Append("IDs AS Campaign_CustomerTypeIDs, \r\n            T.GroupIDs AS Campaign_GroupIDs, ");
            viewString.Append("\r\n            T.FromName AS Campaign_FromName, \r\n            T.CampaignReportId ");
            viewString.Append("AS Campaign_CampaignReportId, \r\n            T.OrganisationId AS Campaign_Organis");
            viewString.Append("ationId, \r\n            T.CompanyId AS Campaign_CompanyId, \r\n            T.Unsubs");
            viewString.Append("cribeEmailAddress AS Campaign_UnsubscribeEmailAddress, \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM DomainModelsStoreContainer.Campaign AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Campaigns", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView113()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignImages", @"
    SELECT VALUE -- Constructing CampaignImages
        [DomainModels.CampaignImage](T1.CampaignImage_CampaignImageId, T1.CampaignImage_CampaignId, T1.CampaignImage_ImagePath, T1.CampaignImage_ImageName)
    FROM (
        SELECT 
            T.CampaignImageId AS CampaignImage_CampaignImageId, 
            T.CampaignId AS CampaignImage_CampaignId, 
            T.ImagePath AS CampaignImage_ImagePath, 
            T.ImageName AS CampaignImage_ImageName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CampaignImage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DeliveryNotes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView114()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2814);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryNotes\r\n        [DomainModels.Delivery");
            viewString.Append("Note](T1.DeliveryNote_DeliveryNoteId, T1.DeliveryNote_Code, T1.DeliveryNote_Deli");
            viewString.Append("veryDate, T1.DeliveryNote_ContactCompanyId, T1.DeliveryNote_OrderReff, T1.Delive");
            viewString.Append("ryNote_footnote, T1.DeliveryNote_Comments, T1.DeliveryNote_LockedBy, T1.Delivery");
            viewString.Append("Note_IsStatus, T1.DeliveryNote_ContactId, T1.DeliveryNote_ContactCompany, T1.Del");
            viewString.Append("iveryNote_CustomerOrderReff, T1.DeliveryNote_AddressId, T1.DeliveryNote_CreatedB");
            viewString.Append("y, T1.DeliveryNote_CreationDateTime, T1.DeliveryNote_SupplierId, T1.DeliveryNote");
            viewString.Append("_SupplierTelNo, T1.DeliveryNote_CsNo, T1.DeliveryNote_SupplierURL, T1.DeliveryNo");
            viewString.Append("te_RaisedBy, T1.DeliveryNote_FlagId, T1.DeliveryNote_EstimateId, T1.DeliveryNote");
            viewString.Append("_JobId, T1.DeliveryNote_InvoiceId, T1.DeliveryNote_OrderId, T1.DeliveryNote_User");
            viewString.Append("Notes, T1.DeliveryNote_NotesUpdateDateTime, T1.DeliveryNote_NotesUpdatedByUserId");
            viewString.Append(", T1.DeliveryNote_SystemSiteId, T1.DeliveryNote_IsRead, T1.DeliveryNote_IsPrinte");
            viewString.Append("d)\r\n    FROM (\r\n        SELECT \r\n            T.DeliveryNoteId AS DeliveryNote_De");
            viewString.Append("liveryNoteId, \r\n            T.Code AS DeliveryNote_Code, \r\n            T.Deliver");
            viewString.Append("yDate AS DeliveryNote_DeliveryDate, \r\n            T.ContactCompanyId AS Delivery");
            viewString.Append("Note_ContactCompanyId, \r\n            T.OrderReff AS DeliveryNote_OrderReff, \r\n  ");
            viewString.Append("          T.footnote AS DeliveryNote_footnote, \r\n            T.Comments AS Deliv");
            viewString.Append("eryNote_Comments, \r\n            T.LockedBy AS DeliveryNote_LockedBy, \r\n         ");
            viewString.Append("   T.IsStatus AS DeliveryNote_IsStatus, \r\n            T.ContactId AS DeliveryNot");
            viewString.Append("e_ContactId, \r\n            T.ContactCompany AS DeliveryNote_ContactCompany, \r\n  ");
            viewString.Append("          T.CustomerOrderReff AS DeliveryNote_CustomerOrderReff, \r\n            T");
            viewString.Append(".AddressId AS DeliveryNote_AddressId, \r\n            T.CreatedBy AS DeliveryNote_");
            viewString.Append("CreatedBy, \r\n            T.CreationDateTime AS DeliveryNote_CreationDateTime, \r\n");
            viewString.Append("            T.SupplierId AS DeliveryNote_SupplierId, \r\n            T.SupplierTel");
            viewString.Append("No AS DeliveryNote_SupplierTelNo, \r\n            T.CsNo AS DeliveryNote_CsNo, \r\n ");
            viewString.Append("           T.SupplierURL AS DeliveryNote_SupplierURL, \r\n            T.RaisedBy A");
            viewString.Append("S DeliveryNote_RaisedBy, \r\n            T.FlagId AS DeliveryNote_FlagId, \r\n      ");
            viewString.Append("      T.EstimateId AS DeliveryNote_EstimateId, \r\n            T.JobId AS Delivery");
            viewString.Append("Note_JobId, \r\n            T.InvoiceId AS DeliveryNote_InvoiceId, \r\n            T");
            viewString.Append(".OrderId AS DeliveryNote_OrderId, \r\n            T.UserNotes AS DeliveryNote_User");
            viewString.Append("Notes, \r\n            T.NotesUpdateDateTime AS DeliveryNote_NotesUpdateDateTime, ");
            viewString.Append("\r\n            T.NotesUpdatedByUserId AS DeliveryNote_NotesUpdatedByUserId, \r\n   ");
            viewString.Append("         T.SystemSiteId AS DeliveryNote_SystemSiteId, \r\n            T.IsRead AS ");
            viewString.Append("DeliveryNote_IsRead, \r\n            T.IsPrinted AS DeliveryNote_IsPrinted, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM DomainModelsStoreContainer.DeliveryNote AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DeliveryNotes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DeliveryNoteDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView115()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DeliveryNoteDetails", @"
    SELECT VALUE -- Constructing DeliveryNoteDetails
        [DomainModels.DeliveryNoteDetail](T1.DeliveryNoteDetail_DeliveryDetailid, T1.DeliveryNoteDetail_DeliveryNoteId, T1.DeliveryNoteDetail_Description, T1.DeliveryNoteDetail_ItemId, T1.DeliveryNoteDetail_ItemQty, T1.DeliveryNoteDetail_GrossItemTotal)
    FROM (
        SELECT 
            T.DeliveryDetailid AS DeliveryNoteDetail_DeliveryDetailid, 
            T.DeliveryNoteId AS DeliveryNoteDetail_DeliveryNoteId, 
            T.Description AS DeliveryNoteDetail_Description, 
            T.ItemId AS DeliveryNoteDetail_ItemId, 
            T.ItemQty AS DeliveryNoteDetail_ItemQty, 
            T.GrossItemTotal AS DeliveryNoteDetail_GrossItemTotal, 
            True AS _from0
        FROM DomainModelsStoreContainer.DeliveryNoteDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyCMYKColors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView116()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyCMYKColors", @"
    SELECT VALUE -- Constructing CompanyCMYKColors
        [DomainModels.CompanyCMYKColor](T1.CompanyCMYKColor_ColorId, T1.CompanyCMYKColor_CompanyId, T1.CompanyCMYKColor_ColorName, T1.CompanyCMYKColor_ColorC, T1.CompanyCMYKColor_ColorM, T1.CompanyCMYKColor_ColorY, T1.CompanyCMYKColor_ColorK)
    FROM (
        SELECT 
            T.ColorId AS CompanyCMYKColor_ColorId, 
            T.CompanyId AS CompanyCMYKColor_CompanyId, 
            T.ColorName AS CompanyCMYKColor_ColorName, 
            T.ColorC AS CompanyCMYKColor_ColorC, 
            T.ColorM AS CompanyCMYKColor_ColorM, 
            T.ColorY AS CompanyCMYKColor_ColorY, 
            T.ColorK AS CompanyCMYKColor_ColorK, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyCMYKColor AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SystemUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView117()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2974);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SystemUsers\r\n        [DomainModels.SystemUser");
            viewString.Append("](T1.SystemUser_SystemUserId, T1.SystemUser_UserName, T1.SystemUser_Description,");
            viewString.Append(" T1.SystemUser_OrganizationId, T1.SystemUser_DepartmentId, T1.SystemUser_Passwor");
            viewString.Append("d, T1.SystemUser_FullName, T1.SystemUser_Email, T1.SystemUser_Mobile, T1.SystemU");
            viewString.Append("ser_UserType, T1.SystemUser_RoleId, T1.SystemUser_IsAccountDisabled, T1.SystemUs");
            viewString.Append("er_IsTillSupervisor, T1.SystemUser_CostPerHour, T1.SystemUser_CurrentMachineName");
            viewString.Append(", T1.SystemUser_CurrentMachineIp, T1.SystemUser_LockedBy, T1.SystemUser_IsSchedu");
            viewString.Append("leable, T1.SystemUser_CompanySiteId, T1.SystemUser_ReplyEmail, T1.SystemUser_Can");
            viewString.Append("SendEmail, T1.SystemUser_IsSystemUser, T1.SystemUser_CreatedBy, T1.SystemUser_Cr");
            viewString.Append("eatedDate, T1.SystemUser_ModifiedBy, T1.SystemUser_ModifiedDate, T1.SystemUser_E");
            viewString.Append("mailSignature, T1.SystemUser_SmtpServer, T1.SystemUser_SmtpUserName, T1.SystemUs");
            viewString.Append("er_SmtpPassword, T1.SystemUser_UserAuthToken, T1.SystemUser_CanDesignTemplate, T");
            viewString.Append("1.SystemUser_CanApproveTemplate)\r\n    FROM (\r\n        SELECT \r\n            T.Sys");
            viewString.Append("temUserId AS SystemUser_SystemUserId, \r\n            T.UserName AS SystemUser_Use");
            viewString.Append("rName, \r\n            T.Description AS SystemUser_Description, \r\n            T.Or");
            viewString.Append("ganizationId AS SystemUser_OrganizationId, \r\n            T.DepartmentId AS Syste");
            viewString.Append("mUser_DepartmentId, \r\n            T.Password AS SystemUser_Password, \r\n         ");
            viewString.Append("   T.FullName AS SystemUser_FullName, \r\n            T.Email AS SystemUser_Email,");
            viewString.Append(" \r\n            T.Mobile AS SystemUser_Mobile, \r\n            T.UserType AS System");
            viewString.Append("User_UserType, \r\n            T.RoleId AS SystemUser_RoleId, \r\n            T.IsAc");
            viewString.Append("countDisabled AS SystemUser_IsAccountDisabled, \r\n            T.IsTillSupervisor ");
            viewString.Append("AS SystemUser_IsTillSupervisor, \r\n            T.CostPerHour AS SystemUser_CostPe");
            viewString.Append("rHour, \r\n            T.CurrentMachineName AS SystemUser_CurrentMachineName, \r\n  ");
            viewString.Append("          T.CurrentMachineIP AS SystemUser_CurrentMachineIp, \r\n            T.Loc");
            viewString.Append("kedBy AS SystemUser_LockedBy, \r\n            T.IsScheduleable AS SystemUser_IsSch");
            viewString.Append("eduleable, \r\n            T.CompanySiteId AS SystemUser_CompanySiteId, \r\n        ");
            viewString.Append("    T.ReplyEmail AS SystemUser_ReplyEmail, \r\n            T.CanSendEmail AS Syste");
            viewString.Append("mUser_CanSendEmail, \r\n            T.IsSystemUser AS SystemUser_IsSystemUser, \r\n ");
            viewString.Append("           T.CreatedBy AS SystemUser_CreatedBy, \r\n            T.CreatedDate AS S");
            viewString.Append("ystemUser_CreatedDate, \r\n            T.ModifiedBy AS SystemUser_ModifiedBy, \r\n  ");
            viewString.Append("          T.ModifiedDate AS SystemUser_ModifiedDate, \r\n            T.EmailSignat");
            viewString.Append("ure AS SystemUser_EmailSignature, \r\n            T.SmtpServer AS SystemUser_SmtpS");
            viewString.Append("erver, \r\n            T.SmtpUserName AS SystemUser_SmtpUserName, \r\n            T.");
            viewString.Append("SmtpPassword AS SystemUser_SmtpPassword, \r\n            T.UserAuthToken AS System");
            viewString.Append("User_UserAuthToken, \r\n            T.canDesignTemplate AS SystemUser_CanDesignTem");
            viewString.Append("plate, \r\n            T.canApproveTemplate AS SystemUser_CanApproveTemplate, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM DomainModelsStoreContainer.SystemUser AS ");
            viewString.Append("T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SystemUsers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemAddonCostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView118()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemAddonCostCentres", @"
    SELECT VALUE -- Constructing ItemAddonCostCentres
        [DomainModels.ItemAddonCostCentre](T1.ItemAddonCostCentre_ProductAddOnId, T1.ItemAddonCostCentre_ItemStockOptionId, T1.ItemAddonCostCentre_CostCentreId, T1.ItemAddonCostCentre_DiscountPercentage, T1.ItemAddonCostCentre_IsDiscounted, T1.ItemAddonCostCentre_Sequence, T1.ItemAddonCostCentre_IsMandatory)
    FROM (
        SELECT 
            T.ProductAddOnId AS ItemAddonCostCentre_ProductAddOnId, 
            T.ItemStockOptionId AS ItemAddonCostCentre_ItemStockOptionId, 
            T.CostCentreId AS ItemAddonCostCentre_CostCentreId, 
            T.DiscountPercentage AS ItemAddonCostCentre_DiscountPercentage, 
            T.IsDiscounted AS ItemAddonCostCentre_IsDiscounted, 
            T.Sequence AS ItemAddonCostCentre_Sequence, 
            T.IsMandatory AS ItemAddonCostCentre_IsMandatory, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemAddonCostCentre AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemVideos
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView119()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemVideos", @"
    SELECT VALUE -- Constructing ItemVideos
        [DomainModels.ItemVideo](T1.ItemVideo_VideoId, T1.ItemVideo_VideoLink, T1.ItemVideo_Caption, T1.ItemVideo_ItemId)
    FROM (
        SELECT 
            T.VideoId AS ItemVideo_VideoId, 
            T.VideoLink AS ItemVideo_VideoLink, 
            T.Caption AS ItemVideo_Caption, 
            T.ItemId AS ItemVideo_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemVideo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Addresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView120()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2484);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Addresses\r\n        [DomainModels.Address](T1.");
            viewString.Append("Address_AddressId, T1.Address_CompanyId, T1.Address_AddressName, T1.Address_Addr");
            viewString.Append("ess1, T1.Address_Address2, T1.Address_Address3, T1.Address_City, T1.Address_Post");
            viewString.Append("Code, T1.Address_Fax, T1.Address_Email, T1.Address_URL, T1.Address_Tel1, T1.Addr");
            viewString.Append("ess_Tel2, T1.Address_Extension1, T1.Address_Extension2, T1.Address_Reference, T1");
            viewString.Append(".Address_FAO, T1.Address_IsDefaultAddress, T1.Address_IsDefaultShippingAddress, ");
            viewString.Append("T1.Address_isArchived, T1.Address_TerritoryId, T1.Address_GeoLatitude, T1.Addres");
            viewString.Append("s_GeoLongitude, T1.Address_isPrivate, T1.Address_ContactId, T1.Address_isDefault");
            viewString.Append("TerrorityBilling, T1.Address_isDefaultTerrorityShipping, T1.Address_Organisation");
            viewString.Append("Id, T1.Address_DisplayOnContactUs, T1.Address_StateId, T1.Address_CountryId)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.AddressId AS Address_AddressId, \r\n     ");
            viewString.Append("       T.CompanyId AS Address_CompanyId, \r\n            T.AddressName AS Address_");
            viewString.Append("AddressName, \r\n            T.Address1 AS Address_Address1, \r\n            T.Addre");
            viewString.Append("ss2 AS Address_Address2, \r\n            T.Address3 AS Address_Address3, \r\n       ");
            viewString.Append("     T.City AS Address_City, \r\n            T.PostCode AS Address_PostCode, \r\n   ");
            viewString.Append("         T.Fax AS Address_Fax, \r\n            T.Email AS Address_Email, \r\n       ");
            viewString.Append("     T.URL AS Address_URL, \r\n            T.Tel1 AS Address_Tel1, \r\n            T");
            viewString.Append(".Tel2 AS Address_Tel2, \r\n            T.Extension1 AS Address_Extension1, \r\n     ");
            viewString.Append("       T.Extension2 AS Address_Extension2, \r\n            T.Reference AS Address_");
            viewString.Append("Reference, \r\n            T.FAO AS Address_FAO, \r\n            T.IsDefaultAddress ");
            viewString.Append("AS Address_IsDefaultAddress, \r\n            T.IsDefaultShippingAddress AS Address");
            viewString.Append("_IsDefaultShippingAddress, \r\n            T.isArchived AS Address_isArchived, \r\n ");
            viewString.Append("           T.TerritoryId AS Address_TerritoryId, \r\n            T.GeoLatitude AS ");
            viewString.Append("Address_GeoLatitude, \r\n            T.GeoLongitude AS Address_GeoLongitude, \r\n   ");
            viewString.Append("         T.isPrivate AS Address_isPrivate, \r\n            T.ContactId AS Address_");
            viewString.Append("ContactId, \r\n            T.isDefaultTerrorityBilling AS Address_isDefaultTerrori");
            viewString.Append("tyBilling, \r\n            T.isDefaultTerrorityShipping AS Address_isDefaultTerror");
            viewString.Append("ityShipping, \r\n            T.OrganisationId AS Address_OrganisationId, \r\n       ");
            viewString.Append("     T.DisplayOnContactUs AS Address_DisplayOnContactUs, \r\n            T.StateId");
            viewString.Append(" AS Address_StateId, \r\n            T.CountryId AS Address_CountryId, \r\n         ");
            viewString.Append("   True AS _from0\r\n        FROM DomainModelsStoreContainer.Address AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Addresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Templates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView121()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4816);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Templates\r\n        [DomainModels.Template](T1");
            viewString.Append(".Template_ProductId, T1.Template_Code, T1.Template_ProductName, T1.Template_Desc");
            viewString.Append("ription, T1.Template_LowResPDFTemplates, T1.Template_BackgroundArtwork, T1.Templ");
            viewString.Append("ate_Side2LowResPDFTemplates, T1.Template_Side2BackgroundArtwork, T1.Template_Thu");
            viewString.Append("mbnail, T1.Template_Image, T1.Template_IsDisabled, T1.Template_PTempId, T1.Templ");
            viewString.Append("ate_IsDoubleSide, T1.Template_IsUsePDFFile, T1.Template_PDFTemplateWidth, T1.Tem");
            viewString.Append("plate_PDFTemplateHeight, T1.Template_IsUseBackGroundColor, T1.Template_BgR, T1.T");
            viewString.Append("emplate_BgG, T1.Template_BgB, T1.Template_IsUseSide2BackGroundColor, T1.Template");
            viewString.Append("_Side2BgR, T1.Template_Side2BgG, T1.Template_Side2BgB, T1.Template_CuttingMargin");
            viewString.Append(", T1.Template_MultiPageCount, T1.Template_Orientation, T1.Template_MatchingSetTh");
            viewString.Append("eme, T1.Template_BaseColorID, T1.Template_SubmittedBy, T1.Template_SubmittedByNa");
            viewString.Append("me, T1.Template_SubmitDate, T1.Template_Status, T1.Template_ApprovedBy, T1.Templ");
            viewString.Append("ate_ApprovedByName, T1.Template_UserRating, T1.Template_UsedCount, T1.Template_M");
            viewString.Append("PCRating, T1.Template_RejectionReason, T1.Template_ApprovalDate, T1.Template_Tem");
            viewString.Append("pString, T1.Template_MatchingSetID, T1.Template_FullView, T1.Template_SLThumbnai");
            viewString.Append("l, T1.Template_SuperView, T1.Template_ColorHex, T1.Template_TemplateOwner, T1.Te");
            viewString.Append("mplate_TemplateOwnerName, T1.Template_IsPrivate, T1.Template_ApprovedDate, T1.Te");
            viewString.Append("mplate_IsCorporateEditable, T1.Template_TemplateType, T1.Template_isWatermarkTex");
            viewString.Append("t, T1.Template_isSpotTemplate, T1.Template_isCreatedManual, T1.Template_isEditor");
            viewString.Append("Choice, T1.Template_ProductCategoryId)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.ProductId AS Template_ProductId, \r\n            T.Code AS Template_Code, \r\n   ");
            viewString.Append("         T.ProductName AS Template_ProductName, \r\n            T.Description AS T");
            viewString.Append("emplate_Description, \r\n            T.LowResPDFTemplates AS Template_LowResPDFTem");
            viewString.Append("plates, \r\n            T.BackgroundArtwork AS Template_BackgroundArtwork, \r\n     ");
            viewString.Append("       T.Side2LowResPDFTemplates AS Template_Side2LowResPDFTemplates, \r\n        ");
            viewString.Append("    T.Side2BackgroundArtwork AS Template_Side2BackgroundArtwork, \r\n            T");
            viewString.Append(".Thumbnail AS Template_Thumbnail, \r\n            T.Image AS Template_Image, \r\n   ");
            viewString.Append("         T.IsDisabled AS Template_IsDisabled, \r\n            T.PTempId AS Templat");
            viewString.Append("e_PTempId, \r\n            T.IsDoubleSide AS Template_IsDoubleSide, \r\n            ");
            viewString.Append("T.IsUsePDFFile AS Template_IsUsePDFFile, \r\n            T.PDFTemplateWidth AS Tem");
            viewString.Append("plate_PDFTemplateWidth, \r\n            T.PDFTemplateHeight AS Template_PDFTemplat");
            viewString.Append("eHeight, \r\n            T.IsUseBackGroundColor AS Template_IsUseBackGroundColor, ");
            viewString.Append("\r\n            T.BgR AS Template_BgR, \r\n            T.BgG AS Template_BgG, \r\n    ");
            viewString.Append("        T.BgB AS Template_BgB, \r\n            T.IsUseSide2BackGroundColor AS Temp");
            viewString.Append("late_IsUseSide2BackGroundColor, \r\n            T.Side2BgR AS Template_Side2BgR, \r");
            viewString.Append("\n            T.Side2BgG AS Template_Side2BgG, \r\n            T.Side2BgB AS Templa");
            viewString.Append("te_Side2BgB, \r\n            T.CuttingMargin AS Template_CuttingMargin, \r\n        ");
            viewString.Append("    T.MultiPageCount AS Template_MultiPageCount, \r\n            T.Orientation AS ");
            viewString.Append("Template_Orientation, \r\n            T.MatchingSetTheme AS Template_MatchingSetTh");
            viewString.Append("eme, \r\n            T.BaseColorID AS Template_BaseColorID, \r\n            T.Submit");
            viewString.Append("tedBy AS Template_SubmittedBy, \r\n            T.SubmittedByName AS Template_Submi");
            viewString.Append("ttedByName, \r\n            T.SubmitDate AS Template_SubmitDate, \r\n            T.S");
            viewString.Append("tatus AS Template_Status, \r\n            T.ApprovedBy AS Template_ApprovedBy, \r\n ");
            viewString.Append("           T.ApprovedByName AS Template_ApprovedByName, \r\n            T.UserRati");
            viewString.Append("ng AS Template_UserRating, \r\n            T.UsedCount AS Template_UsedCount, \r\n  ");
            viewString.Append("          T.MPCRating AS Template_MPCRating, \r\n            T.RejectionReason AS ");
            viewString.Append("Template_RejectionReason, \r\n            T.ApprovalDate AS Template_ApprovalDate,");
            viewString.Append(" \r\n            T.TempString AS Template_TempString, \r\n            T.MatchingSetI");
            viewString.Append("D AS Template_MatchingSetID, \r\n            T.FullView AS Template_FullView, \r\n  ");
            viewString.Append("          T.SLThumbnail AS Template_SLThumbnail, \r\n            T.SuperView AS Te");
            viewString.Append("mplate_SuperView, \r\n            T.ColorHex AS Template_ColorHex, \r\n            T");
            viewString.Append(".TemplateOwner AS Template_TemplateOwner, \r\n            T.TemplateOwnerName AS T");
            viewString.Append("emplate_TemplateOwnerName, \r\n            T.IsPrivate AS Template_IsPrivate, \r\n  ");
            viewString.Append("          T.ApprovedDate AS Template_ApprovedDate, \r\n            T.IsCorporateEd");
            viewString.Append("itable AS Template_IsCorporateEditable, \r\n            T.TemplateType AS Template");
            viewString.Append("_TemplateType, \r\n            T.isWatermarkText AS Template_isWatermarkText, \r\n  ");
            viewString.Append("          T.isSpotTemplate AS Template_isSpotTemplate, \r\n            T.isCreated");
            viewString.Append("Manual AS Template_isCreatedManual, \r\n            T.isEditorChoice AS Template_i");
            viewString.Append("sEditorChoice, \r\n            T.ProductCategoryId AS Template_ProductCategoryId, ");
            viewString.Append("\r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.Template A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Templates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplatePages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView122()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplatePages", "\r\n    SELECT VALUE -- Constructing TemplatePages\r\n        [DomainModels.TemplateP" +
                    "age](T1.TemplatePage_ProductPageId, T1.TemplatePage_ProductId, T1.TemplatePage_P" +
                    "ageNo, T1.TemplatePage_PageType, T1.TemplatePage_Orientation, T1.TemplatePage_Ba" +
                    "ckGroundType, T1.TemplatePage_BackgroundFileName, T1.TemplatePage_ColorC, T1.Tem" +
                    "platePage_ColorM, T1.TemplatePage_ColorY, T1.TemplatePage_PageName, T1.TemplateP" +
                    "age_ColorK, T1.TemplatePage_IsPrintable, T1.TemplatePage_hasOverlayObjects, T1.T" +
                    "emplatePage_Width, T1.TemplatePage_Height)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.ProductPageId AS TemplatePage_ProductPageId, \r\n            T.ProductId AS" +
                    " TemplatePage_ProductId, \r\n            T.PageNo AS TemplatePage_PageNo, \r\n      " +
                    "      T.PageType AS TemplatePage_PageType, \r\n            T.Orientation AS Templa" +
                    "tePage_Orientation, \r\n            T.BackGroundType AS TemplatePage_BackGroundTyp" +
                    "e, \r\n            T.BackgroundFileName AS TemplatePage_BackgroundFileName, \r\n    " +
                    "        T.ColorC AS TemplatePage_ColorC, \r\n            T.ColorM AS TemplatePage_" +
                    "ColorM, \r\n            T.ColorY AS TemplatePage_ColorY, \r\n            T.PageName " +
                    "AS TemplatePage_PageName, \r\n            T.ColorK AS TemplatePage_ColorK, \r\n     " +
                    "       T.IsPrintable AS TemplatePage_IsPrintable, \r\n            T.hasOverlayObje" +
                    "cts AS TemplatePage_hasOverlayObjects, \r\n            T.Width AS TemplatePage_Wid" +
                    "th, \r\n            T.Height AS TemplatePage_Height, \r\n            True AS _from0\r" +
                    "\n        FROM DomainModelsStoreContainer.TemplatePage AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPageTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView123()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPageTags", @"
    SELECT VALUE -- Constructing CmsPageTags
        [DomainModels.CmsPageTag](T1.CmsPageTag_TagId, T1.CmsPageTag_PageId, T1.CmsPageTag_PageTagId, T1.CmsPageTag_CompanyId)
    FROM (
        SELECT 
            T.TagId AS CmsPageTag_TagId, 
            T.PageId AS CmsPageTag_PageId, 
            T.PageTagId AS CmsPageTag_PageTagId, 
            T.CompanyId AS CmsPageTag_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsPageTag AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView124()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsTags", @"
    SELECT VALUE -- Constructing CmsTags
        [DomainModels.CmsTag](T1.CmsTag_TagId, T1.CmsTag_TagName, T1.CmsTag_TagSlug, T1.CmsTag_Description, T1.CmsTag_IsDisplay)
    FROM (
        SELECT 
            T.TagId AS CmsTag_TagId, 
            T.TagName AS CmsTag_TagName, 
            T.TagSlug AS CmsTag_TagSlug, 
            T.Description AS CmsTag_Description, 
            T.isDisplay AS CmsTag_IsDisplay, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView125()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreTypes", @"
    SELECT VALUE -- Constructing CostCentreTypes
        [DomainModels.CostCentreType](T1.CostCentreType_TypeId, T1.CostCentreType_TypeName, T1.CostCentreType_IsSystem, T1.CostCentreType_IsExternal, T1.CostCentreType_CompanyId)
    FROM (
        SELECT 
            T.TypeId AS CostCentreType_TypeId, 
            T.TypeName AS CostCentreType_TypeName, 
            T.IsSystem AS CostCentreType_IsSystem, 
            T.IsExternal AS CostCentreType_IsExternal, 
            T.CompanyId AS CostCentreType_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateBackgroundImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView126()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2134);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateBackgroundImages\r\n        [DomainMode");
            viewString.Append("ls.TemplateBackgroundImage](T1.TemplateBackgroundImage_Id, T1.TemplateBackground");
            viewString.Append("Image_ProductId, T1.TemplateBackgroundImage_ImageName, T1.TemplateBackgroundImag");
            viewString.Append("e_Name, T1.TemplateBackgroundImage_flgPhotobook, T1.TemplateBackgroundImage_flgC");
            viewString.Append("over, T1.TemplateBackgroundImage_BackgroundImageAbsolutePath, T1.TemplateBackgro");
            viewString.Append("undImage_BackgroundImageRelativePath, T1.TemplateBackgroundImage_ImageType, T1.T");
            viewString.Append("emplateBackgroundImage_ImageWidth, T1.TemplateBackgroundImage_ImageHeight, T1.Te");
            viewString.Append("mplateBackgroundImage_ImageTitle, T1.TemplateBackgroundImage_ImageDescription, T");
            viewString.Append("1.TemplateBackgroundImage_ImageKeywords, T1.TemplateBackgroundImage_UploadedFrom");
            viewString.Append(", T1.TemplateBackgroundImage_ContactCompanyId, T1.TemplateBackgroundImage_Contac");
            viewString.Append("tId)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS TemplateBackgroundImage_I");
            viewString.Append("d, \r\n            T.ProductId AS TemplateBackgroundImage_ProductId, \r\n           ");
            viewString.Append(" T.ImageName AS TemplateBackgroundImage_ImageName, \r\n            T.Name AS Templ");
            viewString.Append("ateBackgroundImage_Name, \r\n            T.flgPhotobook AS TemplateBackgroundImage");
            viewString.Append("_flgPhotobook, \r\n            T.flgCover AS TemplateBackgroundImage_flgCover, \r\n ");
            viewString.Append("           T.BackgroundImageAbsolutePath AS TemplateBackgroundImage_BackgroundIm");
            viewString.Append("ageAbsolutePath, \r\n            T.BackgroundImageRelativePath AS TemplateBackgrou");
            viewString.Append("ndImage_BackgroundImageRelativePath, \r\n            T.ImageType AS TemplateBackgr");
            viewString.Append("oundImage_ImageType, \r\n            T.ImageWidth AS TemplateBackgroundImage_Image");
            viewString.Append("Width, \r\n            T.ImageHeight AS TemplateBackgroundImage_ImageHeight, \r\n   ");
            viewString.Append("         T.ImageTitle AS TemplateBackgroundImage_ImageTitle, \r\n            T.Ima");
            viewString.Append("geDescription AS TemplateBackgroundImage_ImageDescription, \r\n            T.Image");
            viewString.Append("Keywords AS TemplateBackgroundImage_ImageKeywords, \r\n            T.UploadedFrom ");
            viewString.Append("AS TemplateBackgroundImage_UploadedFrom, \r\n            T.ContactCompanyId AS Tem");
            viewString.Append("plateBackgroundImage_ContactCompanyId, \r\n            T.ContactId AS TemplateBack");
            viewString.Append("groundImage_ContactId, \r\n            True AS _from0\r\n        FROM DomainModelsSt");
            viewString.Append("oreContainer.TemplateBackgroundImage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateBackgroundImages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateObjects
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView127()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5956);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateObjects\r\n        [DomainModels.Templa");
            viewString.Append("teObject](T1.TemplateObject_ObjectId, T1.TemplateObject_ObjectType, T1.TemplateO");
            viewString.Append("bject_Name, T1.TemplateObject_IsEditable, T1.TemplateObject_IsHidden, T1.Templat");
            viewString.Append("eObject_IsMandatory, T1.TemplateObject_PositionX, T1.TemplateObject_PositionY, T");
            viewString.Append("1.TemplateObject_MaxHeight, T1.TemplateObject_MaxWidth, T1.TemplateObject_MaxCha");
            viewString.Append("racters, T1.TemplateObject_RotationAngle, T1.TemplateObject_IsFontCustom, T1.Tem");
            viewString.Append("plateObject_IsFontNamePrivate, T1.TemplateObject_FontName, T1.TemplateObject_Fon");
            viewString.Append("tSize, T1.TemplateObject_FontStyleId, T1.TemplateObject_IsBold, T1.TemplateObjec");
            viewString.Append("t_IsItalic, T1.TemplateObject_Allignment, T1.TemplateObject_VAllignment, T1.Temp");
            viewString.Append("lateObject_Indent, T1.TemplateObject_IsUnderlinedText, T1.TemplateObject_ColorTy");
            viewString.Append("pe, T1.TemplateObject_ColorStyleId, T1.TemplateObject_PalleteId, T1.TemplateObje");
            viewString.Append("ct_ColorName, T1.TemplateObject_ColorC, T1.TemplateObject_ColorM, T1.TemplateObj");
            viewString.Append("ect_ColorY, T1.TemplateObject_ColorK, T1.TemplateObject_Tint, T1.TemplateObject_");
            viewString.Append("IsSpotColor, T1.TemplateObject_SpotColorName, T1.TemplateObject_ContentString, T");
            viewString.Append("1.TemplateObject_ContentCaseType, T1.TemplateObject_ProductId, T1.TemplateObject");
            viewString.Append("_DisplayOrderPdf, T1.TemplateObject_DisplayOrderTxtControl, T1.TemplateObject_Is");
            viewString.Append("RequireNumericValue, T1.TemplateObject_RColor, T1.TemplateObject_GColor, T1.Temp");
            viewString.Append("lateObject_BColor, T1.TemplateObject_isSide2Object, T1.TemplateObject_LineSpacin");
            viewString.Append("g, T1.TemplateObject_ProductPageId, T1.TemplateObject_ParentId, T1.TemplateObjec");
            viewString.Append("t_CircleRadiusX, T1.TemplateObject_Opacity, T1.TemplateObject_IsNewLine, T1.Temp");
            viewString.Append("lateObject_TCtlName, T1.TemplateObject_ExField1, T1.TemplateObject_ExField2, T1.");
            viewString.Append("TemplateObject_IsPositionLocked, T1.TemplateObject_ColorHex, T1.TemplateObject_C");
            viewString.Append("ircleRadiusY, T1.TemplateObject_IsTextEditable, T1.TemplateObject_QuickTextOrder");
            viewString.Append(", T1.TemplateObject_IsQuickText, T1.TemplateObject_CharSpacing, T1.TemplateObjec");
            viewString.Append("t_watermarkText, T1.TemplateObject_textStyles, T1.TemplateObject_AutoShrinkText,");
            viewString.Append(" T1.TemplateObject_IsOverlayObject, T1.TemplateObject_ClippedInfo)\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.ObjectId AS TemplateObject_ObjectId, \r\n          ");
            viewString.Append("  T.ObjectType AS TemplateObject_ObjectType, \r\n            T.Name AS TemplateObj");
            viewString.Append("ect_Name, \r\n            T.IsEditable AS TemplateObject_IsEditable, \r\n           ");
            viewString.Append(" T.IsHidden AS TemplateObject_IsHidden, \r\n            T.IsMandatory AS TemplateO");
            viewString.Append("bject_IsMandatory, \r\n            T.PositionX AS TemplateObject_PositionX, \r\n    ");
            viewString.Append("        T.PositionY AS TemplateObject_PositionY, \r\n            T.MaxHeight AS Te");
            viewString.Append("mplateObject_MaxHeight, \r\n            T.MaxWidth AS TemplateObject_MaxWidth, \r\n ");
            viewString.Append("           T.MaxCharacters AS TemplateObject_MaxCharacters, \r\n            T.Rota");
            viewString.Append("tionAngle AS TemplateObject_RotationAngle, \r\n            T.IsFontCustom AS Templ");
            viewString.Append("ateObject_IsFontCustom, \r\n            T.IsFontNamePrivate AS TemplateObject_IsFo");
            viewString.Append("ntNamePrivate, \r\n            T.FontName AS TemplateObject_FontName, \r\n          ");
            viewString.Append("  T.FontSize AS TemplateObject_FontSize, \r\n            T.FontStyleId AS Template");
            viewString.Append("Object_FontStyleId, \r\n            T.IsBold AS TemplateObject_IsBold, \r\n         ");
            viewString.Append("   T.IsItalic AS TemplateObject_IsItalic, \r\n            T.Allignment AS Template");
            viewString.Append("Object_Allignment, \r\n            T.VAllignment AS TemplateObject_VAllignment, \r\n");
            viewString.Append("            T.Indent AS TemplateObject_Indent, \r\n            T.IsUnderlinedText ");
            viewString.Append("AS TemplateObject_IsUnderlinedText, \r\n            T.ColorType AS TemplateObject_");
            viewString.Append("ColorType, \r\n            T.ColorStyleId AS TemplateObject_ColorStyleId, \r\n      ");
            viewString.Append("      T.PalleteId AS TemplateObject_PalleteId, \r\n            T.ColorName AS Temp");
            viewString.Append("lateObject_ColorName, \r\n            T.ColorC AS TemplateObject_ColorC, \r\n       ");
            viewString.Append("     T.ColorM AS TemplateObject_ColorM, \r\n            T.ColorY AS TemplateObject");
            viewString.Append("_ColorY, \r\n            T.ColorK AS TemplateObject_ColorK, \r\n            T.Tint A");
            viewString.Append("S TemplateObject_Tint, \r\n            T.IsSpotColor AS TemplateObject_IsSpotColor");
            viewString.Append(", \r\n            T.SpotColorName AS TemplateObject_SpotColorName, \r\n            T");
            viewString.Append(".ContentString AS TemplateObject_ContentString, \r\n            T.ContentCaseType ");
            viewString.Append("AS TemplateObject_ContentCaseType, \r\n            T.ProductId AS TemplateObject_P");
            viewString.Append("roductId, \r\n            T.DisplayOrderPdf AS TemplateObject_DisplayOrderPdf, \r\n ");
            viewString.Append("           T.DisplayOrderTxtControl AS TemplateObject_DisplayOrderTxtControl, \r\n");
            viewString.Append("            T.IsRequireNumericValue AS TemplateObject_IsRequireNumericValue, \r\n ");
            viewString.Append("           T.RColor AS TemplateObject_RColor, \r\n            T.GColor AS Template");
            viewString.Append("Object_GColor, \r\n            T.BColor AS TemplateObject_BColor, \r\n            T.");
            viewString.Append("isSide2Object AS TemplateObject_isSide2Object, \r\n            T.LineSpacing AS Te");
            viewString.Append("mplateObject_LineSpacing, \r\n            T.ProductPageId AS TemplateObject_Produc");
            viewString.Append("tPageId, \r\n            T.ParentId AS TemplateObject_ParentId, \r\n            T.Ci");
            viewString.Append("rcleRadiusX AS TemplateObject_CircleRadiusX, \r\n            T.Opacity AS Template");
            viewString.Append("Object_Opacity, \r\n            T.IsNewLine AS TemplateObject_IsNewLine, \r\n       ");
            viewString.Append("     T.TCtlName AS TemplateObject_TCtlName, \r\n            T.ExField1 AS Template");
            viewString.Append("Object_ExField1, \r\n            T.ExField2 AS TemplateObject_ExField2, \r\n        ");
            viewString.Append("    T.IsPositionLocked AS TemplateObject_IsPositionLocked, \r\n            T.Color");
            viewString.Append("Hex AS TemplateObject_ColorHex, \r\n            T.CircleRadiusY AS TemplateObject_");
            viewString.Append("CircleRadiusY, \r\n            T.IsTextEditable AS TemplateObject_IsTextEditable, ");
            viewString.Append("\r\n            T.QuickTextOrder AS TemplateObject_QuickTextOrder, \r\n            T");
            viewString.Append(".IsQuickText AS TemplateObject_IsQuickText, \r\n            T.CharSpacing AS Templ");
            viewString.Append("ateObject_CharSpacing, \r\n            T.watermarkText AS TemplateObject_watermark");
            viewString.Append("Text, \r\n            T.textStyles AS TemplateObject_textStyles, \r\n            T.A");
            viewString.Append("utoShrinkText AS TemplateObject_AutoShrinkText, \r\n            T.IsOverlayObject ");
            viewString.Append("AS TemplateObject_IsOverlayObject, \r\n            T.ClippedInfo AS TemplateObject");
            viewString.Append("_ClippedInfo, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContai");
            viewString.Append("ner.TemplateObject AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateObjects", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStateTaxes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView128()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStateTaxes", @"
    SELECT VALUE -- Constructing ItemStateTaxes
        [DomainModels.ItemStateTax](T1.ItemStateTax_ItemStateTaxId, T1.ItemStateTax_CountryId, T1.ItemStateTax_StateId, T1.ItemStateTax_TaxRate, T1.ItemStateTax_ItemId)
    FROM (
        SELECT 
            T.ItemStateTaxId AS ItemStateTax_ItemStateTaxId, 
            T.CountryId AS ItemStateTax_CountryId, 
            T.StateId AS ItemStateTax_StateId, 
            T.TaxRate AS ItemStateTax_TaxRate, 
            T.ItemId AS ItemStateTax_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemStateTax AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategoryItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView129()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategoryItems", @"
    SELECT VALUE -- Constructing ProductCategoryItems
        [DomainModels.ProductCategoryItem](T1.ProductCategoryItem_ProductCategoryItemId, T1.ProductCategoryItem_CategoryId, T1.ProductCategoryItem_ItemId)
    FROM (
        SELECT 
            T.ProductCategoryItemId AS ProductCategoryItem_ProductCategoryItemId, 
            T.CategoryId AS ProductCategoryItem_CategoryId, 
            T.ItemId AS ProductCategoryItem_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductCategoryItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateColorStyles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView130()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateColorStyles", @"
    SELECT VALUE -- Constructing TemplateColorStyles
        [DomainModels.TemplateColorStyle](T1.TemplateColorStyle_PelleteId, T1.TemplateColorStyle_ProductId, T1.TemplateColorStyle_Name, T1.TemplateColorStyle_ColorC, T1.TemplateColorStyle_ColorM, T1.TemplateColorStyle_ColorY, T1.TemplateColorStyle_ColorK, T1.TemplateColorStyle_SpotColor, T1.TemplateColorStyle_IsSpotColor, T1.TemplateColorStyle_Field1, T1.TemplateColorStyle_ColorHex, T1.TemplateColorStyle_IsColorActive, T1.TemplateColorStyle_CustomerId)
    FROM (
        SELECT 
            T.PelleteId AS TemplateColorStyle_PelleteId, 
            T.ProductId AS TemplateColorStyle_ProductId, 
            T.Name AS TemplateColorStyle_Name, 
            T.ColorC AS TemplateColorStyle_ColorC, 
            T.ColorM AS TemplateColorStyle_ColorM, 
            T.ColorY AS TemplateColorStyle_ColorY, 
            T.ColorK AS TemplateColorStyle_ColorK, 
            T.SpotColor AS TemplateColorStyle_SpotColor, 
            T.IsSpotColor AS TemplateColorStyle_IsSpotColor, 
            T.Field1 AS TemplateColorStyle_Field1, 
            T.ColorHex AS TemplateColorStyle_ColorHex, 
            T.IsColorActive AS TemplateColorStyle_IsColorActive, 
            T.CustomerId AS TemplateColorStyle_CustomerId, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateColorStyle AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateFonts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView131()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateFonts", @"
    SELECT VALUE -- Constructing TemplateFonts
        [DomainModels.TemplateFont](T1.TemplateFont_ProductFontId, T1.TemplateFont_ProductId, T1.TemplateFont_FontName, T1.TemplateFont_FontDisplayName, T1.TemplateFont_FontFile, T1.TemplateFont_DisplayIndex, T1.TemplateFont_IsPrivateFont, T1.TemplateFont_IsEnable, T1.TemplateFont_FontBytes, T1.TemplateFont_FontPath, T1.TemplateFont_CustomerId)
    FROM (
        SELECT 
            T.ProductFontId AS TemplateFont_ProductFontId, 
            T.ProductId AS TemplateFont_ProductId, 
            T.FontName AS TemplateFont_FontName, 
            T.FontDisplayName AS TemplateFont_FontDisplayName, 
            T.FontFile AS TemplateFont_FontFile, 
            T.DisplayIndex AS TemplateFont_DisplayIndex, 
            T.IsPrivateFont AS TemplateFont_IsPrivateFont, 
            T.IsEnable AS TemplateFont_IsEnable, 
            T.FontBytes AS TemplateFont_FontBytes, 
            T.FontPath AS TemplateFont_FontPath, 
            T.CustomerId AS TemplateFont_CustomerId, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateFont AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ChartOfAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView132()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ChartOfAccount", "\r\n    SELECT VALUE -- Constructing ChartOfAccount\r\n        [DomainModels.Store.Ch" +
                    "artOfAccount](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccou" +
                    "nt_Name, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType," +
                    " T1.ChartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Descri" +
                    "ption, T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_I" +
                    "sFixed, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliatio" +
                    "n, T1.ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_System" +
                    "SiteId, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_Accoun" +
                    "tNo, \r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance" +
                    " AS ChartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOf" +
                    "Account_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n " +
                    "           T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description " +
                    "AS ChartOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, " +
                    "\r\n            T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS " +
                    "ChartOfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastA" +
                    "ctivityDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconcil" +
                    "iation, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRea" +
                    "d AS ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_Syste" +
                    "mSiteId, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView133()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.ChartOfAccount AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView134()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Markup", @"
    SELECT VALUE -- Constructing Markup
        [DomainModels.Store.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Markups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.prefix
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView135()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3853);
            viewString.Append("\r\n    SELECT VALUE -- Constructing prefix\r\n        [DomainModels.Store.prefix](T");
            viewString.Append("1.prefix_EstimatePrefix, T1.prefix_EstimateStart, T1.prefix_EstimateNext, T1.pre");
            viewString.Append("fix_InvoicePrefix, T1.prefix_InvoiceStart, T1.prefix_InvoiceNext, T1.prefix_JobP");
            viewString.Append("refix, T1.prefix_JobStart, T1.prefix_JobNext, T1.prefix_POPrefix, T1.prefix_POSt");
            viewString.Append("art, T1.prefix_PONext, T1.prefix_GOFPrefix, T1.prefix_GOFStart, T1.prefix_GOFNex");
            viewString.Append("t, T1.prefix_ITEMPrefix, T1.prefix_ITEMStart, T1.prefix_ITEMNext, T1.prefix_Deli");
            viewString.Append("veryNPrefix, T1.prefix_DeliveryNStart, T1.prefix_DeliveryNNext, T1.prefix_JobCar");
            viewString.Append("dPrefix, T1.prefix_JobCardStart, T1.prefix_JobCardNext, T1.prefix_GRNPrefix, T1.");
            viewString.Append("prefix_GRNStart, T1.prefix_GRNNext, T1.prefix_ProductPrefix, T1.prefix_ProductSt");
            viewString.Append("art, T1.prefix_ProductNext, T1.prefix_FinishedGoodsPrefix, T1.prefix_FinishedGoo");
            viewString.Append("dsStart, T1.prefix_FinishedGoodsNext, T1.prefix_OrderPrefix, T1.prefix_OrderStar");
            viewString.Append("t, T1.prefix_OrderNext, T1.prefix_EnquiryPrefix, T1.prefix_EnquiryStart, T1.pref");
            viewString.Append("ix_EnquiryNext, T1.prefix_StockItemPrefix, T1.prefix_StockItemStart, T1.prefix_S");
            viewString.Append("tockItemNext, T1.prefix_SystemSiteID, T1.prefix_PrefixId, T1.prefix_DepartmentId");
            viewString.Append(", T1.prefix_MarkupId, T1.prefix_JobManagerId, T1.prefix_OrderManagerId, T1.prefi");
            viewString.Append("x_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimatePrefix AS ");
            viewString.Append("prefix_EstimatePrefix, \r\n            T.EstimateStart AS prefix_EstimateStart, \r\n");
            viewString.Append("            T.EstimateNext AS prefix_EstimateNext, \r\n            T.InvoicePrefix");
            viewString.Append(" AS prefix_InvoicePrefix, \r\n            T.InvoiceStart AS prefix_InvoiceStart, \r");
            viewString.Append("\n            T.InvoiceNext AS prefix_InvoiceNext, \r\n            T.JobPrefix AS p");
            viewString.Append("refix_JobPrefix, \r\n            T.JobStart AS prefix_JobStart, \r\n            T.Jo");
            viewString.Append("bNext AS prefix_JobNext, \r\n            T.PoPrefix AS prefix_POPrefix, \r\n        ");
            viewString.Append("    T.PoStart AS prefix_POStart, \r\n            T.PoNext AS prefix_PONext, \r\n    ");
            viewString.Append("        T.GofPrefix AS prefix_GOFPrefix, \r\n            T.GofStart AS prefix_GOFS");
            viewString.Append("tart, \r\n            T.GofNext AS prefix_GOFNext, \r\n            T.ItemPrefix AS p");
            viewString.Append("refix_ITEMPrefix, \r\n            T.ItemStart AS prefix_ITEMStart, \r\n            T");
            viewString.Append(".ItemNext AS prefix_ITEMNext, \r\n            T.DeliveryNPrefix AS prefix_Delivery");
            viewString.Append("NPrefix, \r\n            T.DeliveryNStart AS prefix_DeliveryNStart, \r\n            ");
            viewString.Append("T.DeliveryNNext AS prefix_DeliveryNNext, \r\n            T.JobCardPrefix AS prefix");
            viewString.Append("_JobCardPrefix, \r\n            T.JobCardStart AS prefix_JobCardStart, \r\n         ");
            viewString.Append("   T.JobCardNext AS prefix_JobCardNext, \r\n            T.GrnPrefix AS prefix_GRNP");
            viewString.Append("refix, \r\n            T.GrnStart AS prefix_GRNStart, \r\n            T.GrnNext AS p");
            viewString.Append("refix_GRNNext, \r\n            T.ProductPrefix AS prefix_ProductPrefix, \r\n        ");
            viewString.Append("    T.ProductStart AS prefix_ProductStart, \r\n            T.ProductNext AS prefix");
            viewString.Append("_ProductNext, \r\n            T.FinishedGoodsPrefix AS prefix_FinishedGoodsPrefix,");
            viewString.Append(" \r\n            T.FinishedGoodsStart AS prefix_FinishedGoodsStart, \r\n            ");
            viewString.Append("T.FinishedGoodsNext AS prefix_FinishedGoodsNext, \r\n            T.OrderPrefix AS ");
            viewString.Append("prefix_OrderPrefix, \r\n            T.OrderStart AS prefix_OrderStart, \r\n         ");
            viewString.Append("   T.OrderNext AS prefix_OrderNext, \r\n            T.EnquiryPrefix AS prefix_Enqu");
            viewString.Append("iryPrefix, \r\n            T.EnquiryStart AS prefix_EnquiryStart, \r\n            T.");
            viewString.Append("EnquiryNext AS prefix_EnquiryNext, \r\n            T.StockItemPrefix AS prefix_Sto");
            viewString.Append("ckItemPrefix, \r\n            T.StockItemStart AS prefix_StockItemStart, \r\n       ");
            viewString.Append("     T.StockItemNext AS prefix_StockItemNext, \r\n            T.SystemSiteId AS pr");
            viewString.Append("efix_SystemSiteID, \r\n            T.PrefixId AS prefix_PrefixId, \r\n            T.");
            viewString.Append("DepartmentId AS prefix_DepartmentId, \r\n            T.MarkupId AS prefix_MarkupId");
            viewString.Append(", \r\n            T.JobManagerId AS prefix_JobManagerId, \r\n            T.OrderMana");
            viewString.Append("gerId AS prefix_OrderManagerId, \r\n            T.OrganisationId AS prefix_Organis");
            viewString.Append("ationId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Prefixes1 AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.prefix", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Markups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView136()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Markups", @"
    SELECT VALUE -- Constructing Markups
        [DomainModels.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.Markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Prefixes1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView137()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3860);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Prefixes1\r\n        [DomainModels.Prefix](T1.P");
            viewString.Append("refix_EstimatePrefix, T1.Prefix_EstimateStart, T1.Prefix_EstimateNext, T1.Prefix");
            viewString.Append("_InvoicePrefix, T1.Prefix_InvoiceStart, T1.Prefix_InvoiceNext, T1.Prefix_JobPref");
            viewString.Append("ix, T1.Prefix_JobStart, T1.Prefix_JobNext, T1.Prefix_PoPrefix, T1.Prefix_PoStart");
            viewString.Append(", T1.Prefix_PoNext, T1.Prefix_GofPrefix, T1.Prefix_GofStart, T1.Prefix_GofNext, ");
            viewString.Append("T1.Prefix_ItemPrefix, T1.Prefix_ItemStart, T1.Prefix_ItemNext, T1.Prefix_Deliver");
            viewString.Append("yNPrefix, T1.Prefix_DeliveryNStart, T1.Prefix_DeliveryNNext, T1.Prefix_JobCardPr");
            viewString.Append("efix, T1.Prefix_JobCardStart, T1.Prefix_JobCardNext, T1.Prefix_GrnPrefix, T1.Pre");
            viewString.Append("fix_GrnStart, T1.Prefix_GrnNext, T1.Prefix_ProductPrefix, T1.Prefix_ProductStart");
            viewString.Append(", T1.Prefix_ProductNext, T1.Prefix_FinishedGoodsPrefix, T1.Prefix_FinishedGoodsS");
            viewString.Append("tart, T1.Prefix_FinishedGoodsNext, T1.Prefix_OrderPrefix, T1.Prefix_OrderStart, ");
            viewString.Append("T1.Prefix_OrderNext, T1.Prefix_EnquiryPrefix, T1.Prefix_EnquiryStart, T1.Prefix_");
            viewString.Append("EnquiryNext, T1.Prefix_StockItemPrefix, T1.Prefix_StockItemStart, T1.Prefix_Stoc");
            viewString.Append("kItemNext, T1.Prefix_SystemSiteId, T1.Prefix_PrefixId, T1.Prefix_DepartmentId, T");
            viewString.Append("1.Prefix_MarkupId, T1.Prefix_JobManagerId, T1.Prefix_OrderManagerId, T1.Prefix_O");
            viewString.Append("rganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimatePrefix AS Pre");
            viewString.Append("fix_EstimatePrefix, \r\n            T.EstimateStart AS Prefix_EstimateStart, \r\n   ");
            viewString.Append("         T.EstimateNext AS Prefix_EstimateNext, \r\n            T.InvoicePrefix AS");
            viewString.Append(" Prefix_InvoicePrefix, \r\n            T.InvoiceStart AS Prefix_InvoiceStart, \r\n  ");
            viewString.Append("          T.InvoiceNext AS Prefix_InvoiceNext, \r\n            T.JobPrefix AS Pref");
            viewString.Append("ix_JobPrefix, \r\n            T.JobStart AS Prefix_JobStart, \r\n            T.JobNe");
            viewString.Append("xt AS Prefix_JobNext, \r\n            T.POPrefix AS Prefix_PoPrefix, \r\n           ");
            viewString.Append(" T.POStart AS Prefix_PoStart, \r\n            T.PONext AS Prefix_PoNext, \r\n       ");
            viewString.Append("     T.GOFPrefix AS Prefix_GofPrefix, \r\n            T.GOFStart AS Prefix_GofStar");
            viewString.Append("t, \r\n            T.GOFNext AS Prefix_GofNext, \r\n            T.ITEMPrefix AS Pref");
            viewString.Append("ix_ItemPrefix, \r\n            T.ITEMStart AS Prefix_ItemStart, \r\n            T.IT");
            viewString.Append("EMNext AS Prefix_ItemNext, \r\n            T.DeliveryNPrefix AS Prefix_DeliveryNPr");
            viewString.Append("efix, \r\n            T.DeliveryNStart AS Prefix_DeliveryNStart, \r\n            T.D");
            viewString.Append("eliveryNNext AS Prefix_DeliveryNNext, \r\n            T.JobCardPrefix AS Prefix_Jo");
            viewString.Append("bCardPrefix, \r\n            T.JobCardStart AS Prefix_JobCardStart, \r\n            ");
            viewString.Append("T.JobCardNext AS Prefix_JobCardNext, \r\n            T.GRNPrefix AS Prefix_GrnPref");
            viewString.Append("ix, \r\n            T.GRNStart AS Prefix_GrnStart, \r\n            T.GRNNext AS Pref");
            viewString.Append("ix_GrnNext, \r\n            T.ProductPrefix AS Prefix_ProductPrefix, \r\n           ");
            viewString.Append(" T.ProductStart AS Prefix_ProductStart, \r\n            T.ProductNext AS Prefix_Pr");
            viewString.Append("oductNext, \r\n            T.FinishedGoodsPrefix AS Prefix_FinishedGoodsPrefix, \r\n");
            viewString.Append("            T.FinishedGoodsStart AS Prefix_FinishedGoodsStart, \r\n            T.F");
            viewString.Append("inishedGoodsNext AS Prefix_FinishedGoodsNext, \r\n            T.OrderPrefix AS Pre");
            viewString.Append("fix_OrderPrefix, \r\n            T.OrderStart AS Prefix_OrderStart, \r\n            ");
            viewString.Append("T.OrderNext AS Prefix_OrderNext, \r\n            T.EnquiryPrefix AS Prefix_Enquiry");
            viewString.Append("Prefix, \r\n            T.EnquiryStart AS Prefix_EnquiryStart, \r\n            T.Enq");
            viewString.Append("uiryNext AS Prefix_EnquiryNext, \r\n            T.StockItemPrefix AS Prefix_StockI");
            viewString.Append("temPrefix, \r\n            T.StockItemStart AS Prefix_StockItemStart, \r\n          ");
            viewString.Append("  T.StockItemNext AS Prefix_StockItemNext, \r\n            T.SystemSiteID AS Prefi");
            viewString.Append("x_SystemSiteId, \r\n            T.PrefixId AS Prefix_PrefixId, \r\n            T.Dep");
            viewString.Append("artmentId AS Prefix_DepartmentId, \r\n            T.MarkupId AS Prefix_MarkupId, \r");
            viewString.Append("\n            T.JobManagerId AS Prefix_JobManagerId, \r\n            T.OrderManager");
            viewString.Append("Id AS Prefix_OrderManagerId, \r\n            T.OrganisationId AS Prefix_Organisati");
            viewString.Append("onId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.pref");
            viewString.Append("ix AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Prefixes1", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperSize
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView138()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperSize", @"
    SELECT VALUE -- Constructing PaperSize
        [DomainModels.Store.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_isArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.IsArchived AS PaperSize_isArchived, 
            True AS _from0
        FROM BaseDbContext.PaperSizes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperSizes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView139()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperSizes", @"
    SELECT VALUE -- Constructing PaperSizes
        [DomainModels.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_IsArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.isArchived AS PaperSize_IsArchived, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperSize AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CategoryTerritory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView140()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CategoryTerritory", @"
    SELECT VALUE -- Constructing CategoryTerritory
        [DomainModels.Store.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CategoryTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CategoryTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView141()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CategoryTerritories", @"
    SELECT VALUE -- Constructing CategoryTerritories
        [DomainModels.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CategoryTerritory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Section
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView142()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Section", @"
    SELECT VALUE -- Constructing Section
        [DomainModels.Store.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            True AS _from0
        FROM BaseDbContext.Sections AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionFlag
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView143()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionFlag", @"
    SELECT VALUE -- Constructing SectionFlag
        [DomainModels.Store.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_OrganisationId, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.OrganisationId AS SectionFlag_OrganisationId, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            True AS _from0
        FROM BaseDbContext.SectionFlags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Sections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView144()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Sections", @"
    SELECT VALUE -- Constructing Sections
        [DomainModels.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            True AS _from0
        FROM DomainModelsStoreContainer.Section AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionFlags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView145()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionFlags", @"
    SELECT VALUE -- Constructing SectionFlags
        [DomainModels.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault, T1.SectionFlag_OrganisationId)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            T.OrganisationId AS SectionFlag_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionFlag AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.WeightUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView146()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.WeightUnit", @"
    SELECT VALUE -- Constructing WeightUnit
        [DomainModels.Store.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM BaseDbContext.WeightUnits AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WeightUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView147()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WeightUnits", @"
    SELECT VALUE -- Constructing WeightUnits
        [DomainModels.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM DomainModelsStoreContainer.WeightUnit AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyCostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView148()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyCostCentre", @"
    SELECT VALUE -- Constructing CompanyCostCentre
        [DomainModels.Store.CompanyCostCentre](T1.CompanyCostCentre_CompanyCostCenterId, T1.CompanyCostCentre_CompanyId, T1.CompanyCostCentre_CostCentreId, T1.CompanyCostCentre_BrokerMarkup, T1.CompanyCostCentre_ContactMarkup, T1.CompanyCostCentre_isDisplayToUser, T1.CompanyCostCentre_OrganisationId)
    FROM (
        SELECT 
            T.CompanyCostCenterId AS CompanyCostCentre_CompanyCostCenterId, 
            T.CompanyId AS CompanyCostCentre_CompanyId, 
            T.CostCentreId AS CompanyCostCentre_CostCentreId, 
            T.BrokerMarkup AS CompanyCostCentre_BrokerMarkup, 
            T.ContactMarkup AS CompanyCostCentre_ContactMarkup, 
            T.isDisplayToUser AS CompanyCostCentre_isDisplayToUser, 
            T.OrganisationId AS CompanyCostCentre_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyCostCentres AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyCostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView149()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyCostCentres", @"
    SELECT VALUE -- Constructing CompanyCostCentres
        [DomainModels.CompanyCostCentre](T1.CompanyCostCentre_CompanyCostCenterId, T1.CompanyCostCentre_CompanyId, T1.CompanyCostCentre_CostCentreId, T1.CompanyCostCentre_BrokerMarkup, T1.CompanyCostCentre_ContactMarkup, T1.CompanyCostCentre_isDisplayToUser, T1.CompanyCostCentre_OrganisationId)
    FROM (
        SELECT 
            T.CompanyCostCenterId AS CompanyCostCentre_CompanyCostCenterId, 
            T.CompanyId AS CompanyCostCentre_CompanyId, 
            T.CostCentreId AS CompanyCostCentre_CostCentreId, 
            T.BrokerMarkup AS CompanyCostCentre_BrokerMarkup, 
            T.ContactMarkup AS CompanyCostCentre_ContactMarkup, 
            T.isDisplayToUser AS CompanyCostCentre_isDisplayToUser, 
            T.OrganisationId AS CompanyCostCentre_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyCostCentre AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemProductDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView150()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemProductDetail", @"
    SELECT VALUE -- Constructing ItemProductDetail
        [DomainModels.Store.ItemProductDetail](T1.ItemProductDetail_ItemDetailId, T1.ItemProductDetail_ItemId, T1.ItemProductDetail_isInternalActivity, T1.ItemProductDetail_isAutoCreateSupplierPO, T1.ItemProductDetail_isQtyLimit, T1.ItemProductDetail_QtyLimit, T1.ItemProductDetail_DeliveryTimeSupplier1, T1.ItemProductDetail_DeliveryTimeSupplier2, T1.ItemProductDetail_isPrintItem, T1.ItemProductDetail_isAllowMarketBriefAttachment, T1.ItemProductDetail_MarketBriefSuccessMessage)
    FROM (
        SELECT 
            T.ItemDetailId AS ItemProductDetail_ItemDetailId, 
            T.ItemId AS ItemProductDetail_ItemId, 
            T.isInternalActivity AS ItemProductDetail_isInternalActivity, 
            T.isAutoCreateSupplierPO AS ItemProductDetail_isAutoCreateSupplierPO, 
            T.isQtyLimit AS ItemProductDetail_isQtyLimit, 
            T.QtyLimit AS ItemProductDetail_QtyLimit, 
            T.DeliveryTimeSupplier1 AS ItemProductDetail_DeliveryTimeSupplier1, 
            T.DeliveryTimeSupplier2 AS ItemProductDetail_DeliveryTimeSupplier2, 
            T.isPrintItem AS ItemProductDetail_isPrintItem, 
            T.isAllowMarketBriefAttachment AS ItemProductDetail_isAllowMarketBriefAttachment, 
            T.MarketBriefSuccessMessage AS ItemProductDetail_MarketBriefSuccessMessage, 
            True AS _from0
        FROM BaseDbContext.ItemProductDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemProductDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView151()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemProductDetails", @"
    SELECT VALUE -- Constructing ItemProductDetails
        [DomainModels.ItemProductDetail](T1.ItemProductDetail_ItemDetailId, T1.ItemProductDetail_ItemId, T1.ItemProductDetail_isInternalActivity, T1.ItemProductDetail_isAutoCreateSupplierPO, T1.ItemProductDetail_isQtyLimit, T1.ItemProductDetail_QtyLimit, T1.ItemProductDetail_DeliveryTimeSupplier1, T1.ItemProductDetail_DeliveryTimeSupplier2, T1.ItemProductDetail_isPrintItem, T1.ItemProductDetail_isAllowMarketBriefAttachment, T1.ItemProductDetail_MarketBriefSuccessMessage)
    FROM (
        SELECT 
            T.ItemDetailId AS ItemProductDetail_ItemDetailId, 
            T.ItemId AS ItemProductDetail_ItemId, 
            T.isInternalActivity AS ItemProductDetail_isInternalActivity, 
            T.isAutoCreateSupplierPO AS ItemProductDetail_isAutoCreateSupplierPO, 
            T.isQtyLimit AS ItemProductDetail_isQtyLimit, 
            T.QtyLimit AS ItemProductDetail_QtyLimit, 
            T.DeliveryTimeSupplier1 AS ItemProductDetail_DeliveryTimeSupplier1, 
            T.DeliveryTimeSupplier2 AS ItemProductDetail_DeliveryTimeSupplier2, 
            T.isPrintItem AS ItemProductDetail_isPrintItem, 
            T.isAllowMarketBriefAttachment AS ItemProductDetail_isAllowMarketBriefAttachment, 
            T.MarketBriefSuccessMessage AS ItemProductDetail_MarketBriefSuccessMessage, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemProductDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStockControl
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView152()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5074);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemStockControl\r\n        [DomainModels.Store");
            viewString.Append(".ItemStockControl](T1.ItemStockControl_Id, T1.ItemStockControl_ItemId, T1.ItemSt");
            viewString.Append("ockControl_ThumbnailURL, T1.ItemStockControl_ImageURL, T1.ItemStockControl_Conte");
            viewString.Append("ntType, T1.ItemStockControl_Description1, T1.ItemStockControl_Description2, T1.I");
            viewString.Append("temStockControl_Description3, T1.ItemStockControl_LockedBy, T1.ItemStockControl_");
            viewString.Append("InStock, T1.ItemStockControl_Allocated, T1.ItemStockControl_ThresholdLevel, T1.I");
            viewString.Append("temStockControl_ThresholdProductionQuantity, T1.ItemStockControl_Location, T1.It");
            viewString.Append("emStockControl_FinishedGoodType, T1.ItemStockControl_FinishedGoodStockItemId, T1");
            viewString.Append(".ItemStockControl_SupplierId, T1.ItemStockControl_SupplierCode, T1.ItemStockCont");
            viewString.Append("rol_ProductCode, T1.ItemStockControl_NominalCode, T1.ItemStockControl_BarCode, T");
            viewString.Append("1.ItemStockControl_FinishedGoodCode, T1.ItemStockControl_TaxId, T1.ItemStockCont");
            viewString.Append("rol_RangeThresholdLevel, T1.ItemStockControl_FromThresholdDate, T1.ItemStockCont");
            viewString.Append("rol_ToThresholdDate, T1.ItemStockControl_Cost, T1.ItemStockControl_UnitQuantity,");
            viewString.Append(" T1.ItemStockControl_PackQuantity, T1.ItemStockControl_RangeThresholdLevel1, T1.");
            viewString.Append("ItemStockControl_RangeThresholdLevel2, T1.ItemStockControl_FromThresholdDate1, T");
            viewString.Append("1.ItemStockControl_FromThresholdDate2, T1.ItemStockControl_ToThresholdDate1, T1.");
            viewString.Append("ItemStockControl_ToThresholdDate2, T1.ItemStockControl_SystemSiteId, T1.ItemStoc");
            viewString.Append("kControl_File1URL, T1.ItemStockControl_File2URL, T1.ItemStockControl_IsForWeb, T");
            viewString.Append("1.ItemStockControl_IsShowStockOnWeb, T1.ItemStockControl_IsShowPriceOnWeb, T1.It");
            viewString.Append("emStockControl_IsShowFreeStockOnWeb, T1.ItemStockControl_IsShowAllocatedStockOnW");
            viewString.Append("eb, T1.ItemStockControl_IsDisabled, T1.ItemStockControl_FlagId, T1.ItemStockCont");
            viewString.Append("rol_IsRead, T1.ItemStockControl_CreatedBy, T1.ItemStockControl_SiteDepartmentId,");
            viewString.Append(" T1.ItemStockControl_isAllowBackOrder)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.Id AS ItemStockControl_Id, \r\n            T.ItemId AS ItemStockControl_ItemId,");
            viewString.Append(" \r\n            T.ThumbnailURL AS ItemStockControl_ThumbnailURL, \r\n            T.");
            viewString.Append("ImageURL AS ItemStockControl_ImageURL, \r\n            T.ContentType AS ItemStockC");
            viewString.Append("ontrol_ContentType, \r\n            T.Description1 AS ItemStockControl_Description");
            viewString.Append("1, \r\n            T.Description2 AS ItemStockControl_Description2, \r\n            ");
            viewString.Append("T.Description3 AS ItemStockControl_Description3, \r\n            T.LockedBy AS Ite");
            viewString.Append("mStockControl_LockedBy, \r\n            T.InStock AS ItemStockControl_InStock, \r\n ");
            viewString.Append("           T.Allocated AS ItemStockControl_Allocated, \r\n            T.ThresholdL");
            viewString.Append("evel AS ItemStockControl_ThresholdLevel, \r\n            T.ThresholdProductionQuan");
            viewString.Append("tity AS ItemStockControl_ThresholdProductionQuantity, \r\n            T.Location A");
            viewString.Append("S ItemStockControl_Location, \r\n            T.FinishedGoodType AS ItemStockContro");
            viewString.Append("l_FinishedGoodType, \r\n            T.FinishedGoodStockItemId AS ItemStockControl_");
            viewString.Append("FinishedGoodStockItemId, \r\n            T.SupplierId AS ItemStockControl_Supplier");
            viewString.Append("Id, \r\n            T.SupplierCode AS ItemStockControl_SupplierCode, \r\n           ");
            viewString.Append(" T.ProductCode AS ItemStockControl_ProductCode, \r\n            T.NominalCode AS I");
            viewString.Append("temStockControl_NominalCode, \r\n            T.BarCode AS ItemStockControl_BarCode");
            viewString.Append(", \r\n            T.FinishedGoodCode AS ItemStockControl_FinishedGoodCode, \r\n     ");
            viewString.Append("       T.TaxId AS ItemStockControl_TaxId, \r\n            T.RangeThresholdLevel AS");
            viewString.Append(" ItemStockControl_RangeThresholdLevel, \r\n            T.FromThresholdDate AS Item");
            viewString.Append("StockControl_FromThresholdDate, \r\n            T.ToThresholdDate AS ItemStockCont");
            viewString.Append("rol_ToThresholdDate, \r\n            T.Cost AS ItemStockControl_Cost, \r\n          ");
            viewString.Append("  T.UnitQuantity AS ItemStockControl_UnitQuantity, \r\n            T.PackQuantity ");
            viewString.Append("AS ItemStockControl_PackQuantity, \r\n            T.RangeThresholdLevel1 AS ItemSt");
            viewString.Append("ockControl_RangeThresholdLevel1, \r\n            T.RangeThresholdLevel2 AS ItemSto");
            viewString.Append("ckControl_RangeThresholdLevel2, \r\n            T.FromThresholdDate1 AS ItemStockC");
            viewString.Append("ontrol_FromThresholdDate1, \r\n            T.FromThresholdDate2 AS ItemStockContro");
            viewString.Append("l_FromThresholdDate2, \r\n            T.ToThresholdDate1 AS ItemStockControl_ToThr");
            viewString.Append("esholdDate1, \r\n            T.ToThresholdDate2 AS ItemStockControl_ToThresholdDat");
            viewString.Append("e2, \r\n            T.SystemSiteId AS ItemStockControl_SystemSiteId, \r\n           ");
            viewString.Append(" T.File1URL AS ItemStockControl_File1URL, \r\n            T.File2URL AS ItemStockC");
            viewString.Append("ontrol_File2URL, \r\n            T.IsForWeb AS ItemStockControl_IsForWeb, \r\n      ");
            viewString.Append("      T.IsShowStockOnWeb AS ItemStockControl_IsShowStockOnWeb, \r\n            T.I");
            viewString.Append("sShowPriceOnWeb AS ItemStockControl_IsShowPriceOnWeb, \r\n            T.IsShowFree");
            viewString.Append("StockOnWeb AS ItemStockControl_IsShowFreeStockOnWeb, \r\n            T.IsShowAlloc");
            viewString.Append("atedStockOnWeb AS ItemStockControl_IsShowAllocatedStockOnWeb, \r\n            T.Is");
            viewString.Append("Disabled AS ItemStockControl_IsDisabled, \r\n            T.FlagId AS ItemStockCont");
            viewString.Append("rol_FlagId, \r\n            T.IsRead AS ItemStockControl_IsRead, \r\n            T.C");
            viewString.Append("reatedBy AS ItemStockControl_CreatedBy, \r\n            T.SiteDepartmentId AS Item");
            viewString.Append("StockControl_SiteDepartmentId, \r\n            T.isAllowBackOrder AS ItemStockCont");
            viewString.Append("rol_isAllowBackOrder, \r\n            True AS _from0\r\n        FROM BaseDbContext.I");
            viewString.Append("temStockControls AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStockControl", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStockControls
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView153()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5081);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemStockControls\r\n        [DomainModels.Item");
            viewString.Append("StockControl](T1.ItemStockControl_Id, T1.ItemStockControl_ItemId, T1.ItemStockCo");
            viewString.Append("ntrol_ThumbnailURL, T1.ItemStockControl_ImageURL, T1.ItemStockControl_ContentTyp");
            viewString.Append("e, T1.ItemStockControl_Description1, T1.ItemStockControl_Description2, T1.ItemSt");
            viewString.Append("ockControl_Description3, T1.ItemStockControl_LockedBy, T1.ItemStockControl_InSto");
            viewString.Append("ck, T1.ItemStockControl_Allocated, T1.ItemStockControl_ThresholdLevel, T1.ItemSt");
            viewString.Append("ockControl_ThresholdProductionQuantity, T1.ItemStockControl_Location, T1.ItemSto");
            viewString.Append("ckControl_FinishedGoodType, T1.ItemStockControl_FinishedGoodStockItemId, T1.Item");
            viewString.Append("StockControl_SupplierId, T1.ItemStockControl_SupplierCode, T1.ItemStockControl_P");
            viewString.Append("roductCode, T1.ItemStockControl_NominalCode, T1.ItemStockControl_BarCode, T1.Ite");
            viewString.Append("mStockControl_FinishedGoodCode, T1.ItemStockControl_TaxId, T1.ItemStockControl_R");
            viewString.Append("angeThresholdLevel, T1.ItemStockControl_FromThresholdDate, T1.ItemStockControl_T");
            viewString.Append("oThresholdDate, T1.ItemStockControl_Cost, T1.ItemStockControl_UnitQuantity, T1.I");
            viewString.Append("temStockControl_PackQuantity, T1.ItemStockControl_RangeThresholdLevel1, T1.ItemS");
            viewString.Append("tockControl_RangeThresholdLevel2, T1.ItemStockControl_FromThresholdDate1, T1.Ite");
            viewString.Append("mStockControl_FromThresholdDate2, T1.ItemStockControl_ToThresholdDate1, T1.ItemS");
            viewString.Append("tockControl_ToThresholdDate2, T1.ItemStockControl_SystemSiteId, T1.ItemStockCont");
            viewString.Append("rol_File1URL, T1.ItemStockControl_File2URL, T1.ItemStockControl_IsForWeb, T1.Ite");
            viewString.Append("mStockControl_IsShowStockOnWeb, T1.ItemStockControl_IsShowPriceOnWeb, T1.ItemSto");
            viewString.Append("ckControl_IsShowFreeStockOnWeb, T1.ItemStockControl_IsShowAllocatedStockOnWeb, T");
            viewString.Append("1.ItemStockControl_IsDisabled, T1.ItemStockControl_FlagId, T1.ItemStockControl_I");
            viewString.Append("sRead, T1.ItemStockControl_CreatedBy, T1.ItemStockControl_SiteDepartmentId, T1.I");
            viewString.Append("temStockControl_isAllowBackOrder)\r\n    FROM (\r\n        SELECT \r\n            T.Id");
            viewString.Append(" AS ItemStockControl_Id, \r\n            T.ItemId AS ItemStockControl_ItemId, \r\n  ");
            viewString.Append("          T.ThumbnailURL AS ItemStockControl_ThumbnailURL, \r\n            T.Image");
            viewString.Append("URL AS ItemStockControl_ImageURL, \r\n            T.ContentType AS ItemStockContro");
            viewString.Append("l_ContentType, \r\n            T.Description1 AS ItemStockControl_Description1, \r\n");
            viewString.Append("            T.Description2 AS ItemStockControl_Description2, \r\n            T.Des");
            viewString.Append("cription3 AS ItemStockControl_Description3, \r\n            T.LockedBy AS ItemStoc");
            viewString.Append("kControl_LockedBy, \r\n            T.InStock AS ItemStockControl_InStock, \r\n      ");
            viewString.Append("      T.Allocated AS ItemStockControl_Allocated, \r\n            T.ThresholdLevel ");
            viewString.Append("AS ItemStockControl_ThresholdLevel, \r\n            T.ThresholdProductionQuantity ");
            viewString.Append("AS ItemStockControl_ThresholdProductionQuantity, \r\n            T.Location AS Ite");
            viewString.Append("mStockControl_Location, \r\n            T.FinishedGoodType AS ItemStockControl_Fin");
            viewString.Append("ishedGoodType, \r\n            T.FinishedGoodStockItemId AS ItemStockControl_Finis");
            viewString.Append("hedGoodStockItemId, \r\n            T.SupplierId AS ItemStockControl_SupplierId, \r");
            viewString.Append("\n            T.SupplierCode AS ItemStockControl_SupplierCode, \r\n            T.Pr");
            viewString.Append("oductCode AS ItemStockControl_ProductCode, \r\n            T.NominalCode AS ItemSt");
            viewString.Append("ockControl_NominalCode, \r\n            T.BarCode AS ItemStockControl_BarCode, \r\n ");
            viewString.Append("           T.FinishedGoodCode AS ItemStockControl_FinishedGoodCode, \r\n          ");
            viewString.Append("  T.TaxId AS ItemStockControl_TaxId, \r\n            T.RangeThresholdLevel AS Item");
            viewString.Append("StockControl_RangeThresholdLevel, \r\n            T.FromThresholdDate AS ItemStock");
            viewString.Append("Control_FromThresholdDate, \r\n            T.ToThresholdDate AS ItemStockControl_T");
            viewString.Append("oThresholdDate, \r\n            T.Cost AS ItemStockControl_Cost, \r\n            T.U");
            viewString.Append("nitQuantity AS ItemStockControl_UnitQuantity, \r\n            T.PackQuantity AS It");
            viewString.Append("emStockControl_PackQuantity, \r\n            T.RangeThresholdLevel1 AS ItemStockCo");
            viewString.Append("ntrol_RangeThresholdLevel1, \r\n            T.RangeThresholdLevel2 AS ItemStockCon");
            viewString.Append("trol_RangeThresholdLevel2, \r\n            T.FromThresholdDate1 AS ItemStockContro");
            viewString.Append("l_FromThresholdDate1, \r\n            T.FromThresholdDate2 AS ItemStockControl_Fro");
            viewString.Append("mThresholdDate2, \r\n            T.ToThresholdDate1 AS ItemStockControl_ToThreshol");
            viewString.Append("dDate1, \r\n            T.ToThresholdDate2 AS ItemStockControl_ToThresholdDate2, \r");
            viewString.Append("\n            T.SystemSiteId AS ItemStockControl_SystemSiteId, \r\n            T.Fi");
            viewString.Append("le1URL AS ItemStockControl_File1URL, \r\n            T.File2URL AS ItemStockContro");
            viewString.Append("l_File2URL, \r\n            T.IsForWeb AS ItemStockControl_IsForWeb, \r\n           ");
            viewString.Append(" T.IsShowStockOnWeb AS ItemStockControl_IsShowStockOnWeb, \r\n            T.IsShow");
            viewString.Append("PriceOnWeb AS ItemStockControl_IsShowPriceOnWeb, \r\n            T.IsShowFreeStock");
            viewString.Append("OnWeb AS ItemStockControl_IsShowFreeStockOnWeb, \r\n            T.IsShowAllocatedS");
            viewString.Append("tockOnWeb AS ItemStockControl_IsShowAllocatedStockOnWeb, \r\n            T.IsDisab");
            viewString.Append("led AS ItemStockControl_IsDisabled, \r\n            T.FlagId AS ItemStockControl_F");
            viewString.Append("lagId, \r\n            T.IsRead AS ItemStockControl_IsRead, \r\n            T.Create");
            viewString.Append("dBy AS ItemStockControl_CreatedBy, \r\n            T.SiteDepartmentId AS ItemStock");
            viewString.Append("Control_SiteDepartmentId, \r\n            T.isAllowBackOrder AS ItemStockControl_i");
            viewString.Append("sAllowBackOrder, \r\n            True AS _from0\r\n        FROM DomainModelsStoreCon");
            viewString.Append("tainer.ItemStockControl AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStockControls", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SystemEmail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView154()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SystemEmail", @"
    SELECT VALUE -- Constructing SystemEmail
        [DomainModels.Store.SystemEmail](T1.SystemEmail_Id, T1.SystemEmail_Title, T1.SystemEmail_FFrom, T1.SystemEmail_FromEmail, T1.SystemEmail_Subject, T1.SystemEmail_Body, T1.SystemEmail_TextBody, T1.SystemEmail_LockedBy, T1.SystemEmail_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS SystemEmail_Id, 
            T.Title AS SystemEmail_Title, 
            T.FFrom AS SystemEmail_FFrom, 
            T.FromEmail AS SystemEmail_FromEmail, 
            T.Subject AS SystemEmail_Subject, 
            T.Body AS SystemEmail_Body, 
            T.TextBody AS SystemEmail_TextBody, 
            T.LockedBy AS SystemEmail_LockedBy, 
            T.SystemSiteId AS SystemEmail_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.SystemEmails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SystemEmails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView155()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SystemEmails", @"
    SELECT VALUE -- Constructing SystemEmails
        [DomainModels.SystemEmail](T1.SystemEmail_Id, T1.SystemEmail_Title, T1.SystemEmail_FFrom, T1.SystemEmail_FromEmail, T1.SystemEmail_Subject, T1.SystemEmail_Body, T1.SystemEmail_TextBody, T1.SystemEmail_LockedBy, T1.SystemEmail_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS SystemEmail_Id, 
            T.Title AS SystemEmail_Title, 
            T.FFrom AS SystemEmail_FFrom, 
            T.FromEmail AS SystemEmail_FromEmail, 
            T.Subject AS SystemEmail_Subject, 
            T.Body AS SystemEmail_Body, 
            T.TextBody AS SystemEmail_TextBody, 
            T.LockedBy AS SystemEmail_LockedBy, 
            T.SystemSiteId AS SystemEmail_SystemSiteId, 
            True AS _from0
        FROM DomainModelsStoreContainer.SystemEmail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.LengthUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView156()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.LengthUnit", @"
    SELECT VALUE -- Constructing LengthUnit
        [DomainModels.Store.LengthUnit](T1.LengthUnit_Id, T1.LengthUnit_UnitName, T1.LengthUnit_MM, T1.LengthUnit_CM, T1.LengthUnit_Inch)
    FROM (
        SELECT 
            T.Id AS LengthUnit_Id, 
            T.UnitName AS LengthUnit_UnitName, 
            T.MM AS LengthUnit_MM, 
            T.CM AS LengthUnit_CM, 
            T.Inch AS LengthUnit_Inch, 
            True AS _from0
        FROM BaseDbContext.LengthUnits AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.LengthUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView157()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.LengthUnits", @"
    SELECT VALUE -- Constructing LengthUnits
        [DomainModels.LengthUnit](T1.LengthUnit_Id, T1.LengthUnit_UnitName, T1.LengthUnit_MM, T1.LengthUnit_CM, T1.LengthUnit_Inch)
    FROM (
        SELECT 
            T.Id AS LengthUnit_Id, 
            T.UnitName AS LengthUnit_UnitName, 
            T.MM AS LengthUnit_MM, 
            T.CM AS LengthUnit_CM, 
            T.Inch AS LengthUnit_Inch, 
            True AS _from0
        FROM DomainModelsStoreContainer.LengthUnit AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperBasisArea
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView158()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperBasisArea", @"
    SELECT VALUE -- Constructing PaperBasisArea
        [DomainModels.Store.PaperBasisArea](T1.PaperBasisArea_PaperBasisAreaId, T1.PaperBasisArea_Name, T1.PaperBasisArea_Value, T1.PaperBasisArea_IsSystem)
    FROM (
        SELECT 
            T.PaperBasisAreaId AS PaperBasisArea_PaperBasisAreaId, 
            T.Name AS PaperBasisArea_Name, 
            T.[Value] AS PaperBasisArea_Value, 
            T.IsSystem AS PaperBasisArea_IsSystem, 
            True AS _from0
        FROM BaseDbContext.PaperBasisAreas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperBasisAreas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView159()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperBasisAreas", @"
    SELECT VALUE -- Constructing PaperBasisAreas
        [DomainModels.PaperBasisArea](T1.PaperBasisArea_PaperBasisAreaId, T1.PaperBasisArea_Name, T1.PaperBasisArea_Value, T1.PaperBasisArea_IsSystem)
    FROM (
        SELECT 
            T.PaperBasisAreaId AS PaperBasisArea_PaperBasisAreaId, 
            T.Name AS PaperBasisArea_Name, 
            T.[Value] AS PaperBasisArea_Value, 
            T.IsSystem AS PaperBasisArea_IsSystem, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperBasisArea AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignEmailVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView160()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignEmailVariable", @"
    SELECT VALUE -- Constructing CampaignEmailVariable
        [DomainModels.Store.CampaignEmailVariable](T1.CampaignEmailVariable_VariableId, T1.CampaignEmailVariable_VariableName, T1.CampaignEmailVariable_RefTableName, T1.CampaignEmailVariable_RefFieldName, T1.CampaignEmailVariable_CriteriaFieldName, T1.CampaignEmailVariable_Description, T1.CampaignEmailVariable_SectionId, T1.CampaignEmailVariable_VariableTag, T1.CampaignEmailVariable_Key, T1.CampaignEmailVariable_OrganisationId)
    FROM (
        SELECT 
            T.VariableId AS CampaignEmailVariable_VariableId, 
            T.VariableName AS CampaignEmailVariable_VariableName, 
            T.RefTableName AS CampaignEmailVariable_RefTableName, 
            T.RefFieldName AS CampaignEmailVariable_RefFieldName, 
            T.CriteriaFieldName AS CampaignEmailVariable_CriteriaFieldName, 
            T.Description AS CampaignEmailVariable_Description, 
            T.SectionId AS CampaignEmailVariable_SectionId, 
            T.VariableTag AS CampaignEmailVariable_VariableTag, 
            T.[Key] AS CampaignEmailVariable_Key, 
            T.OrganisationId AS CampaignEmailVariable_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CampaignEmailVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignEmailVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView161()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignEmailVariables", @"
    SELECT VALUE -- Constructing CampaignEmailVariables
        [DomainModels.CampaignEmailVariable](T1.CampaignEmailVariable_VariableId, T1.CampaignEmailVariable_VariableName, T1.CampaignEmailVariable_RefTableName, T1.CampaignEmailVariable_RefFieldName, T1.CampaignEmailVariable_CriteriaFieldName, T1.CampaignEmailVariable_Description, T1.CampaignEmailVariable_SectionId, T1.CampaignEmailVariable_VariableTag, T1.CampaignEmailVariable_Key, T1.CampaignEmailVariable_OrganisationId)
    FROM (
        SELECT 
            T.VariableId AS CampaignEmailVariable_VariableId, 
            T.VariableName AS CampaignEmailVariable_VariableName, 
            T.RefTableName AS CampaignEmailVariable_RefTableName, 
            T.RefFieldName AS CampaignEmailVariable_RefFieldName, 
            T.CriteriaFieldName AS CampaignEmailVariable_CriteriaFieldName, 
            T.Description AS CampaignEmailVariable_Description, 
            T.SectionId AS CampaignEmailVariable_SectionId, 
            T.VariableTag AS CampaignEmailVariable_VariableTag, 
            T.[Key] AS CampaignEmailVariable_Key, 
            T.OrganisationId AS CampaignEmailVariable_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CampaignEmailVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DiscountVoucher
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView162()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DiscountVoucher", @"
    SELECT VALUE -- Constructing DiscountVoucher
        [DomainModels.Store.DiscountVoucher](T1.DiscountVoucher_DiscountVoucherId, T1.DiscountVoucher_VoucherCode, T1.DiscountVoucher_ValidFromDate, T1.DiscountVoucher_ValidUptoDate, T1.DiscountVoucher_OrderId, T1.DiscountVoucher_DiscountRate, T1.DiscountVoucher_ConsumedDate, T1.DiscountVoucher_IsEnabled, T1.DiscountVoucher_CreatedDate, T1.DiscountVoucher_CompanyId)
    FROM (
        SELECT 
            T.DiscountVoucherId AS DiscountVoucher_DiscountVoucherId, 
            T.VoucherCode AS DiscountVoucher_VoucherCode, 
            T.ValidFromDate AS DiscountVoucher_ValidFromDate, 
            T.ValidUptoDate AS DiscountVoucher_ValidUptoDate, 
            T.OrderId AS DiscountVoucher_OrderId, 
            T.DiscountRate AS DiscountVoucher_DiscountRate, 
            T.ConsumedDate AS DiscountVoucher_ConsumedDate, 
            T.IsEnabled AS DiscountVoucher_IsEnabled, 
            T.CreatedDate AS DiscountVoucher_CreatedDate, 
            T.CompanyId AS DiscountVoucher_CompanyId, 
            True AS _from0
        FROM BaseDbContext.DiscountVouchers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DiscountVouchers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView163()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DiscountVouchers", @"
    SELECT VALUE -- Constructing DiscountVouchers
        [DomainModels.DiscountVoucher](T1.DiscountVoucher_DiscountVoucherId, T1.DiscountVoucher_VoucherCode, T1.DiscountVoucher_ValidFromDate, T1.DiscountVoucher_ValidUptoDate, T1.DiscountVoucher_OrderId, T1.DiscountVoucher_DiscountRate, T1.DiscountVoucher_ConsumedDate, T1.DiscountVoucher_IsEnabled, T1.DiscountVoucher_CreatedDate, T1.DiscountVoucher_CompanyId)
    FROM (
        SELECT 
            T.DiscountVoucherId AS DiscountVoucher_DiscountVoucherId, 
            T.VoucherCode AS DiscountVoucher_VoucherCode, 
            T.ValidFromDate AS DiscountVoucher_ValidFromDate, 
            T.ValidUptoDate AS DiscountVoucher_ValidUptoDate, 
            T.OrderId AS DiscountVoucher_OrderId, 
            T.DiscountRate AS DiscountVoucher_DiscountRate, 
            T.ConsumedDate AS DiscountVoucher_ConsumedDate, 
            T.IsEnabled AS DiscountVoucher_IsEnabled, 
            T.CreatedDate AS DiscountVoucher_CreatedDate, 
            T.CompanyId AS DiscountVoucher_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.DiscountVoucher AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GetItemsListView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView164()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2971);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetItemsListView\r\n        [DomainModels.Store");
            viewString.Append(".GetItemsListView](T1.GetItemsListView_ItemId, T1.GetItemsListView_ItemCode, T1.");
            viewString.Append("GetItemsListView_isQtyRanged, T1.GetItemsListView_EstimateId, T1.GetItemsListVie");
            viewString.Append("w_ProductName, T1.GetItemsListView_ProductCode, T1.GetItemsListView_ProductCateg");
            viewString.Append("oryName, T1.GetItemsListView_MinPrice, T1.GetItemsListView_ImagePath, T1.GetItem");
            viewString.Append("sListView_ThumbnailPath, T1.GetItemsListView_IconPath, T1.GetItemsListView_IsEna");
            viewString.Append("bled, T1.GetItemsListView_IsSpecialItem, T1.GetItemsListView_IsPopular, T1.GetIt");
            viewString.Append("emsListView_IsFeatured, T1.GetItemsListView_IsPromotional, T1.GetItemsListView_I");
            viewString.Append("sPublished, T1.GetItemsListView_ProductType, T1.GetItemsListView_ProductSpecific");
            viewString.Append("ation, T1.GetItemsListView_CompleteSpecification, T1.GetItemsListView_IsArchived");
            viewString.Append(", T1.GetItemsListView_SortOrder, T1.GetItemsListView_OrganisationId, T1.GetItems");
            viewString.Append("ListView_WebDescription, T1.GetItemsListView_PriceDiscountPercentage, T1.GetItem");
            viewString.Append("sListView_isTemplateDesignMode, T1.GetItemsListView_DefaultItemTax, T1.GetItemsL");
            viewString.Append("istView_isUploadImage)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId AS Get");
            viewString.Append("ItemsListView_ItemId, \r\n            T.ItemCode AS GetItemsListView_ItemCode, \r\n ");
            viewString.Append("           T.IsQtyRanged AS GetItemsListView_isQtyRanged, \r\n            T.Estima");
            viewString.Append("teId AS GetItemsListView_EstimateId, \r\n            T.ProductName AS GetItemsList");
            viewString.Append("View_ProductName, \r\n            T.ProductCode AS GetItemsListView_ProductCode, \r");
            viewString.Append("\n            T.ProductCategoryName AS GetItemsListView_ProductCategoryName, \r\n  ");
            viewString.Append("          T.MinPrice AS GetItemsListView_MinPrice, \r\n            T.ImagePath AS ");
            viewString.Append("GetItemsListView_ImagePath, \r\n            T.ThumbnailPath AS GetItemsListView_Th");
            viewString.Append("umbnailPath, \r\n            T.IconPath AS GetItemsListView_IconPath, \r\n          ");
            viewString.Append("  T.IsEnabled AS GetItemsListView_IsEnabled, \r\n            T.IsSpecialItem AS Ge");
            viewString.Append("tItemsListView_IsSpecialItem, \r\n            T.IsPopular AS GetItemsListView_IsPo");
            viewString.Append("pular, \r\n            T.IsFeatured AS GetItemsListView_IsFeatured, \r\n            ");
            viewString.Append("T.IsPromotional AS GetItemsListView_IsPromotional, \r\n            T.IsPublished A");
            viewString.Append("S GetItemsListView_IsPublished, \r\n            T.ProductType AS GetItemsListView_");
            viewString.Append("ProductType, \r\n            T.ProductSpecification AS GetItemsListView_ProductSpe");
            viewString.Append("cification, \r\n            T.CompleteSpecification AS GetItemsListView_CompleteSp");
            viewString.Append("ecification, \r\n            T.IsArchived AS GetItemsListView_IsArchived, \r\n      ");
            viewString.Append("      T.SortOrder AS GetItemsListView_SortOrder, \r\n            T.OrganisationId ");
            viewString.Append("AS GetItemsListView_OrganisationId, \r\n            T.WebDescription AS GetItemsLi");
            viewString.Append("stView_WebDescription, \r\n            T.PriceDiscountPercentage AS GetItemsListVi");
            viewString.Append("ew_PriceDiscountPercentage, \r\n            T.IsTemplateDesignMode AS GetItemsList");
            viewString.Append("View_isTemplateDesignMode, \r\n            T.DefaultItemTax AS GetItemsListView_De");
            viewString.Append("faultItemTax, \r\n            T.IsUploadImage AS GetItemsListView_isUploadImage, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM BaseDbContext.GetItemsListViews AS T\r\n");
            viewString.Append("    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GetItemsListView", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GetItemsListViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView165()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2978);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetItemsListViews\r\n        [DomainModels.GetI");
            viewString.Append("temsListView](T1.GetItemsListView_ItemId, T1.GetItemsListView_ItemCode, T1.GetIt");
            viewString.Append("emsListView_EstimateId, T1.GetItemsListView_ProductName, T1.GetItemsListView_Pro");
            viewString.Append("ductCode, T1.GetItemsListView_ProductCategoryName, T1.GetItemsListView_MinPrice,");
            viewString.Append(" T1.GetItemsListView_ImagePath, T1.GetItemsListView_ThumbnailPath, T1.GetItemsLi");
            viewString.Append("stView_IconPath, T1.GetItemsListView_IsEnabled, T1.GetItemsListView_IsSpecialIte");
            viewString.Append("m, T1.GetItemsListView_IsPopular, T1.GetItemsListView_IsFeatured, T1.GetItemsLis");
            viewString.Append("tView_IsPromotional, T1.GetItemsListView_IsPublished, T1.GetItemsListView_Produc");
            viewString.Append("tSpecification, T1.GetItemsListView_CompleteSpecification, T1.GetItemsListView_I");
            viewString.Append("sArchived, T1.GetItemsListView_SortOrder, T1.GetItemsListView_IsQtyRanged, T1.Ge");
            viewString.Append("tItemsListView_OrganisationId, T1.GetItemsListView_WebDescription, T1.GetItemsLi");
            viewString.Append("stView_PriceDiscountPercentage, T1.GetItemsListView_IsTemplateDesignMode, T1.Get");
            viewString.Append("ItemsListView_DefaultItemTax, T1.GetItemsListView_ProductType, T1.GetItemsListVi");
            viewString.Append("ew_IsUploadImage)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId AS GetItems");
            viewString.Append("ListView_ItemId, \r\n            T.ItemCode AS GetItemsListView_ItemCode, \r\n      ");
            viewString.Append("      T.EstimateId AS GetItemsListView_EstimateId, \r\n            T.ProductName A");
            viewString.Append("S GetItemsListView_ProductName, \r\n            T.ProductCode AS GetItemsListView_");
            viewString.Append("ProductCode, \r\n            T.ProductCategoryName AS GetItemsListView_ProductCate");
            viewString.Append("goryName, \r\n            T.MinPrice AS GetItemsListView_MinPrice, \r\n            T");
            viewString.Append(".ImagePath AS GetItemsListView_ImagePath, \r\n            T.ThumbnailPath AS GetIt");
            viewString.Append("emsListView_ThumbnailPath, \r\n            T.IconPath AS GetItemsListView_IconPath");
            viewString.Append(", \r\n            T.IsEnabled AS GetItemsListView_IsEnabled, \r\n            T.IsSpe");
            viewString.Append("cialItem AS GetItemsListView_IsSpecialItem, \r\n            T.IsPopular AS GetItem");
            viewString.Append("sListView_IsPopular, \r\n            T.IsFeatured AS GetItemsListView_IsFeatured, ");
            viewString.Append("\r\n            T.IsPromotional AS GetItemsListView_IsPromotional, \r\n            T");
            viewString.Append(".IsPublished AS GetItemsListView_IsPublished, \r\n            T.ProductSpecificati");
            viewString.Append("on AS GetItemsListView_ProductSpecification, \r\n            T.CompleteSpecificati");
            viewString.Append("on AS GetItemsListView_CompleteSpecification, \r\n            T.IsArchived AS GetI");
            viewString.Append("temsListView_IsArchived, \r\n            T.SortOrder AS GetItemsListView_SortOrder");
            viewString.Append(", \r\n            T.isQtyRanged AS GetItemsListView_IsQtyRanged, \r\n            T.O");
            viewString.Append("rganisationId AS GetItemsListView_OrganisationId, \r\n            T.WebDescription");
            viewString.Append(" AS GetItemsListView_WebDescription, \r\n            T.PriceDiscountPercentage AS ");
            viewString.Append("GetItemsListView_PriceDiscountPercentage, \r\n            T.isTemplateDesignMode A");
            viewString.Append("S GetItemsListView_IsTemplateDesignMode, \r\n            T.DefaultItemTax AS GetIt");
            viewString.Append("emsListView_DefaultItemTax, \r\n            T.ProductType AS GetItemsListView_Prod");
            viewString.Append("uctType, \r\n            T.isUploadImage AS GetItemsListView_IsUploadImage, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM DomainModelsStoreContainer.GetItemsListView");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GetItemsListViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Currency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView166()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Currency", @"
    SELECT VALUE -- Constructing Currency
        [DomainModels.Store.Currency](T1.Currency_CurrencyId, T1.Currency_CurrencyCode, T1.Currency_CurrencyName)
    FROM (
        SELECT 
            T.CurrencyId AS Currency_CurrencyId, 
            T.CurrencyCode AS Currency_CurrencyCode, 
            T.CurrencyName AS Currency_CurrencyName, 
            True AS _from0
        FROM BaseDbContext.Currencies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Currencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView167()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Currencies", @"
    SELECT VALUE -- Constructing Currencies
        [DomainModels.Currency](T1.Currency_CurrencyId, T1.Currency_CurrencyCode, T1.Currency_CurrencyName)
    FROM (
        SELECT 
            T.CurrencyId AS Currency_CurrencyId, 
            T.CurrencyCode AS Currency_CurrencyCode, 
            T.CurrencyName AS Currency_CurrencyName, 
            True AS _from0
        FROM DomainModelsStoreContainer.Currency AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ColorPallete
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView168()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ColorPallete", @"
    SELECT VALUE -- Constructing ColorPallete
        [DomainModels.Store.ColorPallete](T1.ColorPallete_PalleteId, T1.ColorPallete_PalleteName, T1.ColorPallete_Color1, T1.ColorPallete_Color2, T1.ColorPallete_Color3, T1.ColorPallete_Color4, T1.ColorPallete_Color5, T1.ColorPallete_Color6, T1.ColorPallete_Color7, T1.ColorPallete_SkinId, T1.ColorPallete_isDefault, T1.ColorPallete_CompanyId)
    FROM (
        SELECT 
            T.PalleteId AS ColorPallete_PalleteId, 
            T.PalleteName AS ColorPallete_PalleteName, 
            T.Color1 AS ColorPallete_Color1, 
            T.Color2 AS ColorPallete_Color2, 
            T.Color3 AS ColorPallete_Color3, 
            T.Color4 AS ColorPallete_Color4, 
            T.Color5 AS ColorPallete_Color5, 
            T.Color6 AS ColorPallete_Color6, 
            T.Color7 AS ColorPallete_Color7, 
            T.SkinId AS ColorPallete_SkinId, 
            T.IsDefault AS ColorPallete_isDefault, 
            T.CompanyId AS ColorPallete_CompanyId, 
            True AS _from0
        FROM BaseDbContext.ColorPalletes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ColorPalletes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView169()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ColorPalletes", @"
    SELECT VALUE -- Constructing ColorPalletes
        [DomainModels.ColorPallete](T1.ColorPallete_PalleteId, T1.ColorPallete_PalleteName, T1.ColorPallete_Color1, T1.ColorPallete_Color2, T1.ColorPallete_Color3, T1.ColorPallete_Color4, T1.ColorPallete_Color5, T1.ColorPallete_Color6, T1.ColorPallete_Color7, T1.ColorPallete_SkinId, T1.ColorPallete_IsDefault, T1.ColorPallete_CompanyId)
    FROM (
        SELECT 
            T.PalleteId AS ColorPallete_PalleteId, 
            T.PalleteName AS ColorPallete_PalleteName, 
            T.Color1 AS ColorPallete_Color1, 
            T.Color2 AS ColorPallete_Color2, 
            T.Color3 AS ColorPallete_Color3, 
            T.Color4 AS ColorPallete_Color4, 
            T.Color5 AS ColorPallete_Color5, 
            T.Color6 AS ColorPallete_Color6, 
            T.Color7 AS ColorPallete_Color7, 
            T.SkinId AS ColorPallete_SkinId, 
            T.isDefault AS ColorPallete_IsDefault, 
            T.CompanyId AS ColorPallete_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ColorPallete AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GlobalLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView170()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GlobalLanguage", @"
    SELECT VALUE -- Constructing GlobalLanguage
        [DomainModels.Store.GlobalLanguage](T1.GlobalLanguage_LanguageId, T1.GlobalLanguage_FriendlyName, T1.GlobalLanguage_uiCulture, T1.GlobalLanguage_culture)
    FROM (
        SELECT 
            T.LanguageId AS GlobalLanguage_LanguageId, 
            T.FriendlyName AS GlobalLanguage_FriendlyName, 
            T.uiCulture AS GlobalLanguage_uiCulture, 
            T.culture AS GlobalLanguage_culture, 
            True AS _from0
        FROM BaseDbContext.GlobalLanguages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GlobalLanguages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView171()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GlobalLanguages", @"
    SELECT VALUE -- Constructing GlobalLanguages
        [DomainModels.GlobalLanguage](T1.GlobalLanguage_LanguageId, T1.GlobalLanguage_FriendlyName, T1.GlobalLanguage_uiCulture, T1.GlobalLanguage_culture)
    FROM (
        SELECT 
            T.LanguageId AS GlobalLanguage_LanguageId, 
            T.FriendlyName AS GlobalLanguage_FriendlyName, 
            T.uiCulture AS GlobalLanguage_uiCulture, 
            T.culture AS GlobalLanguage_culture, 
            True AS _from0
        FROM DomainModelsStoreContainer.GlobalLanguage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignEmailQueue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView172()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2080);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CampaignEmailQueue\r\n        [DomainModels.Sto");
            viewString.Append("re.CampaignEmailQueue](T1.CampaignEmailQueue_EmailQueueId, T1.CampaignEmailQueue");
            viewString.Append("_To, T1.CampaignEmailQueue_Cc, T1.CampaignEmailQueue_EmailFrom, T1.CampaignEmail");
            viewString.Append("Queue_Type, T1.CampaignEmailQueue_Subject, T1.CampaignEmailQueue_Body, T1.Campai");
            viewString.Append("gnEmailQueue_Images, T1.CampaignEmailQueue_SendDateTime, T1.CampaignEmailQueue_I");
            viewString.Append("sDeliverd, T1.CampaignEmailQueue_SMTPUserName, T1.CampaignEmailQueue_SMTPPasswor");
            viewString.Append("d, T1.CampaignEmailQueue_SMTPServer, T1.CampaignEmailQueue_ErrorResponse, T1.Cam");
            viewString.Append("paignEmailQueue_FileAttachment, T1.CampaignEmailQueue_AttemptCount, T1.CampaignE");
            viewString.Append("mailQueue_ToName, T1.CampaignEmailQueue_FromName, T1.CampaignEmailQueue_Campaign");
            viewString.Append("ReportId, T1.CampaignEmailQueue_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.EmailQueueId AS CampaignEmailQueue_EmailQueueId, \r\n            T.To ");
            viewString.Append("AS CampaignEmailQueue_To, \r\n            T.Cc AS CampaignEmailQueue_Cc, \r\n       ");
            viewString.Append("     T.EmailFrom AS CampaignEmailQueue_EmailFrom, \r\n            T.Type AS Campai");
            viewString.Append("gnEmailQueue_Type, \r\n            T.Subject AS CampaignEmailQueue_Subject, \r\n    ");
            viewString.Append("        T.Body AS CampaignEmailQueue_Body, \r\n            T.Images AS CampaignEma");
            viewString.Append("ilQueue_Images, \r\n            T.SendDateTime AS CampaignEmailQueue_SendDateTime,");
            viewString.Append(" \r\n            T.IsDeliverd AS CampaignEmailQueue_IsDeliverd, \r\n            T.SM");
            viewString.Append("TPUserName AS CampaignEmailQueue_SMTPUserName, \r\n            T.SMTPPassword AS C");
            viewString.Append("ampaignEmailQueue_SMTPPassword, \r\n            T.SMTPServer AS CampaignEmailQueue");
            viewString.Append("_SMTPServer, \r\n            T.ErrorResponse AS CampaignEmailQueue_ErrorResponse, ");
            viewString.Append("\r\n            T.FileAttachment AS CampaignEmailQueue_FileAttachment, \r\n         ");
            viewString.Append("   T.AttemptCount AS CampaignEmailQueue_AttemptCount, \r\n            T.ToName AS ");
            viewString.Append("CampaignEmailQueue_ToName, \r\n            T.FromName AS CampaignEmailQueue_FromNa");
            viewString.Append("me, \r\n            T.CampaignReportId AS CampaignEmailQueue_CampaignReportId, \r\n ");
            viewString.Append("           T.OrganisationId AS CampaignEmailQueue_OrganisationId, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM BaseDbContext.CampaignEmailQueues AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignEmailQueue", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignEmailQueues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView173()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2087);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CampaignEmailQueues\r\n        [DomainModels.Ca");
            viewString.Append("mpaignEmailQueue](T1.CampaignEmailQueue_EmailQueueId, T1.CampaignEmailQueue_To, ");
            viewString.Append("T1.CampaignEmailQueue_Cc, T1.CampaignEmailQueue_EmailFrom, T1.CampaignEmailQueue");
            viewString.Append("_Type, T1.CampaignEmailQueue_Subject, T1.CampaignEmailQueue_Body, T1.CampaignEma");
            viewString.Append("ilQueue_Images, T1.CampaignEmailQueue_SendDateTime, T1.CampaignEmailQueue_IsDeli");
            viewString.Append("verd, T1.CampaignEmailQueue_SMTPUserName, T1.CampaignEmailQueue_SMTPPassword, T1");
            viewString.Append(".CampaignEmailQueue_SMTPServer, T1.CampaignEmailQueue_ErrorResponse, T1.Campaign");
            viewString.Append("EmailQueue_FileAttachment, T1.CampaignEmailQueue_AttemptCount, T1.CampaignEmailQ");
            viewString.Append("ueue_ToName, T1.CampaignEmailQueue_FromName, T1.CampaignEmailQueue_CampaignRepor");
            viewString.Append("tId, T1.CampaignEmailQueue_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.EmailQueueId AS CampaignEmailQueue_EmailQueueId, \r\n            T.To AS Ca");
            viewString.Append("mpaignEmailQueue_To, \r\n            T.Cc AS CampaignEmailQueue_Cc, \r\n            ");
            viewString.Append("T.EmailFrom AS CampaignEmailQueue_EmailFrom, \r\n            T.Type AS CampaignEma");
            viewString.Append("ilQueue_Type, \r\n            T.Subject AS CampaignEmailQueue_Subject, \r\n         ");
            viewString.Append("   T.Body AS CampaignEmailQueue_Body, \r\n            T.Images AS CampaignEmailQue");
            viewString.Append("ue_Images, \r\n            T.SendDateTime AS CampaignEmailQueue_SendDateTime, \r\n  ");
            viewString.Append("          T.IsDeliverd AS CampaignEmailQueue_IsDeliverd, \r\n            T.SMTPUse");
            viewString.Append("rName AS CampaignEmailQueue_SMTPUserName, \r\n            T.SMTPPassword AS Campai");
            viewString.Append("gnEmailQueue_SMTPPassword, \r\n            T.SMTPServer AS CampaignEmailQueue_SMTP");
            viewString.Append("Server, \r\n            T.ErrorResponse AS CampaignEmailQueue_ErrorResponse, \r\n   ");
            viewString.Append("         T.FileAttachment AS CampaignEmailQueue_FileAttachment, \r\n            T.");
            viewString.Append("AttemptCount AS CampaignEmailQueue_AttemptCount, \r\n            T.ToName AS Campa");
            viewString.Append("ignEmailQueue_ToName, \r\n            T.FromName AS CampaignEmailQueue_FromName, \r");
            viewString.Append("\n            T.CampaignReportId AS CampaignEmailQueue_CampaignReportId, \r\n      ");
            viewString.Append("      T.OrganisationId AS CampaignEmailQueue_OrganisationId, \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM DomainModelsStoreContainer.CampaignEmailQueue AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignEmailQueues", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.FieldVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView174()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.FieldVariable", @"
    SELECT VALUE -- Constructing FieldVariable
        [DomainModels.Store.FieldVariable](T1.FieldVariable_VariableId, T1.FieldVariable_VariableName, T1.FieldVariable_RefTableName, T1.FieldVariable_CriteriaFieldName, T1.FieldVariable_VariableSectionId, T1.FieldVariable_VariableTag, T1.FieldVariable_SortOrder, T1.FieldVariable_KeyField, T1.FieldVariable_VariableType)
    FROM (
        SELECT 
            T.VariableId AS FieldVariable_VariableId, 
            T.VariableName AS FieldVariable_VariableName, 
            T.RefTableName AS FieldVariable_RefTableName, 
            T.CriteriaFieldName AS FieldVariable_CriteriaFieldName, 
            T.VariableSectionId AS FieldVariable_VariableSectionId, 
            T.VariableTag AS FieldVariable_VariableTag, 
            T.SortOrder AS FieldVariable_SortOrder, 
            T.KeyField AS FieldVariable_KeyField, 
            T.VariableType AS FieldVariable_VariableType, 
            True AS _from0
        FROM BaseDbContext.FieldVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.FieldVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView175()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.FieldVariables", @"
    SELECT VALUE -- Constructing FieldVariables
        [DomainModels.FieldVariable](T1.FieldVariable_VariableId, T1.FieldVariable_VariableName, T1.FieldVariable_RefTableName, T1.FieldVariable_CriteriaFieldName, T1.FieldVariable_VariableSectionId, T1.FieldVariable_VariableTag, T1.FieldVariable_SortOrder, T1.FieldVariable_KeyField, T1.FieldVariable_VariableType)
    FROM (
        SELECT 
            T.VariableId AS FieldVariable_VariableId, 
            T.VariableName AS FieldVariable_VariableName, 
            T.RefTableName AS FieldVariable_RefTableName, 
            T.CriteriaFieldName AS FieldVariable_CriteriaFieldName, 
            T.VariableSectionId AS FieldVariable_VariableSectionId, 
            T.VariableTag AS FieldVariable_VariableTag, 
            T.SortOrder AS FieldVariable_SortOrder, 
            T.KeyField AS FieldVariable_KeyField, 
            T.VariableType AS FieldVariable_VariableType, 
            True AS _from0
        FROM DomainModelsStoreContainer.FieldVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView176()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateVariable", @"
    SELECT VALUE -- Constructing TemplateVariable
        [DomainModels.Store.TemplateVariable](T1.TemplateVariable_ProductVariableId, T1.TemplateVariable_TemplateId, T1.TemplateVariable_VariableId)
    FROM (
        SELECT 
            T.ProductVariableId AS TemplateVariable_ProductVariableId, 
            T.TemplateId AS TemplateVariable_TemplateId, 
            T.VariableId AS TemplateVariable_VariableId, 
            True AS _from0
        FROM BaseDbContext.TemplateVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView177()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateVariables", @"
    SELECT VALUE -- Constructing TemplateVariables
        [DomainModels.TemplateVariable](T1.TemplateVariable_ProductVariableId, T1.TemplateVariable_TemplateId, T1.TemplateVariable_VariableId)
    FROM (
        SELECT 
            T.ProductVariableId AS TemplateVariable_ProductVariableId, 
            T.TemplateId AS TemplateVariable_TemplateId, 
            T.VariableId AS TemplateVariable_VariableId, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.VariableSection
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView178()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.VariableSection", @"
    SELECT VALUE -- Constructing VariableSection
        [DomainModels.Store.VariableSection](T1.VariableSection_VariableSectionId, T1.VariableSection_SectionName, T1.VariableSection_SectionDescription)
    FROM (
        SELECT 
            T.VariableSectionId AS VariableSection_VariableSectionId, 
            T.SectionName AS VariableSection_SectionName, 
            T.SectionDescription AS VariableSection_SectionDescription, 
            True AS _from0
        FROM BaseDbContext.VariableSections AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VariableSections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView179()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VariableSections", @"
    SELECT VALUE -- Constructing VariableSections
        [DomainModels.VariableSection](T1.VariableSection_VariableSectionId, T1.VariableSection_SectionName, T1.VariableSection_SectionDescription)
    FROM (
        SELECT 
            T.VariableSectionId AS VariableSection_VariableSectionId, 
            T.SectionName AS VariableSection_SectionName, 
            T.SectionDescription AS VariableSection_SectionDescription, 
            True AS _from0
        FROM DomainModelsStoreContainer.VariableSection AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GetCategoryProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView180()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3380);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetCategoryProducts\r\n        [DomainModels.St");
            viewString.Append("ore.GetCategoryProducts](T1.GetCategoryProducts_ItemId, T1.GetCategoryProducts_I");
            viewString.Append("temCode, T1.GetCategoryProducts_isQtyRanged, T1.GetCategoryProducts_EstimateId, ");
            viewString.Append("T1.GetCategoryProducts_ProductName, T1.GetCategoryProducts_ProductCode, T1.GetCa");
            viewString.Append("tegoryProducts_ProductCategoryName, T1.GetCategoryProducts_MinPrice, T1.GetCateg");
            viewString.Append("oryProducts_ImagePath, T1.GetCategoryProducts_ThumbnailPath, T1.GetCategoryProdu");
            viewString.Append("cts_IconPath, T1.GetCategoryProducts_IsEnabled, T1.GetCategoryProducts_IsSpecial");
            viewString.Append("Item, T1.GetCategoryProducts_IsPopular, T1.GetCategoryProducts_IsFeatured, T1.Ge");
            viewString.Append("tCategoryProducts_IsPromotional, T1.GetCategoryProducts_IsPublished, T1.GetCateg");
            viewString.Append("oryProducts_ProductType, T1.GetCategoryProducts_ProductSpecification, T1.GetCate");
            viewString.Append("goryProducts_CompleteSpecification, T1.GetCategoryProducts_IsArchived, T1.GetCat");
            viewString.Append("egoryProducts_SortOrder, T1.GetCategoryProducts_OrganisationId, T1.GetCategoryPr");
            viewString.Append("oducts_WebDescription, T1.GetCategoryProducts_PriceDiscountPercentage, T1.GetCat");
            viewString.Append("egoryProducts_isTemplateDesignMode, T1.GetCategoryProducts_DefaultItemTax, T1.Ge");
            viewString.Append("tCategoryProducts_isUploadImage, T1.GetCategoryProducts_isMarketingBrief, T1.Get");
            viewString.Append("CategoryProducts_ProductCategoryId)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("ItemId AS GetCategoryProducts_ItemId, \r\n            T.ItemCode AS GetCategoryPro");
            viewString.Append("ducts_ItemCode, \r\n            T.isQtyRanged AS GetCategoryProducts_isQtyRanged, ");
            viewString.Append("\r\n            T.EstimateId AS GetCategoryProducts_EstimateId, \r\n            T.Pr");
            viewString.Append("oductName AS GetCategoryProducts_ProductName, \r\n            T.ProductCode AS Get");
            viewString.Append("CategoryProducts_ProductCode, \r\n            T.ProductCategoryName AS GetCategory");
            viewString.Append("Products_ProductCategoryName, \r\n            T.MinPrice AS GetCategoryProducts_Mi");
            viewString.Append("nPrice, \r\n            T.ImagePath AS GetCategoryProducts_ImagePath, \r\n          ");
            viewString.Append("  T.ThumbnailPath AS GetCategoryProducts_ThumbnailPath, \r\n            T.IconPath");
            viewString.Append(" AS GetCategoryProducts_IconPath, \r\n            T.IsEnabled AS GetCategoryProduc");
            viewString.Append("ts_IsEnabled, \r\n            T.IsSpecialItem AS GetCategoryProducts_IsSpecialItem");
            viewString.Append(", \r\n            T.IsPopular AS GetCategoryProducts_IsPopular, \r\n            T.Is");
            viewString.Append("Featured AS GetCategoryProducts_IsFeatured, \r\n            T.IsPromotional AS Get");
            viewString.Append("CategoryProducts_IsPromotional, \r\n            T.IsPublished AS GetCategoryProduc");
            viewString.Append("ts_IsPublished, \r\n            T.ProductType AS GetCategoryProducts_ProductType, ");
            viewString.Append("\r\n            T.ProductSpecification AS GetCategoryProducts_ProductSpecification");
            viewString.Append(", \r\n            T.CompleteSpecification AS GetCategoryProducts_CompleteSpecifica");
            viewString.Append("tion, \r\n            T.IsArchived AS GetCategoryProducts_IsArchived, \r\n          ");
            viewString.Append("  T.SortOrder AS GetCategoryProducts_SortOrder, \r\n            T.OrganisationId A");
            viewString.Append("S GetCategoryProducts_OrganisationId, \r\n            T.WebDescription AS GetCateg");
            viewString.Append("oryProducts_WebDescription, \r\n            T.PriceDiscountPercentage AS GetCatego");
            viewString.Append("ryProducts_PriceDiscountPercentage, \r\n            T.isTemplateDesignMode AS GetC");
            viewString.Append("ategoryProducts_isTemplateDesignMode, \r\n            T.DefaultItemTax AS GetCateg");
            viewString.Append("oryProducts_DefaultItemTax, \r\n            T.isUploadImage AS GetCategoryProducts");
            viewString.Append("_isUploadImage, \r\n            T.isMarketingBrief AS GetCategoryProducts_isMarket");
            viewString.Append("ingBrief, \r\n            T.ProductCategoryId AS GetCategoryProducts_ProductCatego");
            viewString.Append("ryId, \r\n            True AS _from0\r\n        FROM BaseDbContext.GetCategoryProduc");
            viewString.Append("ts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GetCategoryProducts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GetCategoryProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView181()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3326);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetCategoryProducts\r\n        [DomainModels.Ge");
            viewString.Append("tCategoryProduct](T1.GetCategoryProduct_ItemId, T1.GetCategoryProduct_ItemCode, ");
            viewString.Append("T1.GetCategoryProduct_isQtyRanged, T1.GetCategoryProduct_EstimateId, T1.GetCateg");
            viewString.Append("oryProduct_ProductName, T1.GetCategoryProduct_ProductCode, T1.GetCategoryProduct");
            viewString.Append("_ProductCategoryName, T1.GetCategoryProduct_MinPrice, T1.GetCategoryProduct_Imag");
            viewString.Append("ePath, T1.GetCategoryProduct_ThumbnailPath, T1.GetCategoryProduct_IconPath, T1.G");
            viewString.Append("etCategoryProduct_IsEnabled, T1.GetCategoryProduct_IsSpecialItem, T1.GetCategory");
            viewString.Append("Product_IsPopular, T1.GetCategoryProduct_IsFeatured, T1.GetCategoryProduct_IsPro");
            viewString.Append("motional, T1.GetCategoryProduct_IsPublished, T1.GetCategoryProduct_ProductType, ");
            viewString.Append("T1.GetCategoryProduct_ProductSpecification, T1.GetCategoryProduct_CompleteSpecif");
            viewString.Append("ication, T1.GetCategoryProduct_IsArchived, T1.GetCategoryProduct_SortOrder, T1.G");
            viewString.Append("etCategoryProduct_OrganisationId, T1.GetCategoryProduct_WebDescription, T1.GetCa");
            viewString.Append("tegoryProduct_PriceDiscountPercentage, T1.GetCategoryProduct_isTemplateDesignMod");
            viewString.Append("e, T1.GetCategoryProduct_DefaultItemTax, T1.GetCategoryProduct_isUploadImage, T1");
            viewString.Append(".GetCategoryProduct_isMarketingBrief, T1.GetCategoryProduct_ProductCategoryId)\r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.ItemId AS GetCategoryProduct_ItemId, ");
            viewString.Append("\r\n            T.ItemCode AS GetCategoryProduct_ItemCode, \r\n            T.isQtyRa");
            viewString.Append("nged AS GetCategoryProduct_isQtyRanged, \r\n            T.EstimateId AS GetCategor");
            viewString.Append("yProduct_EstimateId, \r\n            T.ProductName AS GetCategoryProduct_ProductNa");
            viewString.Append("me, \r\n            T.ProductCode AS GetCategoryProduct_ProductCode, \r\n           ");
            viewString.Append(" T.ProductCategoryName AS GetCategoryProduct_ProductCategoryName, \r\n            ");
            viewString.Append("T.MinPrice AS GetCategoryProduct_MinPrice, \r\n            T.ImagePath AS GetCateg");
            viewString.Append("oryProduct_ImagePath, \r\n            T.ThumbnailPath AS GetCategoryProduct_Thumbn");
            viewString.Append("ailPath, \r\n            T.IconPath AS GetCategoryProduct_IconPath, \r\n            ");
            viewString.Append("T.IsEnabled AS GetCategoryProduct_IsEnabled, \r\n            T.IsSpecialItem AS Ge");
            viewString.Append("tCategoryProduct_IsSpecialItem, \r\n            T.IsPopular AS GetCategoryProduct_");
            viewString.Append("IsPopular, \r\n            T.IsFeatured AS GetCategoryProduct_IsFeatured, \r\n      ");
            viewString.Append("      T.IsPromotional AS GetCategoryProduct_IsPromotional, \r\n            T.IsPub");
            viewString.Append("lished AS GetCategoryProduct_IsPublished, \r\n            T.ProductType AS GetCate");
            viewString.Append("goryProduct_ProductType, \r\n            T.ProductSpecification AS GetCategoryProd");
            viewString.Append("uct_ProductSpecification, \r\n            T.CompleteSpecification AS GetCategoryPr");
            viewString.Append("oduct_CompleteSpecification, \r\n            T.IsArchived AS GetCategoryProduct_Is");
            viewString.Append("Archived, \r\n            T.SortOrder AS GetCategoryProduct_SortOrder, \r\n         ");
            viewString.Append("   T.OrganisationId AS GetCategoryProduct_OrganisationId, \r\n            T.WebDes");
            viewString.Append("cription AS GetCategoryProduct_WebDescription, \r\n            T.PriceDiscountPerc");
            viewString.Append("entage AS GetCategoryProduct_PriceDiscountPercentage, \r\n            T.isTemplate");
            viewString.Append("DesignMode AS GetCategoryProduct_isTemplateDesignMode, \r\n            T.DefaultIt");
            viewString.Append("emTax AS GetCategoryProduct_DefaultItemTax, \r\n            T.isUploadImage AS Get");
            viewString.Append("CategoryProduct_isUploadImage, \r\n            T.isMarketingBrief AS GetCategoryPr");
            viewString.Append("oduct_isMarketingBrief, \r\n            T.ProductCategoryId AS GetCategoryProduct_");
            viewString.Append("ProductCategoryId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreC");
            viewString.Append("ontainer.GetCategoryProducts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GetCategoryProducts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ArtworkFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView182()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ArtworkFileTableView", @"
    SELECT VALUE -- Constructing ArtworkFileTableView
        [DomainModels.Store.ArtworkFileTableView](T1.[ArtworkFileTableView.stream_id], T1.[ArtworkFileTableView.file_stream], T1.ArtworkFileTableView_name, T1.[ArtworkFileTableView.is_directory], T1.[ArtworkFileTableView.unc_path], T1.ArtworkFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [ArtworkFileTableView.stream_id], 
            T.FileStream AS [ArtworkFileTableView.file_stream], 
            T.Name AS ArtworkFileTableView_name, 
            T.IsDirectory AS [ArtworkFileTableView.is_directory], 
            T.UncPath AS [ArtworkFileTableView.unc_path], 
            T.FileTableName AS ArtworkFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.ArtworkFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ArtworkFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView183()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ArtworkFileTableViews", @"
    SELECT VALUE -- Constructing ArtworkFileTableViews
        [DomainModels.ArtworkFileTableView](T1.ArtworkFileTableView_StreamId, T1.ArtworkFileTableView_FileStream, T1.ArtworkFileTableView_Name, T1.ArtworkFileTableView_IsDirectory, T1.ArtworkFileTableView_UncPath, T1.ArtworkFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS ArtworkFileTableView_StreamId, 
            T.file_stream AS ArtworkFileTableView_FileStream, 
            T.name AS ArtworkFileTableView_Name, 
            T.is_directory AS ArtworkFileTableView_IsDirectory, 
            T.unc_path AS ArtworkFileTableView_UncPath, 
            T.fileTableName AS ArtworkFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.ArtworkFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.AttachmentFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView184()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.AttachmentFileTableView", @"
    SELECT VALUE -- Constructing AttachmentFileTableView
        [DomainModels.Store.AttachmentFileTableView](T1.[AttachmentFileTableView.stream_id], T1.[AttachmentFileTableView.file_stream], T1.AttachmentFileTableView_name, T1.[AttachmentFileTableView.is_directory], T1.[AttachmentFileTableView.unc_path], T1.AttachmentFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [AttachmentFileTableView.stream_id], 
            T.FileStream AS [AttachmentFileTableView.file_stream], 
            T.Name AS AttachmentFileTableView_name, 
            T.IsDirectory AS [AttachmentFileTableView.is_directory], 
            T.UncPath AS [AttachmentFileTableView.unc_path], 
            T.FileTableName AS AttachmentFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.AttachmentFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.AttachmentFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView185()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.AttachmentFileTableViews", @"
    SELECT VALUE -- Constructing AttachmentFileTableViews
        [DomainModels.AttachmentFileTableView](T1.AttachmentFileTableView_StreamId, T1.AttachmentFileTableView_FileStream, T1.AttachmentFileTableView_Name, T1.AttachmentFileTableView_IsDirectory, T1.AttachmentFileTableView_UncPath, T1.AttachmentFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS AttachmentFileTableView_StreamId, 
            T.file_stream AS AttachmentFileTableView_FileStream, 
            T.name AS AttachmentFileTableView_Name, 
            T.is_directory AS AttachmentFileTableView_IsDirectory, 
            T.unc_path AS AttachmentFileTableView_UncPath, 
            T.fileTableName AS AttachmentFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.AttachmentFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CategoryFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView186()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CategoryFileTableView", @"
    SELECT VALUE -- Constructing CategoryFileTableView
        [DomainModels.Store.CategoryFileTableView](T1.[CategoryFileTableView.stream_id], T1.[CategoryFileTableView.file_stream], T1.CategoryFileTableView_name, T1.[CategoryFileTableView.is_directory], T1.[CategoryFileTableView.unc_path], T1.CategoryFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [CategoryFileTableView.stream_id], 
            T.FileStream AS [CategoryFileTableView.file_stream], 
            T.Name AS CategoryFileTableView_name, 
            T.IsDirectory AS [CategoryFileTableView.is_directory], 
            T.UncPath AS [CategoryFileTableView.unc_path], 
            T.FileTableName AS CategoryFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.CategoryFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CategoryFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView187()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CategoryFileTableViews", @"
    SELECT VALUE -- Constructing CategoryFileTableViews
        [DomainModels.CategoryFileTableView](T1.CategoryFileTableView_StreamId, T1.CategoryFileTableView_FileStream, T1.CategoryFileTableView_Name, T1.CategoryFileTableView_IsDirectory, T1.CategoryFileTableView_UncPath, T1.CategoryFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS CategoryFileTableView_StreamId, 
            T.file_stream AS CategoryFileTableView_FileStream, 
            T.name AS CategoryFileTableView_Name, 
            T.is_directory AS CategoryFileTableView_IsDirectory, 
            T.unc_path AS CategoryFileTableView_UncPath, 
            T.fileTableName AS CategoryFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CategoryFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBannerFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView188()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBannerFileTableView", @"
    SELECT VALUE -- Constructing CompanyBannerFileTableView
        [DomainModels.Store.CompanyBannerFileTableView](T1.[CompanyBannerFileTableView.stream_id], T1.[CompanyBannerFileTableView.file_stream], T1.CompanyBannerFileTableView_name, T1.[CompanyBannerFileTableView.is_directory], T1.[CompanyBannerFileTableView.unc_path], T1.CompanyBannerFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [CompanyBannerFileTableView.stream_id], 
            T.FileStream AS [CompanyBannerFileTableView.file_stream], 
            T.Name AS CompanyBannerFileTableView_name, 
            T.IsDirectory AS [CompanyBannerFileTableView.is_directory], 
            T.UncPath AS [CompanyBannerFileTableView.unc_path], 
            T.FileTableName AS CompanyBannerFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.CompanyBannerFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBannerFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView189()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBannerFileTableViews", @"
    SELECT VALUE -- Constructing CompanyBannerFileTableViews
        [DomainModels.CompanyBannerFileTableView](T1.CompanyBannerFileTableView_StreamId, T1.CompanyBannerFileTableView_FileStream, T1.CompanyBannerFileTableView_Name, T1.CompanyBannerFileTableView_IsDirectory, T1.CompanyBannerFileTableView_UncPath, T1.CompanyBannerFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS CompanyBannerFileTableView_StreamId, 
            T.file_stream AS CompanyBannerFileTableView_FileStream, 
            T.name AS CompanyBannerFileTableView_Name, 
            T.is_directory AS CompanyBannerFileTableView_IsDirectory, 
            T.unc_path AS CompanyBannerFileTableView_UncPath, 
            T.fileTableName AS CompanyBannerFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBannerFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView190()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreFileTableView", @"
    SELECT VALUE -- Constructing CostCentreFileTableView
        [DomainModels.Store.CostCentreFileTableView](T1.[CostCentreFileTableView.stream_id], T1.[CostCentreFileTableView.file_stream], T1.CostCentreFileTableView_name, T1.[CostCentreFileTableView.is_directory], T1.[CostCentreFileTableView.unc_path], T1.CostCentreFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [CostCentreFileTableView.stream_id], 
            T.FileStream AS [CostCentreFileTableView.file_stream], 
            T.Name AS CostCentreFileTableView_name, 
            T.IsDirectory AS [CostCentreFileTableView.is_directory], 
            T.UncPath AS [CostCentreFileTableView.unc_path], 
            T.FileTableName AS CostCentreFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.CostCentreFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView191()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreFileTableViews", @"
    SELECT VALUE -- Constructing CostCentreFileTableViews
        [DomainModels.CostCentreFileTableView](T1.CostCentreFileTableView_StreamId, T1.CostCentreFileTableView_FileStream, T1.CostCentreFileTableView_Name, T1.CostCentreFileTableView_IsDirectory, T1.CostCentreFileTableView_UncPath, T1.CostCentreFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS CostCentreFileTableView_StreamId, 
            T.file_stream AS CostCentreFileTableView_FileStream, 
            T.name AS CostCentreFileTableView_Name, 
            T.is_directory AS CostCentreFileTableView_IsDirectory, 
            T.unc_path AS CostCentreFileTableView_UncPath, 
            T.fileTableName AS CostCentreFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MediaFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView192()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MediaFileTableView", @"
    SELECT VALUE -- Constructing MediaFileTableView
        [DomainModels.Store.MediaFileTableView](T1.[MediaFileTableView.stream_id], T1.[MediaFileTableView.file_stream], T1.MediaFileTableView_name, T1.[MediaFileTableView.is_directory], T1.[MediaFileTableView.unc_path], T1.MediaFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [MediaFileTableView.stream_id], 
            T.FileStream AS [MediaFileTableView.file_stream], 
            T.Name AS MediaFileTableView_name, 
            T.IsDirectory AS [MediaFileTableView.is_directory], 
            T.UncPath AS [MediaFileTableView.unc_path], 
            T.FileTableName AS MediaFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.MediaFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MediaFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView193()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MediaFileTableViews", @"
    SELECT VALUE -- Constructing MediaFileTableViews
        [DomainModels.MediaFileTableView](T1.MediaFileTableView_StreamId, T1.MediaFileTableView_FileStream, T1.MediaFileTableView_Name, T1.MediaFileTableView_IsDirectory, T1.MediaFileTableView_UncPath, T1.MediaFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS MediaFileTableView_StreamId, 
            T.file_stream AS MediaFileTableView_FileStream, 
            T.name AS MediaFileTableView_Name, 
            T.is_directory AS MediaFileTableView_IsDirectory, 
            T.unc_path AS MediaFileTableView_UncPath, 
            T.fileTableName AS MediaFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.MediaFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.OrganisationFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView194()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.OrganisationFileTableView", @"
    SELECT VALUE -- Constructing OrganisationFileTableView
        [DomainModels.Store.OrganisationFileTableView](T1.[OrganisationFileTableView.stream_id], T1.[OrganisationFileTableView.file_stream], T1.OrganisationFileTableView_name, T1.[OrganisationFileTableView.is_directory], T1.[OrganisationFileTableView.unc_path], T1.OrganisationFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [OrganisationFileTableView.stream_id], 
            T.FileStream AS [OrganisationFileTableView.file_stream], 
            T.Name AS OrganisationFileTableView_name, 
            T.IsDirectory AS [OrganisationFileTableView.is_directory], 
            T.UncPath AS [OrganisationFileTableView.unc_path], 
            T.FileTableName AS OrganisationFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.OrganisationFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.OrganisationFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView195()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.OrganisationFileTableViews", @"
    SELECT VALUE -- Constructing OrganisationFileTableViews
        [DomainModels.OrganisationFileTableView](T1.OrganisationFileTableView_StreamId, T1.OrganisationFileTableView_FileStream, T1.OrganisationFileTableView_Name, T1.OrganisationFileTableView_IsDirectory, T1.OrganisationFileTableView_UncPath, T1.OrganisationFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS OrganisationFileTableView_StreamId, 
            T.file_stream AS OrganisationFileTableView_FileStream, 
            T.name AS OrganisationFileTableView_Name, 
            T.is_directory AS OrganisationFileTableView_IsDirectory, 
            T.unc_path AS OrganisationFileTableView_UncPath, 
            T.fileTableName AS OrganisationFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.OrganisationFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView196()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductFileTableView", @"
    SELECT VALUE -- Constructing ProductFileTableView
        [DomainModels.Store.ProductFileTableView](T1.[ProductFileTableView.stream_id], T1.[ProductFileTableView.file_stream], T1.ProductFileTableView_name, T1.[ProductFileTableView.is_directory], T1.[ProductFileTableView.unc_path], T1.ProductFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [ProductFileTableView.stream_id], 
            T.FileStream AS [ProductFileTableView.file_stream], 
            T.Name AS ProductFileTableView_name, 
            T.IsDirectory AS [ProductFileTableView.is_directory], 
            T.UncPath AS [ProductFileTableView.unc_path], 
            T.FileTableName AS ProductFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.ProductFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView197()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductFileTableViews", @"
    SELECT VALUE -- Constructing ProductFileTableViews
        [DomainModels.ProductFileTableView](T1.ProductFileTableView_StreamId, T1.ProductFileTableView_FileStream, T1.ProductFileTableView_Name, T1.ProductFileTableView_IsDirectory, T1.ProductFileTableView_UncPath, T1.ProductFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS ProductFileTableView_StreamId, 
            T.file_stream AS ProductFileTableView_FileStream, 
            T.name AS ProductFileTableView_Name, 
            T.is_directory AS ProductFileTableView_IsDirectory, 
            T.unc_path AS ProductFileTableView_UncPath, 
            T.fileTableName AS ProductFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SecondaryPageFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView198()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SecondaryPageFileTableView", @"
    SELECT VALUE -- Constructing SecondaryPageFileTableView
        [DomainModels.Store.SecondaryPageFileTableView](T1.[SecondaryPageFileTableView.stream_id], T1.[SecondaryPageFileTableView.file_stream], T1.SecondaryPageFileTableView_name, T1.[SecondaryPageFileTableView.is_directory], T1.[SecondaryPageFileTableView.unc_path], T1.SecondaryPageFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [SecondaryPageFileTableView.stream_id], 
            T.FileStream AS [SecondaryPageFileTableView.file_stream], 
            T.Name AS SecondaryPageFileTableView_name, 
            T.IsDirectory AS [SecondaryPageFileTableView.is_directory], 
            T.UncPath AS [SecondaryPageFileTableView.unc_path], 
            T.FileTableName AS SecondaryPageFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.SecondaryPageFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SecondaryPageFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView199()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SecondaryPageFileTableViews", @"
    SELECT VALUE -- Constructing SecondaryPageFileTableViews
        [DomainModels.SecondaryPageFileTableView](T1.SecondaryPageFileTableView_StreamId, T1.SecondaryPageFileTableView_FileStream, T1.SecondaryPageFileTableView_Name, T1.SecondaryPageFileTableView_IsDirectory, T1.SecondaryPageFileTableView_UncPath, T1.SecondaryPageFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS SecondaryPageFileTableView_StreamId, 
            T.file_stream AS SecondaryPageFileTableView_FileStream, 
            T.name AS SecondaryPageFileTableView_Name, 
            T.is_directory AS SecondaryPageFileTableView_IsDirectory, 
            T.unc_path AS SecondaryPageFileTableView_UncPath, 
            T.fileTableName AS SecondaryPageFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.SecondaryPageFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StoreFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView200()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StoreFileTableView", @"
    SELECT VALUE -- Constructing StoreFileTableView
        [DomainModels.Store.StoreFileTableView](T1.[StoreFileTableView.stream_id], T1.[StoreFileTableView.file_stream], T1.StoreFileTableView_name, T1.[StoreFileTableView.is_directory], T1.[StoreFileTableView.unc_path], T1.StoreFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [StoreFileTableView.stream_id], 
            T.FileStream AS [StoreFileTableView.file_stream], 
            T.Name AS StoreFileTableView_name, 
            T.IsDirectory AS [StoreFileTableView.is_directory], 
            T.UncPath AS [StoreFileTableView.unc_path], 
            T.FileTableName AS StoreFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.StoreFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StoreFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView201()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StoreFileTableViews", @"
    SELECT VALUE -- Constructing StoreFileTableViews
        [DomainModels.StoreFileTableView](T1.StoreFileTableView_StreamId, T1.StoreFileTableView_FileStream, T1.StoreFileTableView_Name, T1.StoreFileTableView_IsDirectory, T1.StoreFileTableView_UncPath, T1.StoreFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS StoreFileTableView_StreamId, 
            T.file_stream AS StoreFileTableView_FileStream, 
            T.name AS StoreFileTableView_Name, 
            T.is_directory AS StoreFileTableView_IsDirectory, 
            T.unc_path AS StoreFileTableView_UncPath, 
            T.fileTableName AS StoreFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.StoreFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateFileTableView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView202()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateFileTableView", @"
    SELECT VALUE -- Constructing TemplateFileTableView
        [DomainModels.Store.TemplateFileTableView](T1.[TemplateFileTableView.stream_id], T1.[TemplateFileTableView.file_stream], T1.TemplateFileTableView_name, T1.[TemplateFileTableView.is_directory], T1.[TemplateFileTableView.unc_path], T1.TemplateFileTableView_fileTableName)
    FROM (
        SELECT 
            T.StreamId AS [TemplateFileTableView.stream_id], 
            T.FileStream AS [TemplateFileTableView.file_stream], 
            T.Name AS TemplateFileTableView_name, 
            T.IsDirectory AS [TemplateFileTableView.is_directory], 
            T.UncPath AS [TemplateFileTableView.unc_path], 
            T.FileTableName AS TemplateFileTableView_fileTableName, 
            True AS _from0
        FROM BaseDbContext.TemplateFileTableViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateFileTableViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView203()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateFileTableViews", @"
    SELECT VALUE -- Constructing TemplateFileTableViews
        [DomainModels.TemplateFileTableView](T1.TemplateFileTableView_StreamId, T1.TemplateFileTableView_FileStream, T1.TemplateFileTableView_Name, T1.TemplateFileTableView_IsDirectory, T1.TemplateFileTableView_UncPath, T1.TemplateFileTableView_FileTableName)
    FROM (
        SELECT 
            T.stream_id AS TemplateFileTableView_StreamId, 
            T.file_stream AS TemplateFileTableView_FileStream, 
            T.name AS TemplateFileTableView_Name, 
            T.is_directory AS TemplateFileTableView_IsDirectory, 
            T.unc_path AS TemplateFileTableView_UncPath, 
            T.fileTableName AS TemplateFileTableView_FileTableName, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateFileTableView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductMarketBriefAnswer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView204()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductMarketBriefAnswer", @"
    SELECT VALUE -- Constructing ProductMarketBriefAnswer
        [DomainModels.Store.ProductMarketBriefAnswer](T1.ProductMarketBriefAnswer_MarketBriefAnswerId, T1.ProductMarketBriefAnswer_MarketBriefQuestionId, T1.ProductMarketBriefAnswer_AnswerDetail)
    FROM (
        SELECT 
            T.MarketBriefAnswerId AS ProductMarketBriefAnswer_MarketBriefAnswerId, 
            T.MarketBriefQuestionId AS ProductMarketBriefAnswer_MarketBriefQuestionId, 
            T.AnswerDetail AS ProductMarketBriefAnswer_AnswerDetail, 
            True AS _from0
        FROM BaseDbContext.ProductMarketBriefAnswers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductMarketBriefQuestion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView205()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductMarketBriefQuestion", @"
    SELECT VALUE -- Constructing ProductMarketBriefQuestion
        [DomainModels.Store.ProductMarketBriefQuestion](T1.ProductMarketBriefQuestion_MarketBriefQuestionId, T1.ProductMarketBriefQuestion_ItemId, T1.ProductMarketBriefQuestion_QuestionDetail, T1.ProductMarketBriefQuestion_SortOrder, T1.ProductMarketBriefQuestion_isMultipleSelction)
    FROM (
        SELECT 
            T.MarketBriefQuestionId AS ProductMarketBriefQuestion_MarketBriefQuestionId, 
            T.ItemId AS ProductMarketBriefQuestion_ItemId, 
            T.QuestionDetail AS ProductMarketBriefQuestion_QuestionDetail, 
            T.SortOrder AS ProductMarketBriefQuestion_SortOrder, 
            T.IsMultipleSelection AS ProductMarketBriefQuestion_isMultipleSelction, 
            True AS _from0
        FROM BaseDbContext.ProductMarketBriefQuestions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductMarketBriefAnswers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView206()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductMarketBriefAnswers", @"
    SELECT VALUE -- Constructing ProductMarketBriefAnswers
        [DomainModels.ProductMarketBriefAnswer](T1.ProductMarketBriefAnswer_MarketBriefAnswerId, T1.ProductMarketBriefAnswer_MarketBriefQuestionId, T1.ProductMarketBriefAnswer_AnswerDetail)
    FROM (
        SELECT 
            T.MarketBriefAnswerId AS ProductMarketBriefAnswer_MarketBriefAnswerId, 
            T.MarketBriefQuestionId AS ProductMarketBriefAnswer_MarketBriefQuestionId, 
            T.AnswerDetail AS ProductMarketBriefAnswer_AnswerDetail, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductMarketBriefAnswer AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductMarketBriefQuestions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView207()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductMarketBriefQuestions", @"
    SELECT VALUE -- Constructing ProductMarketBriefQuestions
        [DomainModels.ProductMarketBriefQuestion](T1.ProductMarketBriefQuestion_MarketBriefQuestionId, T1.ProductMarketBriefQuestion_ItemId, T1.ProductMarketBriefQuestion_QuestionDetail, T1.ProductMarketBriefQuestion_SortOrder, T1.ProductMarketBriefQuestion_IsMultipleSelection)
    FROM (
        SELECT 
            T.MarketBriefQuestionId AS ProductMarketBriefQuestion_MarketBriefQuestionId, 
            T.ItemId AS ProductMarketBriefQuestion_ItemId, 
            T.QuestionDetail AS ProductMarketBriefQuestion_QuestionDetail, 
            T.SortOrder AS ProductMarketBriefQuestion_SortOrder, 
            T.isMultipleSelction AS ProductMarketBriefQuestion_IsMultipleSelection, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductMarketBriefQuestion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Role
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView208()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Role", @"
    SELECT VALUE -- Constructing Role
        [DomainModels.Store.Role](T1.Role_RoleId, T1.Role_RoleName, T1.Role_RoleDescription, T1.Role_IsSystemRole, T1.Role_LockedBy, T1.Role_IsCompanyLevel, T1.Role_CompanyId)
    FROM (
        SELECT 
            T.RoleId AS Role_RoleId, 
            T.RoleName AS Role_RoleName, 
            T.RoleDescription AS Role_RoleDescription, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.LockedBy AS Role_LockedBy, 
            T.IsCompanyLevel AS Role_IsCompanyLevel, 
            T.CompanyId AS Role_CompanyId, 
            True AS _from0
        FROM BaseDbContext.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView209()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Roles", @"
    SELECT VALUE -- Constructing Roles
        [DomainModels.Role](T1.Role_RoleId, T1.Role_RoleName, T1.Role_RoleDescription, T1.Role_IsSystemRole, T1.Role_LockedBy, T1.Role_IsCompanyLevel, T1.Role_CompanyId)
    FROM (
        SELECT 
            T.RoleId AS Role_RoleId, 
            T.RoleName AS Role_RoleName, 
            T.RoleDescription AS Role_RoleDescription, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.LockedBy AS Role_LockedBy, 
            T.IsCompanyLevel AS Role_IsCompanyLevel, 
            T.CompanyId AS Role_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Role AS T
    ) AS T1");
        }
    }
}



