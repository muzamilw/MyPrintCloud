//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets2ED1060E936C470F925AD04F9DC558E2D99C70BBAC423FDAAA743EEF1F7014BE))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets2ED1060E936C470F925AD04F9DC558E2D99C70BBAC423FDAAA743EEF1F7014BE : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets2ED1060E936C470F925AD04F9DC558E2D99C70BBAC423FDAAA743EEF1F7014BE()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "9cd763d9f26fe348cddf85cdfeb4355068e53abbda7a82688ab76eb317e5cffa";
            this.HashOverAllExtentViews = "3a75e325f90575b05a605c160badc739cdee9c8a7e4312ca5cde741d8399fd41";
            this.ViewCount = 10;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_taxrate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_taxrate", @"
    SELECT VALUE -- Constructing tbl_taxrate
        [DomainModels.Store.tbl_taxrate](T1.[tbl_taxrate.TaxID], T1.[tbl_taxrate.TaxCode], T1.[tbl_taxrate.TaxName], T1.[tbl_taxrate.SourceStateID], T1.[tbl_taxrate.DestinationStateID], T1.[tbl_taxrate.Tax1], T1.[tbl_taxrate.Tax2], T1.[tbl_taxrate.Tax3], T1.[tbl_taxrate.IsFixed], T1.[tbl_taxrate.UserDomainKey])
    FROM (
        SELECT 
            T.TaxId AS [tbl_taxrate.TaxID], 
            T.TaxCode AS [tbl_taxrate.TaxCode], 
            T.TaxName AS [tbl_taxrate.TaxName], 
            T.SourceStateId AS [tbl_taxrate.SourceStateID], 
            T.DestinationStateId AS [tbl_taxrate.DestinationStateID], 
            T.Tax1 AS [tbl_taxrate.Tax1], 
            T.Tax2 AS [tbl_taxrate.Tax2], 
            T.Tax3 AS [tbl_taxrate.Tax3], 
            T.IsFixed AS [tbl_taxrate.IsFixed], 
            T.UserDomainKey AS [tbl_taxrate.UserDomainKey], 
            True AS _from0
        FROM BaseDbContext.TaxRates AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TaxRates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TaxRates", @"
    SELECT VALUE -- Constructing TaxRates
        [DomainModels.TaxRate](T1.TaxRate_TaxId, T1.TaxRate_TaxCode, T1.TaxRate_TaxName, T1.TaxRate_SourceStateId, T1.TaxRate_DestinationStateId, T1.TaxRate_Tax1, T1.TaxRate_Tax2, T1.TaxRate_Tax3, T1.TaxRate_IsFixed, T1.TaxRate_UserDomainKey)
    FROM (
        SELECT 
            T.TaxID AS TaxRate_TaxId, 
            T.TaxCode AS TaxRate_TaxCode, 
            T.TaxName AS TaxRate_TaxName, 
            T.SourceStateID AS TaxRate_SourceStateId, 
            T.DestinationStateID AS TaxRate_DestinationStateId, 
            T.Tax1 AS TaxRate_Tax1, 
            T.Tax2 AS TaxRate_Tax2, 
            T.Tax3 AS TaxRate_Tax3, 
            T.IsFixed AS TaxRate_IsFixed, 
            T.UserDomainKey AS TaxRate_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.tbl_taxrate AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9102);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [DomainModels.Store.Company]");
            viewString.Append("(T1.Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL");
            viewString.Append(", T1.Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Compa");
            viewString.Append("ny_TypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company");
            viewString.Append("_AccountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsC");
            viewString.Append("ustomer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLast");
            viewString.Append("UpdatedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedB");
            viewString.Append("y, T1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, ");
            viewString.Append("T1.Company_VATRegReference, T1.Company_FlagID, T1.Company_PhoneNo, T1.Company_Is");
            viewString.Append("General, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.");
            viewString.Append("Company_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequ");
            viewString.Append("ired, T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTracki");
            viewString.Append("ngPath, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.C");
            viewString.Append("ompany_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeatur");
            viewString.Append("edProducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseU");
            viewString.Append("sIcons, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.C");
            viewString.Append("ompany_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBr");
            viewString.Append("okerBanners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, ");
            viewString.Append("T1.Company_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline,");
            viewString.Append(" T1.Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T");
            viewString.Append("1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Compan");
            viewString.Append("y_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_i");
            viewString.Append("sShowGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company");
            viewString.Append("_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSeco");
            viewString.Append("ndaryPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowR");
            viewString.Append("egistrationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstT");
            viewString.Append("ime, T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppI");
            viewString.Append("d, T1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS");
            viewString.Append(", T1.Company_TaxPercentageID, T1.Company_XeroAccessCode, T1.Company_canUserPlace");
            viewString.Append("OrderWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, ");
            viewString.Append("T1.Company_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerAr");
            viewString.Append("tworkOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.C");
            viewString.Append("ompany_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Prod");
            viewString.Append("uctionManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotifi");
            viewString.Append("cationManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnCh");
            viewString.Append("eckout, T1.Company_DeliveryPickUpAddressId)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company");
            viewString.Append("_AccountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Com");
            viewString.Append("pany_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n        ");
            viewString.Append("    T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms");
            viewString.Append(", \r\n            T.TypeId AS Company_TypeId, \r\n            T.DefaultNominalCode A");
            viewString.Append("S Company_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Company_Default");
            viewString.Append("MarkUpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate, \r\n        ");
            viewString.Append("    T.AccountManagerId AS Company_AccountManagerId, \r\n            T.Status AS Co");
            viewString.Append("mpany_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n            T.");
            viewString.Append("Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Company_NotesLas");
            viewString.Append("tUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpdatedBy, ");
            viewString.Append("\r\n            T.AccountStatusId AS Company_AccountStatusId, \r\n            T.IsDi");
            viewString.Append("sabled AS Company_IsDisabled, \r\n            T.LockedBy AS Company_LockedBy, \r\n  ");
            viewString.Append("          T.AccountBalance AS Company_AccountBalance, \r\n            T.CreationDa");
            viewString.Append("te AS Company_CreationDate, \r\n            T.VATRegNumber AS Company_VATRegNumber");
            viewString.Append(", \r\n            T.VATRegReference AS Company_VATRegReference, \r\n            T.Fl");
            viewString.Append("agId AS Company_FlagID, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n          ");
            viewString.Append("  T.IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS Company_Sales");
            viewString.Append("Person, \r\n            T.Image AS Company_Image, \r\n            T.WebAccessCode AS");
            viewString.Append(" Company_WebAccessCode, \r\n            T.isArchived AS Company_isArchived, \r\n    ");
            viewString.Append("        T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, \r\n      ");
            viewString.Append("      T.PONumberRequired AS Company_PONumberRequired, \r\n            T.ShowPrices");
            viewString.Append(" AS Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_CarrierWebPath");
            viewString.Append(", \r\n            T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n        ");
            viewString.Append("    T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n            ");
            viewString.Append("T.isDisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            T.isDisplayM");
            viewString.Append("enuBar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners AS Company_");
            viewString.Append("isDisplayBanners, \r\n            T.isDisplayFeaturedProducts AS Company_isDisplay");
            viewString.Append("FeaturedProducts, \r\n            T.isDisplayPromotionalProducts AS Company_isDisp");
            viewString.Append("layPromotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Company_isDisp");
            viewString.Append("layChooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company_isDisplaySe");
            viewString.Append("condaryPages, \r\n            T.isDisplaySiteFooter AS Company_isDisplaySiteFooter");
            viewString.Append(", \r\n            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n        ");
            viewString.Append("    T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.isDisplaylBr");
            viewString.Append("okerBanners AS Company_isDisplaylBrokerBanners, \r\n            T.isBrokerCanLamin");
            viewString.Append("ate AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRoundCorner AS Co");
            viewString.Append("mpany_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSameDay AS Compa");
            viewString.Append("ny_isBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPaymentOnline AS ");
            viewString.Append("Company_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrderApprovalReq");
            viewString.Append("uired AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBrokerPaymentR");
            viewString.Append("equired AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteLabel AS Comp");
            viewString.Append("any_isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n          ");
            viewString.Append("  T.FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS Company_L");
            viewString.Append("inkedinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n            ");
            viewString.Append("T.WebAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoogleMap AS");
            viewString.Append(" Company_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isTextWater");
            viewString.Append("mark, \r\n            T.WatermarkText AS Company_WatermarkText, \r\n            T.Co");
            viewString.Append("reCustomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundImage AS ");
            viewString.Append("Company_StoreBackgroundImage, \r\n            T.isDisplayBrokerSecondaryPages AS C");
            viewString.Append("ompany_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS Company_Pri");
            viewString.Append("ceFlagId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n            T.");
            viewString.Append("isAllowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n            ");
            viewString.Append("T.MarketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n            T.is");
            viewString.Append("LoginFirstTime AS Company_isLoginFirstTime, \r\n            T.facebookAppId AS Com");
            viewString.Append("pany_facebookAppId, \r\n            T.facebookAppKey AS Company_facebookAppKey, \r\n");
            viewString.Append("            T.twitterAppId AS Company_twitterAppId, \r\n            T.twitterAppKe");
            viewString.Append("y AS Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Company_isStor");
            viewString.Append("eModePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n            T.Ta");
            viewString.Append("xPercentageId AS Company_TaxPercentageID, \r\n            T.XeroAccessCode AS Comp");
            viewString.Append("any_XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_");
            viewString.Append("canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_");
            viewString.Append("CanUserEditProfile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n");
            viewString.Append("            T.includeEmailBrokerArtworkOrderReport AS Company_includeEmailBroker");
            viewString.Append("ArtworkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS Company");
            viewString.Append("_includeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerArtworkOrd");
            viewString.Append("erJobCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n            T.make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtworkOrderPro");
            viewString.Append("ductionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderMa");
            viewString.Append("nagerId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManage");
            viewString.Append("rId2, \r\n            T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n  ");
            viewString.Append("          T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n            ");
            viewString.Append("T.StockNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n        ");
            viewString.Append("    T.StockNotificationManagerId2 AS Company_StockNotificationManagerId2, \r\n    ");
            viewString.Append("        T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisp");
            viewString.Append("layDeliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.De");
            viewString.Append("liveryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM BaseDbContext.Companies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyDomain", @"
    SELECT VALUE -- Constructing CompanyDomain
        [DomainModels.Store.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyDomains AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9109);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.");
            viewString.Append("Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL, T1");
            viewString.Append(".Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Company_T");
            viewString.Append("ypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company_Acc");
            viewString.Append("ountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsCusto");
            viewString.Append("mer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLastUpda");
            viewString.Append("tedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedBy, T");
            viewString.Append("1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, T1.C");
            viewString.Append("ompany_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_IsGene");
            viewString.Append("ral, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.Comp");
            viewString.Append("any_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequired");
            viewString.Append(", T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTrackingPa");
            viewString.Append("th, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.Compa");
            viewString.Append("ny_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeaturedPr");
            viewString.Append("oducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseUsIco");
            viewString.Append("ns, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.Compa");
            viewString.Append("ny_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBroker");
            viewString.Append("Banners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, T1.C");
            viewString.Append("ompany_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline, T1.");
            viewString.Append("Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T1.Co");
            viewString.Append("mpany_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Company_Li");
            viewString.Append("nkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_isSho");
            viewString.Append("wGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company_Cor");
            viewString.Append("eCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSecondar");
            viewString.Append("yPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowRegis");
            viewString.Append("trationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstTime,");
            viewString.Append(" T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppId, T");
            viewString.Append("1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1");
            viewString.Append(".Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlaceOrde");
            viewString.Append("rWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, T1.C");
            viewString.Append("ompany_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerArtwor");
            viewString.Append("kOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_makeEmai");
            viewString.Append("lBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.Compa");
            viewString.Append("ny_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Producti");
            viewString.Append("onManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotificati");
            viewString.Append("onManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnChecko");
            viewString.Append("ut, T1.Company_DeliveryPickUpAddressId)\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company_Acc");
            viewString.Append("ountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Company");
            viewString.Append("_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n            ");
            viewString.Append("T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms, \r\n");
            viewString.Append("            T.TypeId AS Company_TypeId, \r\n            T.DefaultNominalCode AS Co");
            viewString.Append("mpany_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Company_DefaultMark");
            viewString.Append("UpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate, \r\n            ");
            viewString.Append("T.AccountManagerId AS Company_AccountManagerId, \r\n            T.Status AS Compan");
            viewString.Append("y_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n            T.Note");
            viewString.Append("s AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Company_NotesLastUpd");
            viewString.Append("atedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpdatedBy, \r\n  ");
            viewString.Append("          T.AccountStatusId AS Company_AccountStatusId, \r\n            T.IsDisabl");
            viewString.Append("ed AS Company_IsDisabled, \r\n            T.LockedBy AS Company_LockedBy, \r\n      ");
            viewString.Append("      T.AccountBalance AS Company_AccountBalance, \r\n            T.CreationDate A");
            viewString.Append("S Company_CreationDate, \r\n            T.VATRegNumber AS Company_VATRegNumber, \r\n");
            viewString.Append("            T.VATRegReference AS Company_VATRegReference, \r\n            T.FlagID");
            viewString.Append(" AS Company_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n            T.");
            viewString.Append("IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS Company_SalesPers");
            viewString.Append("on, \r\n            T.Image AS Company_Image, \r\n            T.WebAccessCode AS Com");
            viewString.Append("pany_WebAccessCode, \r\n            T.isArchived AS Company_isArchived, \r\n        ");
            viewString.Append("    T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, \r\n          ");
            viewString.Append("  T.PONumberRequired AS Company_PONumberRequired, \r\n            T.ShowPrices AS ");
            viewString.Append("Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_CarrierWebPath, \r\n");
            viewString.Append("            T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n            ");
            viewString.Append("T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n            T.is");
            viewString.Append("DisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            T.isDisplayMenuB");
            viewString.Append("ar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners AS Company_isDi");
            viewString.Append("splayBanners, \r\n            T.isDisplayFeaturedProducts AS Company_isDisplayFeat");
            viewString.Append("uredProducts, \r\n            T.isDisplayPromotionalProducts AS Company_isDisplayP");
            viewString.Append("romotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Company_isDisplayC");
            viewString.Append("hooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company_isDisplaySecond");
            viewString.Append("aryPages, \r\n            T.isDisplaySiteFooter AS Company_isDisplaySiteFooter, \r\n");
            viewString.Append("            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n            ");
            viewString.Append("T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.isDisplaylBroker");
            viewString.Append("Banners AS Company_isDisplaylBrokerBanners, \r\n            T.isBrokerCanLaminate ");
            viewString.Append("AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRoundCorner AS Compan");
            viewString.Append("y_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSameDay AS Company_i");
            viewString.Append("sBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPaymentOnline AS Comp");
            viewString.Append("any_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrderApprovalRequire");
            viewString.Append("d AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBrokerPaymentRequi");
            viewString.Append("red AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteLabel AS Company_");
            viewString.Append("isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n            T.");
            viewString.Append("FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS Company_Linke");
            viewString.Append("dinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n            T.We");
            viewString.Append("bAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoogleMap AS Com");
            viewString.Append("pany_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isTextWatermark");
            viewString.Append(", \r\n            T.WatermarkText AS Company_WatermarkText, \r\n            T.CoreCu");
            viewString.Append("stomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundImage AS Comp");
            viewString.Append("any_StoreBackgroundImage, \r\n            T.isDisplayBrokerSecondaryPages AS Compa");
            viewString.Append("ny_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS Company_PriceFl");
            viewString.Append("agId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n            T.isAl");
            viewString.Append("lowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n            T.Ma");
            viewString.Append("rketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n            T.isLogi");
            viewString.Append("nFirstTime AS Company_isLoginFirstTime, \r\n            T.facebookAppId AS Company");
            viewString.Append("_facebookAppId, \r\n            T.facebookAppKey AS Company_facebookAppKey, \r\n    ");
            viewString.Append("        T.twitterAppId AS Company_twitterAppId, \r\n            T.twitterAppKey AS");
            viewString.Append(" Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Company_isStoreMod");
            viewString.Append("ePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n            T.TaxPer");
            viewString.Append("centageID AS Company_TaxPercentageId, \r\n            T.XeroAccessCode AS Company_");
            viewString.Append("XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_canU");
            viewString.Append("serPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_CanU");
            viewString.Append("serEditProfile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n    ");
            viewString.Append("        T.includeEmailBrokerArtworkOrderReport AS Company_includeEmailBrokerArtw");
            viewString.Append("orkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS Company_inc");
            viewString.Append("ludeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerArtworkOrderJo");
            viewString.Append("bCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n            T.makeEmai");
            viewString.Append("lBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtworkOrderProduct");
            viewString.Append("ionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderManage");
            viewString.Append("rId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManagerId2");
            viewString.Append(", \r\n            T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n      ");
            viewString.Append("      T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n            T.St");
            viewString.Append("ockNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n            ");
            viewString.Append("T.StockNotificationManagerId2 AS Company_StockNotificationManagerId2, \r\n        ");
            viewString.Append("    T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisplayD");
            viewString.Append("eliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.Delive");
            viewString.Append("ryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM DomainModelsStoreContainer.Company AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyDomains", @"
    SELECT VALUE -- Constructing CompanyDomains
        [DomainModels.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyDomain AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ChartOfAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ChartOfAccount", "\r\n    SELECT VALUE -- Constructing ChartOfAccount\r\n        [DomainModels.Store.Ch" +
                    "artOfAccount](T1.ChartOfAccount_ID, T1.ChartOfAccount_AccountNo, T1.ChartOfAccou" +
                    "nt_Name, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType," +
                    " T1.ChartOfAccount_TypeID, T1.ChartOfAccount_SubTypeID, T1.ChartOfAccount_Descri" +
                    "ption, T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_I" +
                    "sFixed, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliatio" +
                    "n, T1.ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_System" +
                    "SiteID, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.ID AS ChartOfAccount_ID, \r\n            T.AccountNo AS ChartOfAccount_Accoun" +
                    "tNo, \r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance" +
                    " AS ChartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOf" +
                    "Account_OpeningBalanceType, \r\n            T.TypeID AS ChartOfAccount_TypeID, \r\n " +
                    "           T.SubTypeID AS ChartOfAccount_SubTypeID, \r\n            T.Description " +
                    "AS ChartOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, " +
                    "\r\n            T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS " +
                    "ChartOfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastA" +
                    "ctivityDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconcil" +
                    "iation, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRea" +
                    "d AS ChartOfAccount_IsRead, \r\n            T.SystemSiteID AS ChartOfAccount_Syste" +
                    "mSiteID, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_ID, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeID, T1.ChartOfAccount_SubTypeID, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "D, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ID AS ChartOfAccount_ID, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeID AS ChartOfAccount_TypeID, \r\n      " +
                    "      T.SubTypeID AS ChartOfAccount_SubTypeID, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteID AS ChartOfAccount_SystemSite" +
                    "ID, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.ChartOfAccount AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Markup", @"
    SELECT VALUE -- Constructing Markup
        [DomainModels.Store.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Markups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Markups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Markups", @"
    SELECT VALUE -- Constructing Markups
        [DomainModels.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.Markup AS T
    ) AS T1");
        }
    }
}


