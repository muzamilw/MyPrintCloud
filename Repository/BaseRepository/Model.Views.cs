//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsE3CBE92C25348DCFF1FA1F72BBD7989A5C3ABABB096E16777A050859B696343A))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsE3CBE92C25348DCFF1FA1F72BBD7989A5C3ABABB096E16777A050859B696343A : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySetsE3CBE92C25348DCFF1FA1F72BBD7989A5C3ABABB096E16777A050859B696343A()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "c00f83b0849f7adc40042fc7150d4f3ebd24af183621fed8086dcda2721305bf";
            this.HashOverAllExtentViews = "1fa944364763ba1e076c2f2e75d356d1756b12178cd018e8a05b4d47d280a36f";
            this.ViewCount = 28;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9123);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [DomainModels.Store.Company]");
            viewString.Append("(T1.Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL");
            viewString.Append(", T1.Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Compa");
            viewString.Append("ny_TypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company");
            viewString.Append("_AccountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsC");
            viewString.Append("ustomer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLast");
            viewString.Append("UpdatedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedB");
            viewString.Append("y, T1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, ");
            viewString.Append("T1.Company_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_Is");
            viewString.Append("General, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.");
            viewString.Append("Company_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequ");
            viewString.Append("ired, T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTracki");
            viewString.Append("ngPath, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.C");
            viewString.Append("ompany_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeatur");
            viewString.Append("edProducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseU");
            viewString.Append("sIcons, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.C");
            viewString.Append("ompany_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBr");
            viewString.Append("okerBanners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, ");
            viewString.Append("T1.Company_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline,");
            viewString.Append(" T1.Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T");
            viewString.Append("1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Compan");
            viewString.Append("y_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_i");
            viewString.Append("sShowGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company");
            viewString.Append("_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSeco");
            viewString.Append("ndaryPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowR");
            viewString.Append("egistrationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstT");
            viewString.Append("ime, T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppI");
            viewString.Append("d, T1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS");
            viewString.Append(", T1.Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlace");
            viewString.Append("OrderWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, ");
            viewString.Append("T1.Company_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerAr");
            viewString.Append("tworkOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.C");
            viewString.Append("ompany_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Prod");
            viewString.Append("uctionManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotifi");
            viewString.Append("cationManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnCh");
            viewString.Append("eckout, T1.Company_DeliveryPickUpAddressId)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company");
            viewString.Append("_AccountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Com");
            viewString.Append("pany_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n        ");
            viewString.Append("    T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms");
            viewString.Append(", \r\n            CAST(T.TypeId AS [Edm.Int64]) AS Company_TypeId, \r\n            T");
            viewString.Append(".DefaultNominalCode AS Company_DefaultNominalCode, \r\n            T.DefaultMarkUp");
            viewString.Append("Id AS Company_DefaultMarkUpId, \r\n            T.AccountOpenDate AS Company_Accoun");
            viewString.Append("tOpenDate, \r\n            T.AccountManagerId AS Company_AccountManagerId, \r\n     ");
            viewString.Append("       T.Status AS Company_Status, \r\n            T.IsCustomer AS Company_IsCusto");
            viewString.Append("mer, \r\n            T.Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDat");
            viewString.Append("e AS Company_NotesLastUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company");
            viewString.Append("_NotesLastUpdatedBy, \r\n            T.AccountStatusId AS Company_AccountStatusId,");
            viewString.Append(" \r\n            T.IsDisabled AS Company_IsDisabled, \r\n            T.LockedBy AS C");
            viewString.Append("ompany_LockedBy, \r\n            T.AccountBalance AS Company_AccountBalance, \r\n   ");
            viewString.Append("         T.CreationDate AS Company_CreationDate, \r\n            T.VATRegNumber AS");
            viewString.Append(" Company_VATRegNumber, \r\n            T.VATRegReference AS Company_VATRegReferenc");
            viewString.Append("e, \r\n            T.FlagId AS Company_FlagId, \r\n            T.PhoneNo AS Company_");
            viewString.Append("PhoneNo, \r\n            T.IsGeneral AS Company_IsGeneral, \r\n            T.SalesPe");
            viewString.Append("rson AS Company_SalesPerson, \r\n            T.Image AS Company_Image, \r\n         ");
            viewString.Append("   T.WebAccessCode AS Company_WebAccessCode, \r\n            T.isArchived AS Compa");
            viewString.Append("ny_isArchived, \r\n            T.PayByPersonalCredeitCard AS Company_PayByPersonal");
            viewString.Append("CredeitCard, \r\n            T.PONumberRequired AS Company_PONumberRequired, \r\n   ");
            viewString.Append("         T.ShowPrices AS Company_ShowPrices, \r\n            T.CarrierWebPath AS C");
            viewString.Append("ompany_CarrierWebPath, \r\n            T.CarrierTrackingPath AS Company_CarrierTra");
            viewString.Append("ckingPath, \r\n            T.CorporateOrderingPolicy AS Company_CorporateOrderingP");
            viewString.Append("olicy, \r\n            T.isDisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n   ");
            viewString.Append("         T.isDisplayMenuBar AS Company_isDisplayMenuBar, \r\n            T.isDispl");
            viewString.Append("ayBanners AS Company_isDisplayBanners, \r\n            T.isDisplayFeaturedProducts");
            viewString.Append(" AS Company_isDisplayFeaturedProducts, \r\n            T.isDisplayPromotionalProdu");
            viewString.Append("cts AS Company_isDisplayPromotionalProducts, \r\n            T.isDisplayChooseUsIc");
            viewString.Append("ons AS Company_isDisplayChooseUsIcons, \r\n            T.isDisplaySecondaryPages A");
            viewString.Append("S Company_isDisplaySecondaryPages, \r\n            T.isDisplaySiteFooter AS Compan");
            viewString.Append("y_isDisplaySiteFooter, \r\n            T.RedirectWebstoreURL AS Company_RedirectWe");
            viewString.Append("bstoreURL, \r\n            T.defaultPalleteId AS Company_defaultPalleteId, \r\n     ");
            viewString.Append("       T.isDisplaylBrokerBanners AS Company_isDisplaylBrokerBanners, \r\n         ");
            viewString.Append("   T.isBrokerCanLaminate AS Company_isBrokerCanLaminate, \r\n            T.isBroke");
            viewString.Append("rCanRoundCorner AS Company_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDe");
            viewString.Append("liverSameDay AS Company_isBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAc");
            viewString.Append("ceptPaymentOnline AS Company_isBrokerCanAcceptPaymentOnline, \r\n            T.isB");
            viewString.Append("rokerOrderApprovalRequired AS Company_isBrokerOrderApprovalRequired, \r\n         ");
            viewString.Append("   T.isBrokerPaymentRequired AS Company_isBrokerPaymentRequired, \r\n            T");
            viewString.Append(".isWhiteLabel AS Company_isWhiteLabel, \r\n            T.TwitterURL AS Company_Twi");
            viewString.Append("tterURL, \r\n            T.FacebookURL AS Company_FacebookURL, \r\n            T.Lin");
            viewString.Append("kedinURL AS Company_LinkedinURL, \r\n            T.WebMasterTag AS Company_WebMast");
            viewString.Append("erTag, \r\n            T.WebAnalyticCode AS Company_WebAnalyticCode, \r\n           ");
            viewString.Append(" T.isShowGoogleMap AS Company_isShowGoogleMap, \r\n            T.isTextWatermark A");
            viewString.Append("S Company_isTextWatermark, \r\n            T.WatermarkText AS Company_WatermarkTex");
            viewString.Append("t, \r\n            T.CoreCustomerId AS Company_CoreCustomerId, \r\n            T.Sto");
            viewString.Append("reBackgroundImage AS Company_StoreBackgroundImage, \r\n            T.isDisplayBrok");
            viewString.Append("erSecondaryPages AS Company_isDisplayBrokerSecondaryPages, \r\n            T.Price");
            viewString.Append("FlagId AS Company_PriceFlagId, \r\n            T.isIncludeVAT AS Company_isInclude");
            viewString.Append("VAT, \r\n            T.isAllowRegistrationFromWeb AS Company_isAllowRegistrationFr");
            viewString.Append("omWeb, \r\n            T.MarketingBriefRecipient AS Company_MarketingBriefRecipien");
            viewString.Append("t, \r\n            T.isLoginFirstTime AS Company_isLoginFirstTime, \r\n            T");
            viewString.Append(".facebookAppId AS Company_facebookAppId, \r\n            T.facebookAppKey AS Compa");
            viewString.Append("ny_facebookAppKey, \r\n            T.twitterAppId AS Company_twitterAppId, \r\n     ");
            viewString.Append("       T.twitterAppKey AS Company_twitterAppKey, \r\n            T.isStoreModePriv");
            viewString.Append("ate AS Company_isStoreModePrivate, \r\n            T.CustomCSS AS Company_CustomCS");
            viewString.Append("S, \r\n            T.TaxPercentageId AS Company_TaxPercentageId, \r\n            T.X");
            viewString.Append("eroAccessCode AS Company_XeroAccessCode, \r\n            T.canUserPlaceOrderWithou");
            viewString.Append("tApproval AS Company_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEd");
            viewString.Append("itProfile AS Company_CanUserEditProfile, \r\n            T.OrganisationId AS Compa");
            viewString.Append("ny_OrganisationId, \r\n            T.includeEmailBrokerArtworkOrderReport AS Compa");
            viewString.Append("ny_includeEmailBrokerArtworkOrderReport, \r\n            T.includeEmailBrokerArtwo");
            viewString.Append("rkOrderXML AS Company_includeEmailBrokerArtworkOrderXML, \r\n            T.include");
            viewString.Append("EmailBrokerArtworkOrderJobCard AS Company_includeEmailBrokerArtworkOrderJobCard,");
            viewString.Append(" \r\n            T.makeEmailBrokerArtworkOrderProductionReady AS Company_makeEmail");
            viewString.Append("BrokerArtworkOrderProductionReady, \r\n            T.SalesAndOrderManagerId1 AS Co");
            viewString.Append("mpany_SalesAndOrderManagerId1, \r\n            T.SalesAndOrderManagerId2 AS Compan");
            viewString.Append("y_SalesAndOrderManagerId2, \r\n            T.ProductionManagerId1 AS Company_Produ");
            viewString.Append("ctionManagerId1, \r\n            T.ProductionManagerId2 AS Company_ProductionManag");
            viewString.Append("erId2, \r\n            T.StockNotificationManagerId1 AS Company_StockNotificationM");
            viewString.Append("anagerId1, \r\n            T.StockNotificationManagerId2 AS Company_StockNotificat");
            viewString.Append("ionManagerId2, \r\n            T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r");
            viewString.Append("\n            T.IsDisplayDeliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckou");
            viewString.Append("t, \r\n            T.DeliveryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM BaseDbContext.Companies AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyDomain", @"
    SELECT VALUE -- Constructing CompanyDomain
        [DomainModels.Store.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyDomains AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidgetParam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidgetParam", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParam
        [DomainModels.Store.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            CAST(T.PageWidgetParamId AS [Edm.Int64]) AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgetParams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2770);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPage\r\n        [DomainModels.Store.CmsPage]");
            viewString.Append("(T1.CmsPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTi");
            viewString.Append("tle, T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, ");
            viewString.Append("T1.[CmsPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsP");
            viewString.Append("age.Meta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPa");
            viewString.Append("ge.Meta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateCo");
            viewString.Append("ntent], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent]");
            viewString.Append(", T1.[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.Cms");
            viewString.Append("Page_CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.C");
            viewString.Append("msPage_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_");
            viewString.Append("PageKeywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, ");
            viewString.Append("T1.CmsPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS");
            viewString.Append(" CmsPage_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.P");
            viewString.Append("ageTitle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r");
            viewString.Append("\n            T.description AS CmsPage_description, \r\n            T.PageRelativeP");
            viewString.Append("ath AS CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder,");
            viewString.Append(" \r\n            T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n       ");
            viewString.Append("     T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n         ");
            viewString.Append("   T.Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r");
            viewString.Append("\n            T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n       ");
            viewString.Append("     T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_");
            viewString.Append("AuthorContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent ");
            viewString.Append("AS [CmsPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.");
            viewString.Append("Meta_LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta");
            viewString.Append("_RevisitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n   ");
            viewString.Append("         T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPag");
            viewString.Append("e_isUserDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n           ");
            viewString.Append(" T.isPromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialO");
            viewString.Append("ffer AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r");
            viewString.Append("\n            T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.Pag");
            viewString.Append("eBanner AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywo");
            viewString.Append("rds, \r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay A");
            viewString.Append("S CmsPage_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n         ");
            viewString.Append("   T.OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM BaseDbContext.CmsPages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidget
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidget", @"
    SELECT VALUE -- Constructing CmsSkinPageWidget
        [DomainModels.Store.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBanner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBanner", @"
    SELECT VALUE -- Constructing CompanyBanner
        [DomainModels.Store.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM BaseDbContext.CompanyBanners AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5804);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategory\r\n        [DomainModels.Store.");
            viewString.Append("ProductCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_Catego");
            viewString.Append("ryName, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.Prod");
            viewString.Append("uctCategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_Compan");
            viewString.Append("yId, T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Pr");
            viewString.Append("oductCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_is");
            viewString.Append("Enabled, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMa");
            viewString.Append("ppedCategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished,");
            viewString.Append(" T1.ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCa");
            viewString.Append("tegory_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCatego");
            viewString.Append("ry_isLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRest");
            viewString.Append("rictions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction");
            viewString.Append(", T1.ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Pr");
            viewString.Append("oductCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleF");
            viewString.Append("actor, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeyword");
            viewString.Append("s, T1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductC");
            viewString.Append("ategory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCa");
            viewString.Append("tegory_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1");
            viewString.Append(".ProductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCat");
            viewString.Append("egory_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCateg");
            viewString.Append("ory_DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory");
            viewString.Append("_ProductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCa");
            viewString.Append("tegory_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCateg");
            viewString.Append("ory_IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsSh");
            viewString.Append("owStockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_I");
            viewString.Append("sShowProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.Produc");
            viewString.Append("tCategoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName A");
            viewString.Append("S ProductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_C");
            viewString.Append("ontentType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n    ");
            viewString.Append("        T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy");
            viewString.Append(" AS ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_Compa");
            viewString.Append("nyId, \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n  ");
            viewString.Append("          T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImageP");
            viewString.Append("ath AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCatego");
            viewString.Append("ry_ThumbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n    ");
            viewString.Append("        T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.Templa");
            viewString.Append("teDesignerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryNa");
            viewString.Append("me, \r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.is");
            viewString.Append("Published AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS Produc");
            viewString.Append("tCategory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_Trimmed");
            viewString.Append("Height, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, ");
            viewString.Append("\r\n            T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n      ");
            viewString.Append("      T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.");
            viewString.Append("Sides AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS Product");
            viewString.Append("Category_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategor");
            viewString.Append("y_ApplyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestr");
            viewString.Append("iction, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, ");
            viewString.Append("\r\n            T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            ");
            viewString.Append("T.RegionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCat");
            viewString.Append("egory_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n");
            viewString.Append("            T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, ");
            viewString.Append("\r\n            T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.Me");
            viewString.Append("taDescription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS P");
            viewString.Append("roductCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Orga");
            viewString.Append("nisationId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCa");
            viewString.Append("tegoryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory");
            viewString.Append("_SubCategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_C");
            viewString.Append("ategoryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n");
            viewString.Append("            T.ShortDescription AS ProductCategory_ShortDescription, \r\n          ");
            viewString.Append("  T.SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            ");
            viewString.Append("T.DefaultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDispla");
            viewString.Append("yColumns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisp");
            viewString.Append("layRows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeature");
            viewString.Append("dproducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAv");
            viewString.Append("ailablity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoin");
            viewString.Append("ts AS ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Pro");
            viewString.Append("ductCategory_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory");
            viewString.Append("_IsShowSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowSto");
            viewString.Append("ckStatus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProd");
            viewString.Append("uctDescription, \r\n            T.IsShowProductShortDescription AS ProductCategory");
            viewString.Append("_IsShowProductShortDescription, \r\n            True AS _from0\r\n        FROM BaseD");
            viewString.Append("bContext.ProductCategories AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategory", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Store.Widgets](T1.Widgets_WidgetId, T1.Widgets_WidgetCode, T1.Widgets_WidgetName, T1.Widgets_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widgets_WidgetId, 
            T.WidgetCode AS Widgets_WidgetCode, 
            T.WidgetName AS Widgets_WidgetName, 
            T.WidgetControlName AS Widgets_WidgetControlName, 
            True AS _from0
        FROM BaseDbContext.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBannerSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBannerSet", @"
    SELECT VALUE -- Constructing CompanyBannerSet
        [DomainModels.Store.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyBannerSets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9130);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.");
            viewString.Append("Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL, T1");
            viewString.Append(".Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Company_T");
            viewString.Append("ypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company_Acc");
            viewString.Append("ountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsCusto");
            viewString.Append("mer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLastUpda");
            viewString.Append("tedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedBy, T");
            viewString.Append("1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, T1.C");
            viewString.Append("ompany_VATRegReference, T1.Company_PhoneNo, T1.Company_IsGeneral, T1.Company_Sal");
            viewString.Append("esPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.Company_isArchived, T1.");
            viewString.Append("Company_PayByPersonalCredeitCard, T1.Company_PONumberRequired, T1.Company_ShowPr");
            viewString.Append("ices, T1.Company_CarrierWebPath, T1.Company_CarrierTrackingPath, T1.Company_Corp");
            viewString.Append("orateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.Company_isDisplayMenuBar");
            viewString.Append(", T1.Company_isDisplayBanners, T1.Company_isDisplayFeaturedProducts, T1.Company_");
            viewString.Append("isDisplayPromotionalProducts, T1.Company_isDisplayChooseUsIcons, T1.Company_isDi");
            viewString.Append("splaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.Company_RedirectWebstore");
            viewString.Append("URL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBrokerBanners, T1.Company");
            viewString.Append("_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, T1.Company_isBrokerCanD");
            viewString.Append("eliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline, T1.Company_isBrokerOrd");
            viewString.Append("erApprovalRequired, T1.Company_isBrokerPaymentRequired, T1.Company_isWhiteLabel,");
            viewString.Append(" T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Company_LinkedinURL, T1.Compa");
            viewString.Append("ny_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_isShowGoogleMap, T1.Comp");
            viewString.Append("any_isTextWatermark, T1.Company_WatermarkText, T1.Company_CoreCustomerId, T1.Com");
            viewString.Append("pany_StoreBackgroundImage, T1.Company_isDisplayBrokerSecondaryPages, T1.Company_");
            viewString.Append("PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowRegistrationFromWeb, T1.");
            viewString.Append("Company_MarketingBriefRecipient, T1.Company_isLoginFirstTime, T1.Company_faceboo");
            viewString.Append("kAppId, T1.Company_facebookAppKey, T1.Company_twitterAppId, T1.Company_twitterAp");
            viewString.Append("pKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1.Company_XeroAccess");
            viewString.Append("Code, T1.Company_canUserPlaceOrderWithoutApproval, T1.Company_CanUserEditProfile");
            viewString.Append(", T1.Company_OrganisationId, T1.Company_includeEmailBrokerArtworkOrderReport, T1");
            viewString.Append(".Company_includeEmailBrokerArtworkOrderXML, T1.Company_includeEmailBrokerArtwork");
            viewString.Append("OrderJobCard, T1.Company_makeEmailBrokerArtworkOrderProductionReady, T1.Company_");
            viewString.Append("SalesAndOrderManagerId1, T1.Company_SalesAndOrderManagerId2, T1.Company_Producti");
            viewString.Append("onManagerId1, T1.Company_ProductionManagerId2, T1.Company_StockNotificationManag");
            viewString.Append("erId1, T1.Company_StockNotificationManagerId2, T1.Company_IsDeliveryTaxAble, T1.");
            viewString.Append("Company_IsDisplayDeliveryOnCheckout, T1.Company_DeliveryPickUpAddressId, T1.Comp");
            viewString.Append("any_FlagId, T1.Company_TaxPercentageId)\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company_Acc");
            viewString.Append("ountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Company");
            viewString.Append("_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n            ");
            viewString.Append("T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms, \r\n");
            viewString.Append("            CAST(T.TypeId AS [Edm.Int32]) AS Company_TypeId, \r\n            T.Def");
            viewString.Append("aultNominalCode AS Company_DefaultNominalCode, \r\n            T.DefaultMarkUpId A");
            viewString.Append("S Company_DefaultMarkUpId, \r\n            T.AccountOpenDate AS Company_AccountOpe");
            viewString.Append("nDate, \r\n            T.AccountManagerId AS Company_AccountManagerId, \r\n         ");
            viewString.Append("   T.Status AS Company_Status, \r\n            T.IsCustomer AS Company_IsCustomer,");
            viewString.Append(" \r\n            T.Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS");
            viewString.Append(" Company_NotesLastUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company_Not");
            viewString.Append("esLastUpdatedBy, \r\n            T.AccountStatusId AS Company_AccountStatusId, \r\n ");
            viewString.Append("           T.IsDisabled AS Company_IsDisabled, \r\n            T.LockedBy AS Compa");
            viewString.Append("ny_LockedBy, \r\n            T.AccountBalance AS Company_AccountBalance, \r\n       ");
            viewString.Append("     T.CreationDate AS Company_CreationDate, \r\n            T.VATRegNumber AS Com");
            viewString.Append("pany_VATRegNumber, \r\n            T.VATRegReference AS Company_VATRegReference, \r");
            viewString.Append("\n            T.PhoneNo AS Company_PhoneNo, \r\n            T.IsGeneral AS Company_");
            viewString.Append("IsGeneral, \r\n            T.SalesPerson AS Company_SalesPerson, \r\n            T.I");
            viewString.Append("mage AS Company_Image, \r\n            T.WebAccessCode AS Company_WebAccessCode, \r");
            viewString.Append("\n            T.isArchived AS Company_isArchived, \r\n            T.PayByPersonalCr");
            viewString.Append("edeitCard AS Company_PayByPersonalCredeitCard, \r\n            T.PONumberRequired ");
            viewString.Append("AS Company_PONumberRequired, \r\n            T.ShowPrices AS Company_ShowPrices, \r");
            viewString.Append("\n            T.CarrierWebPath AS Company_CarrierWebPath, \r\n            T.Carrier");
            viewString.Append("TrackingPath AS Company_CarrierTrackingPath, \r\n            T.CorporateOrderingPo");
            viewString.Append("licy AS Company_CorporateOrderingPolicy, \r\n            T.isDisplaySiteHeader AS ");
            viewString.Append("Company_isDisplaySiteHeader, \r\n            T.isDisplayMenuBar AS Company_isDispl");
            viewString.Append("ayMenuBar, \r\n            T.isDisplayBanners AS Company_isDisplayBanners, \r\n     ");
            viewString.Append("       T.isDisplayFeaturedProducts AS Company_isDisplayFeaturedProducts, \r\n     ");
            viewString.Append("       T.isDisplayPromotionalProducts AS Company_isDisplayPromotionalProducts, \r");
            viewString.Append("\n            T.isDisplayChooseUsIcons AS Company_isDisplayChooseUsIcons, \r\n     ");
            viewString.Append("       T.isDisplaySecondaryPages AS Company_isDisplaySecondaryPages, \r\n         ");
            viewString.Append("   T.isDisplaySiteFooter AS Company_isDisplaySiteFooter, \r\n            T.Redirec");
            viewString.Append("tWebstoreURL AS Company_RedirectWebstoreURL, \r\n            T.defaultPalleteId AS");
            viewString.Append(" Company_defaultPalleteId, \r\n            T.isDisplaylBrokerBanners AS Company_is");
            viewString.Append("DisplaylBrokerBanners, \r\n            T.isBrokerCanLaminate AS Company_isBrokerCa");
            viewString.Append("nLaminate, \r\n            T.isBrokerCanRoundCorner AS Company_isBrokerCanRoundCor");
            viewString.Append("ner, \r\n            T.isBrokerCanDeliverSameDay AS Company_isBrokerCanDeliverSame");
            viewString.Append("Day, \r\n            T.isBrokerCanAcceptPaymentOnline AS Company_isBrokerCanAccept");
            viewString.Append("PaymentOnline, \r\n            T.isBrokerOrderApprovalRequired AS Company_isBroker");
            viewString.Append("OrderApprovalRequired, \r\n            T.isBrokerPaymentRequired AS Company_isBrok");
            viewString.Append("erPaymentRequired, \r\n            T.isWhiteLabel AS Company_isWhiteLabel, \r\n     ");
            viewString.Append("       T.TwitterURL AS Company_TwitterURL, \r\n            T.FacebookURL AS Compan");
            viewString.Append("y_FacebookURL, \r\n            T.LinkedinURL AS Company_LinkedinURL, \r\n           ");
            viewString.Append(" T.WebMasterTag AS Company_WebMasterTag, \r\n            T.WebAnalyticCode AS Comp");
            viewString.Append("any_WebAnalyticCode, \r\n            T.isShowGoogleMap AS Company_isShowGoogleMap,");
            viewString.Append(" \r\n            T.isTextWatermark AS Company_isTextWatermark, \r\n            T.Wat");
            viewString.Append("ermarkText AS Company_WatermarkText, \r\n            T.CoreCustomerId AS Company_C");
            viewString.Append("oreCustomerId, \r\n            T.StoreBackgroundImage AS Company_StoreBackgroundIm");
            viewString.Append("age, \r\n            T.isDisplayBrokerSecondaryPages AS Company_isDisplayBrokerSec");
            viewString.Append("ondaryPages, \r\n            T.PriceFlagId AS Company_PriceFlagId, \r\n            T");
            viewString.Append(".isIncludeVAT AS Company_isIncludeVAT, \r\n            T.isAllowRegistrationFromWe");
            viewString.Append("b AS Company_isAllowRegistrationFromWeb, \r\n            T.MarketingBriefRecipient");
            viewString.Append(" AS Company_MarketingBriefRecipient, \r\n            T.isLoginFirstTime AS Company");
            viewString.Append("_isLoginFirstTime, \r\n            T.facebookAppId AS Company_facebookAppId, \r\n   ");
            viewString.Append("         T.facebookAppKey AS Company_facebookAppKey, \r\n            T.twitterAppI");
            viewString.Append("d AS Company_twitterAppId, \r\n            T.twitterAppKey AS Company_twitterAppKe");
            viewString.Append("y, \r\n            T.isStoreModePrivate AS Company_isStoreModePrivate, \r\n         ");
            viewString.Append("   T.CustomCSS AS Company_CustomCSS, \r\n            T.XeroAccessCode AS Company_X");
            viewString.Append("eroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_canUs");
            viewString.Append("erPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_CanUs");
            viewString.Append("erEditProfile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n     ");
            viewString.Append("       T.includeEmailBrokerArtworkOrderReport AS Company_includeEmailBrokerArtwo");
            viewString.Append("rkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS Company_incl");
            viewString.Append("udeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerArtworkOrderJob");
            viewString.Append("Card AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n            T.makeEmail");
            viewString.Append("BrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtworkOrderProducti");
            viewString.Append("onReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderManager");
            viewString.Append("Id1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManagerId2,");
            viewString.Append(" \r\n            T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n       ");
            viewString.Append("     T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n            T.Sto");
            viewString.Append("ckNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n            T");
            viewString.Append(".StockNotificationManagerId2 AS Company_StockNotificationManagerId2, \r\n         ");
            viewString.Append("   T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisplayDe");
            viewString.Append("liveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.Deliver");
            viewString.Append("yPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            T.FlagId AS C");
            viewString.Append("ompany_FlagId, \r\n            T.TaxPercentageId AS Company_TaxPercentageId, \r\n   ");
            viewString.Append("         True AS _from0\r\n        FROM DomainModelsStoreContainer.Company AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyDomains", @"
    SELECT VALUE -- Constructing CompanyDomains
        [DomainModels.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyDomain AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgetParams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgetParams", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParams
        [DomainModels.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            CAST(T.PageWidgetParamId AS [Edm.Int32]) AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidgetParam AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2777);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPages\r\n        [DomainModels.CmsPage](T1.C");
            viewString.Append("msPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTitle, ");
            viewString.Append("T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, T1.[C");
            viewString.Append("msPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsPage.M");
            viewString.Append("eta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPage.Me");
            viewString.Append("ta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateContent");
            viewString.Append("], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent], T1.");
            viewString.Append("[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.CmsPage_");
            viewString.Append("CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.CmsPag");
            viewString.Append("e_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_PageK");
            viewString.Append("eywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, T1.Cm");
            viewString.Append("sPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS CmsP");
            viewString.Append("age_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.PageTi");
            viewString.Append("tle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r\n    ");
            viewString.Append("        T.description AS CmsPage_description, \r\n            T.PageRelativePath A");
            viewString.Append("S CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder, \r\n  ");
            viewString.Append("          T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n            ");
            viewString.Append("T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n            T.");
            viewString.Append("Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r\n    ");
            viewString.Append("        T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n            ");
            viewString.Append("T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_Autho");
            viewString.Append("rContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent AS [C");
            viewString.Append("msPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.Meta_");
            viewString.Append("LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta_Revi");
            viewString.Append("sitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n        ");
            viewString.Append("    T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPage_isU");
            viewString.Append("serDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n            T.is");
            viewString.Append("PromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialOffer ");
            viewString.Append("AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r\n    ");
            viewString.Append("        T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.PageBann");
            viewString.Append("er AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywords, ");
            viewString.Append("\r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay AS Cms");
            viewString.Append("Page_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n            T.");
            viewString.Append("OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM DomainModelsStoreContainer.CmsPage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgets", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgets
        [DomainModels.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidget AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBanners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBanners", @"
    SELECT VALUE -- Constructing CompanyBanners
        [DomainModels.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBanner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5811);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategories\r\n        [DomainModels.Prod");
            viewString.Append("uctCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_CategoryNa");
            viewString.Append("me, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.ProductC");
            viewString.Append("ategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_CompanyId,");
            viewString.Append(" T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Produc");
            viewString.Append("tCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_isEnab");
            viewString.Append("led, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMapped");
            viewString.Append("CategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished, T1.");
            viewString.Append("ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCatego");
            viewString.Append("ry_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCategory_i");
            viewString.Append("sLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRestrict");
            viewString.Append("ions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction, T1");
            viewString.Append(".ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Produc");
            viewString.Append("tCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleFacto");
            viewString.Append("r, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeywords, T");
            viewString.Append("1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductCateg");
            viewString.Append("ory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCatego");
            viewString.Append("ry_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1.Pro");
            viewString.Append("ductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCategor");
            viewString.Append("y_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCategory_");
            viewString.Append("DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory_Pro");
            viewString.Append("ductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCatego");
            viewString.Append("ry_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCategory_");
            viewString.Append("IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsShowSt");
            viewString.Append("ockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_IsSho");
            viewString.Append("wProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.ProductCat");
            viewString.Append("egoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName AS Pr");
            viewString.Append("oductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_Conte");
            viewString.Append("ntType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n        ");
            viewString.Append("    T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy AS ");
            viewString.Append("ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_CompanyId");
            viewString.Append(", \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n      ");
            viewString.Append("      T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImagePath ");
            viewString.Append("AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCategory_T");
            viewString.Append("humbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n        ");
            viewString.Append("    T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.TemplateDe");
            viewString.Append("signerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryName, ");
            viewString.Append("\r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.isPubl");
            viewString.Append("ished AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS ProductCat");
            viewString.Append("egory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_TrimmedHeig");
            viewString.Append("ht, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, \r\n  ");
            viewString.Append("          T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n          ");
            viewString.Append("  T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.Side");
            viewString.Append("s AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS ProductCate");
            viewString.Append("gory_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategory_Ap");
            viewString.Append("plyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestricti");
            viewString.Append("on, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, \r\n  ");
            viewString.Append("          T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            T.Re");
            viewString.Append("gionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCategor");
            viewString.Append("y_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n    ");
            viewString.Append("        T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, \r\n  ");
            viewString.Append("          T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.MetaDe");
            viewString.Append("scription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS Produ");
            viewString.Append("ctCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Organisa");
            viewString.Append("tionId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCategoryDi");
            viewString.Append("splayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory_Sub");
            viewString.Append("CategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_Categ");
            viewString.Append("oryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n    ");
            viewString.Append("        T.ShortDescription AS ProductCategory_ShortDescription, \r\n            T.");
            viewString.Append("SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            T.De");
            viewString.Append("faultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDisplayCol");
            viewString.Append("umns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisplayR");
            viewString.Append("ows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeaturedpro");
            viewString.Append("ducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAvaila");
            viewString.Append("blity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoints A");
            viewString.Append("S ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Product");
            viewString.Append("Category_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory_IsS");
            viewString.Append("howSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowStockSt");
            viewString.Append("atus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProductD");
            viewString.Append("escription, \r\n            T.IsShowProductShortDescription AS ProductCategory_IsS");
            viewString.Append("howProductShortDescription, \r\n            True AS _from0\r\n        FROM DomainMod");
            viewString.Append("elsStoreContainer.ProductCategory AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategories", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Widget](T1.Widget_WidgetId, T1.Widget_WidgetCode, T1.Widget_WidgetName, T1.Widget_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widget_WidgetId, 
            T.WidgetCode AS Widget_WidgetCode, 
            T.WidgetName AS Widget_WidgetName, 
            T.WidgetControlName AS Widget_WidgetControlName, 
            True AS _from0
        FROM DomainModelsStoreContainer.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBannerSets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBannerSets", @"
    SELECT VALUE -- Constructing CompanyBannerSets
        [DomainModels.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBannerSet AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Markup", @"
    SELECT VALUE -- Constructing Markup
        [DomainModels.Store.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Markups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Markups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Markups", @"
    SELECT VALUE -- Constructing Markups
        [DomainModels.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.Markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ChartOfAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ChartOfAccount", "\r\n    SELECT VALUE -- Constructing ChartOfAccount\r\n        [DomainModels.Store.Ch" +
                    "artOfAccount](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccou" +
                    "nt_Name, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType," +
                    " T1.ChartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Descri" +
                    "ption, T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_I" +
                    "sFixed, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliatio" +
                    "n, T1.ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_System" +
                    "SiteId, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_Accoun" +
                    "tNo, \r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance" +
                    " AS ChartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOf" +
                    "Account_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n " +
                    "           T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description " +
                    "AS ChartOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, " +
                    "\r\n            T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS " +
                    "ChartOfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastA" +
                    "ctivityDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconcil" +
                    "iation, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRea" +
                    "d AS ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_Syste" +
                    "mSiteId, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.ChartOfAccount AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperSize
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperSize", @"
    SELECT VALUE -- Constructing PaperSize
        [DomainModels.Store.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_isArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.isArchived AS PaperSize_isArchived, 
            True AS _from0
        FROM BaseDbContext.PaperSizes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperSizes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperSizes", @"
    SELECT VALUE -- Constructing PaperSizes
        [DomainModels.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_isArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.isArchived AS PaperSize_isArchived, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperSize AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCategory", "\r\n    SELECT VALUE -- Constructing StockCategory\r\n        [DomainModels.Store.Sto" +
                    "ckCategory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory" +
                    "_Name, T1.StockCategory_Description, T1.StockCategory_fixed, T1.StockCategory_It" +
                    "emWeight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.Stock" +
                    "Category_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCo" +
                    "ated, T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCatego" +
                    "ry_recLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Fla" +
                    "g2, T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r" +
                    "\n    FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_Category" +
                    "Id, \r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCat" +
                    "egory_Name, \r\n            T.Description AS StockCategory_Description, \r\n        " +
                    "    T.fixed AS StockCategory_fixed, \r\n            T.ItemWeight AS StockCategory_" +
                    "ItemWeight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n          " +
                    "  T.ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSiz" +
                    "e AS StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategor" +
                    "y_ItemCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n    " +
                    "        T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge" +
                    " AS StockCategory_ItemCharge, \r\n            T.recLock AS StockCategory_recLock, " +
                    "\r\n            T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCate" +
                    "gory_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 " +
                    "AS StockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n        " +
                    "    T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n      " +
                    "  FROM BaseDbContext.StockCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCategories", "\r\n    SELECT VALUE -- Constructing StockCategories\r\n        [DomainModels.StockCa" +
                    "tegory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory_Nam" +
                    "e, T1.StockCategory_Description, T1.StockCategory_fixed, T1.StockCategory_ItemWe" +
                    "ight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.StockCate" +
                    "gory_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCoated" +
                    ", T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCategory_r" +
                    "ecLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Flag2, " +
                    "T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r\n   " +
                    " FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_CategoryId, " +
                    "\r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCategor" +
                    "y_Name, \r\n            T.Description AS StockCategory_Description, \r\n            " +
                    "T.fixed AS StockCategory_fixed, \r\n            T.ItemWeight AS StockCategory_Item" +
                    "Weight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n            T." +
                    "ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSize AS" +
                    " StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategory_It" +
                    "emCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n        " +
                    "    T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge AS " +
                    "StockCategory_ItemCharge, \r\n            T.recLock AS StockCategory_recLock, \r\n  " +
                    "          T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCategory" +
                    "_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 AS S" +
                    "tockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n            " +
                    "T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n        FR" +
                    "OM DomainModelsStoreContainer.StockCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockSubCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockSubCategory", @"
    SELECT VALUE -- Constructing StockSubCategory
        [DomainModels.Store.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM BaseDbContext.StockSubCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockSubCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockSubCategories", @"
    SELECT VALUE -- Constructing StockSubCategories
        [DomainModels.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockSubCategory AS T
    ) AS T1");
        }
    }
}


