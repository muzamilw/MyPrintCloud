//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets3803EBA5E23530D36E3127DF9AF044DD4A40E8E7937BB5B632836757D410492A))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets3803EBA5E23530D36E3127DF9AF044DD4A40E8E7937BB5B632836757D410492A : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets3803EBA5E23530D36E3127DF9AF044DD4A40E8E7937BB5B632836757D410492A()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "95b563e8475ba35f13dabff12c4053d8f9308ec2501f28217606e53f2e59995e";
            this.HashOverAllExtentViews = "56a6e44a82193ec043ac47106e43c4ddaff084ae9896922b1bb6bd9c262a55ec";
            this.ViewCount = 44;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9102);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [DomainModels.Store.Company]");
            viewString.Append("(T1.Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL");
            viewString.Append(", T1.Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Compa");
            viewString.Append("ny_TypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company");
            viewString.Append("_AccountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsC");
            viewString.Append("ustomer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLast");
            viewString.Append("UpdatedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedB");
            viewString.Append("y, T1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, ");
            viewString.Append("T1.Company_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_Is");
            viewString.Append("General, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.");
            viewString.Append("Company_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequ");
            viewString.Append("ired, T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTracki");
            viewString.Append("ngPath, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.C");
            viewString.Append("ompany_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeatur");
            viewString.Append("edProducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseU");
            viewString.Append("sIcons, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.C");
            viewString.Append("ompany_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBr");
            viewString.Append("okerBanners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, ");
            viewString.Append("T1.Company_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline,");
            viewString.Append(" T1.Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T");
            viewString.Append("1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Compan");
            viewString.Append("y_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_i");
            viewString.Append("sShowGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company");
            viewString.Append("_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSeco");
            viewString.Append("ndaryPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowR");
            viewString.Append("egistrationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstT");
            viewString.Append("ime, T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppI");
            viewString.Append("d, T1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS");
            viewString.Append(", T1.Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlace");
            viewString.Append("OrderWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, ");
            viewString.Append("T1.Company_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerAr");
            viewString.Append("tworkOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.C");
            viewString.Append("ompany_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Prod");
            viewString.Append("uctionManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotifi");
            viewString.Append("cationManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnCh");
            viewString.Append("eckout, T1.Company_DeliveryPickUpAddressId)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company");
            viewString.Append("_AccountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Com");
            viewString.Append("pany_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n        ");
            viewString.Append("    T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms");
            viewString.Append(", \r\n            T.TypeId AS Company_TypeId, \r\n            T.DefaultNominalCode A");
            viewString.Append("S Company_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Company_Default");
            viewString.Append("MarkUpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate, \r\n        ");
            viewString.Append("    T.AccountManagerId AS Company_AccountManagerId, \r\n            T.Status AS Co");
            viewString.Append("mpany_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n            T.");
            viewString.Append("Notes AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Company_NotesLas");
            viewString.Append("tUpdatedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpdatedBy, ");
            viewString.Append("\r\n            T.AccountStatusId AS Company_AccountStatusId, \r\n            T.IsDi");
            viewString.Append("sabled AS Company_IsDisabled, \r\n            T.LockedBy AS Company_LockedBy, \r\n  ");
            viewString.Append("          T.AccountBalance AS Company_AccountBalance, \r\n            T.CreationDa");
            viewString.Append("te AS Company_CreationDate, \r\n            T.VATRegNumber AS Company_VATRegNumber");
            viewString.Append(", \r\n            T.VATRegReference AS Company_VATRegReference, \r\n            T.Fl");
            viewString.Append("agId AS Company_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n          ");
            viewString.Append("  T.IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS Company_Sales");
            viewString.Append("Person, \r\n            T.Image AS Company_Image, \r\n            T.WebAccessCode AS");
            viewString.Append(" Company_WebAccessCode, \r\n            T.isArchived AS Company_isArchived, \r\n    ");
            viewString.Append("        T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, \r\n      ");
            viewString.Append("      T.PONumberRequired AS Company_PONumberRequired, \r\n            T.ShowPrices");
            viewString.Append(" AS Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_CarrierWebPath");
            viewString.Append(", \r\n            T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n        ");
            viewString.Append("    T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n            ");
            viewString.Append("T.isDisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            T.isDisplayM");
            viewString.Append("enuBar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners AS Company_");
            viewString.Append("isDisplayBanners, \r\n            T.isDisplayFeaturedProducts AS Company_isDisplay");
            viewString.Append("FeaturedProducts, \r\n            T.isDisplayPromotionalProducts AS Company_isDisp");
            viewString.Append("layPromotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Company_isDisp");
            viewString.Append("layChooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company_isDisplaySe");
            viewString.Append("condaryPages, \r\n            T.isDisplaySiteFooter AS Company_isDisplaySiteFooter");
            viewString.Append(", \r\n            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n        ");
            viewString.Append("    T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.isDisplaylBr");
            viewString.Append("okerBanners AS Company_isDisplaylBrokerBanners, \r\n            T.isBrokerCanLamin");
            viewString.Append("ate AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRoundCorner AS Co");
            viewString.Append("mpany_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSameDay AS Compa");
            viewString.Append("ny_isBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPaymentOnline AS ");
            viewString.Append("Company_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrderApprovalReq");
            viewString.Append("uired AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBrokerPaymentR");
            viewString.Append("equired AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteLabel AS Comp");
            viewString.Append("any_isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n          ");
            viewString.Append("  T.FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS Company_L");
            viewString.Append("inkedinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n            ");
            viewString.Append("T.WebAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoogleMap AS");
            viewString.Append(" Company_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isTextWater");
            viewString.Append("mark, \r\n            T.WatermarkText AS Company_WatermarkText, \r\n            T.Co");
            viewString.Append("reCustomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundImage AS ");
            viewString.Append("Company_StoreBackgroundImage, \r\n            T.isDisplayBrokerSecondaryPages AS C");
            viewString.Append("ompany_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS Company_Pri");
            viewString.Append("ceFlagId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n            T.");
            viewString.Append("isAllowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n            ");
            viewString.Append("T.MarketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n            T.is");
            viewString.Append("LoginFirstTime AS Company_isLoginFirstTime, \r\n            T.facebookAppId AS Com");
            viewString.Append("pany_facebookAppId, \r\n            T.facebookAppKey AS Company_facebookAppKey, \r\n");
            viewString.Append("            T.twitterAppId AS Company_twitterAppId, \r\n            T.twitterAppKe");
            viewString.Append("y AS Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Company_isStor");
            viewString.Append("eModePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n            T.Ta");
            viewString.Append("xPercentageId AS Company_TaxPercentageId, \r\n            T.XeroAccessCode AS Comp");
            viewString.Append("any_XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_");
            viewString.Append("canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_");
            viewString.Append("CanUserEditProfile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n");
            viewString.Append("            T.includeEmailBrokerArtworkOrderReport AS Company_includeEmailBroker");
            viewString.Append("ArtworkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS Company");
            viewString.Append("_includeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerArtworkOrd");
            viewString.Append("erJobCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n            T.make");
            viewString.Append("EmailBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtworkOrderPro");
            viewString.Append("ductionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderMa");
            viewString.Append("nagerId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManage");
            viewString.Append("rId2, \r\n            T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n  ");
            viewString.Append("          T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n            ");
            viewString.Append("T.StockNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n        ");
            viewString.Append("    T.StockNotificationManagerId2 AS Company_StockNotificationManagerId2, \r\n    ");
            viewString.Append("        T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisp");
            viewString.Append("layDeliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.De");
            viewString.Append("liveryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM BaseDbContext.Companies AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidget
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidget", @"
    SELECT VALUE -- Constructing CmsSkinPageWidget
        [DomainModels.Store.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidgetParam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidgetParam", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParam
        [DomainModels.Store.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgetParams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBanner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBanner", @"
    SELECT VALUE -- Constructing CompanyBanner
        [DomainModels.Store.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM BaseDbContext.CompanyBanners AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBannerSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBannerSet", @"
    SELECT VALUE -- Constructing CompanyBannerSet
        [DomainModels.Store.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyBannerSets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyDomain", @"
    SELECT VALUE -- Constructing CompanyDomain
        [DomainModels.Store.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyDomains AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Organisation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2519);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisation\r\n        [DomainModels.Store.Org");
            viewString.Append("anisation](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.");
            viewString.Append("Organisation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Or");
            viewString.Append("ganisation_City, T1.Organisation_State, T1.Organisation_Country, T1.Organisation");
            viewString.Append("_ZipCode, T1.Organisation_Tel, T1.Organisation_Fax, T1.Organisation_Mobile, T1.O");
            viewString.Append("rganisation_Email, T1.Organisation_URL, T1.Organisation_WebsiteLogo, T1.Organisa");
            viewString.Append("tion_MISLogo, T1.Organisation_TaxRegistrationNo, T1.Organisation_LicenseLevel, T");
            viewString.Append("1.Organisation_CustomerAccountNumber, T1.Organisation_SmtpServer, T1.Organisatio");
            viewString.Append("n_SmtpUserName, T1.Organisation_SmtpPassword, T1.Organisation_VATRegNumber, T1.O");
            viewString.Append("rganisation_SystemLengthUnit, T1.Organisation_SystemWeightUnit, T1.Organisation_");
            viewString.Append("CurrencyId, T1.Organisation_LanguageId, T1.Organisation_UserDomainKey)\r\n    FROM");
            viewString.Append(" (\r\n        SELECT \r\n            T.OrganisationId AS Organisation_OrganisationId");
            viewString.Append(", \r\n            T.OrganisationName AS Organisation_OrganisationName, \r\n         ");
            viewString.Append("   T.Address1 AS Organisation_Address1, \r\n            T.Address2 AS Organisation");
            viewString.Append("_Address2, \r\n            T.Address3 AS Organisation_Address3, \r\n            T.Ci");
            viewString.Append("ty AS Organisation_City, \r\n            T.State AS Organisation_State, \r\n        ");
            viewString.Append("    T.Country AS Organisation_Country, \r\n            T.ZipCode AS Organisation_Z");
            viewString.Append("ipCode, \r\n            T.Tel AS Organisation_Tel, \r\n            T.Fax AS Organisa");
            viewString.Append("tion_Fax, \r\n            T.Mobile AS Organisation_Mobile, \r\n            T.Email A");
            viewString.Append("S Organisation_Email, \r\n            T.URL AS Organisation_URL, \r\n            T.W");
            viewString.Append("ebsiteLogo AS Organisation_WebsiteLogo, \r\n            T.MISLogo AS Organisation_");
            viewString.Append("MISLogo, \r\n            T.TaxRegistrationNo AS Organisation_TaxRegistrationNo, \r\n");
            viewString.Append("            T.LicenseLevel AS Organisation_LicenseLevel, \r\n            T.Custome");
            viewString.Append("rAccountNumber AS Organisation_CustomerAccountNumber, \r\n            T.SmtpServer");
            viewString.Append(" AS Organisation_SmtpServer, \r\n            T.SmtpUserName AS Organisation_SmtpUs");
            viewString.Append("erName, \r\n            T.SmtpPassword AS Organisation_SmtpPassword, \r\n           ");
            viewString.Append(" T.VATRegNumber AS Organisation_VATRegNumber, \r\n            T.SystemLengthUnit A");
            viewString.Append("S Organisation_SystemLengthUnit, \r\n            T.SystemWeightUnit AS Organisatio");
            viewString.Append("n_SystemWeightUnit, \r\n            T.CurrencyId AS Organisation_CurrencyId, \r\n   ");
            viewString.Append("         T.LanguageId AS Organisation_LanguageId, \r\n            T.UserDomainKey ");
            viewString.Append("AS Organisation_UserDomainKey, \r\n            True AS _from0\r\n        FROM BaseDb");
            viewString.Append("Context.Organisations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Organisation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5804);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategory\r\n        [DomainModels.Store.");
            viewString.Append("ProductCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_Catego");
            viewString.Append("ryName, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.Prod");
            viewString.Append("uctCategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_Compan");
            viewString.Append("yId, T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Pr");
            viewString.Append("oductCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_is");
            viewString.Append("Enabled, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMa");
            viewString.Append("ppedCategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished,");
            viewString.Append(" T1.ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCa");
            viewString.Append("tegory_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCatego");
            viewString.Append("ry_isLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRest");
            viewString.Append("rictions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction");
            viewString.Append(", T1.ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Pr");
            viewString.Append("oductCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleF");
            viewString.Append("actor, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeyword");
            viewString.Append("s, T1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductC");
            viewString.Append("ategory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCa");
            viewString.Append("tegory_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1");
            viewString.Append(".ProductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCat");
            viewString.Append("egory_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCateg");
            viewString.Append("ory_DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory");
            viewString.Append("_ProductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCa");
            viewString.Append("tegory_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCateg");
            viewString.Append("ory_IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsSh");
            viewString.Append("owStockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_I");
            viewString.Append("sShowProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.Produc");
            viewString.Append("tCategoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName A");
            viewString.Append("S ProductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_C");
            viewString.Append("ontentType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n    ");
            viewString.Append("        T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy");
            viewString.Append(" AS ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_Compa");
            viewString.Append("nyId, \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n  ");
            viewString.Append("          T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImageP");
            viewString.Append("ath AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCatego");
            viewString.Append("ry_ThumbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n    ");
            viewString.Append("        T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.Templa");
            viewString.Append("teDesignerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryNa");
            viewString.Append("me, \r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.is");
            viewString.Append("Published AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS Produc");
            viewString.Append("tCategory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_Trimmed");
            viewString.Append("Height, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, ");
            viewString.Append("\r\n            T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n      ");
            viewString.Append("      T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.");
            viewString.Append("Sides AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS Product");
            viewString.Append("Category_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategor");
            viewString.Append("y_ApplyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestr");
            viewString.Append("iction, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, ");
            viewString.Append("\r\n            T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            ");
            viewString.Append("T.RegionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCat");
            viewString.Append("egory_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n");
            viewString.Append("            T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, ");
            viewString.Append("\r\n            T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.Me");
            viewString.Append("taDescription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS P");
            viewString.Append("roductCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Orga");
            viewString.Append("nisationId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCa");
            viewString.Append("tegoryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory");
            viewString.Append("_SubCategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_C");
            viewString.Append("ategoryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n");
            viewString.Append("            T.ShortDescription AS ProductCategory_ShortDescription, \r\n          ");
            viewString.Append("  T.SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            ");
            viewString.Append("T.DefaultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDispla");
            viewString.Append("yColumns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisp");
            viewString.Append("layRows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeature");
            viewString.Append("dproducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAv");
            viewString.Append("ailablity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoin");
            viewString.Append("ts AS ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Pro");
            viewString.Append("ductCategory_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory");
            viewString.Append("_IsShowSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowSto");
            viewString.Append("ckStatus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProd");
            viewString.Append("uctDescription, \r\n            T.IsShowProductShortDescription AS ProductCategory");
            viewString.Append("_IsShowProductShortDescription, \r\n            True AS _from0\r\n        FROM BaseD");
            viewString.Append("bContext.ProductCategories AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategory", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Store.Widgets](T1.Widgets_WidgetId, T1.Widgets_WidgetCode, T1.Widgets_WidgetName, T1.Widgets_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widgets_WidgetId, 
            T.WidgetCode AS Widgets_WidgetCode, 
            T.WidgetName AS Widgets_WidgetName, 
            T.WidgetControlName AS Widgets_WidgetControlName, 
            True AS _from0
        FROM BaseDbContext.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2770);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPage\r\n        [DomainModels.Store.CmsPage]");
            viewString.Append("(T1.CmsPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTi");
            viewString.Append("tle, T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, ");
            viewString.Append("T1.[CmsPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsP");
            viewString.Append("age.Meta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPa");
            viewString.Append("ge.Meta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateCo");
            viewString.Append("ntent], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent]");
            viewString.Append(", T1.[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.Cms");
            viewString.Append("Page_CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.C");
            viewString.Append("msPage_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_");
            viewString.Append("PageKeywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, ");
            viewString.Append("T1.CmsPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS");
            viewString.Append(" CmsPage_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.P");
            viewString.Append("ageTitle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r");
            viewString.Append("\n            T.description AS CmsPage_description, \r\n            T.PageRelativeP");
            viewString.Append("ath AS CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder,");
            viewString.Append(" \r\n            T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n       ");
            viewString.Append("     T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n         ");
            viewString.Append("   T.Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r");
            viewString.Append("\n            T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n       ");
            viewString.Append("     T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_");
            viewString.Append("AuthorContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent ");
            viewString.Append("AS [CmsPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.");
            viewString.Append("Meta_LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta");
            viewString.Append("_RevisitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n   ");
            viewString.Append("         T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPag");
            viewString.Append("e_isUserDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n           ");
            viewString.Append(" T.isPromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialO");
            viewString.Append("ffer AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r");
            viewString.Append("\n            T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.Pag");
            viewString.Append("eBanner AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywo");
            viewString.Append("rds, \r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay A");
            viewString.Append("S CmsPage_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n         ");
            viewString.Append("   T.OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM BaseDbContext.CmsPages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9109);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.");
            viewString.Append("Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL, T1");
            viewString.Append(".Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Company_T");
            viewString.Append("ypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company_Acc");
            viewString.Append("ountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsCusto");
            viewString.Append("mer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLastUpda");
            viewString.Append("tedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedBy, T");
            viewString.Append("1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, T1.C");
            viewString.Append("ompany_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_IsGene");
            viewString.Append("ral, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.Comp");
            viewString.Append("any_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequired");
            viewString.Append(", T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTrackingPa");
            viewString.Append("th, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.Compa");
            viewString.Append("ny_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeaturedPr");
            viewString.Append("oducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseUsIco");
            viewString.Append("ns, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.Compa");
            viewString.Append("ny_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isDisplaylBroker");
            viewString.Append("Banners, T1.Company_isBrokerCanLaminate, T1.Company_isBrokerCanRoundCorner, T1.C");
            viewString.Append("ompany_isBrokerCanDeliverSameDay, T1.Company_isBrokerCanAcceptPaymentOnline, T1.");
            viewString.Append("Company_isBrokerOrderApprovalRequired, T1.Company_isBrokerPaymentRequired, T1.Co");
            viewString.Append("mpany_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookURL, T1.Company_Li");
            viewString.Append("nkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, T1.Company_isSho");
            viewString.Append("wGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText, T1.Company_Cor");
            viewString.Append("eCustomerId, T1.Company_StoreBackgroundImage, T1.Company_isDisplayBrokerSecondar");
            viewString.Append("yPages, T1.Company_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowRegis");
            viewString.Append("trationFromWeb, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstTime,");
            viewString.Append(" T1.Company_facebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppId, T");
            viewString.Append("1.Company_twitterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1");
            viewString.Append(".Company_TaxPercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlaceOrde");
            viewString.Append("rWithoutApproval, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, T1.C");
            viewString.Append("ompany_includeEmailBrokerArtworkOrderReport, T1.Company_includeEmailBrokerArtwor");
            viewString.Append("kOrderXML, T1.Company_includeEmailBrokerArtworkOrderJobCard, T1.Company_makeEmai");
            viewString.Append("lBrokerArtworkOrderProductionReady, T1.Company_SalesAndOrderManagerId1, T1.Compa");
            viewString.Append("ny_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Company_Producti");
            viewString.Append("onManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_StockNotificati");
            viewString.Append("onManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDeliveryOnChecko");
            viewString.Append("ut, T1.Company_DeliveryPickUpAddressId)\r\n    FROM (\r\n        SELECT \r\n          ");
            viewString.Append("  T.CompanyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company_Acc");
            viewString.Append("ountNumber, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Company");
            viewString.Append("_URL, \r\n            T.CreditReference AS Company_CreditReference, \r\n            ");
            viewString.Append("T.CreditLimit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms, \r\n");
            viewString.Append("            T.TypeId AS Company_TypeId, \r\n            T.DefaultNominalCode AS Co");
            viewString.Append("mpany_DefaultNominalCode, \r\n            T.DefaultMarkUpId AS Company_DefaultMark");
            viewString.Append("UpId, \r\n            T.AccountOpenDate AS Company_AccountOpenDate, \r\n            ");
            viewString.Append("T.AccountManagerId AS Company_AccountManagerId, \r\n            T.Status AS Compan");
            viewString.Append("y_Status, \r\n            T.IsCustomer AS Company_IsCustomer, \r\n            T.Note");
            viewString.Append("s AS Company_Notes, \r\n            T.NotesLastUpdatedDate AS Company_NotesLastUpd");
            viewString.Append("atedDate, \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpdatedBy, \r\n  ");
            viewString.Append("          T.AccountStatusId AS Company_AccountStatusId, \r\n            T.IsDisabl");
            viewString.Append("ed AS Company_IsDisabled, \r\n            T.LockedBy AS Company_LockedBy, \r\n      ");
            viewString.Append("      T.AccountBalance AS Company_AccountBalance, \r\n            T.CreationDate A");
            viewString.Append("S Company_CreationDate, \r\n            T.VATRegNumber AS Company_VATRegNumber, \r\n");
            viewString.Append("            T.VATRegReference AS Company_VATRegReference, \r\n            T.FlagId");
            viewString.Append(" AS Company_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n            T.");
            viewString.Append("IsGeneral AS Company_IsGeneral, \r\n            T.SalesPerson AS Company_SalesPers");
            viewString.Append("on, \r\n            T.Image AS Company_Image, \r\n            T.WebAccessCode AS Com");
            viewString.Append("pany_WebAccessCode, \r\n            T.isArchived AS Company_isArchived, \r\n        ");
            viewString.Append("    T.PayByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, \r\n          ");
            viewString.Append("  T.PONumberRequired AS Company_PONumberRequired, \r\n            T.ShowPrices AS ");
            viewString.Append("Company_ShowPrices, \r\n            T.CarrierWebPath AS Company_CarrierWebPath, \r\n");
            viewString.Append("            T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n            ");
            viewString.Append("T.CorporateOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n            T.is");
            viewString.Append("DisplaySiteHeader AS Company_isDisplaySiteHeader, \r\n            T.isDisplayMenuB");
            viewString.Append("ar AS Company_isDisplayMenuBar, \r\n            T.isDisplayBanners AS Company_isDi");
            viewString.Append("splayBanners, \r\n            T.isDisplayFeaturedProducts AS Company_isDisplayFeat");
            viewString.Append("uredProducts, \r\n            T.isDisplayPromotionalProducts AS Company_isDisplayP");
            viewString.Append("romotionalProducts, \r\n            T.isDisplayChooseUsIcons AS Company_isDisplayC");
            viewString.Append("hooseUsIcons, \r\n            T.isDisplaySecondaryPages AS Company_isDisplaySecond");
            viewString.Append("aryPages, \r\n            T.isDisplaySiteFooter AS Company_isDisplaySiteFooter, \r\n");
            viewString.Append("            T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n            ");
            viewString.Append("T.defaultPalleteId AS Company_defaultPalleteId, \r\n            T.isDisplaylBroker");
            viewString.Append("Banners AS Company_isDisplaylBrokerBanners, \r\n            T.isBrokerCanLaminate ");
            viewString.Append("AS Company_isBrokerCanLaminate, \r\n            T.isBrokerCanRoundCorner AS Compan");
            viewString.Append("y_isBrokerCanRoundCorner, \r\n            T.isBrokerCanDeliverSameDay AS Company_i");
            viewString.Append("sBrokerCanDeliverSameDay, \r\n            T.isBrokerCanAcceptPaymentOnline AS Comp");
            viewString.Append("any_isBrokerCanAcceptPaymentOnline, \r\n            T.isBrokerOrderApprovalRequire");
            viewString.Append("d AS Company_isBrokerOrderApprovalRequired, \r\n            T.isBrokerPaymentRequi");
            viewString.Append("red AS Company_isBrokerPaymentRequired, \r\n            T.isWhiteLabel AS Company_");
            viewString.Append("isWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n            T.");
            viewString.Append("FacebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS Company_Linke");
            viewString.Append("dinURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n            T.We");
            viewString.Append("bAnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoogleMap AS Com");
            viewString.Append("pany_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isTextWatermark");
            viewString.Append(", \r\n            T.WatermarkText AS Company_WatermarkText, \r\n            T.CoreCu");
            viewString.Append("stomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundImage AS Comp");
            viewString.Append("any_StoreBackgroundImage, \r\n            T.isDisplayBrokerSecondaryPages AS Compa");
            viewString.Append("ny_isDisplayBrokerSecondaryPages, \r\n            T.PriceFlagId AS Company_PriceFl");
            viewString.Append("agId, \r\n            T.isIncludeVAT AS Company_isIncludeVAT, \r\n            T.isAl");
            viewString.Append("lowRegistrationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n            T.Ma");
            viewString.Append("rketingBriefRecipient AS Company_MarketingBriefRecipient, \r\n            T.isLogi");
            viewString.Append("nFirstTime AS Company_isLoginFirstTime, \r\n            T.facebookAppId AS Company");
            viewString.Append("_facebookAppId, \r\n            T.facebookAppKey AS Company_facebookAppKey, \r\n    ");
            viewString.Append("        T.twitterAppId AS Company_twitterAppId, \r\n            T.twitterAppKey AS");
            viewString.Append(" Company_twitterAppKey, \r\n            T.isStoreModePrivate AS Company_isStoreMod");
            viewString.Append("ePrivate, \r\n            T.CustomCSS AS Company_CustomCSS, \r\n            T.TaxPer");
            viewString.Append("centageId AS Company_TaxPercentageId, \r\n            T.XeroAccessCode AS Company_");
            viewString.Append("XeroAccessCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_canU");
            viewString.Append("serPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_CanU");
            viewString.Append("serEditProfile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n    ");
            viewString.Append("        T.includeEmailBrokerArtworkOrderReport AS Company_includeEmailBrokerArtw");
            viewString.Append("orkOrderReport, \r\n            T.includeEmailBrokerArtworkOrderXML AS Company_inc");
            viewString.Append("ludeEmailBrokerArtworkOrderXML, \r\n            T.includeEmailBrokerArtworkOrderJo");
            viewString.Append("bCard AS Company_includeEmailBrokerArtworkOrderJobCard, \r\n            T.makeEmai");
            viewString.Append("lBrokerArtworkOrderProductionReady AS Company_makeEmailBrokerArtworkOrderProduct");
            viewString.Append("ionReady, \r\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderManage");
            viewString.Append("rId1, \r\n            T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManagerId2");
            viewString.Append(", \r\n            T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n      ");
            viewString.Append("      T.ProductionManagerId2 AS Company_ProductionManagerId2, \r\n            T.St");
            viewString.Append("ockNotificationManagerId1 AS Company_StockNotificationManagerId1, \r\n            ");
            viewString.Append("T.StockNotificationManagerId2 AS Company_StockNotificationManagerId2, \r\n        ");
            viewString.Append("    T.IsDeliveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisplayD");
            viewString.Append("eliveryOnCheckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.Delive");
            viewString.Append("ryPickUpAddressId AS Company_DeliveryPickUpAddressId, \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM DomainModelsStoreContainer.Company AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgets", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgets
        [DomainModels.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidget AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgetParams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgetParams", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParams
        [DomainModels.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidgetParam AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBanners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBanners", @"
    SELECT VALUE -- Constructing CompanyBanners
        [DomainModels.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBanner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBannerSets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBannerSets", @"
    SELECT VALUE -- Constructing CompanyBannerSets
        [DomainModels.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBannerSet AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyDomains", @"
    SELECT VALUE -- Constructing CompanyDomains
        [DomainModels.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyDomain AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Organisations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2526);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisations\r\n        [DomainModels.Organisa");
            viewString.Append("tion](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.Organ");
            viewString.Append("isation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Organis");
            viewString.Append("ation_City, T1.Organisation_State, T1.Organisation_Country, T1.Organisation_ZipC");
            viewString.Append("ode, T1.Organisation_Tel, T1.Organisation_Fax, T1.Organisation_Mobile, T1.Organi");
            viewString.Append("sation_Email, T1.Organisation_URL, T1.Organisation_WebsiteLogo, T1.Organisation_");
            viewString.Append("MISLogo, T1.Organisation_TaxRegistrationNo, T1.Organisation_LicenseLevel, T1.Org");
            viewString.Append("anisation_CustomerAccountNumber, T1.Organisation_SmtpServer, T1.Organisation_Smt");
            viewString.Append("pUserName, T1.Organisation_SmtpPassword, T1.Organisation_VATRegNumber, T1.Organi");
            viewString.Append("sation_SystemLengthUnit, T1.Organisation_SystemWeightUnit, T1.Organisation_Curre");
            viewString.Append("ncyId, T1.Organisation_LanguageId, T1.Organisation_UserDomainKey)\r\n    FROM (\r\n ");
            viewString.Append("       SELECT \r\n            T.OrganisationId AS Organisation_OrganisationId, \r\n ");
            viewString.Append("           T.OrganisationName AS Organisation_OrganisationName, \r\n            T.");
            viewString.Append("Address1 AS Organisation_Address1, \r\n            T.Address2 AS Organisation_Addr");
            viewString.Append("ess2, \r\n            T.Address3 AS Organisation_Address3, \r\n            T.City AS");
            viewString.Append(" Organisation_City, \r\n            T.State AS Organisation_State, \r\n            T");
            viewString.Append(".Country AS Organisation_Country, \r\n            T.ZipCode AS Organisation_ZipCod");
            viewString.Append("e, \r\n            T.Tel AS Organisation_Tel, \r\n            T.Fax AS Organisation_");
            viewString.Append("Fax, \r\n            T.Mobile AS Organisation_Mobile, \r\n            T.Email AS Org");
            viewString.Append("anisation_Email, \r\n            T.URL AS Organisation_URL, \r\n            T.Websit");
            viewString.Append("eLogo AS Organisation_WebsiteLogo, \r\n            T.MISLogo AS Organisation_MISLo");
            viewString.Append("go, \r\n            T.TaxRegistrationNo AS Organisation_TaxRegistrationNo, \r\n     ");
            viewString.Append("       T.LicenseLevel AS Organisation_LicenseLevel, \r\n            T.CustomerAcco");
            viewString.Append("untNumber AS Organisation_CustomerAccountNumber, \r\n            T.SmtpServer AS O");
            viewString.Append("rganisation_SmtpServer, \r\n            T.SmtpUserName AS Organisation_SmtpUserNam");
            viewString.Append("e, \r\n            T.SmtpPassword AS Organisation_SmtpPassword, \r\n            T.VA");
            viewString.Append("TRegNumber AS Organisation_VATRegNumber, \r\n            T.SystemLengthUnit AS Org");
            viewString.Append("anisation_SystemLengthUnit, \r\n            T.SystemWeightUnit AS Organisation_Sys");
            viewString.Append("temWeightUnit, \r\n            T.CurrencyId AS Organisation_CurrencyId, \r\n        ");
            viewString.Append("    T.LanguageId AS Organisation_LanguageId, \r\n            T.UserDomainKey AS Or");
            viewString.Append("ganisation_UserDomainKey, \r\n            True AS _from0\r\n        FROM DomainModel");
            viewString.Append("sStoreContainer.Organisation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Organisations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5811);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategories\r\n        [DomainModels.Prod");
            viewString.Append("uctCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_CategoryNa");
            viewString.Append("me, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.ProductC");
            viewString.Append("ategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_CompanyId,");
            viewString.Append(" T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Produc");
            viewString.Append("tCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_isEnab");
            viewString.Append("led, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMapped");
            viewString.Append("CategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished, T1.");
            viewString.Append("ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCatego");
            viewString.Append("ry_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCategory_i");
            viewString.Append("sLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRestrict");
            viewString.Append("ions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction, T1");
            viewString.Append(".ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Produc");
            viewString.Append("tCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleFacto");
            viewString.Append("r, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeywords, T");
            viewString.Append("1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductCateg");
            viewString.Append("ory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCatego");
            viewString.Append("ry_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1.Pro");
            viewString.Append("ductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCategor");
            viewString.Append("y_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCategory_");
            viewString.Append("DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory_Pro");
            viewString.Append("ductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCatego");
            viewString.Append("ry_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCategory_");
            viewString.Append("IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsShowSt");
            viewString.Append("ockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_IsSho");
            viewString.Append("wProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.ProductCat");
            viewString.Append("egoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName AS Pr");
            viewString.Append("oductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_Conte");
            viewString.Append("ntType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n        ");
            viewString.Append("    T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy AS ");
            viewString.Append("ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_CompanyId");
            viewString.Append(", \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n      ");
            viewString.Append("      T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImagePath ");
            viewString.Append("AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCategory_T");
            viewString.Append("humbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n        ");
            viewString.Append("    T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.TemplateDe");
            viewString.Append("signerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryName, ");
            viewString.Append("\r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.isPubl");
            viewString.Append("ished AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS ProductCat");
            viewString.Append("egory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_TrimmedHeig");
            viewString.Append("ht, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, \r\n  ");
            viewString.Append("          T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n          ");
            viewString.Append("  T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.Side");
            viewString.Append("s AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS ProductCate");
            viewString.Append("gory_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategory_Ap");
            viewString.Append("plyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestricti");
            viewString.Append("on, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, \r\n  ");
            viewString.Append("          T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            T.Re");
            viewString.Append("gionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCategor");
            viewString.Append("y_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n    ");
            viewString.Append("        T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, \r\n  ");
            viewString.Append("          T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.MetaDe");
            viewString.Append("scription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS Produ");
            viewString.Append("ctCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Organisa");
            viewString.Append("tionId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCategoryDi");
            viewString.Append("splayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory_Sub");
            viewString.Append("CategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_Categ");
            viewString.Append("oryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n    ");
            viewString.Append("        T.ShortDescription AS ProductCategory_ShortDescription, \r\n            T.");
            viewString.Append("SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            T.De");
            viewString.Append("faultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDisplayCol");
            viewString.Append("umns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisplayR");
            viewString.Append("ows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeaturedpro");
            viewString.Append("ducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAvaila");
            viewString.Append("blity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoints A");
            viewString.Append("S ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Product");
            viewString.Append("Category_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory_IsS");
            viewString.Append("howSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowStockSt");
            viewString.Append("atus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProductD");
            viewString.Append("escription, \r\n            T.IsShowProductShortDescription AS ProductCategory_IsS");
            viewString.Append("howProductShortDescription, \r\n            True AS _from0\r\n        FROM DomainMod");
            viewString.Append("elsStoreContainer.ProductCategory AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategories", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Widget](T1.Widget_WidgetId, T1.Widget_WidgetCode, T1.Widget_WidgetName, T1.Widget_WidgetControlName)
    FROM (
        SELECT 
            T.WidgetId AS Widget_WidgetId, 
            T.WidgetCode AS Widget_WidgetCode, 
            T.WidgetName AS Widget_WidgetName, 
            T.WidgetControlName AS Widget_WidgetControlName, 
            True AS _from0
        FROM DomainModelsStoreContainer.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2777);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPages\r\n        [DomainModels.CmsPage](T1.C");
            viewString.Append("msPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTitle, ");
            viewString.Append("T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, T1.[C");
            viewString.Append("msPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsPage.M");
            viewString.Append("eta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPage.Me");
            viewString.Append("ta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateContent");
            viewString.Append("], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent], T1.");
            viewString.Append("[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.CmsPage_");
            viewString.Append("CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.CmsPag");
            viewString.Append("e_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_PageK");
            viewString.Append("eywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, T1.Cm");
            viewString.Append("sPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS CmsP");
            viewString.Append("age_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.PageTi");
            viewString.Append("tle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r\n    ");
            viewString.Append("        T.description AS CmsPage_description, \r\n            T.PageRelativePath A");
            viewString.Append("S CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder, \r\n  ");
            viewString.Append("          T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n            ");
            viewString.Append("T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n            T.");
            viewString.Append("Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r\n    ");
            viewString.Append("        T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n            ");
            viewString.Append("T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_Autho");
            viewString.Append("rContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent AS [C");
            viewString.Append("msPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.Meta_");
            viewString.Append("LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta_Revi");
            viewString.Append("sitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n        ");
            viewString.Append("    T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPage_isU");
            viewString.Append("serDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n            T.is");
            viewString.Append("PromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialOffer ");
            viewString.Append("AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r\n    ");
            viewString.Append("        T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.PageBann");
            viewString.Append("er AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywords, ");
            viewString.Append("\r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay AS Cms");
            viewString.Append("Page_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n            T.");
            viewString.Append("OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM DomainModelsStoreContainer.CmsPage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ChartOfAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ChartOfAccount", "\r\n    SELECT VALUE -- Constructing ChartOfAccount\r\n        [DomainModels.Store.Ch" +
                    "artOfAccount](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccou" +
                    "nt_Name, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType," +
                    " T1.ChartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Descri" +
                    "ption, T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_I" +
                    "sFixed, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliatio" +
                    "n, T1.ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_System" +
                    "SiteId, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_Accoun" +
                    "tNo, \r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance" +
                    " AS ChartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOf" +
                    "Account_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n " +
                    "           T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description " +
                    "AS ChartOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, " +
                    "\r\n            T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS " +
                    "ChartOfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastA" +
                    "ctivityDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconcil" +
                    "iation, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRea" +
                    "d AS ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_Syste" +
                    "mSiteId, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.ChartOfAccount AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Markup", @"
    SELECT VALUE -- Constructing Markup
        [DomainModels.Store.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM BaseDbContext.Markups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Markups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Markups", @"
    SELECT VALUE -- Constructing Markups
        [DomainModels.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.UserDomainKey AS Markup_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.Markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperSize
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperSize", @"
    SELECT VALUE -- Constructing PaperSize
        [DomainModels.Store.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_isArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.IsArchived AS PaperSize_isArchived, 
            True AS _from0
        FROM BaseDbContext.PaperSizes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperSizes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperSizes", @"
    SELECT VALUE -- Constructing PaperSizes
        [DomainModels.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_IsArchived)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.isArchived AS PaperSize_IsArchived, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperSize AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CategoryTerritory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CategoryTerritory", @"
    SELECT VALUE -- Constructing CategoryTerritory
        [DomainModels.Store.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CategoryTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CategoryTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CategoryTerritories", @"
    SELECT VALUE -- Constructing CategoryTerritories
        [DomainModels.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CategoryTerritory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCategory", "\r\n    SELECT VALUE -- Constructing StockCategory\r\n        [DomainModels.Store.Sto" +
                    "ckCategory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory" +
                    "_Name, T1.StockCategory_Description, T1.StockCategory_fixed, T1.StockCategory_It" +
                    "emWeight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.Stock" +
                    "Category_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCo" +
                    "ated, T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCatego" +
                    "ry_recLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Fla" +
                    "g2, T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r" +
                    "\n    FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_Category" +
                    "Id, \r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCat" +
                    "egory_Name, \r\n            T.Description AS StockCategory_Description, \r\n        " +
                    "    T.Fixed AS StockCategory_fixed, \r\n            T.ItemWeight AS StockCategory_" +
                    "ItemWeight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n          " +
                    "  T.ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSiz" +
                    "e AS StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategor" +
                    "y_ItemCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n    " +
                    "        T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge" +
                    " AS StockCategory_ItemCharge, \r\n            T.RecLock AS StockCategory_recLock, " +
                    "\r\n            T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCate" +
                    "gory_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 " +
                    "AS StockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n        " +
                    "    T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n      " +
                    "  FROM BaseDbContext.StockCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockSubCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockSubCategory", @"
    SELECT VALUE -- Constructing StockSubCategory
        [DomainModels.Store.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM BaseDbContext.StockSubCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCostAndPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCostAndPrice", @"
    SELECT VALUE -- Constructing StockCostAndPrice
        [DomainModels.Store.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM BaseDbContext.StockCostAndPrices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5449);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItem\r\n        [DomainModels.Store.StockI");
            viewString.Append("tem](T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.");
            viewString.Append("StockItem_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.St");
            viewString.Append("ockItem_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1");
            viewString.Append(".StockItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T");
            viewString.Append("1.StockItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.Stoc");
            viewString.Append("kItem_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifie");
            viewString.Append("dBy, T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.S");
            viewString.Append("tockItem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, ");
            viewString.Append("T1.StockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProce");
            viewString.Append("ssingCharge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQ");
            viewString.Append("tyRate, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_Locke");
            viewString.Append("dBy, T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderD");
            viewString.Append("ate, T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.Stoc");
            viewString.Append("kItem_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSi");
            viewString.Append("zeSelectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.Sto");
            viewString.Append("ckItem_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.Stoc");
            viewString.Append("kItem_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.Stoc");
            viewString.Append("kItem_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockIt");
            viewString.Append("em_DepartmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.St");
            viewString.Append("ockItem_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_In");
            viewString.Append("kStandards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCod");
            viewString.Append("e, T1.StockItem_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.Stoc");
            viewString.Append("kItemId AS StockItem_StockItemId, \r\n            T.ItemCode AS StockItem_ItemCode");
            viewString.Append(", \r\n            T.ItemName AS StockItem_ItemName, \r\n            T.AlternateName ");
            viewString.Append("AS StockItem_AlternateName, \r\n            T.ItemWeight AS StockItem_ItemWeight, ");
            viewString.Append("\r\n            T.ItemColour AS StockItem_ItemColour, \r\n            T.ItemSizeCust");
            viewString.Append("om AS StockItem_ItemSizeCustom, \r\n            T.ItemSizeId AS StockItem_ItemSize");
            viewString.Append("Id, \r\n            T.ItemSizeHeight AS StockItem_ItemSizeHeight, \r\n            T.");
            viewString.Append("ItemSizeWidth AS StockItem_ItemSizeWidth, \r\n            T.ItemSizeDim AS StockIt");
            viewString.Append("em_ItemSizeDim, \r\n            T.ItemUnitSize AS StockItem_ItemUnitSize, \r\n      ");
            viewString.Append("      T.SupplierId AS StockItem_SupplierId, \r\n            T.CostPrice AS StockIt");
            viewString.Append("em_CostPrice, \r\n            T.CategoryId AS StockItem_CategoryId, \r\n            ");
            viewString.Append("T.SubCategoryId AS StockItem_SubCategoryId, \r\n            T.LastModifiedDateTime");
            viewString.Append(" AS StockItem_LastModifiedDateTime, \r\n            T.LastModifiedBy AS StockItem_");
            viewString.Append("LastModifiedBy, \r\n            T.StockLevel AS StockItem_StockLevel, \r\n          ");
            viewString.Append("  T.PackageQty AS StockItem_PackageQty, \r\n            T.Status AS StockItem_Stat");
            viewString.Append("us, \r\n            T.ReOrderLevel AS StockItem_ReOrderLevel, \r\n            T.Stoc");
            viewString.Append("kLocation AS StockItem_StockLocation, \r\n            T.ItemCoatedType AS StockIte");
            viewString.Append("m_ItemCoatedType, \r\n            T.ItemExposure AS StockItem_ItemExposure, \r\n    ");
            viewString.Append("        T.ItemExposureTime AS StockItem_ItemExposureTime, \r\n            T.ItemPr");
            viewString.Append("ocessingCharge AS StockItem_ItemProcessingCharge, \r\n            T.ItemType AS St");
            viewString.Append("ockItem_ItemType, \r\n            T.StockCreated AS StockItem_StockCreated, \r\n    ");
            viewString.Append("        T.PerQtyRate AS StockItem_PerQtyRate, \r\n            T.PerQtyQty AS Stock");
            viewString.Append("Item_PerQtyQty, \r\n            T.ItemDescription AS StockItem_ItemDescription, \r\n");
            viewString.Append("            T.LockedBy AS StockItem_LockedBy, \r\n            T.ReorderQty AS Stoc");
            viewString.Append("kItem_ReorderQty, \r\n            T.LastOrderQty AS StockItem_LastOrderQty, \r\n    ");
            viewString.Append("        T.LastOrderDate AS StockItem_LastOrderDate, \r\n            T.inStock AS S");
            viewString.Append("tockItem_inStock, \r\n            T.onOrder AS StockItem_onOrder, \r\n            T.");
            viewString.Append("Allocated AS StockItem_Allocated, \r\n            T.TaxID AS StockItem_TaxID, \r\n  ");
            viewString.Append("          T.unitRate AS StockItem_unitRate, \r\n            T.ItemCoated AS StockI");
            viewString.Append("tem_ItemCoated, \r\n            T.ItemSizeSelectedUnit AS StockItem_ItemSizeSelect");
            viewString.Append("edUnit, \r\n            T.ItemWeightSelectedUnit AS StockItem_ItemWeightSelectedUn");
            viewString.Append("it, \r\n            T.FlagID AS StockItem_FlagID, \r\n            T.InkAbsorption AS");
            viewString.Append(" StockItem_InkAbsorption, \r\n            T.WashupCounter AS StockItem_WashupCount");
            viewString.Append("er, \r\n            T.InkYield AS StockItem_InkYield, \r\n            T.PaperBasicAr");
            viewString.Append("eaId AS StockItem_PaperBasicAreaId, \r\n            T.PaperType AS StockItem_Paper");
            viewString.Append("Type, \r\n            T.PerQtyType AS StockItem_PerQtyType, \r\n            T.RollWi");
            viewString.Append("dth AS StockItem_RollWidth, \r\n            T.RollLength AS StockItem_RollLength, ");
            viewString.Append("\r\n            T.RollStandards AS StockItem_RollStandards, \r\n            T.Depart");
            viewString.Append("mentId AS StockItem_DepartmentId, \r\n            T.InkYieldStandards AS StockItem");
            viewString.Append("_InkYieldStandards, \r\n            T.PerQtyPrice AS StockItem_PerQtyPrice, \r\n    ");
            viewString.Append("        T.PackPrice AS StockItem_PackPrice, \r\n            T.Region AS StockItem_");
            viewString.Append("Region, \r\n            T.isDisabled AS StockItem_isDisabled, \r\n            T.InkS");
            viewString.Append("tandards AS StockItem_InkStandards, \r\n            T.BarCode AS StockItem_BarCode");
            viewString.Append(", \r\n            T.Image AS StockItem_Image, \r\n            T.XeroAccessCode AS St");
            viewString.Append("ockItem_XeroAccessCode, \r\n            T.OrganisationId AS StockItem_Organisation");
            viewString.Append("Id, \r\n            True AS _from0\r\n        FROM BaseDbContext.StockItems AS T\r\n  ");
            viewString.Append("  ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockItem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCategories", "\r\n    SELECT VALUE -- Constructing StockCategories\r\n        [DomainModels.StockCa" +
                    "tegory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory_Nam" +
                    "e, T1.StockCategory_Description, T1.StockCategory_Fixed, T1.StockCategory_ItemWe" +
                    "ight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.StockCate" +
                    "gory_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCoated" +
                    ", T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCategory_R" +
                    "ecLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Flag2, " +
                    "T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_CompanyId)\r\n   " +
                    " FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_CategoryId, " +
                    "\r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCategor" +
                    "y_Name, \r\n            T.Description AS StockCategory_Description, \r\n            " +
                    "T.fixed AS StockCategory_Fixed, \r\n            T.ItemWeight AS StockCategory_Item" +
                    "Weight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n            T." +
                    "ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSize AS" +
                    " StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCategory_It" +
                    "emCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n        " +
                    "    T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharge AS " +
                    "StockCategory_ItemCharge, \r\n            T.recLock AS StockCategory_RecLock, \r\n  " +
                    "          T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCategory" +
                    "_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3 AS S" +
                    "tockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n            " +
                    "T.CompanyId AS StockCategory_CompanyId, \r\n            True AS _from0\r\n        FR" +
                    "OM DomainModelsStoreContainer.StockCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockSubCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockSubCategories", @"
    SELECT VALUE -- Constructing StockSubCategories
        [DomainModels.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockSubCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCostAndPrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCostAndPrices", @"
    SELECT VALUE -- Constructing StockCostAndPrices
        [DomainModels.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockCostAndPrice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItems\r\n        [DomainModels.StockItem](");
            viewString.Append("T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.Stock");
            viewString.Append("Item_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.StockIt");
            viewString.Append("em_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1.Stoc");
            viewString.Append("kItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T1.Sto");
            viewString.Append("ckItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.StockItem");
            viewString.Append("_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifiedBy, ");
            viewString.Append("T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.StockI");
            viewString.Append("tem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, T1.St");
            viewString.Append("ockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProcessing");
            viewString.Append("Charge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQtyRat");
            viewString.Append("e, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_LockedBy, ");
            viewString.Append("T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderDate, ");
            viewString.Append("T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.StockItem");
            viewString.Append("_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSizeSel");
            viewString.Append("ectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.StockIte");
            viewString.Append("m_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.StockItem");
            viewString.Append("_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.StockItem");
            viewString.Append("_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockItem_De");
            viewString.Append("partmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.StockIt");
            viewString.Append("em_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_InkStan");
            viewString.Append("dards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCode, T1");
            viewString.Append(".StockItem_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.StockItem");
            viewString.Append("Id AS StockItem_StockItemId, \r\n            T.ItemCode AS StockItem_ItemCode, \r\n ");
            viewString.Append("           T.ItemName AS StockItem_ItemName, \r\n            T.AlternateName AS St");
            viewString.Append("ockItem_AlternateName, \r\n            T.ItemWeight AS StockItem_ItemWeight, \r\n   ");
            viewString.Append("         T.ItemColour AS StockItem_ItemColour, \r\n            T.ItemSizeCustom AS");
            viewString.Append(" StockItem_ItemSizeCustom, \r\n            T.ItemSizeId AS StockItem_ItemSizeId, \r");
            viewString.Append("\n            T.ItemSizeHeight AS StockItem_ItemSizeHeight, \r\n            T.ItemS");
            viewString.Append("izeWidth AS StockItem_ItemSizeWidth, \r\n            T.ItemSizeDim AS StockItem_It");
            viewString.Append("emSizeDim, \r\n            T.ItemUnitSize AS StockItem_ItemUnitSize, \r\n           ");
            viewString.Append(" T.SupplierId AS StockItem_SupplierId, \r\n            T.CostPrice AS StockItem_Co");
            viewString.Append("stPrice, \r\n            T.CategoryId AS StockItem_CategoryId, \r\n            T.Sub");
            viewString.Append("CategoryId AS StockItem_SubCategoryId, \r\n            T.LastModifiedDateTime AS S");
            viewString.Append("tockItem_LastModifiedDateTime, \r\n            T.LastModifiedBy AS StockItem_LastM");
            viewString.Append("odifiedBy, \r\n            T.StockLevel AS StockItem_StockLevel, \r\n            T.P");
            viewString.Append("ackageQty AS StockItem_PackageQty, \r\n            T.Status AS StockItem_Status, \r");
            viewString.Append("\n            T.ReOrderLevel AS StockItem_ReOrderLevel, \r\n            T.StockLoca");
            viewString.Append("tion AS StockItem_StockLocation, \r\n            T.ItemCoatedType AS StockItem_Ite");
            viewString.Append("mCoatedType, \r\n            T.ItemExposure AS StockItem_ItemExposure, \r\n         ");
            viewString.Append("   T.ItemExposureTime AS StockItem_ItemExposureTime, \r\n            T.ItemProcess");
            viewString.Append("ingCharge AS StockItem_ItemProcessingCharge, \r\n            T.ItemType AS StockIt");
            viewString.Append("em_ItemType, \r\n            T.StockCreated AS StockItem_StockCreated, \r\n         ");
            viewString.Append("   T.PerQtyRate AS StockItem_PerQtyRate, \r\n            T.PerQtyQty AS StockItem_");
            viewString.Append("PerQtyQty, \r\n            T.ItemDescription AS StockItem_ItemDescription, \r\n     ");
            viewString.Append("       T.LockedBy AS StockItem_LockedBy, \r\n            T.ReorderQty AS StockItem");
            viewString.Append("_ReorderQty, \r\n            T.LastOrderQty AS StockItem_LastOrderQty, \r\n         ");
            viewString.Append("   T.LastOrderDate AS StockItem_LastOrderDate, \r\n            T.inStock AS StockI");
            viewString.Append("tem_inStock, \r\n            T.onOrder AS StockItem_onOrder, \r\n            T.Alloc");
            viewString.Append("ated AS StockItem_Allocated, \r\n            T.TaxID AS StockItem_TaxID, \r\n       ");
            viewString.Append("     T.unitRate AS StockItem_unitRate, \r\n            T.ItemCoated AS StockItem_I");
            viewString.Append("temCoated, \r\n            T.ItemSizeSelectedUnit AS StockItem_ItemSizeSelectedUni");
            viewString.Append("t, \r\n            T.ItemWeightSelectedUnit AS StockItem_ItemWeightSelectedUnit, \r");
            viewString.Append("\n            T.FlagID AS StockItem_FlagID, \r\n            T.InkAbsorption AS Stoc");
            viewString.Append("kItem_InkAbsorption, \r\n            T.WashupCounter AS StockItem_WashupCounter, \r");
            viewString.Append("\n            T.InkYield AS StockItem_InkYield, \r\n            T.PaperBasicAreaId ");
            viewString.Append("AS StockItem_PaperBasicAreaId, \r\n            T.PaperType AS StockItem_PaperType,");
            viewString.Append(" \r\n            T.PerQtyType AS StockItem_PerQtyType, \r\n            T.RollWidth A");
            viewString.Append("S StockItem_RollWidth, \r\n            T.RollLength AS StockItem_RollLength, \r\n   ");
            viewString.Append("         T.RollStandards AS StockItem_RollStandards, \r\n            T.DepartmentI");
            viewString.Append("d AS StockItem_DepartmentId, \r\n            T.InkYieldStandards AS StockItem_InkY");
            viewString.Append("ieldStandards, \r\n            T.PerQtyPrice AS StockItem_PerQtyPrice, \r\n         ");
            viewString.Append("   T.PackPrice AS StockItem_PackPrice, \r\n            T.Region AS StockItem_Regio");
            viewString.Append("n, \r\n            T.isDisabled AS StockItem_isDisabled, \r\n            T.InkStanda");
            viewString.Append("rds AS StockItem_InkStandards, \r\n            T.BarCode AS StockItem_BarCode, \r\n ");
            viewString.Append("           T.Image AS StockItem_Image, \r\n            T.XeroAccessCode AS StockIt");
            viewString.Append("em_XeroAccessCode, \r\n            T.OrganisationId AS StockItem_OrganisationId, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.StockItem A");
            viewString.Append("S T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockItems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PageCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PageCategory", @"
    SELECT VALUE -- Constructing PageCategory
        [DomainModels.Store.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM BaseDbContext.PageCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PageCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PageCategories", @"
    SELECT VALUE -- Constructing PageCategories
        [DomainModels.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM DomainModelsStoreContainer.PageCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Section
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Section", @"
    SELECT VALUE -- Constructing Section
        [DomainModels.Store.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent, T1.Section_OrganisationId)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            T.OrganisationId AS Section_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.Sections AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionFlag
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionFlag", @"
    SELECT VALUE -- Constructing SectionFlag
        [DomainModels.Store.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_CompanyId, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.CompanyId AS SectionFlag_CompanyId, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            True AS _from0
        FROM BaseDbContext.SectionFlags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Sections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Sections", @"
    SELECT VALUE -- Constructing Sections
        [DomainModels.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent, T1.Section_OrganisationId)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            T.OrganisationId AS Section_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Section AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionFlags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionFlags", @"
    SELECT VALUE -- Constructing SectionFlags
        [DomainModels.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_CompanyId, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.CompanyId AS SectionFlag_CompanyId, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionFlag AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.WeightUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.WeightUnit", @"
    SELECT VALUE -- Constructing WeightUnit
        [DomainModels.Store.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM BaseDbContext.WeightUnits AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WeightUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WeightUnits", @"
    SELECT VALUE -- Constructing WeightUnits
        [DomainModels.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM DomainModelsStoreContainer.WeightUnit AS T
    ) AS T1");
        }
    }
}


