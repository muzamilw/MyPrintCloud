//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets89D0CEF5D5A3A3541FE1998D40C41DD32D28712BB69D156CBCA0EE1E74BC1100))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets89D0CEF5D5A3A3541FE1998D40C41DD32D28712BB69D156CBCA0EE1E74BC1100 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets89D0CEF5D5A3A3541FE1998D40C41DD32D28712BB69D156CBCA0EE1E74BC1100()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "c36e35770ebad103727e40af030852fa520c5e0e8244ee855fcea7de847775ff";
            this.HashOverAllExtentViews = "3ce2232519a73f5ffdaed5196943c71a481df4f251b878e00b3ea156049baa36";
            this.ViewCount = 8;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_chartofaccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_chartofaccount", "\r\n    SELECT VALUE -- Constructing tbl_chartofaccount\r\n        [DomainModels.Stor" +
                    "e.tbl_chartofaccount](T1.[tbl_chartofaccount.ID], T1.[tbl_chartofaccount.Account" +
                    "No], T1.[tbl_chartofaccount.Name], T1.[tbl_chartofaccount.OpeningBalance], T1.[t" +
                    "bl_chartofaccount.OpeningBalanceType], T1.[tbl_chartofaccount.TypeID], T1.[tbl_c" +
                    "hartofaccount.SubTypeID], T1.[tbl_chartofaccount.Description], T1.[tbl_chartofac" +
                    "count.Nature], T1.[tbl_chartofaccount.IsActive], T1.[tbl_chartofaccount.IsFixed]" +
                    ", T1.[tbl_chartofaccount.LastActivityDate], T1.[tbl_chartofaccount.IsForReconcil" +
                    "iation], T1.[tbl_chartofaccount.Balance], T1.[tbl_chartofaccount.IsRead], T1.[tb" +
                    "l_chartofaccount.SystemSiteID], T1.[tbl_chartofaccount.UserDomainKey])\r\n    FROM" +
                    " (\r\n        SELECT \r\n            T.Id AS [tbl_chartofaccount.ID], \r\n            " +
                    "T.AccountNo AS [tbl_chartofaccount.AccountNo], \r\n            T.Name AS [tbl_char" +
                    "tofaccount.Name], \r\n            T.OpeningBalance AS [tbl_chartofaccount.OpeningB" +
                    "alance], \r\n            T.OpeningBalanceType AS [tbl_chartofaccount.OpeningBalanc" +
                    "eType], \r\n            T.TypeId AS [tbl_chartofaccount.TypeID], \r\n            T.S" +
                    "ubTypeId AS [tbl_chartofaccount.SubTypeID], \r\n            T.Description AS [tbl_" +
                    "chartofaccount.Description], \r\n            T.Nature AS [tbl_chartofaccount.Natur" +
                    "e], \r\n            T.IsActive AS [tbl_chartofaccount.IsActive], \r\n            T.I" +
                    "sFixed AS [tbl_chartofaccount.IsFixed], \r\n            T.LastActivityDate AS [tbl" +
                    "_chartofaccount.LastActivityDate], \r\n            T.IsForReconciliation AS [tbl_c" +
                    "hartofaccount.IsForReconciliation], \r\n            T.Balance AS [tbl_chartofaccou" +
                    "nt.Balance], \r\n            T.IsRead AS [tbl_chartofaccount.IsRead], \r\n          " +
                    "  T.SystemSiteId AS [tbl_chartofaccount.SystemSiteID], \r\n            T.UserDomai" +
                    "nKey AS [tbl_chartofaccount.UserDomainKey], \r\n            True AS _from0\r\n      " +
                    "  FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ID AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeID AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeID AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteID AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.tbl_chartofaccount AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_company_sites
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4302);
            viewString.Append("\r\n    SELECT VALUE -- Constructing tbl_company_sites\r\n        [DomainModels.Stor");
            viewString.Append("e.tbl_company_sites](T1.[tbl_company_sites.CompanySiteID], T1.[tbl_company_sites");
            viewString.Append(".CompanySiteName], T1.[tbl_company_sites.Address1], T1.[tbl_company_sites.Addres");
            viewString.Append("s2], T1.[tbl_company_sites.Address3], T1.[tbl_company_sites.City], T1.[tbl_compa");
            viewString.Append("ny_sites.State], T1.[tbl_company_sites.Country], T1.[tbl_company_sites.ZipCode],");
            viewString.Append(" T1.[tbl_company_sites.Tel], T1.[tbl_company_sites.Fax], T1.[tbl_company_sites.M");
            viewString.Append("obile], T1.[tbl_company_sites.Email], T1.[tbl_company_sites.URL], T1.[tbl_compan");
            viewString.Append("y_sites.CompanyID], T1.[tbl_company_sites.StateTaxID], T1.[tbl_company_sites.Tax");
            viewString.Append("1], T1.[tbl_company_sites.Tax2], T1.[tbl_company_sites.Tax3], T1.[tbl_company_si");
            viewString.Append("tes.ProductionManagerID], T1.[tbl_company_sites.MarkupID], T1.[tbl_company_sites");
            viewString.Append(".OrderManagerID], T1.[tbl_company_sites.WebsiteLogo], T1.[tbl_company_sites.MISL");
            viewString.Append("ogo], T1.[tbl_company_sites.Tax2ID], T1.[tbl_company_sites.Tax3ID], T1.[tbl_comp");
            viewString.Append("any_sites.TaxRegistrationNo], T1.[tbl_company_sites.PaymentBusinessEmail], T1.[t");
            viewString.Append("bl_company_sites.PaymentIdentityToken], T1.[tbl_company_sites.PaymentGatewayID],");
            viewString.Append(" T1.[tbl_company_sites.LicenseLevel], T1.[tbl_company_sites.CustomerID], T1.[tbl");
            viewString.Append("_company_sites.CustomerAccountNumber], T1.[tbl_company_sites.SmtpServer], T1.[tb");
            viewString.Append("l_company_sites.SmtpUserName], T1.[tbl_company_sites.SmtpPassword], T1.[tbl_comp");
            viewString.Append("any_sites.VATRegNumber], T1.[tbl_company_sites.SystemLengthUnit], T1.[tbl_compan");
            viewString.Append("y_sites.SystemWeightUnit], T1.[tbl_company_sites.CurrencyID], T1.[tbl_company_si");
            viewString.Append("tes.LanguageID], T1.[tbl_company_sites.UserDomainKey])\r\n    FROM (\r\n        SELE");
            viewString.Append("CT \r\n            T.CompanySiteId AS [tbl_company_sites.CompanySiteID], \r\n       ");
            viewString.Append("     T.CompanySiteName AS [tbl_company_sites.CompanySiteName], \r\n            T.A");
            viewString.Append("ddress1 AS [tbl_company_sites.Address1], \r\n            T.Address2 AS [tbl_compan");
            viewString.Append("y_sites.Address2], \r\n            T.Address3 AS [tbl_company_sites.Address3], \r\n ");
            viewString.Append("           T.City AS [tbl_company_sites.City], \r\n            T.State AS [tbl_com");
            viewString.Append("pany_sites.State], \r\n            T.Country AS [tbl_company_sites.Country], \r\n   ");
            viewString.Append("         T.ZipCode AS [tbl_company_sites.ZipCode], \r\n            T.Tel AS [tbl_c");
            viewString.Append("ompany_sites.Tel], \r\n            T.Fax AS [tbl_company_sites.Fax], \r\n           ");
            viewString.Append(" T.Mobile AS [tbl_company_sites.Mobile], \r\n            T.Email AS [tbl_company_s");
            viewString.Append("ites.Email], \r\n            T.Url AS [tbl_company_sites.URL], \r\n            T.Com");
            viewString.Append("panyId AS [tbl_company_sites.CompanyID], \r\n            T.StateTaxId AS [tbl_comp");
            viewString.Append("any_sites.StateTaxID], \r\n            T.Tax1 AS [tbl_company_sites.Tax1], \r\n     ");
            viewString.Append("       T.Tax2 AS [tbl_company_sites.Tax2], \r\n            T.Tax3 AS [tbl_company_");
            viewString.Append("sites.Tax3], \r\n            T.ProductionManagerId AS [tbl_company_sites.Productio");
            viewString.Append("nManagerID], \r\n            T.MarkupId AS [tbl_company_sites.MarkupID], \r\n       ");
            viewString.Append("     T.OrderManagerId AS [tbl_company_sites.OrderManagerID], \r\n            T.Web");
            viewString.Append("siteLogo AS [tbl_company_sites.WebsiteLogo], \r\n            T.MisLogo AS [tbl_com");
            viewString.Append("pany_sites.MISLogo], \r\n            T.Tax2Id AS [tbl_company_sites.Tax2ID], \r\n   ");
            viewString.Append("         T.Tax3Id AS [tbl_company_sites.Tax3ID], \r\n            T.TaxRegistration");
            viewString.Append("No AS [tbl_company_sites.TaxRegistrationNo], \r\n            T.PaymentBusinessEmai");
            viewString.Append("l AS [tbl_company_sites.PaymentBusinessEmail], \r\n            T.PaymentIdentityTo");
            viewString.Append("ken AS [tbl_company_sites.PaymentIdentityToken], \r\n            T.PaymentGatewayI");
            viewString.Append("d AS [tbl_company_sites.PaymentGatewayID], \r\n            T.LicenseLevel AS [tbl_");
            viewString.Append("company_sites.LicenseLevel], \r\n            T.CustomerId AS [tbl_company_sites.Cu");
            viewString.Append("stomerID], \r\n            T.CustomerAccountNumber AS [tbl_company_sites.CustomerA");
            viewString.Append("ccountNumber], \r\n            T.SmtpServer AS [tbl_company_sites.SmtpServer], \r\n ");
            viewString.Append("           T.SmtpUserName AS [tbl_company_sites.SmtpUserName], \r\n            T.S");
            viewString.Append("mtpPassword AS [tbl_company_sites.SmtpPassword], \r\n            T.VatRegNumber AS");
            viewString.Append(" [tbl_company_sites.VATRegNumber], \r\n            T.SystemLengthUnit AS [tbl_comp");
            viewString.Append("any_sites.SystemLengthUnit], \r\n            T.SystemWeightUnit AS [tbl_company_si");
            viewString.Append("tes.SystemWeightUnit], \r\n            T.CurrencyId AS [tbl_company_sites.Currency");
            viewString.Append("ID], \r\n            T.LanguageId AS [tbl_company_sites.LanguageID], \r\n           ");
            viewString.Append(" T.UserDomainKey AS [tbl_company_sites.UserDomainKey], \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM BaseDbContext.CompanySites AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_company_sites", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanySites
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3716);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CompanySites\r\n        [DomainModels.CompanySi");
            viewString.Append("tes](T1.CompanySites_CompanySiteId, T1.CompanySites_CompanySiteName, T1.CompanyS");
            viewString.Append("ites_Address1, T1.CompanySites_Address2, T1.CompanySites_Address3, T1.CompanySit");
            viewString.Append("es_City, T1.CompanySites_State, T1.CompanySites_Country, T1.CompanySites_ZipCode");
            viewString.Append(", T1.CompanySites_Tel, T1.CompanySites_Fax, T1.CompanySites_Mobile, T1.CompanySi");
            viewString.Append("tes_Email, T1.CompanySites_Url, T1.CompanySites_CompanyId, T1.CompanySites_State");
            viewString.Append("TaxId, T1.CompanySites_Tax1, T1.CompanySites_Tax2, T1.CompanySites_Tax3, T1.Comp");
            viewString.Append("anySites_ProductionManagerId, T1.CompanySites_MarkupId, T1.CompanySites_OrderMan");
            viewString.Append("agerId, T1.CompanySites_WebsiteLogo, T1.CompanySites_MisLogo, T1.CompanySites_Ta");
            viewString.Append("x2Id, T1.CompanySites_Tax3Id, T1.CompanySites_TaxRegistrationNo, T1.CompanySites");
            viewString.Append("_PaymentBusinessEmail, T1.CompanySites_PaymentIdentityToken, T1.CompanySites_Pay");
            viewString.Append("mentGatewayId, T1.CompanySites_LicenseLevel, T1.CompanySites_CustomerId, T1.Comp");
            viewString.Append("anySites_CustomerAccountNumber, T1.CompanySites_SmtpServer, T1.CompanySites_Smtp");
            viewString.Append("UserName, T1.CompanySites_SmtpPassword, T1.CompanySites_VatRegNumber, T1.Company");
            viewString.Append("Sites_SystemLengthUnit, T1.CompanySites_SystemWeightUnit, T1.CompanySites_Curren");
            viewString.Append("cyId, T1.CompanySites_LanguageId, T1.CompanySites_UserDomainKey)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.CompanySiteID AS CompanySites_CompanySiteId, \r\n    ");
            viewString.Append("        T.CompanySiteName AS CompanySites_CompanySiteName, \r\n            T.Addre");
            viewString.Append("ss1 AS CompanySites_Address1, \r\n            T.Address2 AS CompanySites_Address2,");
            viewString.Append(" \r\n            T.Address3 AS CompanySites_Address3, \r\n            T.City AS Comp");
            viewString.Append("anySites_City, \r\n            T.State AS CompanySites_State, \r\n            T.Coun");
            viewString.Append("try AS CompanySites_Country, \r\n            T.ZipCode AS CompanySites_ZipCode, \r\n");
            viewString.Append("            T.Tel AS CompanySites_Tel, \r\n            T.Fax AS CompanySites_Fax, ");
            viewString.Append("\r\n            T.Mobile AS CompanySites_Mobile, \r\n            T.Email AS CompanyS");
            viewString.Append("ites_Email, \r\n            T.URL AS CompanySites_Url, \r\n            T.CompanyID A");
            viewString.Append("S CompanySites_CompanyId, \r\n            T.StateTaxID AS CompanySites_StateTaxId,");
            viewString.Append(" \r\n            T.Tax1 AS CompanySites_Tax1, \r\n            T.Tax2 AS CompanySites");
            viewString.Append("_Tax2, \r\n            T.Tax3 AS CompanySites_Tax3, \r\n            T.ProductionMana");
            viewString.Append("gerID AS CompanySites_ProductionManagerId, \r\n            T.MarkupID AS CompanySi");
            viewString.Append("tes_MarkupId, \r\n            T.OrderManagerID AS CompanySites_OrderManagerId, \r\n ");
            viewString.Append("           T.WebsiteLogo AS CompanySites_WebsiteLogo, \r\n            T.MISLogo AS");
            viewString.Append(" CompanySites_MisLogo, \r\n            T.Tax2ID AS CompanySites_Tax2Id, \r\n        ");
            viewString.Append("    T.Tax3ID AS CompanySites_Tax3Id, \r\n            T.TaxRegistrationNo AS Compan");
            viewString.Append("ySites_TaxRegistrationNo, \r\n            T.PaymentBusinessEmail AS CompanySites_P");
            viewString.Append("aymentBusinessEmail, \r\n            T.PaymentIdentityToken AS CompanySites_Paymen");
            viewString.Append("tIdentityToken, \r\n            T.PaymentGatewayID AS CompanySites_PaymentGatewayI");
            viewString.Append("d, \r\n            T.LicenseLevel AS CompanySites_LicenseLevel, \r\n            T.Cu");
            viewString.Append("stomerID AS CompanySites_CustomerId, \r\n            T.CustomerAccountNumber AS Co");
            viewString.Append("mpanySites_CustomerAccountNumber, \r\n            T.SmtpServer AS CompanySites_Smt");
            viewString.Append("pServer, \r\n            T.SmtpUserName AS CompanySites_SmtpUserName, \r\n          ");
            viewString.Append("  T.SmtpPassword AS CompanySites_SmtpPassword, \r\n            T.VATRegNumber AS C");
            viewString.Append("ompanySites_VatRegNumber, \r\n            T.SystemLengthUnit AS CompanySites_Syste");
            viewString.Append("mLengthUnit, \r\n            T.SystemWeightUnit AS CompanySites_SystemWeightUnit, ");
            viewString.Append("\r\n            T.CurrencyID AS CompanySites_CurrencyId, \r\n            T.LanguageI");
            viewString.Append("D AS CompanySites_LanguageId, \r\n            T.UserDomainKey AS CompanySites_User");
            viewString.Append("DomainKey, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer");
            viewString.Append(".tbl_company_sites AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanySites", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_markup", @"
    SELECT VALUE -- Constructing tbl_markup
        [DomainModels.Store.tbl_markup](T1.[tbl_markup.MarkUpID], T1.[tbl_markup.MarkUpName], T1.[tbl_markup.MarkUpRate], T1.[tbl_markup.IsFixed], T1.[tbl_markup.SystemSiteID], T1.[tbl_markup.UserDomainKey])
    FROM (
        SELECT 
            T.MarkUpId AS [tbl_markup.MarkUpID], 
            T.MarkUpName AS [tbl_markup.MarkUpName], 
            T.MarkUpRate AS [tbl_markup.MarkUpRate], 
            T.IsFixed AS [tbl_markup.IsFixed], 
            T.SystemSiteId AS [tbl_markup.SystemSiteID], 
            T.UserDomainKey AS [tbl_markup.UserDomainKey], 
            True AS _from0
        FROM BaseDbContext.MarkUps AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MarkUps
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MarkUps", @"
    SELECT VALUE -- Constructing MarkUps
        [DomainModels.MarkUp](T1.MarkUp_MarkUpId, T1.MarkUp_MarkUpName, T1.MarkUp_MarkUpRate, T1.MarkUp_IsFixed, T1.MarkUp_SystemSiteId, T1.MarkUp_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpID AS MarkUp_MarkUpId, 
            T.MarkUpName AS MarkUp_MarkUpName, 
            T.MarkUpRate AS MarkUp_MarkUpRate, 
            T.IsFixed AS MarkUp_IsFixed, 
            T.SystemSiteID AS MarkUp_SystemSiteId, 
            T.UserDomainKey AS MarkUp_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.tbl_markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_taxrate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_taxrate", @"
    SELECT VALUE -- Constructing tbl_taxrate
        [DomainModels.Store.tbl_taxrate](T1.[tbl_taxrate.TaxID], T1.[tbl_taxrate.TaxCode], T1.[tbl_taxrate.TaxName], T1.[tbl_taxrate.SourceStateID], T1.[tbl_taxrate.DestinationStateID], T1.[tbl_taxrate.Tax1], T1.[tbl_taxrate.Tax2], T1.[tbl_taxrate.Tax3], T1.[tbl_taxrate.IsFixed], T1.[tbl_taxrate.UserDomainKey])
    FROM (
        SELECT 
            T.TaxId AS [tbl_taxrate.TaxID], 
            T.TaxCode AS [tbl_taxrate.TaxCode], 
            T.TaxName AS [tbl_taxrate.TaxName], 
            T.SourceStateId AS [tbl_taxrate.SourceStateID], 
            T.DestinationStateId AS [tbl_taxrate.DestinationStateID], 
            T.Tax1 AS [tbl_taxrate.Tax1], 
            T.Tax2 AS [tbl_taxrate.Tax2], 
            T.Tax3 AS [tbl_taxrate.Tax3], 
            T.IsFixed AS [tbl_taxrate.IsFixed], 
            T.UserDomainKey AS [tbl_taxrate.UserDomainKey], 
            True AS _from0
        FROM BaseDbContext.TaxRates AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TaxRates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TaxRates", @"
    SELECT VALUE -- Constructing TaxRates
        [DomainModels.TaxRate](T1.TaxRate_TaxId, T1.TaxRate_TaxCode, T1.TaxRate_TaxName, T1.TaxRate_SourceStateId, T1.TaxRate_DestinationStateId, T1.TaxRate_Tax1, T1.TaxRate_Tax2, T1.TaxRate_Tax3, T1.TaxRate_IsFixed, T1.TaxRate_UserDomainKey)
    FROM (
        SELECT 
            T.TaxID AS TaxRate_TaxId, 
            T.TaxCode AS TaxRate_TaxCode, 
            T.TaxName AS TaxRate_TaxName, 
            T.SourceStateID AS TaxRate_SourceStateId, 
            T.DestinationStateID AS TaxRate_DestinationStateId, 
            T.Tax1 AS TaxRate_Tax1, 
            T.Tax2 AS TaxRate_Tax2, 
            T.Tax3 AS TaxRate_Tax3, 
            T.IsFixed AS TaxRate_IsFixed, 
            T.UserDomainKey AS TaxRate_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.tbl_taxrate AS T
    ) AS T1");
        }
    }
}


