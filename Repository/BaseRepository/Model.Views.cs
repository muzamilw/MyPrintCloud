//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets2D60C59F45C8A173E2503C7E306FF6EFCDD73624F606813576D0918CBAF797BD))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets2D60C59F45C8A173E2503C7E306FF6EFCDD73624F606813576D0918CBAF797BD : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets2D60C59F45C8A173E2503C7E306FF6EFCDD73624F606813576D0918CBAF797BD()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "225c53416a5ed4e137ae630105c3b0eeeee859ebe72dddbe21600deb6e1015f1";
            this.HashOverAllExtentViews = "45b6f3a7d3023992175c72cb2d2f2ee9210828f0d680b73665f9a4ff36d81c9d";
            this.ViewCount = 356;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            if ((index == 62))
            {
                return GetView62();
            }
            if ((index == 63))
            {
                return GetView63();
            }
            if ((index == 64))
            {
                return GetView64();
            }
            if ((index == 65))
            {
                return GetView65();
            }
            if ((index == 66))
            {
                return GetView66();
            }
            if ((index == 67))
            {
                return GetView67();
            }
            if ((index == 68))
            {
                return GetView68();
            }
            if ((index == 69))
            {
                return GetView69();
            }
            if ((index == 70))
            {
                return GetView70();
            }
            if ((index == 71))
            {
                return GetView71();
            }
            if ((index == 72))
            {
                return GetView72();
            }
            if ((index == 73))
            {
                return GetView73();
            }
            if ((index == 74))
            {
                return GetView74();
            }
            if ((index == 75))
            {
                return GetView75();
            }
            if ((index == 76))
            {
                return GetView76();
            }
            if ((index == 77))
            {
                return GetView77();
            }
            if ((index == 78))
            {
                return GetView78();
            }
            if ((index == 79))
            {
                return GetView79();
            }
            if ((index == 80))
            {
                return GetView80();
            }
            if ((index == 81))
            {
                return GetView81();
            }
            if ((index == 82))
            {
                return GetView82();
            }
            if ((index == 83))
            {
                return GetView83();
            }
            if ((index == 84))
            {
                return GetView84();
            }
            if ((index == 85))
            {
                return GetView85();
            }
            if ((index == 86))
            {
                return GetView86();
            }
            if ((index == 87))
            {
                return GetView87();
            }
            if ((index == 88))
            {
                return GetView88();
            }
            if ((index == 89))
            {
                return GetView89();
            }
            if ((index == 90))
            {
                return GetView90();
            }
            if ((index == 91))
            {
                return GetView91();
            }
            if ((index == 92))
            {
                return GetView92();
            }
            if ((index == 93))
            {
                return GetView93();
            }
            if ((index == 94))
            {
                return GetView94();
            }
            if ((index == 95))
            {
                return GetView95();
            }
            if ((index == 96))
            {
                return GetView96();
            }
            if ((index == 97))
            {
                return GetView97();
            }
            if ((index == 98))
            {
                return GetView98();
            }
            if ((index == 99))
            {
                return GetView99();
            }
            if ((index == 100))
            {
                return GetView100();
            }
            if ((index == 101))
            {
                return GetView101();
            }
            if ((index == 102))
            {
                return GetView102();
            }
            if ((index == 103))
            {
                return GetView103();
            }
            if ((index == 104))
            {
                return GetView104();
            }
            if ((index == 105))
            {
                return GetView105();
            }
            if ((index == 106))
            {
                return GetView106();
            }
            if ((index == 107))
            {
                return GetView107();
            }
            if ((index == 108))
            {
                return GetView108();
            }
            if ((index == 109))
            {
                return GetView109();
            }
            if ((index == 110))
            {
                return GetView110();
            }
            if ((index == 111))
            {
                return GetView111();
            }
            if ((index == 112))
            {
                return GetView112();
            }
            if ((index == 113))
            {
                return GetView113();
            }
            if ((index == 114))
            {
                return GetView114();
            }
            if ((index == 115))
            {
                return GetView115();
            }
            if ((index == 116))
            {
                return GetView116();
            }
            if ((index == 117))
            {
                return GetView117();
            }
            if ((index == 118))
            {
                return GetView118();
            }
            if ((index == 119))
            {
                return GetView119();
            }
            if ((index == 120))
            {
                return GetView120();
            }
            if ((index == 121))
            {
                return GetView121();
            }
            if ((index == 122))
            {
                return GetView122();
            }
            if ((index == 123))
            {
                return GetView123();
            }
            if ((index == 124))
            {
                return GetView124();
            }
            if ((index == 125))
            {
                return GetView125();
            }
            if ((index == 126))
            {
                return GetView126();
            }
            if ((index == 127))
            {
                return GetView127();
            }
            if ((index == 128))
            {
                return GetView128();
            }
            if ((index == 129))
            {
                return GetView129();
            }
            if ((index == 130))
            {
                return GetView130();
            }
            if ((index == 131))
            {
                return GetView131();
            }
            if ((index == 132))
            {
                return GetView132();
            }
            if ((index == 133))
            {
                return GetView133();
            }
            if ((index == 134))
            {
                return GetView134();
            }
            if ((index == 135))
            {
                return GetView135();
            }
            if ((index == 136))
            {
                return GetView136();
            }
            if ((index == 137))
            {
                return GetView137();
            }
            if ((index == 138))
            {
                return GetView138();
            }
            if ((index == 139))
            {
                return GetView139();
            }
            if ((index == 140))
            {
                return GetView140();
            }
            if ((index == 141))
            {
                return GetView141();
            }
            if ((index == 142))
            {
                return GetView142();
            }
            if ((index == 143))
            {
                return GetView143();
            }
            if ((index == 144))
            {
                return GetView144();
            }
            if ((index == 145))
            {
                return GetView145();
            }
            if ((index == 146))
            {
                return GetView146();
            }
            if ((index == 147))
            {
                return GetView147();
            }
            if ((index == 148))
            {
                return GetView148();
            }
            if ((index == 149))
            {
                return GetView149();
            }
            if ((index == 150))
            {
                return GetView150();
            }
            if ((index == 151))
            {
                return GetView151();
            }
            if ((index == 152))
            {
                return GetView152();
            }
            if ((index == 153))
            {
                return GetView153();
            }
            if ((index == 154))
            {
                return GetView154();
            }
            if ((index == 155))
            {
                return GetView155();
            }
            if ((index == 156))
            {
                return GetView156();
            }
            if ((index == 157))
            {
                return GetView157();
            }
            if ((index == 158))
            {
                return GetView158();
            }
            if ((index == 159))
            {
                return GetView159();
            }
            if ((index == 160))
            {
                return GetView160();
            }
            if ((index == 161))
            {
                return GetView161();
            }
            if ((index == 162))
            {
                return GetView162();
            }
            if ((index == 163))
            {
                return GetView163();
            }
            if ((index == 164))
            {
                return GetView164();
            }
            if ((index == 165))
            {
                return GetView165();
            }
            if ((index == 166))
            {
                return GetView166();
            }
            if ((index == 167))
            {
                return GetView167();
            }
            if ((index == 168))
            {
                return GetView168();
            }
            if ((index == 169))
            {
                return GetView169();
            }
            if ((index == 170))
            {
                return GetView170();
            }
            if ((index == 171))
            {
                return GetView171();
            }
            if ((index == 172))
            {
                return GetView172();
            }
            if ((index == 173))
            {
                return GetView173();
            }
            if ((index == 174))
            {
                return GetView174();
            }
            if ((index == 175))
            {
                return GetView175();
            }
            if ((index == 176))
            {
                return GetView176();
            }
            if ((index == 177))
            {
                return GetView177();
            }
            if ((index == 178))
            {
                return GetView178();
            }
            if ((index == 179))
            {
                return GetView179();
            }
            if ((index == 180))
            {
                return GetView180();
            }
            if ((index == 181))
            {
                return GetView181();
            }
            if ((index == 182))
            {
                return GetView182();
            }
            if ((index == 183))
            {
                return GetView183();
            }
            if ((index == 184))
            {
                return GetView184();
            }
            if ((index == 185))
            {
                return GetView185();
            }
            if ((index == 186))
            {
                return GetView186();
            }
            if ((index == 187))
            {
                return GetView187();
            }
            if ((index == 188))
            {
                return GetView188();
            }
            if ((index == 189))
            {
                return GetView189();
            }
            if ((index == 190))
            {
                return GetView190();
            }
            if ((index == 191))
            {
                return GetView191();
            }
            if ((index == 192))
            {
                return GetView192();
            }
            if ((index == 193))
            {
                return GetView193();
            }
            if ((index == 194))
            {
                return GetView194();
            }
            if ((index == 195))
            {
                return GetView195();
            }
            if ((index == 196))
            {
                return GetView196();
            }
            if ((index == 197))
            {
                return GetView197();
            }
            if ((index == 198))
            {
                return GetView198();
            }
            if ((index == 199))
            {
                return GetView199();
            }
            if ((index == 200))
            {
                return GetView200();
            }
            if ((index == 201))
            {
                return GetView201();
            }
            if ((index == 202))
            {
                return GetView202();
            }
            if ((index == 203))
            {
                return GetView203();
            }
            if ((index == 204))
            {
                return GetView204();
            }
            if ((index == 205))
            {
                return GetView205();
            }
            if ((index == 206))
            {
                return GetView206();
            }
            if ((index == 207))
            {
                return GetView207();
            }
            if ((index == 208))
            {
                return GetView208();
            }
            if ((index == 209))
            {
                return GetView209();
            }
            if ((index == 210))
            {
                return GetView210();
            }
            if ((index == 211))
            {
                return GetView211();
            }
            if ((index == 212))
            {
                return GetView212();
            }
            if ((index == 213))
            {
                return GetView213();
            }
            if ((index == 214))
            {
                return GetView214();
            }
            if ((index == 215))
            {
                return GetView215();
            }
            if ((index == 216))
            {
                return GetView216();
            }
            if ((index == 217))
            {
                return GetView217();
            }
            if ((index == 218))
            {
                return GetView218();
            }
            if ((index == 219))
            {
                return GetView219();
            }
            if ((index == 220))
            {
                return GetView220();
            }
            if ((index == 221))
            {
                return GetView221();
            }
            if ((index == 222))
            {
                return GetView222();
            }
            if ((index == 223))
            {
                return GetView223();
            }
            if ((index == 224))
            {
                return GetView224();
            }
            if ((index == 225))
            {
                return GetView225();
            }
            if ((index == 226))
            {
                return GetView226();
            }
            if ((index == 227))
            {
                return GetView227();
            }
            if ((index == 228))
            {
                return GetView228();
            }
            if ((index == 229))
            {
                return GetView229();
            }
            if ((index == 230))
            {
                return GetView230();
            }
            if ((index == 231))
            {
                return GetView231();
            }
            if ((index == 232))
            {
                return GetView232();
            }
            if ((index == 233))
            {
                return GetView233();
            }
            if ((index == 234))
            {
                return GetView234();
            }
            if ((index == 235))
            {
                return GetView235();
            }
            if ((index == 236))
            {
                return GetView236();
            }
            if ((index == 237))
            {
                return GetView237();
            }
            if ((index == 238))
            {
                return GetView238();
            }
            if ((index == 239))
            {
                return GetView239();
            }
            if ((index == 240))
            {
                return GetView240();
            }
            if ((index == 241))
            {
                return GetView241();
            }
            if ((index == 242))
            {
                return GetView242();
            }
            if ((index == 243))
            {
                return GetView243();
            }
            if ((index == 244))
            {
                return GetView244();
            }
            if ((index == 245))
            {
                return GetView245();
            }
            if ((index == 246))
            {
                return GetView246();
            }
            if ((index == 247))
            {
                return GetView247();
            }
            if ((index == 248))
            {
                return GetView248();
            }
            if ((index == 249))
            {
                return GetView249();
            }
            if ((index == 250))
            {
                return GetView250();
            }
            if ((index == 251))
            {
                return GetView251();
            }
            if ((index == 252))
            {
                return GetView252();
            }
            if ((index == 253))
            {
                return GetView253();
            }
            if ((index == 254))
            {
                return GetView254();
            }
            if ((index == 255))
            {
                return GetView255();
            }
            if ((index == 256))
            {
                return GetView256();
            }
            if ((index == 257))
            {
                return GetView257();
            }
            if ((index == 258))
            {
                return GetView258();
            }
            if ((index == 259))
            {
                return GetView259();
            }
            if ((index == 260))
            {
                return GetView260();
            }
            if ((index == 261))
            {
                return GetView261();
            }
            if ((index == 262))
            {
                return GetView262();
            }
            if ((index == 263))
            {
                return GetView263();
            }
            if ((index == 264))
            {
                return GetView264();
            }
            if ((index == 265))
            {
                return GetView265();
            }
            if ((index == 266))
            {
                return GetView266();
            }
            if ((index == 267))
            {
                return GetView267();
            }
            if ((index == 268))
            {
                return GetView268();
            }
            if ((index == 269))
            {
                return GetView269();
            }
            if ((index == 270))
            {
                return GetView270();
            }
            if ((index == 271))
            {
                return GetView271();
            }
            if ((index == 272))
            {
                return GetView272();
            }
            if ((index == 273))
            {
                return GetView273();
            }
            if ((index == 274))
            {
                return GetView274();
            }
            if ((index == 275))
            {
                return GetView275();
            }
            if ((index == 276))
            {
                return GetView276();
            }
            if ((index == 277))
            {
                return GetView277();
            }
            if ((index == 278))
            {
                return GetView278();
            }
            if ((index == 279))
            {
                return GetView279();
            }
            if ((index == 280))
            {
                return GetView280();
            }
            if ((index == 281))
            {
                return GetView281();
            }
            if ((index == 282))
            {
                return GetView282();
            }
            if ((index == 283))
            {
                return GetView283();
            }
            if ((index == 284))
            {
                return GetView284();
            }
            if ((index == 285))
            {
                return GetView285();
            }
            if ((index == 286))
            {
                return GetView286();
            }
            if ((index == 287))
            {
                return GetView287();
            }
            if ((index == 288))
            {
                return GetView288();
            }
            if ((index == 289))
            {
                return GetView289();
            }
            if ((index == 290))
            {
                return GetView290();
            }
            if ((index == 291))
            {
                return GetView291();
            }
            if ((index == 292))
            {
                return GetView292();
            }
            if ((index == 293))
            {
                return GetView293();
            }
            if ((index == 294))
            {
                return GetView294();
            }
            if ((index == 295))
            {
                return GetView295();
            }
            if ((index == 296))
            {
                return GetView296();
            }
            if ((index == 297))
            {
                return GetView297();
            }
            if ((index == 298))
            {
                return GetView298();
            }
            if ((index == 299))
            {
                return GetView299();
            }
            if ((index == 300))
            {
                return GetView300();
            }
            if ((index == 301))
            {
                return GetView301();
            }
            if ((index == 302))
            {
                return GetView302();
            }
            if ((index == 303))
            {
                return GetView303();
            }
            if ((index == 304))
            {
                return GetView304();
            }
            if ((index == 305))
            {
                return GetView305();
            }
            if ((index == 306))
            {
                return GetView306();
            }
            if ((index == 307))
            {
                return GetView307();
            }
            if ((index == 308))
            {
                return GetView308();
            }
            if ((index == 309))
            {
                return GetView309();
            }
            if ((index == 310))
            {
                return GetView310();
            }
            if ((index == 311))
            {
                return GetView311();
            }
            if ((index == 312))
            {
                return GetView312();
            }
            if ((index == 313))
            {
                return GetView313();
            }
            if ((index == 314))
            {
                return GetView314();
            }
            if ((index == 315))
            {
                return GetView315();
            }
            if ((index == 316))
            {
                return GetView316();
            }
            if ((index == 317))
            {
                return GetView317();
            }
            if ((index == 318))
            {
                return GetView318();
            }
            if ((index == 319))
            {
                return GetView319();
            }
            if ((index == 320))
            {
                return GetView320();
            }
            if ((index == 321))
            {
                return GetView321();
            }
            if ((index == 322))
            {
                return GetView322();
            }
            if ((index == 323))
            {
                return GetView323();
            }
            if ((index == 324))
            {
                return GetView324();
            }
            if ((index == 325))
            {
                return GetView325();
            }
            if ((index == 326))
            {
                return GetView326();
            }
            if ((index == 327))
            {
                return GetView327();
            }
            if ((index == 328))
            {
                return GetView328();
            }
            if ((index == 329))
            {
                return GetView329();
            }
            if ((index == 330))
            {
                return GetView330();
            }
            if ((index == 331))
            {
                return GetView331();
            }
            if ((index == 332))
            {
                return GetView332();
            }
            if ((index == 333))
            {
                return GetView333();
            }
            if ((index == 334))
            {
                return GetView334();
            }
            if ((index == 335))
            {
                return GetView335();
            }
            if ((index == 336))
            {
                return GetView336();
            }
            if ((index == 337))
            {
                return GetView337();
            }
            if ((index == 338))
            {
                return GetView338();
            }
            if ((index == 339))
            {
                return GetView339();
            }
            if ((index == 340))
            {
                return GetView340();
            }
            if ((index == 341))
            {
                return GetView341();
            }
            if ((index == 342))
            {
                return GetView342();
            }
            if ((index == 343))
            {
                return GetView343();
            }
            if ((index == 344))
            {
                return GetView344();
            }
            if ((index == 345))
            {
                return GetView345();
            }
            if ((index == 346))
            {
                return GetView346();
            }
            if ((index == 347))
            {
                return GetView347();
            }
            if ((index == 348))
            {
                return GetView348();
            }
            if ((index == 349))
            {
                return GetView349();
            }
            if ((index == 350))
            {
                return GetView350();
            }
            if ((index == 351))
            {
                return GetView351();
            }
            if ((index == 352))
            {
                return GetView352();
            }
            if ((index == 353))
            {
                return GetView353();
            }
            if ((index == 354))
            {
                return GetView354();
            }
            if ((index == 355))
            {
                return GetView355();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(10335);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Company\r\n        [DomainModels.Store.Company]");
            viewString.Append("(T1.Company_CompanyId, T1.Company_StoreId, T1.Company_AccountNumber, T1.Company_");
            viewString.Append("Name, T1.Company_URL, T1.Company_CreditReference, T1.Company_CreditLimit, T1.Com");
            viewString.Append("pany_Terms, T1.Company_TypeId, T1.Company_DefaultNominalCode, T1.Company_Default");
            viewString.Append("MarkUpId, T1.Company_AccountOpenDate, T1.Company_AccountManagerId, T1.Company_St");
            viewString.Append("atus, T1.Company_IsCustomer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, ");
            viewString.Append("T1.Company_NotesLastUpdatedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled");
            viewString.Append(", T1.Company_LockedBy, T1.Company_AccountBalance, T1.Company_CreationDate, T1.Co");
            viewString.Append("mpany_VATRegNumber, T1.Company_VATRegReference, T1.Company_FlagId, T1.Company_Ph");
            viewString.Append("oneNo, T1.Company_IsGeneral, T1.Company_SalesPerson, T1.Company_Image, T1.Compan");
            viewString.Append("y_WebAccessCode, T1.Company_isArchived, T1.Company_PayByPersonalCredeitCard, T1.");
            viewString.Append("Company_PONumberRequired, T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.C");
            viewString.Append("ompany_CarrierTrackingPath, T1.Company_CorporateOrderingPolicy, T1.Company_isDis");
            viewString.Append("playSiteHeader, T1.Company_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Com");
            viewString.Append("pany_isDisplayFeaturedProducts, T1.Company_isDisplayPromotionalProducts, T1.Comp");
            viewString.Append("any_isDisplayChooseUsIcons, T1.Company_isDisplaySecondaryPages, T1.Company_isDis");
            viewString.Append("playSiteFooter, T1.Company_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.");
            viewString.Append("Company_isLaminate, T1.Company_isRoundCorner, T1.Company_isBrokerCanDeliverSameD");
            viewString.Append("ay, T1.Company_isAcceptPaymentOnline, T1.Company_isOrderApprovalRequired, T1.Com");
            viewString.Append("pany_isPaymentRequired, T1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Compa");
            viewString.Append("ny_FacebookURL, T1.Company_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebA");
            viewString.Append("nalyticCode, T1.Company_isShowGoogleMap, T1.Company_isTextWatermark, T1.Company_");
            viewString.Append("WatermarkText, T1.Company_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Co");
            viewString.Append("mpany_PriceFlagId, T1.Company_isIncludeVAT, T1.Company_isAllowRegistrationFromWe");
            viewString.Append("b, T1.Company_MarketingBriefRecipient, T1.Company_isLoginFirstTime, T1.Company_f");
            viewString.Append("acebookAppId, T1.Company_facebookAppKey, T1.Company_twitterAppId, T1.Company_twi");
            viewString.Append("tterAppKey, T1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1.Company_TaxP");
            viewString.Append("ercentageId, T1.Company_XeroAccessCode, T1.Company_canUserPlaceOrderWithoutAppro");
            viewString.Append("val, T1.Company_CanUserEditProfile, T1.Company_OrganisationId, T1.Company_includ");
            viewString.Append("eEmailArtworkOrderReport, T1.Company_includeEmailArtworkOrderXML, T1.Company_inc");
            viewString.Append("ludeEmailArtworkOrderJobCard, T1.Company_makeEmailArtworkOrderProductionReady, T");
            viewString.Append("1.Company_SalesAndOrderManagerId1, T1.Company_SalesAndOrderManagerId2, T1.Compan");
            viewString.Append("y_ProductionManagerId1, T1.Company_ProductionManagerId2, T1.Company_StockNotific");
            viewString.Append("ationManagerId1, T1.Company_StockNotificationManagerId2, T1.Company_IsDeliveryTa");
            viewString.Append("xAble, T1.Company_IsDisplayDeliveryOnCheckout, T1.Company_TaxRate, T1.Company_Is");
            viewString.Append("DisplayDiscountVoucherCode, T1.Company_IsDisplayCorporateBinding, T1.Company_Map");
            viewString.Append("ImageURL, T1.Company_PickupAddressId, T1.Company_TaxLabel, T1.Company_isAddCropM");
            viewString.Append("arks, T1.Company_isCalculateTaxByService, T1.Company_ActiveBannerSetId, T1.Compa");
            viewString.Append("ny_CurrentThemeId, T1.Company_isStoreLive, T1.Company_CanUserUpdateAddress, T1.C");
            viewString.Append("ompany_IsRegisterAccessWebStore, T1.Company_IsRegisterPlaceOrder, T1.Company_IsR");
            viewString.Append("egisterPayOnlyByCreditCard, T1.Company_IsRegisterPlaceDirectOrder, T1.Company_Is");
            viewString.Append("RegisterPlaceOrderWithoutApproval)\r\n    FROM (\r\n        SELECT \r\n            T.C");
            viewString.Append("ompanyId AS Company_CompanyId, \r\n            T.StoreId AS Company_StoreId, \r\n   ");
            viewString.Append("         T.AccountNumber AS Company_AccountNumber, \r\n            T.Name AS Compa");
            viewString.Append("ny_Name, \r\n            T.URL AS Company_URL, \r\n            T.CreditReference AS ");
            viewString.Append("Company_CreditReference, \r\n            T.CreditLimit AS Company_CreditLimit, \r\n ");
            viewString.Append("           T.Terms AS Company_Terms, \r\n            T.TypeId AS Company_TypeId, \r");
            viewString.Append("\n            T.DefaultNominalCode AS Company_DefaultNominalCode, \r\n            T");
            viewString.Append(".DefaultMarkUpId AS Company_DefaultMarkUpId, \r\n            T.AccountOpenDate AS ");
            viewString.Append("Company_AccountOpenDate, \r\n            T.AccountManagerId AS Company_AccountMana");
            viewString.Append("gerId, \r\n            T.Status AS Company_Status, \r\n            T.IsCustomer AS C");
            viewString.Append("ompany_IsCustomer, \r\n            T.Notes AS Company_Notes, \r\n            T.Notes");
            viewString.Append("LastUpdatedDate AS Company_NotesLastUpdatedDate, \r\n            T.NotesLastUpdate");
            viewString.Append("dBy AS Company_NotesLastUpdatedBy, \r\n            T.AccountStatusId AS Company_Ac");
            viewString.Append("countStatusId, \r\n            T.IsDisabled AS Company_IsDisabled, \r\n            T");
            viewString.Append(".LockedBy AS Company_LockedBy, \r\n            T.AccountBalance AS Company_Account");
            viewString.Append("Balance, \r\n            T.CreationDate AS Company_CreationDate, \r\n            T.V");
            viewString.Append("ATRegNumber AS Company_VATRegNumber, \r\n            T.VATRegReference AS Company_");
            viewString.Append("VATRegReference, \r\n            T.FlagId AS Company_FlagId, \r\n            T.Phone");
            viewString.Append("No AS Company_PhoneNo, \r\n            T.IsGeneral AS Company_IsGeneral, \r\n       ");
            viewString.Append("     T.SalesPerson AS Company_SalesPerson, \r\n            T.Image AS Company_Imag");
            viewString.Append("e, \r\n            T.WebAccessCode AS Company_WebAccessCode, \r\n            T.isArc");
            viewString.Append("hived AS Company_isArchived, \r\n            T.PayByPersonalCredeitCard AS Company");
            viewString.Append("_PayByPersonalCredeitCard, \r\n            T.PONumberRequired AS Company_PONumberR");
            viewString.Append("equired, \r\n            T.ShowPrices AS Company_ShowPrices, \r\n            T.Carri");
            viewString.Append("erWebPath AS Company_CarrierWebPath, \r\n            T.CarrierTrackingPath AS Comp");
            viewString.Append("any_CarrierTrackingPath, \r\n            T.CorporateOrderingPolicy AS Company_Corp");
            viewString.Append("orateOrderingPolicy, \r\n            T.isDisplaySiteHeader AS Company_isDisplaySit");
            viewString.Append("eHeader, \r\n            T.isDisplayMenuBar AS Company_isDisplayMenuBar, \r\n       ");
            viewString.Append("     T.isDisplayBanners AS Company_isDisplayBanners, \r\n            T.isDisplayFe");
            viewString.Append("aturedProducts AS Company_isDisplayFeaturedProducts, \r\n            T.isDisplayPr");
            viewString.Append("omotionalProducts AS Company_isDisplayPromotionalProducts, \r\n            T.isDis");
            viewString.Append("playChooseUsIcons AS Company_isDisplayChooseUsIcons, \r\n            T.isDisplaySe");
            viewString.Append("condaryPages AS Company_isDisplaySecondaryPages, \r\n            T.isDisplaySiteFo");
            viewString.Append("oter AS Company_isDisplaySiteFooter, \r\n            T.RedirectWebstoreURL AS Comp");
            viewString.Append("any_RedirectWebstoreURL, \r\n            T.defaultPalleteId AS Company_defaultPall");
            viewString.Append("eteId, \r\n            T.isLaminate AS Company_isLaminate, \r\n            T.isRound");
            viewString.Append("Corner AS Company_isRoundCorner, \r\n            T.isBrokerCanDeliverSameDay AS Co");
            viewString.Append("mpany_isBrokerCanDeliverSameDay, \r\n            T.isAcceptPaymentOnline AS Compan");
            viewString.Append("y_isAcceptPaymentOnline, \r\n            T.isOrderApprovalRequired AS Company_isOr");
            viewString.Append("derApprovalRequired, \r\n            T.isPaymentRequired AS Company_isPaymentRequi");
            viewString.Append("red, \r\n            T.isWhiteLabel AS Company_isWhiteLabel, \r\n            T.Twitt");
            viewString.Append("erURL AS Company_TwitterURL, \r\n            T.FacebookURL AS Company_FacebookURL,");
            viewString.Append(" \r\n            T.LinkedinURL AS Company_LinkedinURL, \r\n            T.WebMasterTa");
            viewString.Append("g AS Company_WebMasterTag, \r\n            T.WebAnalyticCode AS Company_WebAnalyti");
            viewString.Append("cCode, \r\n            T.isShowGoogleMap AS Company_isShowGoogleMap, \r\n           ");
            viewString.Append(" T.isTextWatermark AS Company_isTextWatermark, \r\n            T.WatermarkText AS ");
            viewString.Append("Company_WatermarkText, \r\n            T.CoreCustomerId AS Company_CoreCustomerId,");
            viewString.Append(" \r\n            T.StoreBackgroundImage AS Company_StoreBackgroundImage, \r\n       ");
            viewString.Append("     T.PriceFlagId AS Company_PriceFlagId, \r\n            T.isIncludeVAT AS Compa");
            viewString.Append("ny_isIncludeVAT, \r\n            T.isAllowRegistrationFromWeb AS Company_isAllowRe");
            viewString.Append("gistrationFromWeb, \r\n            T.MarketingBriefRecipient AS Company_MarketingB");
            viewString.Append("riefRecipient, \r\n            T.isLoginFirstTime AS Company_isLoginFirstTime, \r\n ");
            viewString.Append("           T.facebookAppId AS Company_facebookAppId, \r\n            T.facebookApp");
            viewString.Append("Key AS Company_facebookAppKey, \r\n            T.twitterAppId AS Company_twitterAp");
            viewString.Append("pId, \r\n            T.twitterAppKey AS Company_twitterAppKey, \r\n            T.isS");
            viewString.Append("toreModePrivate AS Company_isStoreModePrivate, \r\n            T.CustomCSS AS Comp");
            viewString.Append("any_CustomCSS, \r\n            T.TaxPercentageId AS Company_TaxPercentageId, \r\n   ");
            viewString.Append("         T.XeroAccessCode AS Company_XeroAccessCode, \r\n            T.canUserPlac");
            viewString.Append("eOrderWithoutApproval AS Company_canUserPlaceOrderWithoutApproval, \r\n           ");
            viewString.Append(" T.CanUserEditProfile AS Company_CanUserEditProfile, \r\n            T.Organisatio");
            viewString.Append("nId AS Company_OrganisationId, \r\n            T.includeEmailArtworkOrderReport AS");
            viewString.Append(" Company_includeEmailArtworkOrderReport, \r\n            T.includeEmailArtworkOrde");
            viewString.Append("rXML AS Company_includeEmailArtworkOrderXML, \r\n            T.includeEmailArtwork");
            viewString.Append("OrderJobCard AS Company_includeEmailArtworkOrderJobCard, \r\n            T.makeEma");
            viewString.Append("ilArtworkOrderProductionReady AS Company_makeEmailArtworkOrderProductionReady, \r");
            viewString.Append("\n            T.SalesAndOrderManagerId1 AS Company_SalesAndOrderManagerId1, \r\n   ");
            viewString.Append("         T.SalesAndOrderManagerId2 AS Company_SalesAndOrderManagerId2, \r\n       ");
            viewString.Append("     T.ProductionManagerId1 AS Company_ProductionManagerId1, \r\n            T.Pro");
            viewString.Append("ductionManagerId2 AS Company_ProductionManagerId2, \r\n            T.StockNotifica");
            viewString.Append("tionManagerId1 AS Company_StockNotificationManagerId1, \r\n            T.StockNoti");
            viewString.Append("ficationManagerId2 AS Company_StockNotificationManagerId2, \r\n            T.IsDel");
            viewString.Append("iveryTaxAble AS Company_IsDeliveryTaxAble, \r\n            T.IsDisplayDeliveryOnCh");
            viewString.Append("eckout AS Company_IsDisplayDeliveryOnCheckout, \r\n            T.TaxRate AS Compan");
            viewString.Append("y_TaxRate, \r\n            T.IsDisplayDiscountVoucherCode AS Company_IsDisplayDisc");
            viewString.Append("ountVoucherCode, \r\n            T.IsDisplayCorporateBinding AS Company_IsDisplayC");
            viewString.Append("orporateBinding, \r\n            T.MapImageUrl AS Company_MapImageURL, \r\n         ");
            viewString.Append("   T.PickupAddressId AS Company_PickupAddressId, \r\n            T.TaxLabel AS Com");
            viewString.Append("pany_TaxLabel, \r\n            T.isAddCropMarks AS Company_isAddCropMarks, \r\n     ");
            viewString.Append("       T.isCalculateTaxByService AS Company_isCalculateTaxByService, \r\n         ");
            viewString.Append("   T.ActiveBannerSetId AS Company_ActiveBannerSetId, \r\n            T.CurrentThem");
            viewString.Append("eId AS Company_CurrentThemeId, \r\n            T.isStoreLive AS Company_isStoreLiv");
            viewString.Append("e, \r\n            T.CanUserUpdateAddress AS Company_CanUserUpdateAddress, \r\n     ");
            viewString.Append("       T.IsRegisterAccessWebStore AS Company_IsRegisterAccessWebStore, \r\n       ");
            viewString.Append("     T.IsRegisterPlaceOrder AS Company_IsRegisterPlaceOrder, \r\n            T.IsR");
            viewString.Append("egisterPayOnlyByCreditCard AS Company_IsRegisterPayOnlyByCreditCard, \r\n         ");
            viewString.Append("   T.IsRegisterPlaceDirectOrder AS Company_IsRegisterPlaceDirectOrder, \r\n       ");
            viewString.Append("     T.IsRegisterPlaceOrderWithoutApproval AS Company_IsRegisterPlaceOrderWithou");
            viewString.Append("tApproval, \r\n            True AS _from0\r\n        FROM BaseDbContext.Companies AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Company", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidget
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidget", @"
    SELECT VALUE -- Constructing CmsSkinPageWidget
        [DomainModels.Store.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsSkinPageWidgetParam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsSkinPageWidgetParam", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParam
        [DomainModels.Store.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM BaseDbContext.CmsSkinPageWidgetParams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBanner
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBanner", @"
    SELECT VALUE -- Constructing CompanyBanner
        [DomainModels.Store.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM BaseDbContext.CompanyBanners AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyBannerSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyBannerSet", @"
    SELECT VALUE -- Constructing CompanyBannerSet
        [DomainModels.Store.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyBannerSets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyDomain", @"
    SELECT VALUE -- Constructing CompanyDomain
        [DomainModels.Store.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyDomains AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Organisation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4369);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisation\r\n        [DomainModels.Store.Org");
            viewString.Append("anisation](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.");
            viewString.Append("Organisation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Or");
            viewString.Append("ganisation_City, T1.Organisation_StateId, T1.Organisation_CountryId, T1.Organisa");
            viewString.Append("tion_ZipCode, T1.Organisation_Tel, T1.Organisation_Fax, T1.Organisation_Mobile, ");
            viewString.Append("T1.Organisation_Email, T1.Organisation_URL, T1.Organisation_WebsiteLogo, T1.Orga");
            viewString.Append("nisation_MISLogo, T1.Organisation_TaxRegistrationNo, T1.Organisation_LicenseLeve");
            viewString.Append("l, T1.Organisation_CustomerAccountNumber, T1.Organisation_SmtpServer, T1.Organis");
            viewString.Append("ation_SmtpUserName, T1.Organisation_SmtpPassword, T1.Organisation_VATRegNumber, ");
            viewString.Append("T1.Organisation_SystemLengthUnit, T1.Organisation_SystemWeightUnit, T1.Organisat");
            viewString.Append("ion_CurrencyId, T1.Organisation_LanguageId, T1.Organisation_BleedAreaSize, T1.Or");
            viewString.Append("ganisation_ShowBleedArea, T1.Organisation_isXeroIntegrationRequired, T1.Organisa");
            viewString.Append("tion_XeroApiId, T1.Organisation_XeroApiKey, T1.Organisation_TaxServiceUrl, T1.Or");
            viewString.Append("ganisation_TaxServiceKey, T1.Organisation_IsImperical, T1.Organisation_AgileApiK");
            viewString.Append("ey, T1.Organisation_AgileApiUrl, T1.Organisation_isAgileActive, T1.Organisation_");
            viewString.Append("isTrial, T1.Organisation_LiveStoresCount, T1.Organisation_WebStoreOrdersCount, T");
            viewString.Append("1.Organisation_MisOrdersCount, T1.Organisation_BillingDate, T1.Organisation_Offl");
            viewString.Append("ineStoreClicks, T1.Organisation_CreateContactZapTargetUrl, T1.Organisation_Creat");
            viewString.Append("eInvoiceZapTargetUrl, T1.Organisation_IsZapierEnable)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.OrganisationId AS Organisation_OrganisationId, \r\n            T");
            viewString.Append(".OrganisationName AS Organisation_OrganisationName, \r\n            T.Address1 AS ");
            viewString.Append("Organisation_Address1, \r\n            T.Address2 AS Organisation_Address2, \r\n    ");
            viewString.Append("        T.Address3 AS Organisation_Address3, \r\n            T.City AS Organisatio");
            viewString.Append("n_City, \r\n            T.StateId AS Organisation_StateId, \r\n            T.Country");
            viewString.Append("Id AS Organisation_CountryId, \r\n            T.ZipCode AS Organisation_ZipCode, \r");
            viewString.Append("\n            T.Tel AS Organisation_Tel, \r\n            T.Fax AS Organisation_Fax,");
            viewString.Append(" \r\n            T.Mobile AS Organisation_Mobile, \r\n            T.Email AS Organis");
            viewString.Append("ation_Email, \r\n            T.URL AS Organisation_URL, \r\n            T.WebsiteLog");
            viewString.Append("o AS Organisation_WebsiteLogo, \r\n            T.MISLogo AS Organisation_MISLogo, ");
            viewString.Append("\r\n            T.TaxRegistrationNo AS Organisation_TaxRegistrationNo, \r\n         ");
            viewString.Append("   T.LicenseLevel AS Organisation_LicenseLevel, \r\n            T.CustomerAccountN");
            viewString.Append("umber AS Organisation_CustomerAccountNumber, \r\n            T.SmtpServer AS Organ");
            viewString.Append("isation_SmtpServer, \r\n            T.SmtpUserName AS Organisation_SmtpUserName, \r");
            viewString.Append("\n            T.SmtpPassword AS Organisation_SmtpPassword, \r\n            T.VATReg");
            viewString.Append("Number AS Organisation_VATRegNumber, \r\n            T.SystemLengthUnit AS Organis");
            viewString.Append("ation_SystemLengthUnit, \r\n            T.SystemWeightUnit AS Organisation_SystemW");
            viewString.Append("eightUnit, \r\n            T.CurrencyId AS Organisation_CurrencyId, \r\n            ");
            viewString.Append("T.LanguageId AS Organisation_LanguageId, \r\n            T.BleedAreaSize AS Organi");
            viewString.Append("sation_BleedAreaSize, \r\n            T.ShowBleedArea AS Organisation_ShowBleedAre");
            viewString.Append("a, \r\n            T.isXeroIntegrationRequired AS Organisation_isXeroIntegrationRe");
            viewString.Append("quired, \r\n            T.XeroApiId AS Organisation_XeroApiId, \r\n            T.Xer");
            viewString.Append("oApiKey AS Organisation_XeroApiKey, \r\n            T.TaxServiceUrl AS Organisatio");
            viewString.Append("n_TaxServiceUrl, \r\n            T.TaxServiceKey AS Organisation_TaxServiceKey, \r\n");
            viewString.Append("            T.IsImperical AS Organisation_IsImperical, \r\n            T.AgileApiK");
            viewString.Append("ey AS Organisation_AgileApiKey, \r\n            T.AgileApiUrl AS Organisation_Agil");
            viewString.Append("eApiUrl, \r\n            T.isAgileActive AS Organisation_isAgileActive, \r\n        ");
            viewString.Append("    T.isTrial AS Organisation_isTrial, \r\n            T.LiveStoresCount AS Organi");
            viewString.Append("sation_LiveStoresCount, \r\n            T.WebStoreOrdersCount AS Organisation_WebS");
            viewString.Append("toreOrdersCount, \r\n            T.MisOrdersCount AS Organisation_MisOrdersCount, ");
            viewString.Append("\r\n            T.BillingDate AS Organisation_BillingDate, \r\n            T.Offline");
            viewString.Append("StoreClicks AS Organisation_OfflineStoreClicks, \r\n            T.CreateContactZap");
            viewString.Append("TargetUrl AS Organisation_CreateContactZapTargetUrl, \r\n            T.CreateInvoi");
            viewString.Append("ceZapTargetUrl AS Organisation_CreateInvoiceZapTargetUrl, \r\n            T.IsZapi");
            viewString.Append("erEnable AS Organisation_IsZapierEnable, \r\n            True AS _from0\r\n        F");
            viewString.Append("ROM BaseDbContext.Organisations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Organisation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5804);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategory\r\n        [DomainModels.Store.");
            viewString.Append("ProductCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_Catego");
            viewString.Append("ryName, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.Prod");
            viewString.Append("uctCategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_Compan");
            viewString.Append("yId, T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Pr");
            viewString.Append("oductCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_is");
            viewString.Append("Enabled, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMa");
            viewString.Append("ppedCategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished,");
            viewString.Append(" T1.ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCa");
            viewString.Append("tegory_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCatego");
            viewString.Append("ry_isLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRest");
            viewString.Append("rictions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction");
            viewString.Append(", T1.ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Pr");
            viewString.Append("oductCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleF");
            viewString.Append("actor, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeyword");
            viewString.Append("s, T1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductC");
            viewString.Append("ategory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCa");
            viewString.Append("tegory_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1");
            viewString.Append(".ProductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCat");
            viewString.Append("egory_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCateg");
            viewString.Append("ory_DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory");
            viewString.Append("_ProductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCa");
            viewString.Append("tegory_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCateg");
            viewString.Append("ory_IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsSh");
            viewString.Append("owStockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_I");
            viewString.Append("sShowProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.Produc");
            viewString.Append("tCategoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName A");
            viewString.Append("S ProductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_C");
            viewString.Append("ontentType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n    ");
            viewString.Append("        T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy");
            viewString.Append(" AS ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_Compa");
            viewString.Append("nyId, \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n  ");
            viewString.Append("          T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImageP");
            viewString.Append("ath AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCatego");
            viewString.Append("ry_ThumbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n    ");
            viewString.Append("        T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.Templa");
            viewString.Append("teDesignerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryNa");
            viewString.Append("me, \r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.is");
            viewString.Append("Published AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS Produc");
            viewString.Append("tCategory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_Trimmed");
            viewString.Append("Height, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, ");
            viewString.Append("\r\n            T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n      ");
            viewString.Append("      T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.");
            viewString.Append("Sides AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS Product");
            viewString.Append("Category_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategor");
            viewString.Append("y_ApplyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestr");
            viewString.Append("iction, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, ");
            viewString.Append("\r\n            T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            ");
            viewString.Append("T.RegionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCat");
            viewString.Append("egory_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n");
            viewString.Append("            T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, ");
            viewString.Append("\r\n            T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.Me");
            viewString.Append("taDescription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS P");
            viewString.Append("roductCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Orga");
            viewString.Append("nisationId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCa");
            viewString.Append("tegoryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory");
            viewString.Append("_SubCategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_C");
            viewString.Append("ategoryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n");
            viewString.Append("            T.ShortDescription AS ProductCategory_ShortDescription, \r\n          ");
            viewString.Append("  T.SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            ");
            viewString.Append("T.DefaultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDispla");
            viewString.Append("yColumns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisp");
            viewString.Append("layRows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeature");
            viewString.Append("dproducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAv");
            viewString.Append("ailablity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoin");
            viewString.Append("ts AS ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Pro");
            viewString.Append("ductCategory_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory");
            viewString.Append("_IsShowSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowSto");
            viewString.Append("ckStatus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProd");
            viewString.Append("uctDescription, \r\n            T.IsShowProductShortDescription AS ProductCategory");
            viewString.Append("_IsShowProductShortDescription, \r\n            True AS _from0\r\n        FROM BaseD");
            viewString.Append("bContext.ProductCategories AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategory", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Store.Widgets](T1.Widgets_WidgetId, T1.Widgets_WidgetCode, T1.Widgets_WidgetName, T1.Widgets_WidgetControlName, T1.Widgets_WidgetCss, T1.Widgets_ThumbnailUrl, T1.Widgets_Description)
    FROM (
        SELECT 
            T.WidgetId AS Widgets_WidgetId, 
            T.WidgetCode AS Widgets_WidgetCode, 
            T.WidgetName AS Widgets_WidgetName, 
            T.WidgetControlName AS Widgets_WidgetControlName, 
            T.WidgetCss AS Widgets_WidgetCss, 
            T.ThumbnailUrl AS Widgets_ThumbnailUrl, 
            T.Description AS Widgets_Description, 
            True AS _from0
        FROM BaseDbContext.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CategoryTerritory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CategoryTerritory", @"
    SELECT VALUE -- Constructing CategoryTerritory
        [DomainModels.Store.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CategoryTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCategory", "\r\n    SELECT VALUE -- Constructing StockCategory\r\n        [DomainModels.Store.Sto" +
                    "ckCategory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory" +
                    "_Name, T1.StockCategory_Description, T1.StockCategory_fixed, T1.StockCategory_It" +
                    "emWeight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.Stock" +
                    "Category_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCo" +
                    "ated, T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCatego" +
                    "ry_recLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Fla" +
                    "g2, T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_Organisatio" +
                    "nId)\r\n    FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_Cat" +
                    "egoryId, \r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS Sto" +
                    "ckCategory_Name, \r\n            T.Description AS StockCategory_Description, \r\n   " +
                    "         T.Fixed AS StockCategory_fixed, \r\n            T.ItemWeight AS StockCate" +
                    "gory_ItemWeight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n     " +
                    "       T.ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPap" +
                    "erSize AS StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCa" +
                    "tegory_ItemCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r" +
                    "\n            T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemC" +
                    "harge AS StockCategory_ItemCharge, \r\n            T.RecLock AS StockCategory_recL" +
                    "ock, \r\n            T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS Stoc" +
                    "kCategory_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.F" +
                    "lag3 AS StockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n   " +
                    "         T.OrganisationId AS StockCategory_OrganisationId, \r\n            True AS" +
                    " _from0\r\n        FROM BaseDbContext.StockCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockSubCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockSubCategory", @"
    SELECT VALUE -- Constructing StockSubCategory
        [DomainModels.Store.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM BaseDbContext.StockSubCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2770);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPage\r\n        [DomainModels.Store.CmsPage]");
            viewString.Append("(T1.CmsPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTi");
            viewString.Append("tle, T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, ");
            viewString.Append("T1.[CmsPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsP");
            viewString.Append("age.Meta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPa");
            viewString.Append("ge.Meta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateCo");
            viewString.Append("ntent], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent]");
            viewString.Append(", T1.[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.Cms");
            viewString.Append("Page_CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.C");
            viewString.Append("msPage_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_");
            viewString.Append("PageKeywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, ");
            viewString.Append("T1.CmsPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS");
            viewString.Append(" CmsPage_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.P");
            viewString.Append("ageTitle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r");
            viewString.Append("\n            T.description AS CmsPage_description, \r\n            T.PageRelativeP");
            viewString.Append("ath AS CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder,");
            viewString.Append(" \r\n            T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n       ");
            viewString.Append("     T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n         ");
            viewString.Append("   T.Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r");
            viewString.Append("\n            T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n       ");
            viewString.Append("     T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_");
            viewString.Append("AuthorContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent ");
            viewString.Append("AS [CmsPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.");
            viewString.Append("Meta_LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta");
            viewString.Append("_RevisitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n   ");
            viewString.Append("         T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPag");
            viewString.Append("e_isUserDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n           ");
            viewString.Append(" T.isPromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialO");
            viewString.Append("ffer AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r");
            viewString.Append("\n            T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.Pag");
            viewString.Append("eBanner AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywo");
            viewString.Append("rds, \r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay A");
            viewString.Append("S CmsPage_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n         ");
            viewString.Append("   T.OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n   ");
            viewString.Append("     FROM BaseDbContext.CmsPages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockCostAndPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockCostAndPrice", @"
    SELECT VALUE -- Constructing StockCostAndPrice
        [DomainModels.Store.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM BaseDbContext.StockCostAndPrices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StockItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5841);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItem\r\n        [DomainModels.Store.StockI");
            viewString.Append("tem](T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.");
            viewString.Append("StockItem_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.St");
            viewString.Append("ockItem_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1");
            viewString.Append(".StockItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T");
            viewString.Append("1.StockItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.Stoc");
            viewString.Append("kItem_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifie");
            viewString.Append("dBy, T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.S");
            viewString.Append("tockItem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, ");
            viewString.Append("T1.StockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProce");
            viewString.Append("ssingCharge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQ");
            viewString.Append("tyRate, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_Locke");
            viewString.Append("dBy, T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderD");
            viewString.Append("ate, T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.Stoc");
            viewString.Append("kItem_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSi");
            viewString.Append("zeSelectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.Sto");
            viewString.Append("ckItem_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.Stoc");
            viewString.Append("kItem_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.Stoc");
            viewString.Append("kItem_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockIt");
            viewString.Append("em_DepartmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.St");
            viewString.Append("ockItem_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_In");
            viewString.Append("kStandards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCod");
            viewString.Append("e, T1.StockItem_OrganisationId, T1.StockItem_ThresholdLevel, T1.StockItem_Thresh");
            viewString.Append("oldProductionQuantity, T1.StockItem_isAllowBackOrder, T1.StockItem_IsImperical)\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.StockItemId AS StockItem_StockItemId");
            viewString.Append(", \r\n            T.ItemCode AS StockItem_ItemCode, \r\n            T.ItemName AS St");
            viewString.Append("ockItem_ItemName, \r\n            T.AlternateName AS StockItem_AlternateName, \r\n  ");
            viewString.Append("          T.ItemWeight AS StockItem_ItemWeight, \r\n            T.ItemColour AS St");
            viewString.Append("ockItem_ItemColour, \r\n            T.ItemSizeCustom AS StockItem_ItemSizeCustom, ");
            viewString.Append("\r\n            T.ItemSizeId AS StockItem_ItemSizeId, \r\n            T.ItemSizeHeig");
            viewString.Append("ht AS StockItem_ItemSizeHeight, \r\n            T.ItemSizeWidth AS StockItem_ItemS");
            viewString.Append("izeWidth, \r\n            T.ItemSizeDim AS StockItem_ItemSizeDim, \r\n            T.");
            viewString.Append("ItemUnitSize AS StockItem_ItemUnitSize, \r\n            T.SupplierId AS StockItem_");
            viewString.Append("SupplierId, \r\n            T.CostPrice AS StockItem_CostPrice, \r\n            T.Ca");
            viewString.Append("tegoryId AS StockItem_CategoryId, \r\n            T.SubCategoryId AS StockItem_Sub");
            viewString.Append("CategoryId, \r\n            T.LastModifiedDateTime AS StockItem_LastModifiedDateTi");
            viewString.Append("me, \r\n            T.LastModifiedBy AS StockItem_LastModifiedBy, \r\n            T.");
            viewString.Append("StockLevel AS StockItem_StockLevel, \r\n            T.PackageQty AS StockItem_Pack");
            viewString.Append("ageQty, \r\n            T.Status AS StockItem_Status, \r\n            T.ReOrderLevel");
            viewString.Append(" AS StockItem_ReOrderLevel, \r\n            T.StockLocation AS StockItem_StockLoca");
            viewString.Append("tion, \r\n            T.ItemCoatedType AS StockItem_ItemCoatedType, \r\n            ");
            viewString.Append("T.ItemExposure AS StockItem_ItemExposure, \r\n            T.ItemExposureTime AS St");
            viewString.Append("ockItem_ItemExposureTime, \r\n            T.ItemProcessingCharge AS StockItem_Item");
            viewString.Append("ProcessingCharge, \r\n            T.ItemType AS StockItem_ItemType, \r\n            ");
            viewString.Append("T.StockCreated AS StockItem_StockCreated, \r\n            T.PerQtyRate AS StockIte");
            viewString.Append("m_PerQtyRate, \r\n            T.PerQtyQty AS StockItem_PerQtyQty, \r\n            T.");
            viewString.Append("ItemDescription AS StockItem_ItemDescription, \r\n            T.LockedBy AS StockI");
            viewString.Append("tem_LockedBy, \r\n            T.ReorderQty AS StockItem_ReorderQty, \r\n            ");
            viewString.Append("T.LastOrderQty AS StockItem_LastOrderQty, \r\n            T.LastOrderDate AS Stock");
            viewString.Append("Item_LastOrderDate, \r\n            T.inStock AS StockItem_inStock, \r\n            ");
            viewString.Append("T.onOrder AS StockItem_onOrder, \r\n            T.Allocated AS StockItem_Allocated");
            viewString.Append(", \r\n            T.TaxID AS StockItem_TaxID, \r\n            T.unitRate AS StockIte");
            viewString.Append("m_unitRate, \r\n            T.ItemCoated AS StockItem_ItemCoated, \r\n            T.");
            viewString.Append("ItemSizeSelectedUnit AS StockItem_ItemSizeSelectedUnit, \r\n            T.ItemWeig");
            viewString.Append("htSelectedUnit AS StockItem_ItemWeightSelectedUnit, \r\n            T.FlagID AS St");
            viewString.Append("ockItem_FlagID, \r\n            T.InkAbsorption AS StockItem_InkAbsorption, \r\n    ");
            viewString.Append("        T.WashupCounter AS StockItem_WashupCounter, \r\n            T.InkYield AS ");
            viewString.Append("StockItem_InkYield, \r\n            T.PaperBasicAreaId AS StockItem_PaperBasicArea");
            viewString.Append("Id, \r\n            T.PaperType AS StockItem_PaperType, \r\n            T.PerQtyType");
            viewString.Append(" AS StockItem_PerQtyType, \r\n            T.RollWidth AS StockItem_RollWidth, \r\n  ");
            viewString.Append("          T.RollLength AS StockItem_RollLength, \r\n            T.RollStandards AS");
            viewString.Append(" StockItem_RollStandards, \r\n            T.DepartmentId AS StockItem_DepartmentId");
            viewString.Append(", \r\n            T.InkYieldStandards AS StockItem_InkYieldStandards, \r\n          ");
            viewString.Append("  T.PerQtyPrice AS StockItem_PerQtyPrice, \r\n            T.PackPrice AS StockItem");
            viewString.Append("_PackPrice, \r\n            T.Region AS StockItem_Region, \r\n            T.isDisabl");
            viewString.Append("ed AS StockItem_isDisabled, \r\n            T.InkStandards AS StockItem_InkStandar");
            viewString.Append("ds, \r\n            T.BarCode AS StockItem_BarCode, \r\n            T.Image AS Stock");
            viewString.Append("Item_Image, \r\n            T.XeroAccessCode AS StockItem_XeroAccessCode, \r\n      ");
            viewString.Append("      T.OrganisationId AS StockItem_OrganisationId, \r\n            T.ThresholdLev");
            viewString.Append("el AS StockItem_ThresholdLevel, \r\n            T.ThresholdProductionQuantity AS S");
            viewString.Append("tockItem_ThresholdProductionQuantity, \r\n            T.isAllowBackOrder AS StockI");
            viewString.Append("tem_isAllowBackOrder, \r\n            T.IsImperical AS StockItem_IsImperical, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM BaseDbContext.StockItems AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StockItem", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PageCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PageCategory", @"
    SELECT VALUE -- Constructing PageCategory
        [DomainModels.Store.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM BaseDbContext.PageCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Section
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Section", @"
    SELECT VALUE -- Constructing Section
        [DomainModels.Store.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            True AS _from0
        FROM BaseDbContext.Sections AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionFlag
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionFlag", @"
    SELECT VALUE -- Constructing SectionFlag
        [DomainModels.Store.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_OrganisationId, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.OrganisationId AS SectionFlag_OrganisationId, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            True AS _from0
        FROM BaseDbContext.SectionFlags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.WeightUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.WeightUnit", @"
    SELECT VALUE -- Constructing WeightUnit
        [DomainModels.Store.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM BaseDbContext.WeightUnits AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyContact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8160);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CompanyContact\r\n        [DomainModels.Store.C");
            viewString.Append("ompanyContact](T1.CompanyContact_ContactId, T1.CompanyContact_AddressId, T1.Comp");
            viewString.Append("anyContact_CompanyId, T1.CompanyContact_FirstName, T1.CompanyContact_MiddleName,");
            viewString.Append(" T1.CompanyContact_LastName, T1.CompanyContact_Title, T1.CompanyContact_HomeTel1");
            viewString.Append(", T1.CompanyContact_HomeTel2, T1.CompanyContact_HomeExtension1, T1.CompanyContac");
            viewString.Append("t_HomeExtension2, T1.CompanyContact_Mobile, T1.CompanyContact_Email, T1.CompanyC");
            viewString.Append("ontact_FAX, T1.CompanyContact_JobTitle, T1.CompanyContact_DOB, T1.CompanyContact");
            viewString.Append("_Notes, T1.CompanyContact_IsDefaultContact, T1.CompanyContact_HomeAddress1, T1.C");
            viewString.Append("ompanyContact_HomeAddress2, T1.CompanyContact_HomeCity, T1.CompanyContact_HomeSt");
            viewString.Append("ate, T1.CompanyContact_HomePostCode, T1.CompanyContact_HomeCountry, T1.CompanyCo");
            viewString.Append("ntact_SecretQuestion, T1.CompanyContact_SecretAnswer, T1.CompanyContact_Password");
            viewString.Append(", T1.CompanyContact_URL, T1.CompanyContact_IsEmailSubscription, T1.CompanyContac");
            viewString.Append("t_IsNewsLetterSubscription, T1.CompanyContact_image, T1.CompanyContact_quickFull");
            viewString.Append("Name, T1.CompanyContact_quickTitle, T1.CompanyContact_quickCompanyName, T1.Compa");
            viewString.Append("nyContact_quickAddress1, T1.CompanyContact_quickAddress2, T1.CompanyContact_quic");
            viewString.Append("kAddress3, T1.CompanyContact_quickPhone, T1.CompanyContact_quickFax, T1.CompanyC");
            viewString.Append("ontact_quickEmail, T1.CompanyContact_quickWebsite, T1.CompanyContact_quickCompMe");
            viewString.Append("ssage, T1.CompanyContact_QuestionId, T1.CompanyContact_IsApprover, T1.CompanyCon");
            viewString.Append("tact_isWebAccess, T1.CompanyContact_isPlaceOrder, T1.CompanyContact_CreditLimit,");
            viewString.Append(" T1.CompanyContact_isArchived, T1.CompanyContact_ContactRoleId, T1.CompanyContac");
            viewString.Append("t_TerritoryId, T1.CompanyContact_ClaimIdentifer, T1.CompanyContact_AuthentifiedB");
            viewString.Append("y, T1.CompanyContact_IsPayByPersonalCreditCard, T1.CompanyContact_IsPricingshown");
            viewString.Append(", T1.CompanyContact_SkypeId, T1.CompanyContact_LinkedinURL, T1.CompanyContact_Fa");
            viewString.Append("cebookURL, T1.CompanyContact_TwitterURL, T1.CompanyContact_authenticationToken, ");
            viewString.Append("T1.CompanyContact_twitterScreenName, T1.CompanyContact_ShippingAddressId, T1.Com");
            viewString.Append("panyContact_isUserLoginFirstTime, T1.CompanyContact_quickMobileNumber, T1.Compan");
            viewString.Append("yContact_quickTwitterId, T1.CompanyContact_quickFacebookId, T1.CompanyContact_qu");
            viewString.Append("ickLinkedInId, T1.CompanyContact_quickOtherId, T1.CompanyContact_POBoxAddress, T");
            viewString.Append("1.CompanyContact_CorporateUnit, T1.CompanyContact_OfficeTradingName, T1.CompanyC");
            viewString.Append("ontact_ContractorName, T1.CompanyContact_BPayCRN, T1.CompanyContact_ABN, T1.Comp");
            viewString.Append("anyContact_ACN, T1.CompanyContact_AdditionalField1, T1.CompanyContact_Additional");
            viewString.Append("Field2, T1.CompanyContact_AdditionalField3, T1.CompanyContact_AdditionalField4, ");
            viewString.Append("T1.CompanyContact_AdditionalField5, T1.CompanyContact_canUserPlaceOrderWithoutAp");
            viewString.Append("proval, T1.CompanyContact_CanUserEditProfile, T1.CompanyContact_canPlaceDirectOr");
            viewString.Append("der, T1.CompanyContact_OrganisationId, T1.CompanyContact_SecondaryEmail, T1.Comp");
            viewString.Append("anyContact_RegistrationDate)\r\n    FROM (\r\n        SELECT \r\n            T.Contact");
            viewString.Append("Id AS CompanyContact_ContactId, \r\n            T.AddressId AS CompanyContact_Addr");
            viewString.Append("essId, \r\n            T.CompanyId AS CompanyContact_CompanyId, \r\n            T.Fi");
            viewString.Append("rstName AS CompanyContact_FirstName, \r\n            T.MiddleName AS CompanyContac");
            viewString.Append("t_MiddleName, \r\n            T.LastName AS CompanyContact_LastName, \r\n           ");
            viewString.Append(" T.Title AS CompanyContact_Title, \r\n            T.HomeTel1 AS CompanyContact_Hom");
            viewString.Append("eTel1, \r\n            T.HomeTel2 AS CompanyContact_HomeTel2, \r\n            T.Home");
            viewString.Append("Extension1 AS CompanyContact_HomeExtension1, \r\n            T.HomeExtension2 AS C");
            viewString.Append("ompanyContact_HomeExtension2, \r\n            T.Mobile AS CompanyContact_Mobile, \r");
            viewString.Append("\n            T.Email AS CompanyContact_Email, \r\n            T.FAX AS CompanyCont");
            viewString.Append("act_FAX, \r\n            T.JobTitle AS CompanyContact_JobTitle, \r\n            T.DO");
            viewString.Append("B AS CompanyContact_DOB, \r\n            T.Notes AS CompanyContact_Notes, \r\n      ");
            viewString.Append("      T.IsDefaultContact AS CompanyContact_IsDefaultContact, \r\n            T.Hom");
            viewString.Append("eAddress1 AS CompanyContact_HomeAddress1, \r\n            T.HomeAddress2 AS Compan");
            viewString.Append("yContact_HomeAddress2, \r\n            T.HomeCity AS CompanyContact_HomeCity, \r\n  ");
            viewString.Append("          T.HomeState AS CompanyContact_HomeState, \r\n            T.HomePostCode ");
            viewString.Append("AS CompanyContact_HomePostCode, \r\n            T.HomeCountry AS CompanyContact_Ho");
            viewString.Append("meCountry, \r\n            T.SecretQuestion AS CompanyContact_SecretQuestion, \r\n  ");
            viewString.Append("          T.SecretAnswer AS CompanyContact_SecretAnswer, \r\n            T.Passwor");
            viewString.Append("d AS CompanyContact_Password, \r\n            T.URL AS CompanyContact_URL, \r\n     ");
            viewString.Append("       T.IsEmailSubscription AS CompanyContact_IsEmailSubscription, \r\n          ");
            viewString.Append("  T.IsNewsLetterSubscription AS CompanyContact_IsNewsLetterSubscription, \r\n     ");
            viewString.Append("       T.image AS CompanyContact_image, \r\n            T.quickFullName AS Company");
            viewString.Append("Contact_quickFullName, \r\n            T.quickTitle AS CompanyContact_quickTitle, ");
            viewString.Append("\r\n            T.quickCompanyName AS CompanyContact_quickCompanyName, \r\n         ");
            viewString.Append("   T.quickAddress1 AS CompanyContact_quickAddress1, \r\n            T.quickAddress");
            viewString.Append("2 AS CompanyContact_quickAddress2, \r\n            T.quickAddress3 AS CompanyConta");
            viewString.Append("ct_quickAddress3, \r\n            T.quickPhone AS CompanyContact_quickPhone, \r\n   ");
            viewString.Append("         T.quickFax AS CompanyContact_quickFax, \r\n            T.quickEmail AS Co");
            viewString.Append("mpanyContact_quickEmail, \r\n            T.quickWebsite AS CompanyContact_quickWeb");
            viewString.Append("site, \r\n            T.quickCompMessage AS CompanyContact_quickCompMessage, \r\n   ");
            viewString.Append("         T.QuestionId AS CompanyContact_QuestionId, \r\n            T.IsApprover A");
            viewString.Append("S CompanyContact_IsApprover, \r\n            T.isWebAccess AS CompanyContact_isWeb");
            viewString.Append("Access, \r\n            T.isPlaceOrder AS CompanyContact_isPlaceOrder, \r\n         ");
            viewString.Append("   T.CreditLimit AS CompanyContact_CreditLimit, \r\n            T.isArchived AS Co");
            viewString.Append("mpanyContact_isArchived, \r\n            T.ContactRoleId AS CompanyContact_Contact");
            viewString.Append("RoleId, \r\n            T.TerritoryId AS CompanyContact_TerritoryId, \r\n           ");
            viewString.Append(" T.ClaimIdentifer AS CompanyContact_ClaimIdentifer, \r\n            T.Authentified");
            viewString.Append("By AS CompanyContact_AuthentifiedBy, \r\n            T.IsPayByPersonalCreditCard A");
            viewString.Append("S CompanyContact_IsPayByPersonalCreditCard, \r\n            T.IsPricingshown AS Co");
            viewString.Append("mpanyContact_IsPricingshown, \r\n            T.SkypeId AS CompanyContact_SkypeId, ");
            viewString.Append("\r\n            T.LinkedinURL AS CompanyContact_LinkedinURL, \r\n            T.Faceb");
            viewString.Append("ookURL AS CompanyContact_FacebookURL, \r\n            T.TwitterURL AS CompanyConta");
            viewString.Append("ct_TwitterURL, \r\n            T.authenticationToken AS CompanyContact_authenticat");
            viewString.Append("ionToken, \r\n            T.twitterScreenName AS CompanyContact_twitterScreenName,");
            viewString.Append(" \r\n            T.ShippingAddressId AS CompanyContact_ShippingAddressId, \r\n      ");
            viewString.Append("      T.isUserLoginFirstTime AS CompanyContact_isUserLoginFirstTime, \r\n         ");
            viewString.Append("   T.quickMobileNumber AS CompanyContact_quickMobileNumber, \r\n            T.quic");
            viewString.Append("kTwitterId AS CompanyContact_quickTwitterId, \r\n            T.quickFacebookId AS ");
            viewString.Append("CompanyContact_quickFacebookId, \r\n            T.quickLinkedInId AS CompanyContac");
            viewString.Append("t_quickLinkedInId, \r\n            T.quickOtherId AS CompanyContact_quickOtherId, ");
            viewString.Append("\r\n            T.POBoxAddress AS CompanyContact_POBoxAddress, \r\n            T.Cor");
            viewString.Append("porateUnit AS CompanyContact_CorporateUnit, \r\n            T.OfficeTradingName AS");
            viewString.Append(" CompanyContact_OfficeTradingName, \r\n            T.ContractorName AS CompanyCont");
            viewString.Append("act_ContractorName, \r\n            T.BPayCRN AS CompanyContact_BPayCRN, \r\n       ");
            viewString.Append("     T.ABN AS CompanyContact_ABN, \r\n            T.ACN AS CompanyContact_ACN, \r\n ");
            viewString.Append("           T.AdditionalField1 AS CompanyContact_AdditionalField1, \r\n            ");
            viewString.Append("T.AdditionalField2 AS CompanyContact_AdditionalField2, \r\n            T.Additiona");
            viewString.Append("lField3 AS CompanyContact_AdditionalField3, \r\n            T.AdditionalField4 AS ");
            viewString.Append("CompanyContact_AdditionalField4, \r\n            T.AdditionalField5 AS CompanyCont");
            viewString.Append("act_AdditionalField5, \r\n            T.canUserPlaceOrderWithoutApproval AS Compan");
            viewString.Append("yContact_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS");
            viewString.Append(" CompanyContact_CanUserEditProfile, \r\n            T.canPlaceDirectOrder AS Compa");
            viewString.Append("nyContact_canPlaceDirectOrder, \r\n            T.OrganisationId AS CompanyContact_");
            viewString.Append("OrganisationId, \r\n            T.SecondaryEmail AS CompanyContact_SecondaryEmail,");
            viewString.Append(" \r\n            T.RegistrationDate AS CompanyContact_RegistrationDate, \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM BaseDbContext.CompanyContacts AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyContact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyContactRole
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyContactRole", @"
    SELECT VALUE -- Constructing CompanyContactRole
        [DomainModels.Store.CompanyContactRole](T1.CompanyContactRole_ContactRoleId, T1.CompanyContactRole_ContactRoleName)
    FROM (
        SELECT 
            T.ContactRoleId AS CompanyContactRole_ContactRoleId, 
            T.ContactRoleName AS CompanyContactRole_ContactRoleName, 
            True AS _from0
        FROM BaseDbContext.CompanyContactRoles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyTerritory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyTerritory", @"
    SELECT VALUE -- Constructing CompanyTerritory
        [DomainModels.Store.CompanyTerritory](T1.CompanyTerritory_TerritoryId, T1.CompanyTerritory_TerritoryName, T1.CompanyTerritory_CompanyId, T1.CompanyTerritory_TerritoryCode, T1.CompanyTerritory_isDefault)
    FROM (
        SELECT 
            T.TerritoryId AS CompanyTerritory_TerritoryId, 
            T.TerritoryName AS CompanyTerritory_TerritoryName, 
            T.CompanyId AS CompanyTerritory_CompanyId, 
            T.TerritoryCode AS CompanyTerritory_TerritoryCode, 
            T.isDefault AS CompanyTerritory_isDefault, 
            True AS _from0
        FROM BaseDbContext.CompanyTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyType", @"
    SELECT VALUE -- Constructing CompanyType
        [DomainModels.Store.CompanyType](T1.CompanyType_TypeId, T1.CompanyType_IsFixed, T1.CompanyType_TypeName)
    FROM (
        SELECT 
            T.TypeId AS CompanyType_TypeId, 
            T.IsFixed AS CompanyType_IsFixed, 
            T.TypeName AS CompanyType_TypeName, 
            True AS _from0
        FROM BaseDbContext.CompanyTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(12548);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CostCentre\r\n        [DomainModels.Store.CostC");
            viewString.Append("entre](T1.CostCentre_CostCentreId, T1.CostCentre_Name, T1.CostCentre_Description");
            viewString.Append(", T1.CostCentre_Type, T1.CostCentre_CreatedBy, T1.CostCentre_LockedBy, T1.CostCe");
            viewString.Append("ntre_LastModifiedBy, T1.CostCentre_MinimumCost, T1.CostCentre_SetupCost, T1.Cost");
            viewString.Append("Centre_SetupTime, T1.CostCentre_DefaultVA, T1.CostCentre_DefaultVAId, T1.CostCen");
            viewString.Append("tre_OverHeadRate, T1.CostCentre_HourlyCharge, T1.CostCentre_CostPerThousand, T1.");
            viewString.Append("CostCentre_CreationDate, T1.CostCentre_LastModifiedDate, T1.CostCentre_Preferred");
            viewString.Append("SupplierId, T1.CostCentre_CodeFileName, T1.CostCentre_nominalCode, T1.CostCentre");
            viewString.Append("_CompletionTime, T1.CostCentre_HeaderCode, T1.CostCentre_MiddleCode, T1.CostCent");
            viewString.Append("re_FooterCode, T1.CostCentre_strCostPlantParsed, T1.CostCentre_strCostPlantUnPar");
            viewString.Append("sed, T1.CostCentre_strCostLabourParsed, T1.CostCentre_strCostLabourUnParsed, T1.");
            viewString.Append("CostCentre_strCostMaterialParsed, T1.CostCentre_strCostMaterialUnParsed, T1.Cost");
            viewString.Append("Centre_strPricePlantParsed, T1.CostCentre_strPricePlantUnParsed, T1.CostCentre_s");
            viewString.Append("trPriceLabourParsed, T1.CostCentre_strPriceLabourUnParsed, T1.CostCentre_strPric");
            viewString.Append("eMaterialParsed, T1.CostCentre_strPriceMaterialUnParsed, T1.CostCentre_strActual");
            viewString.Append("CostPlantParsed, T1.CostCentre_strActualCostPlantUnParsed, T1.CostCentre_strActu");
            viewString.Append("alCostLabourParsed, T1.CostCentre_strActualCostLabourUnParsed, T1.CostCentre_str");
            viewString.Append("ActualCostMaterialParsed, T1.CostCentre_strActualCostMaterialUnParsed, T1.CostCe");
            viewString.Append("ntre_strTimeParsed, T1.CostCentre_strTimeUnParsed, T1.CostCentre_IsDisabled, T1.");
            viewString.Append("CostCentre_IsDirectCost, T1.CostCentre_SetupSpoilage, T1.CostCentre_RunningSpoil");
            viewString.Append("age, T1.CostCentre_CalculationMethodType, T1.CostCentre_NoOfHours, T1.CostCentre");
            viewString.Append("_PerHourCost, T1.CostCentre_PerHourPrice, T1.CostCentre_UnitQuantity, T1.CostCen");
            viewString.Append("tre_QuantitySourceType, T1.CostCentre_QuantityVariableId, T1.CostCentre_Quantity");
            viewString.Append("QuestionString, T1.CostCentre_QuantityQuestionDefaultValue, T1.CostCentre_Quanti");
            viewString.Append("tyCalculationString, T1.CostCentre_CostPerUnitQuantity, T1.CostCentre_PricePerUn");
            viewString.Append("itQuantity, T1.CostCentre_TimePerUnitQuantity, T1.CostCentre_TimeRunSpeed, T1.Co");
            viewString.Append("stCentre_TimeNoOfPasses, T1.CostCentre_TimeSourceType, T1.CostCentre_TimeVariabl");
            viewString.Append("eId, T1.CostCentre_TimeQuestionString, T1.CostCentre_TimeQuestionDefaultValue, T");
            viewString.Append("1.CostCentre_TimeCalculationString, T1.CostCentre_Priority, T1.CostCentre_CostQu");
            viewString.Append("estionString, T1.CostCentre_CostDefaultValue, T1.CostCentre_PriceQuestionString,");
            viewString.Append(" T1.CostCentre_PriceDefaultValue, T1.CostCentre_EstimatedTimeQuestionString, T1.");
            viewString.Append("CostCentre_EstimatedTimeDefaultValue, T1.CostCentre_Sequence, T1.CostCentre_Comp");
            viewString.Append("leteCode, T1.CostCentre_ItemDescription, T1.CostCentre_SystemTypeId, T1.CostCent");
            viewString.Append("re_FlagId, T1.CostCentre_IsScheduleable, T1.CostCentre_SystemSiteId, T1.CostCent");
            viewString.Append("re_IsPrintOnJobCard, T1.CostCentre_WebStoreDesc, T1.CostCentre_isPublished, T1.C");
            viewString.Append("ostCentre_EstimateProductionTime, T1.CostCentre_MainImageURL, T1.CostCentre_Thum");
            viewString.Append("bnailImageURL, T1.CostCentre_isOption1, T1.CostCentre_isOption2, T1.CostCentre_i");
            viewString.Append("sOption3, T1.CostCentre_TextOption1, T1.CostCentre_TextOption2, T1.CostCentre_Te");
            viewString.Append("xtOption3, T1.CostCentre_CCIDOption1, T1.CostCentre_CCIDOption2, T1.CostCentre_C");
            viewString.Append("CIDOption3, T1.CostCentre_SetupCharge2, T1.CostCentre_SetupCharge3, T1.CostCentr");
            viewString.Append("e_MinimumCost2, T1.CostCentre_MinimumCost3, T1.CostCentre_PricePerUnitQuantity2,");
            viewString.Append(" T1.CostCentre_PricePerUnitQuantity3, T1.CostCentre_QuantityVariableID2, T1.Cost");
            viewString.Append("Centre_QuantityVariableID3, T1.CostCentre_QuantitySourceType2, T1.CostCentre_Qua");
            viewString.Append("ntitySourceType3, T1.CostCentre_QuantityQuestionString2, T1.CostCentre_QuantityQ");
            viewString.Append("uestionString3, T1.CostCentre_QuantityQuestionDefaultValue2, T1.CostCentre_Quant");
            viewString.Append("ityQuestionDefaultValue3, T1.CostCentre_DefaultVAId2, T1.CostCentre_DefaultVAId3");
            viewString.Append(", T1.CostCentre_IsPrintOnJobCard2, T1.CostCentre_IsPrintOnJobCard3, T1.CostCentr");
            viewString.Append("e_IsDirectCost2, T1.CostCentre_IsDirectCost3, T1.CostCentre_PreferredSupplierID2");
            viewString.Append(", T1.CostCentre_PreferredSupplierID3, T1.CostCentre_EstimateProductionTime2, T1.");
            viewString.Append("CostCentre_EstimateProductionTime3, T1.CostCentre_DeliveryCharges, T1.CostCentre");
            viewString.Append("_isFromMIS, T1.CostCentre_XeroAccessCode, T1.CostCentre_OrganisationId, T1.CostC");
            viewString.Append("entre_DeliveryType, T1.CostCentre_DeliveryServiceType, T1.CostCentre_CarrierId)\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.CostCentreId AS CostCentre_CostCentr");
            viewString.Append("eId, \r\n            T.Name AS CostCentre_Name, \r\n            T.Description AS Cos");
            viewString.Append("tCentre_Description, \r\n            T.Type AS CostCentre_Type, \r\n            T.Cr");
            viewString.Append("eatedBy AS CostCentre_CreatedBy, \r\n            T.LockedBy AS CostCentre_LockedBy");
            viewString.Append(", \r\n            T.LastModifiedBy AS CostCentre_LastModifiedBy, \r\n            T.M");
            viewString.Append("inimumCost AS CostCentre_MinimumCost, \r\n            T.SetupCost AS CostCentre_Se");
            viewString.Append("tupCost, \r\n            T.SetupTime AS CostCentre_SetupTime, \r\n            T.Defa");
            viewString.Append("ultVA AS CostCentre_DefaultVA, \r\n            T.DefaultVAId AS CostCentre_Default");
            viewString.Append("VAId, \r\n            T.OverHeadRate AS CostCentre_OverHeadRate, \r\n            T.H");
            viewString.Append("ourlyCharge AS CostCentre_HourlyCharge, \r\n            T.CostPerThousand AS CostC");
            viewString.Append("entre_CostPerThousand, \r\n            T.CreationDate AS CostCentre_CreationDate, ");
            viewString.Append("\r\n            T.LastModifiedDate AS CostCentre_LastModifiedDate, \r\n            T");
            viewString.Append(".PreferredSupplierId AS CostCentre_PreferredSupplierId, \r\n            T.CodeFile");
            viewString.Append("Name AS CostCentre_CodeFileName, \r\n            T.nominalCode AS CostCentre_nomin");
            viewString.Append("alCode, \r\n            T.CompletionTime AS CostCentre_CompletionTime, \r\n         ");
            viewString.Append("   T.HeaderCode AS CostCentre_HeaderCode, \r\n            T.MiddleCode AS CostCent");
            viewString.Append("re_MiddleCode, \r\n            T.FooterCode AS CostCentre_FooterCode, \r\n          ");
            viewString.Append("  T.strCostPlantParsed AS CostCentre_strCostPlantParsed, \r\n            T.strCost");
            viewString.Append("PlantUnParsed AS CostCentre_strCostPlantUnParsed, \r\n            T.strCostLabourP");
            viewString.Append("arsed AS CostCentre_strCostLabourParsed, \r\n            T.strCostLabourUnParsed A");
            viewString.Append("S CostCentre_strCostLabourUnParsed, \r\n            T.strCostMaterialParsed AS Cos");
            viewString.Append("tCentre_strCostMaterialParsed, \r\n            T.strCostMaterialUnParsed AS CostCe");
            viewString.Append("ntre_strCostMaterialUnParsed, \r\n            T.strPricePlantParsed AS CostCentre_");
            viewString.Append("strPricePlantParsed, \r\n            T.strPricePlantUnParsed AS CostCentre_strPric");
            viewString.Append("ePlantUnParsed, \r\n            T.strPriceLabourParsed AS CostCentre_strPriceLabou");
            viewString.Append("rParsed, \r\n            T.strPriceLabourUnParsed AS CostCentre_strPriceLabourUnPa");
            viewString.Append("rsed, \r\n            T.strPriceMaterialParsed AS CostCentre_strPriceMaterialParse");
            viewString.Append("d, \r\n            T.strPriceMaterialUnParsed AS CostCentre_strPriceMaterialUnPars");
            viewString.Append("ed, \r\n            T.strActualCostPlantParsed AS CostCentre_strActualCostPlantPar");
            viewString.Append("sed, \r\n            T.strActualCostPlantUnParsed AS CostCentre_strActualCostPlant");
            viewString.Append("UnParsed, \r\n            T.strActualCostLabourParsed AS CostCentre_strActualCostL");
            viewString.Append("abourParsed, \r\n            T.strActualCostLabourUnParsed AS CostCentre_strActual");
            viewString.Append("CostLabourUnParsed, \r\n            T.strActualCostMaterialParsed AS CostCentre_st");
            viewString.Append("rActualCostMaterialParsed, \r\n            T.strActualCostMaterialUnParsed AS Cost");
            viewString.Append("Centre_strActualCostMaterialUnParsed, \r\n            T.strTimeParsed AS CostCentr");
            viewString.Append("e_strTimeParsed, \r\n            T.strTimeUnParsed AS CostCentre_strTimeUnParsed, ");
            viewString.Append("\r\n            T.IsDisabled AS CostCentre_IsDisabled, \r\n            T.IsDirectCos");
            viewString.Append("t AS CostCentre_IsDirectCost, \r\n            T.SetupSpoilage AS CostCentre_SetupS");
            viewString.Append("poilage, \r\n            T.RunningSpoilage AS CostCentre_RunningSpoilage, \r\n      ");
            viewString.Append("      T.CalculationMethodType AS CostCentre_CalculationMethodType, \r\n           ");
            viewString.Append(" T.NoOfHours AS CostCentre_NoOfHours, \r\n            T.PerHourCost AS CostCentre_");
            viewString.Append("PerHourCost, \r\n            T.PerHourPrice AS CostCentre_PerHourPrice, \r\n        ");
            viewString.Append("    T.UnitQuantity AS CostCentre_UnitQuantity, \r\n            T.QuantitySourceTyp");
            viewString.Append("e AS CostCentre_QuantitySourceType, \r\n            T.QuantityVariableId AS CostCe");
            viewString.Append("ntre_QuantityVariableId, \r\n            T.QuantityQuestionString AS CostCentre_Qu");
            viewString.Append("antityQuestionString, \r\n            T.QuantityQuestionDefaultValue AS CostCentre");
            viewString.Append("_QuantityQuestionDefaultValue, \r\n            T.QuantityCalculationString AS Cost");
            viewString.Append("Centre_QuantityCalculationString, \r\n            T.CostPerUnitQuantity AS CostCen");
            viewString.Append("tre_CostPerUnitQuantity, \r\n            T.PricePerUnitQuantity AS CostCentre_Pric");
            viewString.Append("ePerUnitQuantity, \r\n            T.TimePerUnitQuantity AS CostCentre_TimePerUnitQ");
            viewString.Append("uantity, \r\n            T.TimeRunSpeed AS CostCentre_TimeRunSpeed, \r\n            ");
            viewString.Append("T.TimeNoOfPasses AS CostCentre_TimeNoOfPasses, \r\n            T.TimeSourceType AS");
            viewString.Append(" CostCentre_TimeSourceType, \r\n            T.TimeVariableId AS CostCentre_TimeVar");
            viewString.Append("iableId, \r\n            T.TimeQuestionString AS CostCentre_TimeQuestionString, \r\n");
            viewString.Append("            T.TimeQuestionDefaultValue AS CostCentre_TimeQuestionDefaultValue, \r");
            viewString.Append("\n            T.TimeCalculationString AS CostCentre_TimeCalculationString, \r\n    ");
            viewString.Append("        T.Priority AS CostCentre_Priority, \r\n            T.CostQuestionString AS");
            viewString.Append(" CostCentre_CostQuestionString, \r\n            T.CostDefaultValue AS CostCentre_C");
            viewString.Append("ostDefaultValue, \r\n            T.PriceQuestionString AS CostCentre_PriceQuestion");
            viewString.Append("String, \r\n            T.PriceDefaultValue AS CostCentre_PriceDefaultValue, \r\n   ");
            viewString.Append("         T.EstimatedTimeQuestionString AS CostCentre_EstimatedTimeQuestionString");
            viewString.Append(", \r\n            T.EstimatedTimeDefaultValue AS CostCentre_EstimatedTimeDefaultVa");
            viewString.Append("lue, \r\n            T.Sequence AS CostCentre_Sequence, \r\n            T.CompleteCo");
            viewString.Append("de AS CostCentre_CompleteCode, \r\n            T.ItemDescription AS CostCentre_Ite");
            viewString.Append("mDescription, \r\n            T.SystemTypeId AS CostCentre_SystemTypeId, \r\n       ");
            viewString.Append("     T.FlagId AS CostCentre_FlagId, \r\n            T.IsScheduleable AS CostCentre");
            viewString.Append("_IsScheduleable, \r\n            T.SystemSiteId AS CostCentre_SystemSiteId, \r\n    ");
            viewString.Append("        T.IsPrintOnJobCard AS CostCentre_IsPrintOnJobCard, \r\n            T.WebSt");
            viewString.Append("oreDesc AS CostCentre_WebStoreDesc, \r\n            T.isPublished AS CostCentre_is");
            viewString.Append("Published, \r\n            T.EstimateProductionTime AS CostCentre_EstimateProducti");
            viewString.Append("onTime, \r\n            T.MainImageURL AS CostCentre_MainImageURL, \r\n            T");
            viewString.Append(".ThumbnailImageURL AS CostCentre_ThumbnailImageURL, \r\n            T.isOption1 AS");
            viewString.Append(" CostCentre_isOption1, \r\n            T.isOption2 AS CostCentre_isOption2, \r\n    ");
            viewString.Append("        T.isOption3 AS CostCentre_isOption3, \r\n            T.TextOption1 AS Cost");
            viewString.Append("Centre_TextOption1, \r\n            T.TextOption2 AS CostCentre_TextOption2, \r\n   ");
            viewString.Append("         T.TextOption3 AS CostCentre_TextOption3, \r\n            T.CCIDOption1 AS");
            viewString.Append(" CostCentre_CCIDOption1, \r\n            T.CCIDOption2 AS CostCentre_CCIDOption2, ");
            viewString.Append("\r\n            T.CCIDOption3 AS CostCentre_CCIDOption3, \r\n            T.SetupChar");
            viewString.Append("ge2 AS CostCentre_SetupCharge2, \r\n            T.SetupCharge3 AS CostCentre_Setup");
            viewString.Append("Charge3, \r\n            T.MinimumCost2 AS CostCentre_MinimumCost2, \r\n            ");
            viewString.Append("T.MinimumCost3 AS CostCentre_MinimumCost3, \r\n            T.PricePerUnitQuantity2");
            viewString.Append(" AS CostCentre_PricePerUnitQuantity2, \r\n            T.PricePerUnitQuantity3 AS C");
            viewString.Append("ostCentre_PricePerUnitQuantity3, \r\n            T.QuantityVariableID2 AS CostCent");
            viewString.Append("re_QuantityVariableID2, \r\n            T.QuantityVariableID3 AS CostCentre_Quanti");
            viewString.Append("tyVariableID3, \r\n            T.QuantitySourceType2 AS CostCentre_QuantitySourceT");
            viewString.Append("ype2, \r\n            T.QuantitySourceType3 AS CostCentre_QuantitySourceType3, \r\n ");
            viewString.Append("           T.QuantityQuestionString2 AS CostCentre_QuantityQuestionString2, \r\n  ");
            viewString.Append("          T.QuantityQuestionString3 AS CostCentre_QuantityQuestionString3, \r\n   ");
            viewString.Append("         T.QuantityQuestionDefaultValue2 AS CostCentre_QuantityQuestionDefaultVa");
            viewString.Append("lue2, \r\n            T.QuantityQuestionDefaultValue3 AS CostCentre_QuantityQuesti");
            viewString.Append("onDefaultValue3, \r\n            T.DefaultVAId2 AS CostCentre_DefaultVAId2, \r\n    ");
            viewString.Append("        T.DefaultVAId3 AS CostCentre_DefaultVAId3, \r\n            T.IsPrintOnJobC");
            viewString.Append("ard2 AS CostCentre_IsPrintOnJobCard2, \r\n            T.IsPrintOnJobCard3 AS CostC");
            viewString.Append("entre_IsPrintOnJobCard3, \r\n            T.IsDirectCost2 AS CostCentre_IsDirectCos");
            viewString.Append("t2, \r\n            T.IsDirectCost3 AS CostCentre_IsDirectCost3, \r\n            T.P");
            viewString.Append("referredSupplierID2 AS CostCentre_PreferredSupplierID2, \r\n            T.Preferre");
            viewString.Append("dSupplierID3 AS CostCentre_PreferredSupplierID3, \r\n            T.EstimateProduct");
            viewString.Append("ionTime2 AS CostCentre_EstimateProductionTime2, \r\n            T.EstimateProducti");
            viewString.Append("onTime3 AS CostCentre_EstimateProductionTime3, \r\n            T.DeliveryCharges A");
            viewString.Append("S CostCentre_DeliveryCharges, \r\n            T.isFromMIS AS CostCentre_isFromMIS,");
            viewString.Append(" \r\n            T.XeroAccessCode AS CostCentre_XeroAccessCode, \r\n            T.Or");
            viewString.Append("ganisationId AS CostCentre_OrganisationId, \r\n            T.DeliveryType AS CostC");
            viewString.Append("entre_DeliveryType, \r\n            T.DeliveryServiceType AS CostCentre_DeliverySe");
            viewString.Append("rviceType, \r\n            T.CarrierId AS CostCentre_CarrierId, \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM BaseDbContext.CostCentres AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentre", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemAttachment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemAttachment", "\r\n    SELECT VALUE -- Constructing ItemAttachment\r\n        [DomainModels.Store.It" +
                    "emAttachment](T1.ItemAttachment_ItemAttachmentId, T1.ItemAttachment_FileTitle, T" +
                    "1.ItemAttachment_isFromCustomer, T1.ItemAttachment_CompanyId, T1.ItemAttachment_" +
                    "ContactId, T1.ItemAttachment_SystemUserId, T1.ItemAttachment_UploadDate, T1.Item" +
                    "Attachment_UploadTime, T1.ItemAttachment_Version, T1.ItemAttachment_ItemId, T1.I" +
                    "temAttachment_Comments, T1.ItemAttachment_Type, T1.ItemAttachment_IsApproved, T1" +
                    ".ItemAttachment_FileName, T1.ItemAttachment_FolderPath, T1.ItemAttachment_FileTy" +
                    "pe, T1.ItemAttachment_ContentType, T1.ItemAttachment_Parent, T1.ItemAttachment_A" +
                    "pproveDate)\r\n    FROM (\r\n        SELECT \r\n            T.ItemAttachmentId AS Item" +
                    "Attachment_ItemAttachmentId, \r\n            T.FileTitle AS ItemAttachment_FileTit" +
                    "le, \r\n            T.isFromCustomer AS ItemAttachment_isFromCustomer, \r\n         " +
                    "   T.CompanyId AS ItemAttachment_CompanyId, \r\n            T.ContactId AS ItemAtt" +
                    "achment_ContactId, \r\n            T.SystemUserId AS ItemAttachment_SystemUserId, " +
                    "\r\n            T.UploadDate AS ItemAttachment_UploadDate, \r\n            T.UploadT" +
                    "ime AS ItemAttachment_UploadTime, \r\n            T.Version AS ItemAttachment_Vers" +
                    "ion, \r\n            T.ItemId AS ItemAttachment_ItemId, \r\n            T.Comments A" +
                    "S ItemAttachment_Comments, \r\n            T.Type AS ItemAttachment_Type, \r\n      " +
                    "      T.IsApproved AS ItemAttachment_IsApproved, \r\n            T.FileName AS Ite" +
                    "mAttachment_FileName, \r\n            T.FolderPath AS ItemAttachment_FolderPath, \r" +
                    "\n            T.FileType AS ItemAttachment_FileType, \r\n            T.ContentType " +
                    "AS ItemAttachment_ContentType, \r\n            T.Parent AS ItemAttachment_Parent, " +
                    "\r\n            T.ApproveDate AS ItemAttachment_ApproveDate, \r\n            True AS" +
                    " _from0\r\n        FROM BaseDbContext.ItemAttachments AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemImage", @"
    SELECT VALUE -- Constructing ItemImage
        [DomainModels.Store.ItemImage](T1.ItemImage_ProductImageId, T1.ItemImage_ItemId, T1.ItemImage_ImageTitle, T1.ItemImage_ImageURL, T1.ItemImage_ImageType, T1.ItemImage_ImageName, T1.ItemImage_UploadDate)
    FROM (
        SELECT 
            T.ProductImageId AS ItemImage_ProductImageId, 
            T.ItemId AS ItemImage_ItemId, 
            T.ImageTitle AS ItemImage_ImageTitle, 
            T.ImageURL AS ItemImage_ImageURL, 
            T.ImageType AS ItemImage_ImageType, 
            T.ImageName AS ItemImage_ImageName, 
            T.UploadDate AS ItemImage_UploadDate, 
            True AS _from0
        FROM BaseDbContext.ItemImages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemPriceMatrix
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2156);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemPriceMatrix\r\n        [DomainModels.Store.");
            viewString.Append("ItemPriceMatrix](T1.ItemPriceMatrix_PriceMatrixId, T1.ItemPriceMatrix_Quantity, ");
            viewString.Append("T1.ItemPriceMatrix_Price, T1.ItemPriceMatrix_ItemId, T1.ItemPriceMatrix_PricePap");
            viewString.Append("erType1, T1.ItemPriceMatrix_PricePaperType2, T1.ItemPriceMatrix_PricePaperType3,");
            viewString.Append(" T1.ItemPriceMatrix_QtyRangeFrom, T1.ItemPriceMatrix_QtyRangeTo, T1.ItemPriceMat");
            viewString.Append("rix_SupplierId, T1.ItemPriceMatrix_PriceStockType4, T1.ItemPriceMatrix_PriceStoc");
            viewString.Append("kType5, T1.ItemPriceMatrix_PriceStockType6, T1.ItemPriceMatrix_PriceStockType7, ");
            viewString.Append("T1.ItemPriceMatrix_PriceStockType8, T1.ItemPriceMatrix_PriceStockType9, T1.ItemP");
            viewString.Append("riceMatrix_PriceStockType10, T1.ItemPriceMatrix_PriceStockType11, T1.ItemPriceMa");
            viewString.Append("trix_FlagId, T1.ItemPriceMatrix_SupplierSequence)\r\n    FROM (\r\n        SELECT \r\n");
            viewString.Append("            T.PriceMatrixId AS ItemPriceMatrix_PriceMatrixId, \r\n            T.Qu");
            viewString.Append("antity AS ItemPriceMatrix_Quantity, \r\n            T.Price AS ItemPriceMatrix_Pri");
            viewString.Append("ce, \r\n            T.ItemId AS ItemPriceMatrix_ItemId, \r\n            T.PricePaper");
            viewString.Append("Type1 AS ItemPriceMatrix_PricePaperType1, \r\n            T.PricePaperType2 AS Ite");
            viewString.Append("mPriceMatrix_PricePaperType2, \r\n            T.PricePaperType3 AS ItemPriceMatrix");
            viewString.Append("_PricePaperType3, \r\n            T.QtyRangeFrom AS ItemPriceMatrix_QtyRangeFrom, ");
            viewString.Append("\r\n            T.QtyRangeTo AS ItemPriceMatrix_QtyRangeTo, \r\n            T.Suppli");
            viewString.Append("erId AS ItemPriceMatrix_SupplierId, \r\n            T.PriceStockType4 AS ItemPrice");
            viewString.Append("Matrix_PriceStockType4, \r\n            T.PriceStockType5 AS ItemPriceMatrix_Price");
            viewString.Append("StockType5, \r\n            T.PriceStockType6 AS ItemPriceMatrix_PriceStockType6, ");
            viewString.Append("\r\n            T.PriceStockType7 AS ItemPriceMatrix_PriceStockType7, \r\n          ");
            viewString.Append("  T.PriceStockType8 AS ItemPriceMatrix_PriceStockType8, \r\n            T.PriceSto");
            viewString.Append("ckType9 AS ItemPriceMatrix_PriceStockType9, \r\n            T.PriceStockType10 AS ");
            viewString.Append("ItemPriceMatrix_PriceStockType10, \r\n            T.PriceStockType11 AS ItemPriceM");
            viewString.Append("atrix_PriceStockType11, \r\n            T.FlagId AS ItemPriceMatrix_FlagId, \r\n    ");
            viewString.Append("        T.SupplierSequence AS ItemPriceMatrix_SupplierSequence, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM BaseDbContext.ItemPriceMatrices AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemPriceMatrix", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemProductDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemProductDetail", @"
    SELECT VALUE -- Constructing ItemProductDetail
        [DomainModels.Store.ItemProductDetail](T1.ItemProductDetail_ItemDetailId, T1.ItemProductDetail_ItemId, T1.ItemProductDetail_isInternalActivity, T1.ItemProductDetail_isAutoCreateSupplierPO, T1.ItemProductDetail_isQtyLimit, T1.ItemProductDetail_QtyLimit, T1.ItemProductDetail_DeliveryTimeSupplier1, T1.ItemProductDetail_DeliveryTimeSupplier2, T1.ItemProductDetail_isPrintItem, T1.ItemProductDetail_isAllowMarketBriefAttachment, T1.ItemProductDetail_MarketBriefSuccessMessage)
    FROM (
        SELECT 
            T.ItemDetailId AS ItemProductDetail_ItemDetailId, 
            T.ItemId AS ItemProductDetail_ItemId, 
            T.isInternalActivity AS ItemProductDetail_isInternalActivity, 
            T.isAutoCreateSupplierPO AS ItemProductDetail_isAutoCreateSupplierPO, 
            T.isQtyLimit AS ItemProductDetail_isQtyLimit, 
            T.QtyLimit AS ItemProductDetail_QtyLimit, 
            T.DeliveryTimeSupplier1 AS ItemProductDetail_DeliveryTimeSupplier1, 
            T.DeliveryTimeSupplier2 AS ItemProductDetail_DeliveryTimeSupplier2, 
            T.isPrintItem AS ItemProductDetail_isPrintItem, 
            T.isAllowMarketBriefAttachment AS ItemProductDetail_isAllowMarketBriefAttachment, 
            T.MarketBriefSuccessMessage AS ItemProductDetail_MarketBriefSuccessMessage, 
            True AS _from0
        FROM BaseDbContext.ItemProductDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemRelatedItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemRelatedItem", @"
    SELECT VALUE -- Constructing ItemRelatedItem
        [DomainModels.Store.ItemRelatedItem](T1.ItemRelatedItem_ItemId, T1.ItemRelatedItem_Id, T1.ItemRelatedItem_RelatedItemId)
    FROM (
        SELECT 
            T.ItemId AS ItemRelatedItem_ItemId, 
            T.Id AS ItemRelatedItem_Id, 
            T.RelatedItemId AS ItemRelatedItem_RelatedItemId, 
            True AS _from0
        FROM BaseDbContext.ItemRelatedItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Items
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(18577);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Items\r\n        [DomainModels.Store.Items](T1.");
            viewString.Append("Items_ItemId, T1.Items_ItemCode, T1.Items_EstimateId, T1.Items_InvoiceId, T1.Ite");
            viewString.Append("ms_Title, T1.Items_Tax1, T1.Items_Tax2, T1.Items_Tax3, T1.Items_CreatedBy, T1.It");
            viewString.Append("ems_Status, T1.Items_ItemCreationDateTime, T1.Items_ItemLastUpdateDateTime, T1.I");
            viewString.Append("tems_IsMultipleQty, T1.Items_RunOnQty, T1.Items_RunonCostCentreProfit, T1.Items_");
            viewString.Append("RunonBaseCharge, T1.Items_RunOnMarkUpID, T1.Items_RunonPercentageValue, T1.Items");
            viewString.Append("_RunOnMarkUpValue, T1.Items_RunOnNetTotal, T1.Items_Qty1, T1.Items_Qty2, T1.Item");
            viewString.Append("s_Qty3, T1.Items_Qty1CostCentreProfit, T1.Items_Qty2CostCentreProfit, T1.Items_Q");
            viewString.Append("ty3CostCentreProfit, T1.Items_Qty1BaseCharge1, T1.Items_Qty2BaseCharge2, T1.Item");
            viewString.Append("s_Qty3BaseCharge3, T1.Items_Qty1MarkUpID1, T1.Items_Qty2MarkUpID2, T1.Items_Qty3");
            viewString.Append("MarkUpID3, T1.Items_Qty1MarkUpPercentageValue, T1.Items_Qty2MarkUpPercentageValu");
            viewString.Append("e, T1.Items_Qty3MarkUpPercentageValue, T1.Items_Qty1MarkUp1Value, T1.Items_Qty2M");
            viewString.Append("arkUp2Value, T1.Items_Qty3MarkUp3Value, T1.Items_Qty1NetTotal, T1.Items_Qty2NetT");
            viewString.Append("otal, T1.Items_Qty3NetTotal, T1.Items_Qty1Tax1Value, T1.Items_Qty1Tax2Value, T1.");
            viewString.Append("Items_Qty1Tax3Value, T1.Items_Qty1GrossTotal, T1.Items_Qty2Tax1Value, T1.Items_Q");
            viewString.Append("ty2Tax2Value, T1.Items_Qty2Tax3Value, T1.Items_Qty2grossTotal, T1.Items_Qty3Tax1");
            viewString.Append("Value, T1.Items_Qty3Tax2Value, T1.Items_Qty3Tax3Value, T1.Items_Qty3GrossTotal, ");
            viewString.Append("T1.Items_IsDescriptionLocked, T1.Items_qty1title, T1.Items_qty2title, T1.Items_q");
            viewString.Append("ty3Title, T1.Items_RunonTitle, T1.Items_AdditionalInformation, T1.Items_qty2Desc");
            viewString.Append("ription, T1.Items_qty3Description, T1.Items_RunonDescription, T1.Items_EstimateD");
            viewString.Append("escriptionTitle1, T1.Items_EstimateDescriptionTitle2, T1.Items_EstimateDescripti");
            viewString.Append("onTitle3, T1.Items_EstimateDescriptionTitle4, T1.Items_EstimateDescriptionTitle5");
            viewString.Append(", T1.Items_EstimateDescriptionTitle6, T1.Items_EstimateDescriptionTitle7, T1.Ite");
            viewString.Append("ms_EstimateDescriptionTitle8, T1.Items_EstimateDescriptionTitle9, T1.Items_Estim");
            viewString.Append("ateDescriptionTitle10, T1.Items_EstimateDescription1, T1.Items_EstimateDescripti");
            viewString.Append("on2, T1.Items_EstimateDescription3, T1.Items_EstimateDescription4, T1.Items_Esti");
            viewString.Append("mateDescription5, T1.Items_EstimateDescription6, T1.Items_EstimateDescription7, ");
            viewString.Append("T1.Items_EstimateDescription8, T1.Items_EstimateDescription9, T1.Items_EstimateD");
            viewString.Append("escription10, T1.Items_JobDescriptionTitle1, T1.Items_JobDescriptionTitle2, T1.I");
            viewString.Append("tems_JobDescriptionTitle3, T1.Items_JobDescriptionTitle4, T1.Items_JobDescriptio");
            viewString.Append("nTitle5, T1.Items_JobDescriptionTitle6, T1.Items_JobDescriptionTitle7, T1.Items_");
            viewString.Append("JobDescriptionTitle8, T1.Items_JobDescriptionTitle9, T1.Items_JobDescriptionTitl");
            viewString.Append("e10, T1.Items_JobDescription1, T1.Items_JobDescription2, T1.Items_JobDescription");
            viewString.Append("3, T1.Items_JobDescription4, T1.Items_JobDescription5, T1.Items_JobDescription6,");
            viewString.Append(" T1.Items_JobDescription7, T1.Items_JobDescription8, T1.Items_JobDescription9, T");
            viewString.Append("1.Items_JobDescription10, T1.Items_IsParagraphDescription, T1.Items_EstimateDesc");
            viewString.Append("ription, T1.Items_JobDescription, T1.Items_InvoiceDescription, T1.Items_JobCode,");
            viewString.Append(" T1.Items_JobManagerId, T1.Items_JobEstimatedStartDateTime, T1.Items_JobEstimate");
            viewString.Append("dCompletionDateTime, T1.Items_JobCreationDateTime, T1.Items_JobProgressedBy, T1.");
            viewString.Append("Items_jobSelectedQty, T1.Items_JobStatusId, T1.Items_IsJobCardPrinted, T1.Items_");
            viewString.Append("IsItemLibraray, T1.Items_ItemLibrarayGroupId, T1.Items_PayInFullInvoiceId, T1.It");
            viewString.Append("ems_IsGroupItem, T1.Items_ItemType, T1.Items_IsIncludedInPipeLine, T1.Items_IsRu");
            viewString.Append("nOnQty, T1.Items_CanCopyToEstimate, T1.Items_FlagId, T1.Items_CostCenterDescript");
            viewString.Append("ions, T1.Items_IsRead, T1.Items_IsScheduled, T1.Items_IsPaperStatusChanged, T1.I");
            viewString.Append("tems_IsJobCardCreated, T1.Items_IsAttachmentAdded, T1.Items_IsItemValueChanged, ");
            viewString.Append("T1.Items_DepartmentId, T1.Items_ItemNotes, T1.Items_UpdatedBy, T1.Items_LastUpda");
            viewString.Append("te, T1.Items_JobActualStartDateTime, T1.Items_JobActualCompletionDateTime, T1.It");
            viewString.Append("ems_IsJobCostingDone, T1.Items_ProductName, T1.Items_ImagePath, T1.Items_Thumbna");
            viewString.Append("ilPath, T1.Items_ProductSpecification, T1.Items_CompleteSpecification, T1.Items_");
            viewString.Append("DesignGuideLines, T1.Items_ProductCode, T1.Items_IsPublished, T1.Items_CompanyId");
            viewString.Append(", T1.Items_PriceDiscountPercentage, T1.Items_IsEnabled, T1.Items_IsSpecialItem, ");
            viewString.Append("T1.Items_IconPath, T1.Items_IsPopular, T1.Items_IsFeatured, T1.Items_IsPromotion");
            viewString.Append("al, T1.Items_TipsAndHints, T1.Items_FactSheetFileName, T1.Items_IsArchived, T1.I");
            viewString.Append("tems_NominalCodeId, T1.Items_RefItemId, T1.Items_TemplateId, T1.Items_WebDescrip");
            viewString.Append("tion, T1.Items_ItemTypeId, T1.Items_IsOrderedItem, T1.Items_JobCardPrintedBy, T1");
            viewString.Append(".Items_JobCardLastPrintedDate, T1.Items_EstimateProductionTime, T1.Items_SortOrd");
            viewString.Append("er, T1.Items_ProductType, T1.Items_LayoutGridContent, T1.Items_HowToVideoContent");
            viewString.Append(", T1.Items_file1, T1.Items_file2, T1.Items_file3, T1.Items_file4, T1.Items_file5");
            viewString.Append(", T1.Items_GridImage, T1.Items_isQtyRanged, T1.Items_CostCentreProfitBroker, T1.");
            viewString.Append("Items_BaseChargeBroker, T1.Items_MarkUpValueBroker, T1.Items_NetTotalBroker, T1.");
            viewString.Append("Items_TaxValueBroker, T1.Items_GrossTotalBroker, T1.Items_isCMYK, T1.Items_Suppl");
            viewString.Append("ierId, T1.Items_isStockControl, T1.Items_isUploadImage, T1.Items_isMarketingBrie");
            viewString.Append("f, T1.Items_SupplierID2, T1.Items_FinishedGoodId, T1.Items_IsFinishedGoodPrivate");
            viewString.Append(", T1.Items_MetaKeywords, T1.Items_MetaDescription, T1.Items_MetaTitle, T1.Items_");
            viewString.Append("isTemplateDesignMode, T1.Items_XeroAccessCode, T1.Items_DefaultItemTax, T1.Items");
            viewString.Append("_OrganisationId, T1.Items_PackagingWeight, T1.Items_IsVDPProduct, T1.Items_Templ");
            viewString.Append("ateType, T1.Items_DesignerCategoryId, T1.Items_Scalar, T1.Items_ZoomFactor, T1.I");
            viewString.Append("tems_isAddCropMarks, T1.Items_ItemLength, T1.Items_ItemWidth, T1.Items_ItemHeigh");
            viewString.Append("t, T1.Items_ItemWeight, T1.Items_printCropMarks, T1.Items_drawBleedArea, T1.Item");
            viewString.Append("s_isMultipagePDF, T1.Items_drawWaterMarkTxt, T1.Items_allowPdfDownload, T1.Items");
            viewString.Append("_allowImageDownload, T1.Items_SmartFormId, T1.Items_IsDigitalDownload, T1.Items_");
            viewString.Append("IsRealStateProduct, T1.Items_ProductDisplayOptions, T1.Items_DiscountVoucherID)\r");
            viewString.Append("\n    FROM (\r\n        SELECT \r\n            T.ItemId AS Items_ItemId, \r\n          ");
            viewString.Append("  T.ItemCode AS Items_ItemCode, \r\n            T.EstimateId AS Items_EstimateId, ");
            viewString.Append("\r\n            T.InvoiceId AS Items_InvoiceId, \r\n            T.Title AS Items_Tit");
            viewString.Append("le, \r\n            T.Tax1 AS Items_Tax1, \r\n            T.Tax2 AS Items_Tax2, \r\n  ");
            viewString.Append("          T.Tax3 AS Items_Tax3, \r\n            T.CreatedBy AS Items_CreatedBy, \r\n");
            viewString.Append("            T.StatusId AS Items_Status, \r\n            T.ItemCreationDateTime AS ");
            viewString.Append("Items_ItemCreationDateTime, \r\n            T.ItemLastUpdateDateTime AS Items_Item");
            viewString.Append("LastUpdateDateTime, \r\n            T.IsMultipleQty AS Items_IsMultipleQty, \r\n    ");
            viewString.Append("        T.RunOnQty AS Items_RunOnQty, \r\n            T.RunonCostCentreProfit AS I");
            viewString.Append("tems_RunonCostCentreProfit, \r\n            T.RunonBaseCharge AS Items_RunonBaseCh");
            viewString.Append("arge, \r\n            T.RunOnMarkUpId AS Items_RunOnMarkUpID, \r\n            T.Runo");
            viewString.Append("nPercentageValue AS Items_RunonPercentageValue, \r\n            T.RunOnMarkUpValue");
            viewString.Append(" AS Items_RunOnMarkUpValue, \r\n            T.RunOnNetTotal AS Items_RunOnNetTotal");
            viewString.Append(", \r\n            T.Qty1 AS Items_Qty1, \r\n            T.Qty2 AS Items_Qty2, \r\n    ");
            viewString.Append("        T.Qty3 AS Items_Qty3, \r\n            T.Qty1CostCentreProfit AS Items_Qty1");
            viewString.Append("CostCentreProfit, \r\n            T.Qty2CostCentreProfit AS Items_Qty2CostCentrePr");
            viewString.Append("ofit, \r\n            T.Qty3CostCentreProfit AS Items_Qty3CostCentreProfit, \r\n    ");
            viewString.Append("        T.Qty1BaseCharge1 AS Items_Qty1BaseCharge1, \r\n            T.Qty2BaseChar");
            viewString.Append("ge2 AS Items_Qty2BaseCharge2, \r\n            T.Qty3BaseCharge3 AS Items_Qty3BaseC");
            viewString.Append("harge3, \r\n            T.Qty1MarkUpId1 AS Items_Qty1MarkUpID1, \r\n            T.Qt");
            viewString.Append("y2MarkUpId2 AS Items_Qty2MarkUpID2, \r\n            T.Qty3MarkUpId3 AS Items_Qty3M");
            viewString.Append("arkUpID3, \r\n            T.Qty1MarkUpPercentageValue AS Items_Qty1MarkUpPercentag");
            viewString.Append("eValue, \r\n            T.Qty2MarkUpPercentageValue AS Items_Qty2MarkUpPercentageV");
            viewString.Append("alue, \r\n            T.Qty3MarkUpPercentageValue AS Items_Qty3MarkUpPercentageVal");
            viewString.Append("ue, \r\n            T.Qty1MarkUp1Value AS Items_Qty1MarkUp1Value, \r\n            T.");
            viewString.Append("Qty2MarkUp2Value AS Items_Qty2MarkUp2Value, \r\n            T.Qty3MarkUp3Value AS ");
            viewString.Append("Items_Qty3MarkUp3Value, \r\n            T.Qty1NetTotal AS Items_Qty1NetTotal, \r\n  ");
            viewString.Append("          T.Qty2NetTotal AS Items_Qty2NetTotal, \r\n            T.Qty3NetTotal AS ");
            viewString.Append("Items_Qty3NetTotal, \r\n            T.Qty1Tax1Value AS Items_Qty1Tax1Value, \r\n    ");
            viewString.Append("        T.Qty1Tax2Value AS Items_Qty1Tax2Value, \r\n            T.Qty1Tax3Value AS");
            viewString.Append(" Items_Qty1Tax3Value, \r\n            T.Qty1GrossTotal AS Items_Qty1GrossTotal, \r\n");
            viewString.Append("            T.Qty2Tax1Value AS Items_Qty2Tax1Value, \r\n            T.Qty2Tax2Valu");
            viewString.Append("e AS Items_Qty2Tax2Value, \r\n            T.Qty2Tax3Value AS Items_Qty2Tax3Value, ");
            viewString.Append("\r\n            T.Qty2GrossTotal AS Items_Qty2grossTotal, \r\n            T.Qty3Tax1");
            viewString.Append("Value AS Items_Qty3Tax1Value, \r\n            T.Qty3Tax2Value AS Items_Qty3Tax2Val");
            viewString.Append("ue, \r\n            T.Qty3Tax3Value AS Items_Qty3Tax3Value, \r\n            T.Qty3Gr");
            viewString.Append("ossTotal AS Items_Qty3GrossTotal, \r\n            T.IsDescriptionLocked AS Items_I");
            viewString.Append("sDescriptionLocked, \r\n            T.Qty1Title AS Items_qty1title, \r\n            ");
            viewString.Append("T.Qty2Title AS Items_qty2title, \r\n            T.Qty3Title AS Items_qty3Title, \r\n");
            viewString.Append("            T.RunonTitle AS Items_RunonTitle, \r\n            T.AdditionalInformat");
            viewString.Append("ion AS Items_AdditionalInformation, \r\n            T.Qty2Description AS Items_qty");
            viewString.Append("2Description, \r\n            T.Qty3Description AS Items_qty3Description, \r\n      ");
            viewString.Append("      T.RunonDescription AS Items_RunonDescription, \r\n            T.EstimateDesc");
            viewString.Append("riptionTitle1 AS Items_EstimateDescriptionTitle1, \r\n            T.EstimateDescri");
            viewString.Append("ptionTitle2 AS Items_EstimateDescriptionTitle2, \r\n            T.EstimateDescript");
            viewString.Append("ionTitle3 AS Items_EstimateDescriptionTitle3, \r\n            T.EstimateDescriptio");
            viewString.Append("nTitle4 AS Items_EstimateDescriptionTitle4, \r\n            T.EstimateDescriptionT");
            viewString.Append("itle5 AS Items_EstimateDescriptionTitle5, \r\n            T.EstimateDescriptionTit");
            viewString.Append("le6 AS Items_EstimateDescriptionTitle6, \r\n            T.EstimateDescriptionTitle");
            viewString.Append("7 AS Items_EstimateDescriptionTitle7, \r\n            T.EstimateDescriptionTitle8 ");
            viewString.Append("AS Items_EstimateDescriptionTitle8, \r\n            T.EstimateDescriptionTitle9 AS");
            viewString.Append(" Items_EstimateDescriptionTitle9, \r\n            T.EstimateDescriptionTitle10 AS ");
            viewString.Append("Items_EstimateDescriptionTitle10, \r\n            T.EstimateDescription1 AS Items_");
            viewString.Append("EstimateDescription1, \r\n            T.EstimateDescription2 AS Items_EstimateDesc");
            viewString.Append("ription2, \r\n            T.EstimateDescription3 AS Items_EstimateDescription3, \r\n");
            viewString.Append("            T.EstimateDescription4 AS Items_EstimateDescription4, \r\n            ");
            viewString.Append("T.EstimateDescription5 AS Items_EstimateDescription5, \r\n            T.EstimateDe");
            viewString.Append("scription6 AS Items_EstimateDescription6, \r\n            T.EstimateDescription7 A");
            viewString.Append("S Items_EstimateDescription7, \r\n            T.EstimateDescription8 AS Items_Esti");
            viewString.Append("mateDescription8, \r\n            T.EstimateDescription9 AS Items_EstimateDescript");
            viewString.Append("ion9, \r\n            T.EstimateDescription10 AS Items_EstimateDescription10, \r\n  ");
            viewString.Append("          T.JobDescriptionTitle1 AS Items_JobDescriptionTitle1, \r\n            T.");
            viewString.Append("JobDescriptionTitle2 AS Items_JobDescriptionTitle2, \r\n            T.JobDescripti");
            viewString.Append("onTitle3 AS Items_JobDescriptionTitle3, \r\n            T.JobDescriptionTitle4 AS ");
            viewString.Append("Items_JobDescriptionTitle4, \r\n            T.JobDescriptionTitle5 AS Items_JobDes");
            viewString.Append("criptionTitle5, \r\n            T.JobDescriptionTitle6 AS Items_JobDescriptionTitl");
            viewString.Append("e6, \r\n            T.JobDescriptionTitle7 AS Items_JobDescriptionTitle7, \r\n      ");
            viewString.Append("      T.JobDescriptionTitle8 AS Items_JobDescriptionTitle8, \r\n            T.JobD");
            viewString.Append("escriptionTitle9 AS Items_JobDescriptionTitle9, \r\n            T.JobDescriptionTi");
            viewString.Append("tle10 AS Items_JobDescriptionTitle10, \r\n            T.JobDescription1 AS Items_J");
            viewString.Append("obDescription1, \r\n            T.JobDescription2 AS Items_JobDescription2, \r\n    ");
            viewString.Append("        T.JobDescription3 AS Items_JobDescription3, \r\n            T.JobDescripti");
            viewString.Append("on4 AS Items_JobDescription4, \r\n            T.JobDescription5 AS Items_JobDescri");
            viewString.Append("ption5, \r\n            T.JobDescription6 AS Items_JobDescription6, \r\n            ");
            viewString.Append("T.JobDescription7 AS Items_JobDescription7, \r\n            T.JobDescription8 AS I");
            viewString.Append("tems_JobDescription8, \r\n            T.JobDescription9 AS Items_JobDescription9, ");
            viewString.Append("\r\n            T.JobDescription10 AS Items_JobDescription10, \r\n            T.IsPa");
            viewString.Append("ragraphDescription AS Items_IsParagraphDescription, \r\n            T.EstimateDesc");
            viewString.Append("ription AS Items_EstimateDescription, \r\n            T.JobDescription AS Items_Jo");
            viewString.Append("bDescription, \r\n            T.InvoiceDescription AS Items_InvoiceDescription, \r\n");
            viewString.Append("            T.JobCode AS Items_JobCode, \r\n            T.JobManagerId AS Items_Jo");
            viewString.Append("bManagerId, \r\n            T.JobEstimatedStartDateTime AS Items_JobEstimatedStart");
            viewString.Append("DateTime, \r\n            T.JobEstimatedCompletionDateTime AS Items_JobEstimatedCo");
            viewString.Append("mpletionDateTime, \r\n            T.JobCreationDateTime AS Items_JobCreationDateTi");
            viewString.Append("me, \r\n            T.JobProgressedBy AS Items_JobProgressedBy, \r\n            T.Jo");
            viewString.Append("bSelectedQty AS Items_jobSelectedQty, \r\n            T.JobStatusId AS Items_JobSt");
            viewString.Append("atusId, \r\n            T.IsJobCardPrinted AS Items_IsJobCardPrinted, \r\n          ");
            viewString.Append("  T.IsItemLibraray AS Items_IsItemLibraray, \r\n            T.ItemLibrarayGroupId ");
            viewString.Append("AS Items_ItemLibrarayGroupId, \r\n            T.PayInFullInvoiceId AS Items_PayInF");
            viewString.Append("ullInvoiceId, \r\n            T.IsGroupItem AS Items_IsGroupItem, \r\n            T.");
            viewString.Append("ItemType AS Items_ItemType, \r\n            T.IsIncludedInPipeLine AS Items_IsIncl");
            viewString.Append("udedInPipeLine, \r\n            T.IsRunOnQty AS Items_IsRunOnQty, \r\n            T.");
            viewString.Append("CanCopyToEstimate AS Items_CanCopyToEstimate, \r\n            T.FlagId AS Items_Fl");
            viewString.Append("agId, \r\n            T.CostCenterDescriptions AS Items_CostCenterDescriptions, \r\n");
            viewString.Append("            T.IsRead AS Items_IsRead, \r\n            T.IsScheduled AS Items_IsSch");
            viewString.Append("eduled, \r\n            T.IsPaperStatusChanged AS Items_IsPaperStatusChanged, \r\n  ");
            viewString.Append("          T.IsJobCardCreated AS Items_IsJobCardCreated, \r\n            T.IsAttach");
            viewString.Append("mentAdded AS Items_IsAttachmentAdded, \r\n            T.IsItemValueChanged AS Item");
            viewString.Append("s_IsItemValueChanged, \r\n            T.DepartmentId AS Items_DepartmentId, \r\n    ");
            viewString.Append("        T.ItemNotes AS Items_ItemNotes, \r\n            T.UpdatedBy AS Items_Updat");
            viewString.Append("edBy, \r\n            T.LastUpdate AS Items_LastUpdate, \r\n            T.JobActualS");
            viewString.Append("tartDateTime AS Items_JobActualStartDateTime, \r\n            T.JobActualCompletio");
            viewString.Append("nDateTime AS Items_JobActualCompletionDateTime, \r\n            T.IsJobCostingDone");
            viewString.Append(" AS Items_IsJobCostingDone, \r\n            T.ProductName AS Items_ProductName, \r\n");
            viewString.Append("            T.ImagePath AS Items_ImagePath, \r\n            T.ThumbnailPath AS Ite");
            viewString.Append("ms_ThumbnailPath, \r\n            T.ProductSpecification AS Items_ProductSpecifica");
            viewString.Append("tion, \r\n            T.CompleteSpecification AS Items_CompleteSpecification, \r\n  ");
            viewString.Append("          T.DesignGuideLines AS Items_DesignGuideLines, \r\n            T.ProductC");
            viewString.Append("ode AS Items_ProductCode, \r\n            T.IsPublished AS Items_IsPublished, \r\n  ");
            viewString.Append("          T.CompanyId AS Items_CompanyId, \r\n            T.PriceDiscountPercentag");
            viewString.Append("e AS Items_PriceDiscountPercentage, \r\n            T.IsEnabled AS Items_IsEnabled");
            viewString.Append(", \r\n            T.IsSpecialItem AS Items_IsSpecialItem, \r\n            T.IconPath");
            viewString.Append(" AS Items_IconPath, \r\n            T.IsPopular AS Items_IsPopular, \r\n            ");
            viewString.Append("T.IsFeatured AS Items_IsFeatured, \r\n            T.IsPromotional AS Items_IsPromo");
            viewString.Append("tional, \r\n            T.TipsAndHints AS Items_TipsAndHints, \r\n            T.Fact");
            viewString.Append("SheetFileName AS Items_FactSheetFileName, \r\n            T.IsArchived AS Items_Is");
            viewString.Append("Archived, \r\n            T.NominalCodeId AS Items_NominalCodeId, \r\n            CA");
            viewString.Append("ST(T.RefItemId AS [Edm.Int64]) AS Items_RefItemId, \r\n            T.TemplateId AS");
            viewString.Append(" Items_TemplateId, \r\n            T.WebDescription AS Items_WebDescription, \r\n   ");
            viewString.Append("         T.ItemTypeId AS Items_ItemTypeId, \r\n            T.IsOrderedItem AS Item");
            viewString.Append("s_IsOrderedItem, \r\n            T.JobCardPrintedBy AS Items_JobCardPrintedBy, \r\n ");
            viewString.Append("           T.JobCardLastPrintedDate AS Items_JobCardLastPrintedDate, \r\n         ");
            viewString.Append("   T.EstimateProductionTime AS Items_EstimateProductionTime, \r\n            T.Sor");
            viewString.Append("tOrder AS Items_SortOrder, \r\n            T.ProductType AS Items_ProductType, \r\n ");
            viewString.Append("           T.LayoutGridContent AS Items_LayoutGridContent, \r\n            T.HowTo");
            viewString.Append("VideoContent AS Items_HowToVideoContent, \r\n            T.File1 AS Items_file1, \r");
            viewString.Append("\n            T.File2 AS Items_file2, \r\n            T.File3 AS Items_file3, \r\n   ");
            viewString.Append("         T.File4 AS Items_file4, \r\n            T.File5 AS Items_file5, \r\n       ");
            viewString.Append("     T.GridImage AS Items_GridImage, \r\n            T.IsQtyRanged AS Items_isQtyR");
            viewString.Append("anged, \r\n            T.CostCentreProfitBroker AS Items_CostCentreProfitBroker, \r");
            viewString.Append("\n            T.BaseChargeBroker AS Items_BaseChargeBroker, \r\n            T.MarkU");
            viewString.Append("pValueBroker AS Items_MarkUpValueBroker, \r\n            T.NetTotalBroker AS Items");
            viewString.Append("_NetTotalBroker, \r\n            T.TaxValueBroker AS Items_TaxValueBroker, \r\n     ");
            viewString.Append("       T.GrossTotalBroker AS Items_GrossTotalBroker, \r\n            T.IsCmyk AS I");
            viewString.Append("tems_isCMYK, \r\n            T.SupplierId AS Items_SupplierId, \r\n            T.IsS");
            viewString.Append("tockControl AS Items_isStockControl, \r\n            T.IsUploadImage AS Items_isUp");
            viewString.Append("loadImage, \r\n            T.IsMarketingBrief AS Items_isMarketingBrief, \r\n       ");
            viewString.Append("     T.SupplierId2 AS Items_SupplierID2, \r\n            T.FinishedGoodId AS Items");
            viewString.Append("_FinishedGoodId, \r\n            T.IsFinishedGoodPrivate AS Items_IsFinishedGoodPr");
            viewString.Append("ivate, \r\n            T.MetaKeywords AS Items_MetaKeywords, \r\n            T.MetaD");
            viewString.Append("escription AS Items_MetaDescription, \r\n            T.MetaTitle AS Items_MetaTitl");
            viewString.Append("e, \r\n            T.IsTemplateDesignMode AS Items_isTemplateDesignMode, \r\n       ");
            viewString.Append("     T.XeroAccessCode AS Items_XeroAccessCode, \r\n            T.DefaultItemTax AS");
            viewString.Append(" Items_DefaultItemTax, \r\n            T.OrganisationId AS Items_OrganisationId, \r");
            viewString.Append("\n            T.PackagingWeight AS Items_PackagingWeight, \r\n            T.IsVdpPr");
            viewString.Append("oduct AS Items_IsVDPProduct, \r\n            T.TemplateType AS Items_TemplateType,");
            viewString.Append(" \r\n            T.DesignerCategoryId AS Items_DesignerCategoryId, \r\n            T");
            viewString.Append(".Scalar AS Items_Scalar, \r\n            T.ZoomFactor AS Items_ZoomFactor, \r\n     ");
            viewString.Append("       T.isAddCropMarks AS Items_isAddCropMarks, \r\n            T.ItemLength AS I");
            viewString.Append("tems_ItemLength, \r\n            T.ItemWidth AS Items_ItemWidth, \r\n            T.I");
            viewString.Append("temHeight AS Items_ItemHeight, \r\n            T.ItemWeight AS Items_ItemWeight, \r");
            viewString.Append("\n            T.printCropMarks AS Items_printCropMarks, \r\n            T.drawBleed");
            viewString.Append("Area AS Items_drawBleedArea, \r\n            T.isMultipagePDF AS Items_isMultipage");
            viewString.Append("PDF, \r\n            T.drawWaterMarkTxt AS Items_drawWaterMarkTxt, \r\n            T");
            viewString.Append(".allowPdfDownload AS Items_allowPdfDownload, \r\n            T.allowImageDownload ");
            viewString.Append("AS Items_allowImageDownload, \r\n            T.SmartFormId AS Items_SmartFormId, \r");
            viewString.Append("\n            T.IsDigitalDownload AS Items_IsDigitalDownload, \r\n            T.IsR");
            viewString.Append("ealStateProduct AS Items_IsRealStateProduct, \r\n            T.ProductDisplayOptio");
            viewString.Append("ns AS Items_ProductDisplayOptions, \r\n            T.DiscountVoucherID AS Items_Di");
            viewString.Append("scountVoucherID, \r\n            True AS _from0\r\n        FROM BaseDbContext.Items ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Items", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemSection
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(16125);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemSection\r\n        [DomainModels.Store.Item");
            viewString.Append("Section](T1.ItemSection_ItemSectionId, T1.ItemSection_SectionNo, T1.ItemSection_");
            viewString.Append("SectionName, T1.ItemSection_IsMainSection, T1.ItemSection_IsMultipleQty, T1.Item");
            viewString.Append("Section_IsRunOnQty, T1.ItemSection_ItemId, T1.ItemSection_Qty1, T1.ItemSection_Q");
            viewString.Append("ty2, T1.ItemSection_Qty3, T1.ItemSection_Qty4, T1.ItemSection_Qty5, T1.ItemSecti");
            viewString.Append("on_Qty1Profit, T1.ItemSection_Qty2Profit, T1.ItemSection_Qty3Profit, T1.ItemSect");
            viewString.Append("ion_Qty4Profit, T1.ItemSection_Qty5Profit, T1.ItemSection_BaseCharge1, T1.ItemSe");
            viewString.Append("ction_BaseCharge2, T1.ItemSection_Basecharge3, T1.ItemSection_BaseCharge4, T1.It");
            viewString.Append("emSection_BaseCharge5, T1.ItemSection_RunOnQty, T1.ItemSection_RunOnBaseCharge, ");
            viewString.Append("T1.ItemSection_RunonProfit, T1.ItemSection_SectionSizeId, T1.ItemSection_IsSecti");
            viewString.Append("onSizeCustom, T1.ItemSection_SectionSizeHeight, T1.ItemSection_SectionSizeWidth,");
            viewString.Append(" T1.ItemSection_ItemSizeId, T1.ItemSection_IsItemSizeCustom, T1.ItemSection_Item");
            viewString.Append("SizeHeight, T1.ItemSection_ItemSizeWidth, T1.ItemSection_GuillotineId, T1.ItemSe");
            viewString.Append("ction_IncludeGutter, T1.ItemSection_PressId, T1.ItemSection_FilmId, T1.ItemSecti");
            viewString.Append("on_PlateId, T1.ItemSection_ItemGutterHorizontal, T1.ItemSection_ItemGutterVertic");
            viewString.Append("al, T1.ItemSection_IsPressrestrictionApplied, T1.ItemSection_IsDoubleSided, T1.I");
            viewString.Append("temSection_IsWashup, T1.ItemSection_PrintViewLayoutLandScape, T1.ItemSection_Pri");
            viewString.Append("ntViewLayoutPortrait, T1.ItemSection_PrintViewLayout, T1.ItemSection_SetupSpoila");
            viewString.Append("ge, T1.ItemSection_RunningSpoilage, T1.ItemSection_RunningSpoilageValue, T1.Item");
            viewString.Append("Section_EstimateForWholePacks, T1.ItemSection_IsFirstTrim, T1.ItemSection_IsSeco");
            viewString.Append("ndTrim, T1.ItemSection_PaperQty, T1.ItemSection_ImpressionQty1, T1.ItemSection_I");
            viewString.Append("mpressionQty2, T1.ItemSection_ImpressionQty3, T1.ItemSection_ImpressionQty4, T1.");
            viewString.Append("ItemSection_ImpressionQty5, T1.ItemSection_FilmQty, T1.ItemSection_IsFilmSupplie");
            viewString.Append("d, T1.ItemSection_IsPlateSupplied, T1.ItemSection_IsPaperSupplied, T1.ItemSectio");
            viewString.Append("n_WashupQty, T1.ItemSection_MakeReadyQty, T1.ItemSection_IsPaperCoated, T1.ItemS");
            viewString.Append("ection_GuillotineFirstCut, T1.ItemSection_GuillotineSecondCut, T1.ItemSection_Gu");
            viewString.Append("illotineCutTime, T1.ItemSection_GuillotineQty1BundlesFirstTrim, T1.ItemSection_G");
            viewString.Append("uillotineQty2BundlesFirstTrim, T1.ItemSection_GuillotineQty3BundlesFirstTrim, T1");
            viewString.Append(".ItemSection_GuillotineQty1BundlesSecondTrim, T1.ItemSection_GuillotineQty2Bundl");
            viewString.Append("esSecondTrim, T1.ItemSection_GuillotineQty3BundlesSecondTrim, T1.ItemSection_Gui");
            viewString.Append("llotineQty1FirstTrimCuts, T1.ItemSection_GuillotineQty2FirstTrimCuts, T1.ItemSec");
            viewString.Append("tion_GuillotineQty3FirstTrimCuts, T1.ItemSection_GuillotineQty1SecondTrimCuts, T");
            viewString.Append("1.ItemSection_GuillotineQty2SecondTrimCuts, T1.ItemSection_GuillotineQty3SecondT");
            viewString.Append("rimCuts, T1.ItemSection_GuillotineQty1TotalsCuts, T1.ItemSection_GuillotineQty2T");
            viewString.Append("otalsCuts, T1.ItemSection_GuillotineQty3TotalsCuts, T1.ItemSection_AdditionalFil");
            viewString.Append("mUsed, T1.ItemSection_AdditionalPlateUsed, T1.ItemSection_IsFilmUsed, T1.ItemSec");
            viewString.Append("tion_IsPlateUsed, T1.ItemSection_NoofUniqueInks, T1.ItemSection_WizardRunMode, T");
            viewString.Append("1.ItemSection_OverAllPTV, T1.ItemSection_ItemPTV, T1.ItemSection_Side1Inks, T1.I");
            viewString.Append("temSection_Side2Inks, T1.ItemSection_IsSwingApplied, T1.ItemSection_SectionType,");
            viewString.Append(" T1.ItemSection_IsMakeReadyUsed, T1.ItemSection_isWorknTurn, T1.ItemSection_isWo");
            viewString.Append("rkntumble, T1.ItemSection_PressSpeed1, T1.ItemSection_PressSpeed2, T1.ItemSectio");
            viewString.Append("n_PressSpeed3, T1.ItemSection_PressSpeed4, T1.ItemSection_PressSpeed5, T1.ItemSe");
            viewString.Append("ction_PrintSheetQty1, T1.ItemSection_PrintSheetQty2, T1.ItemSection_PrintSheetQt");
            viewString.Append("y3, T1.ItemSection_PrintSheetQty4, T1.ItemSection_PrintSheetQty5, T1.ItemSection");
            viewString.Append("_PressHourlyCharge, T1.ItemSection_PrintChargeExMakeReady1, T1.ItemSection_Print");
            viewString.Append("ChargeExMakeReady2, T1.ItemSection_PrintChargeExMakeReady3, T1.ItemSection_Print");
            viewString.Append("ChargeExMakeReady4, T1.ItemSection_PrintChargeExMakeReady5, T1.ItemSection_Paper");
            viewString.Append("Gsm, T1.ItemSection_PaperPackPrice, T1.ItemSection_PTVRows, T1.ItemSection_PTVCo");
            viewString.Append("loumns, T1.ItemSection_PaperWeight1, T1.ItemSection_PaperWeight2, T1.ItemSection");
            viewString.Append("_PaperWeight3, T1.ItemSection_PaperWeight4, T1.ItemSection_PaperWeight5, T1.Item");
            viewString.Append("Section_FinishedItemQty1, T1.ItemSection_FinishedItemQty2, T1.ItemSection_Finish");
            viewString.Append("edItemQty3, T1.ItemSection_FinishedItemQty4, T1.ItemSection_FinishedItemQty5, T1");
            viewString.Append(".ItemSection_ProfileId, T1.ItemSection_SelectedPressCalculationMethodId, T1.Item");
            viewString.Append("Section_SectionNotes, T1.ItemSection_IsScheduled, T1.ItemSection_ImageType, T1.I");
            viewString.Append("temSection_WebClylinderHeight, T1.ItemSection_WebCylinderWidth, T1.ItemSection_W");
            viewString.Append("ebCylinderId, T1.ItemSection_WebPaperLengthWithSp, T1.ItemSection_WebPaperLength");
            viewString.Append("WoSp, T1.ItemSection_WebReelMakereadyQty, T1.ItemSection_WebStockPaperCost, T1.I");
            viewString.Append("temSection_WebSpoilageType, T1.ItemSection_PressPassesQty, T1.ItemSection_Printi");
            viewString.Append("ngType, T1.ItemSection_PadsLeafQty, T1.ItemSection_PadsQuantity, T1.ItemSection_");
            viewString.Append("LastUpdateDate, T1.ItemSection_LastUpdatedBy, T1.ItemSection_Qty1MarkUpID, T1.It");
            viewString.Append("emSection_Qty2MarkUpID, T1.ItemSection_Qty3MarkUpID, T1.ItemSection_StockItemID1");
            viewString.Append(", T1.ItemSection_StockItemID2, T1.ItemSection_StockItemID3, T1.ItemSection_Side1");
            viewString.Append("PlateQty, T1.ItemSection_IsPortrait, T1.ItemSection_Side2PlateQty, T1.ItemSectio");
            viewString.Append("n_InkColorType, T1.ItemSection_PlateInkId, T1.ItemSection_SimilarSections, T1.It");
            viewString.Append("emSection_QuestionQueue, T1.ItemSection_InputQueue, T1.ItemSection_StockQueue, T");
            viewString.Append("1.ItemSection_CostCentreQueue, T1.ItemSection_PressIdSide2, T1.ItemSection_Impre");
            viewString.Append("ssionCoverageSide1, T1.ItemSection_ImpressionCoverageSide2, T1.ItemSection_Passe");
            viewString.Append("sSide1, T1.ItemSection_PassesSide2)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("ItemSectionId AS ItemSection_ItemSectionId, \r\n            T.SectionNo AS ItemSec");
            viewString.Append("tion_SectionNo, \r\n            T.SectionName AS ItemSection_SectionName, \r\n      ");
            viewString.Append("      T.IsMainSection AS ItemSection_IsMainSection, \r\n            T.IsMultipleQt");
            viewString.Append("y AS ItemSection_IsMultipleQty, \r\n            T.IsRunOnQty AS ItemSection_IsRunO");
            viewString.Append("nQty, \r\n            T.ItemId AS ItemSection_ItemId, \r\n            T.Qty1 AS Item");
            viewString.Append("Section_Qty1, \r\n            T.Qty2 AS ItemSection_Qty2, \r\n            T.Qty3 AS ");
            viewString.Append("ItemSection_Qty3, \r\n            T.Qty4 AS ItemSection_Qty4, \r\n            T.Qty5");
            viewString.Append(" AS ItemSection_Qty5, \r\n            T.Qty1Profit AS ItemSection_Qty1Profit, \r\n  ");
            viewString.Append("          T.Qty2Profit AS ItemSection_Qty2Profit, \r\n            T.Qty3Profit AS ");
            viewString.Append("ItemSection_Qty3Profit, \r\n            T.Qty4Profit AS ItemSection_Qty4Profit, \r\n");
            viewString.Append("            T.Qty5Profit AS ItemSection_Qty5Profit, \r\n            T.BaseCharge1 ");
            viewString.Append("AS ItemSection_BaseCharge1, \r\n            T.BaseCharge2 AS ItemSection_BaseCharg");
            viewString.Append("e2, \r\n            T.Basecharge3 AS ItemSection_Basecharge3, \r\n            T.Base");
            viewString.Append("Charge4 AS ItemSection_BaseCharge4, \r\n            T.BaseCharge5 AS ItemSection_B");
            viewString.Append("aseCharge5, \r\n            T.RunOnQty AS ItemSection_RunOnQty, \r\n            T.Ru");
            viewString.Append("nOnBaseCharge AS ItemSection_RunOnBaseCharge, \r\n            T.RunonProfit AS Ite");
            viewString.Append("mSection_RunonProfit, \r\n            T.SectionSizeId AS ItemSection_SectionSizeId");
            viewString.Append(", \r\n            T.IsSectionSizeCustom AS ItemSection_IsSectionSizeCustom, \r\n    ");
            viewString.Append("        T.SectionSizeHeight AS ItemSection_SectionSizeHeight, \r\n            T.Se");
            viewString.Append("ctionSizeWidth AS ItemSection_SectionSizeWidth, \r\n            T.ItemSizeId AS It");
            viewString.Append("emSection_ItemSizeId, \r\n            T.IsItemSizeCustom AS ItemSection_IsItemSize");
            viewString.Append("Custom, \r\n            T.ItemSizeHeight AS ItemSection_ItemSizeHeight, \r\n        ");
            viewString.Append("    T.ItemSizeWidth AS ItemSection_ItemSizeWidth, \r\n            T.GuillotineId A");
            viewString.Append("S ItemSection_GuillotineId, \r\n            T.IncludeGutter AS ItemSection_Include");
            viewString.Append("Gutter, \r\n            T.PressId AS ItemSection_PressId, \r\n            T.FilmId A");
            viewString.Append("S ItemSection_FilmId, \r\n            T.PlateId AS ItemSection_PlateId, \r\n        ");
            viewString.Append("    T.ItemGutterHorizontal AS ItemSection_ItemGutterHorizontal, \r\n            T.");
            viewString.Append("ItemGutterVertical AS ItemSection_ItemGutterVertical, \r\n            T.IsPressres");
            viewString.Append("trictionApplied AS ItemSection_IsPressrestrictionApplied, \r\n            T.IsDoub");
            viewString.Append("leSided AS ItemSection_IsDoubleSided, \r\n            T.IsWashup AS ItemSection_Is");
            viewString.Append("Washup, \r\n            T.PrintViewLayoutLandScape AS ItemSection_PrintViewLayoutL");
            viewString.Append("andScape, \r\n            T.PrintViewLayoutPortrait AS ItemSection_PrintViewLayout");
            viewString.Append("Portrait, \r\n            T.PrintViewLayout AS ItemSection_PrintViewLayout, \r\n    ");
            viewString.Append("        T.SetupSpoilage AS ItemSection_SetupSpoilage, \r\n            T.RunningSpo");
            viewString.Append("ilage AS ItemSection_RunningSpoilage, \r\n            T.RunningSpoilageValue AS It");
            viewString.Append("emSection_RunningSpoilageValue, \r\n            T.EstimateForWholePacks AS ItemSec");
            viewString.Append("tion_EstimateForWholePacks, \r\n            T.IsFirstTrim AS ItemSection_IsFirstTr");
            viewString.Append("im, \r\n            T.IsSecondTrim AS ItemSection_IsSecondTrim, \r\n            T.Pa");
            viewString.Append("perQty AS ItemSection_PaperQty, \r\n            T.ImpressionQty1 AS ItemSection_Im");
            viewString.Append("pressionQty1, \r\n            T.ImpressionQty2 AS ItemSection_ImpressionQty2, \r\n  ");
            viewString.Append("          T.ImpressionQty3 AS ItemSection_ImpressionQty3, \r\n            T.Impres");
            viewString.Append("sionQty4 AS ItemSection_ImpressionQty4, \r\n            T.ImpressionQty5 AS ItemSe");
            viewString.Append("ction_ImpressionQty5, \r\n            T.FilmQty AS ItemSection_FilmQty, \r\n        ");
            viewString.Append("    T.IsFilmSupplied AS ItemSection_IsFilmSupplied, \r\n            T.IsPlateSuppl");
            viewString.Append("ied AS ItemSection_IsPlateSupplied, \r\n            T.IsPaperSupplied AS ItemSecti");
            viewString.Append("on_IsPaperSupplied, \r\n            T.WashupQty AS ItemSection_WashupQty, \r\n      ");
            viewString.Append("      T.MakeReadyQty AS ItemSection_MakeReadyQty, \r\n            T.IsPaperCoated ");
            viewString.Append("AS ItemSection_IsPaperCoated, \r\n            T.GuillotineFirstCut AS ItemSection_");
            viewString.Append("GuillotineFirstCut, \r\n            T.GuillotineSecondCut AS ItemSection_Guillotin");
            viewString.Append("eSecondCut, \r\n            T.GuillotineCutTime AS ItemSection_GuillotineCutTime, ");
            viewString.Append("\r\n            T.GuillotineQty1BundlesFirstTrim AS ItemSection_GuillotineQty1Bund");
            viewString.Append("lesFirstTrim, \r\n            T.GuillotineQty2BundlesFirstTrim AS ItemSection_Guil");
            viewString.Append("lotineQty2BundlesFirstTrim, \r\n            T.GuillotineQty3BundlesFirstTrim AS It");
            viewString.Append("emSection_GuillotineQty3BundlesFirstTrim, \r\n            T.GuillotineQty1BundlesS");
            viewString.Append("econdTrim AS ItemSection_GuillotineQty1BundlesSecondTrim, \r\n            T.Guillo");
            viewString.Append("tineQty2BundlesSecondTrim AS ItemSection_GuillotineQty2BundlesSecondTrim, \r\n    ");
            viewString.Append("        T.GuillotineQty3BundlesSecondTrim AS ItemSection_GuillotineQty3BundlesSe");
            viewString.Append("condTrim, \r\n            T.GuillotineQty1FirstTrimCuts AS ItemSection_GuillotineQ");
            viewString.Append("ty1FirstTrimCuts, \r\n            T.GuillotineQty2FirstTrimCuts AS ItemSection_Gui");
            viewString.Append("llotineQty2FirstTrimCuts, \r\n            T.GuillotineQty3FirstTrimCuts AS ItemSec");
            viewString.Append("tion_GuillotineQty3FirstTrimCuts, \r\n            T.GuillotineQty1SecondTrimCuts A");
            viewString.Append("S ItemSection_GuillotineQty1SecondTrimCuts, \r\n            T.GuillotineQty2Second");
            viewString.Append("TrimCuts AS ItemSection_GuillotineQty2SecondTrimCuts, \r\n            T.Guillotine");
            viewString.Append("Qty3SecondTrimCuts AS ItemSection_GuillotineQty3SecondTrimCuts, \r\n            T.");
            viewString.Append("GuillotineQty1TotalsCuts AS ItemSection_GuillotineQty1TotalsCuts, \r\n            ");
            viewString.Append("T.GuillotineQty2TotalsCuts AS ItemSection_GuillotineQty2TotalsCuts, \r\n          ");
            viewString.Append("  T.GuillotineQty3TotalsCuts AS ItemSection_GuillotineQty3TotalsCuts, \r\n        ");
            viewString.Append("    T.AdditionalFilmUsed AS ItemSection_AdditionalFilmUsed, \r\n            T.Addi");
            viewString.Append("tionalPlateUsed AS ItemSection_AdditionalPlateUsed, \r\n            T.IsFilmUsed A");
            viewString.Append("S ItemSection_IsFilmUsed, \r\n            T.IsPlateUsed AS ItemSection_IsPlateUsed");
            viewString.Append(", \r\n            T.NoofUniqueInks AS ItemSection_NoofUniqueInks, \r\n            T.");
            viewString.Append("WizardRunMode AS ItemSection_WizardRunMode, \r\n            T.OverAllPTV AS ItemSe");
            viewString.Append("ction_OverAllPTV, \r\n            T.ItemPTV AS ItemSection_ItemPTV, \r\n            ");
            viewString.Append("T.Side1Inks AS ItemSection_Side1Inks, \r\n            T.Side2Inks AS ItemSection_S");
            viewString.Append("ide2Inks, \r\n            T.IsSwingApplied AS ItemSection_IsSwingApplied, \r\n      ");
            viewString.Append("      T.SectionType AS ItemSection_SectionType, \r\n            T.IsMakeReadyUsed ");
            viewString.Append("AS ItemSection_IsMakeReadyUsed, \r\n            T.isWorknTurn AS ItemSection_isWor");
            viewString.Append("knTurn, \r\n            T.isWorkntumble AS ItemSection_isWorkntumble, \r\n          ");
            viewString.Append("  T.PressSpeed1 AS ItemSection_PressSpeed1, \r\n            T.PressSpeed2 AS ItemS");
            viewString.Append("ection_PressSpeed2, \r\n            T.PressSpeed3 AS ItemSection_PressSpeed3, \r\n  ");
            viewString.Append("          T.PressSpeed4 AS ItemSection_PressSpeed4, \r\n            T.PressSpeed5 ");
            viewString.Append("AS ItemSection_PressSpeed5, \r\n            T.PrintSheetQty1 AS ItemSection_PrintS");
            viewString.Append("heetQty1, \r\n            T.PrintSheetQty2 AS ItemSection_PrintSheetQty2, \r\n      ");
            viewString.Append("      T.PrintSheetQty3 AS ItemSection_PrintSheetQty3, \r\n            T.PrintSheet");
            viewString.Append("Qty4 AS ItemSection_PrintSheetQty4, \r\n            T.PrintSheetQty5 AS ItemSectio");
            viewString.Append("n_PrintSheetQty5, \r\n            T.PressHourlyCharge AS ItemSection_PressHourlyCh");
            viewString.Append("arge, \r\n            T.PrintChargeExMakeReady1 AS ItemSection_PrintChargeExMakeRe");
            viewString.Append("ady1, \r\n            T.PrintChargeExMakeReady2 AS ItemSection_PrintChargeExMakeRe");
            viewString.Append("ady2, \r\n            T.PrintChargeExMakeReady3 AS ItemSection_PrintChargeExMakeRe");
            viewString.Append("ady3, \r\n            T.PrintChargeExMakeReady4 AS ItemSection_PrintChargeExMakeRe");
            viewString.Append("ady4, \r\n            T.PrintChargeExMakeReady5 AS ItemSection_PrintChargeExMakeRe");
            viewString.Append("ady5, \r\n            T.PaperGsm AS ItemSection_PaperGsm, \r\n            T.PaperPac");
            viewString.Append("kPrice AS ItemSection_PaperPackPrice, \r\n            T.PTVRows AS ItemSection_PTV");
            viewString.Append("Rows, \r\n            T.PTVColoumns AS ItemSection_PTVColoumns, \r\n            T.Pa");
            viewString.Append("perWeight1 AS ItemSection_PaperWeight1, \r\n            T.PaperWeight2 AS ItemSect");
            viewString.Append("ion_PaperWeight2, \r\n            T.PaperWeight3 AS ItemSection_PaperWeight3, \r\n  ");
            viewString.Append("          T.PaperWeight4 AS ItemSection_PaperWeight4, \r\n            T.PaperWeigh");
            viewString.Append("t5 AS ItemSection_PaperWeight5, \r\n            T.FinishedItemQty1 AS ItemSection_");
            viewString.Append("FinishedItemQty1, \r\n            T.FinishedItemQty2 AS ItemSection_FinishedItemQt");
            viewString.Append("y2, \r\n            T.FinishedItemQty3 AS ItemSection_FinishedItemQty3, \r\n        ");
            viewString.Append("    T.FinishedItemQty4 AS ItemSection_FinishedItemQty4, \r\n            T.Finished");
            viewString.Append("ItemQty5 AS ItemSection_FinishedItemQty5, \r\n            T.ProfileId AS ItemSecti");
            viewString.Append("on_ProfileId, \r\n            T.SelectedPressCalculationMethodId AS ItemSection_Se");
            viewString.Append("lectedPressCalculationMethodId, \r\n            T.SectionNotes AS ItemSection_Sect");
            viewString.Append("ionNotes, \r\n            T.IsScheduled AS ItemSection_IsScheduled, \r\n            ");
            viewString.Append("T.ImageType AS ItemSection_ImageType, \r\n            T.WebClylinderHeight AS Item");
            viewString.Append("Section_WebClylinderHeight, \r\n            T.WebCylinderWidth AS ItemSection_WebC");
            viewString.Append("ylinderWidth, \r\n            T.WebCylinderId AS ItemSection_WebCylinderId, \r\n    ");
            viewString.Append("        T.WebPaperLengthWithSp AS ItemSection_WebPaperLengthWithSp, \r\n          ");
            viewString.Append("  T.WebPaperLengthWoSp AS ItemSection_WebPaperLengthWoSp, \r\n            T.WebRee");
            viewString.Append("lMakereadyQty AS ItemSection_WebReelMakereadyQty, \r\n            T.WebStockPaperC");
            viewString.Append("ost AS ItemSection_WebStockPaperCost, \r\n            T.WebSpoilageType AS ItemSec");
            viewString.Append("tion_WebSpoilageType, \r\n            T.PressPassesQty AS ItemSection_PressPassesQ");
            viewString.Append("ty, \r\n            T.PrintingType AS ItemSection_PrintingType, \r\n            T.Pa");
            viewString.Append("dsLeafQty AS ItemSection_PadsLeafQty, \r\n            T.PadsQuantity AS ItemSectio");
            viewString.Append("n_PadsQuantity, \r\n            T.LastUpdateDate AS ItemSection_LastUpdateDate, \r\n");
            viewString.Append("            T.LastUpdatedBy AS ItemSection_LastUpdatedBy, \r\n            T.Qty1Ma");
            viewString.Append("rkUpID AS ItemSection_Qty1MarkUpID, \r\n            T.Qty2MarkUpID AS ItemSection_");
            viewString.Append("Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS ItemSection_Qty3MarkUpID, \r\n      ");
            viewString.Append("      T.StockItemID1 AS ItemSection_StockItemID1, \r\n            T.StockItemID2 A");
            viewString.Append("S ItemSection_StockItemID2, \r\n            T.StockItemID3 AS ItemSection_StockIte");
            viewString.Append("mID3, \r\n            T.Side1PlateQty AS ItemSection_Side1PlateQty, \r\n            ");
            viewString.Append("T.IsPortrait AS ItemSection_IsPortrait, \r\n            T.Side2PlateQty AS ItemSec");
            viewString.Append("tion_Side2PlateQty, \r\n            T.InkColorType AS ItemSection_InkColorType, \r\n");
            viewString.Append("            T.PlateInkId AS ItemSection_PlateInkId, \r\n            T.SimilarSecti");
            viewString.Append("ons AS ItemSection_SimilarSections, \r\n            T.QuestionQueue AS ItemSection");
            viewString.Append("_QuestionQueue, \r\n            T.InputQueue AS ItemSection_InputQueue, \r\n        ");
            viewString.Append("    T.StockQueue AS ItemSection_StockQueue, \r\n            T.CostCentreQueue AS I");
            viewString.Append("temSection_CostCentreQueue, \r\n            T.PressIdSide2 AS ItemSection_PressIdS");
            viewString.Append("ide2, \r\n            T.ImpressionCoverageSide1 AS ItemSection_ImpressionCoverageS");
            viewString.Append("ide1, \r\n            T.ImpressionCoverageSide2 AS ItemSection_ImpressionCoverageS");
            viewString.Append("ide2, \r\n            T.PassesSide1 AS ItemSection_PassesSide1, \r\n            T.Pa");
            viewString.Append("ssesSide2 AS ItemSection_PassesSide2, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" BaseDbContext.ItemSections AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemSection", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStockOption
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStockOption", @"
    SELECT VALUE -- Constructing ItemStockOption
        [DomainModels.Store.ItemStockOption](T1.ItemStockOption_ItemStockOptionId, T1.ItemStockOption_ItemId, T1.ItemStockOption_OptionSequence, T1.ItemStockOption_StockId, T1.ItemStockOption_StockLabel, T1.ItemStockOption_CompanyId, T1.ItemStockOption_ImageURL)
    FROM (
        SELECT 
            T.ItemStockOptionId AS ItemStockOption_ItemStockOptionId, 
            T.ItemId AS ItemStockOption_ItemId, 
            T.OptionSequence AS ItemStockOption_OptionSequence, 
            T.StockId AS ItemStockOption_StockId, 
            T.StockLabel AS ItemStockOption_StockLabel, 
            T.CompanyId AS ItemStockOption_CompanyId, 
            T.ImageURL AS ItemStockOption_ImageURL, 
            True AS _from0
        FROM BaseDbContext.ItemStockOptions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemVDPPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemVDPPrice", @"
    SELECT VALUE -- Constructing ItemVDPPrice
        [DomainModels.Store.ItemVDPPrice](T1.ItemVDPPrice_ItemVDPPriceId, T1.ItemVDPPrice_ClickRangeTo, T1.ItemVDPPrice_ClickRangeFrom, T1.ItemVDPPrice_PricePerClick, T1.ItemVDPPrice_SetupCharge, T1.ItemVDPPrice_ItemId)
    FROM (
        SELECT 
            T.ItemVdpPriceId AS ItemVDPPrice_ItemVDPPriceId, 
            T.ClickRangeTo AS ItemVDPPrice_ClickRangeTo, 
            T.ClickRangeFrom AS ItemVDPPrice_ClickRangeFrom, 
            T.PricePerClick AS ItemVDPPrice_PricePerClick, 
            T.SetupCharge AS ItemVDPPrice_SetupCharge, 
            T.ItemId AS ItemVDPPrice_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemVdpPrices1 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Country
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Country", @"
    SELECT VALUE -- Constructing Country
        [DomainModels.Store.Country](T1.Country_CountryID, T1.Country_CountryName, T1.Country_CountryCode)
    FROM (
        SELECT 
            T.CountryId AS Country_CountryID, 
            T.CountryName AS Country_CountryName, 
            T.CountryCode AS Country_CountryCode, 
            True AS _from0
        FROM BaseDbContext.Countries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostcentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(10958);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SectionCostcentre\r\n        [DomainModels.Stor");
            viewString.Append("e.SectionCostcentre](T1.SectionCostcentre_SectionCostcentreId, T1.SectionCostcen");
            viewString.Append("tre_ItemSectionId, T1.SectionCostcentre_CostCentreId, T1.SectionCostcentre_CostC");
            viewString.Append("entreType, T1.SectionCostcentre_SystemCostCentreType, T1.SectionCostcentre_Order");
            viewString.Append(", T1.SectionCostcentre_IsDirectCost, T1.SectionCostcentre_IsOptionalExtra, T1.Se");
            viewString.Append("ctionCostcentre_IsPurchaseOrderRaised, T1.SectionCostcentre_Status, T1.SectionCo");
            viewString.Append("stcentre_ActivityUser, T1.SectionCostcentre_IsPrintable, T1.SectionCostcentre_Es");
            viewString.Append("timatedStartTime, T1.SectionCostcentre_EstimatedDuration, T1.SectionCostcentre_E");
            viewString.Append("stimatedEndTime, T1.SectionCostcentre_ActualDuration, T1.SectionCostcentre_Actua");
            viewString.Append("lStartDateTime, T1.SectionCostcentre_ActualEndTime, T1.SectionCostcentre_Qty1Cha");
            viewString.Append("rge, T1.SectionCostcentre_Qty2Charge, T1.SectionCostcentre_Qty3Charge, T1.Sectio");
            viewString.Append("nCostcentre_Qty4Charge, T1.SectionCostcentre_Qty5Charge, T1.SectionCostcentre_Qt");
            viewString.Append("y1MarkUpID, T1.SectionCostcentre_Qty2MarkUpID, T1.SectionCostcentre_Qty3MarkUpID");
            viewString.Append(", T1.SectionCostcentre_Qty4MarkUpID, T1.SectionCostcentre_Qty5MarkUpID, T1.Secti");
            viewString.Append("onCostcentre_Qty1MarkUpValue, T1.SectionCostcentre_Qty2MarkUpValue, T1.SectionCo");
            viewString.Append("stcentre_Qty3MarkUpValue, T1.SectionCostcentre_Qty4MarkUpValue, T1.SectionCostce");
            viewString.Append("ntre_Qty5MarkUpValue, T1.SectionCostcentre_Qty1NetTotal, T1.SectionCostcentre_Qt");
            viewString.Append("y2NetTotal, T1.SectionCostcentre_Qty3NetTotal, T1.SectionCostcentre_Qty4NetTotal");
            viewString.Append(", T1.SectionCostcentre_Qty5NetTotal, T1.SectionCostcentre_Qty1EstimatedPlantCost");
            viewString.Append(", T1.SectionCostcentre_Qty1EstimatedLabourCost, T1.SectionCostcentre_Qty1Estimat");
            viewString.Append("edStockCost, T1.SectionCostcentre_Qty1EstimatedTime, T1.SectionCostcentre_Qty1Qu");
            viewString.Append("otedPlantCharge, T1.SectionCostcentre_Qty1QuotedLabourCharge, T1.SectionCostcent");
            viewString.Append("re_Qty1QuotedStockCharge, T1.SectionCostcentre_Qty2EstimatedPlantCost, T1.Sectio");
            viewString.Append("nCostcentre_Qty2EstimatedLabourCost, T1.SectionCostcentre_Qty2EstimatedStockCost");
            viewString.Append(", T1.SectionCostcentre_Qty2EstimatedTime, T1.SectionCostcentre_Qty2QuotedPlantCh");
            viewString.Append("arge, T1.SectionCostcentre_Qty2QuotedLabourCharge, T1.SectionCostcentre_Qty2Quot");
            viewString.Append("edStockCharge, T1.SectionCostcentre_Qty3EstimatedPlantCost, T1.SectionCostcentre");
            viewString.Append("_Qty3EstimatedLabourCost, T1.SectionCostcentre_Qty3EstimatedStockCost, T1.Sectio");
            viewString.Append("nCostcentre_Qty3EstimatedTime, T1.SectionCostcentre_Qty3QuotedPlantCharge, T1.Se");
            viewString.Append("ctionCostcentre_Qty3QuotedLabourCharge, T1.SectionCostcentre_Qty3QuotedStockChar");
            viewString.Append("ge, T1.SectionCostcentre_Qty4EstimatedPlantCost, T1.SectionCostcentre_Qty4Estima");
            viewString.Append("tedLabourCost, T1.SectionCostcentre_Qty4EstimatedStockCost, T1.SectionCostcentre");
            viewString.Append("_Qty4EstimatedTime, T1.SectionCostcentre_Qty4QuotedPlantCharge, T1.SectionCostce");
            viewString.Append("ntre_Qty4QuotedLabourCharge, T1.SectionCostcentre_Qty4QuotedStockCharge, T1.Sect");
            viewString.Append("ionCostcentre_Qty5EstimatedPlantCost, T1.SectionCostcentre_Qty5EstimatedLabourCo");
            viewString.Append("st, T1.SectionCostcentre_Qty5EstimatedStockCost, T1.SectionCostcentre_Qty5Estima");
            viewString.Append("tedTime, T1.SectionCostcentre_Qty5QuotedPlantCharge, T1.SectionCostcentre_Qty5Qu");
            viewString.Append("otedLabourCharge, T1.SectionCostcentre_Qty5QuotedStockCharge, T1.SectionCostcent");
            viewString.Append("re_ActualPlantCost, T1.SectionCostcentre_ActualLabourCost, T1.SectionCostcentre_");
            viewString.Append("ActualStockCost, T1.SectionCostcentre_Qty1WorkInstructions, T1.SectionCostcentre");
            viewString.Append("_Qty2WorkInstructions, T1.SectionCostcentre_Qty3WorkInstructions, T1.SectionCost");
            viewString.Append("centre_Qty4WorkInstructions, T1.SectionCostcentre_Qty5WorkInstructions, T1.Secti");
            viewString.Append("onCostcentre_IsCostCentreUsedinPurchaseOrder, T1.SectionCostcentre_IsMinimumCost");
            viewString.Append(", T1.SectionCostcentre_SetupTime, T1.SectionCostcentre_IsScheduled, T1.SectionCo");
            viewString.Append("stcentre_IsScheduleable, T1.SectionCostcentre_Locked, T1.SectionCostcentre_Costi");
            viewString.Append("ngActualCost, T1.SectionCostcentre_CostingActualTime, T1.SectionCostcentre_Costi");
            viewString.Append("ngActualQty, T1.SectionCostcentre_Name, T1.SectionCostcentre_Qty1, T1.SectionCos");
            viewString.Append("tcentre_Qty2, T1.SectionCostcentre_Qty3, T1.SectionCostcentre_SetupCost, T1.Sect");
            viewString.Append("ionCostcentre_PricePerUnitQty)\r\n    FROM (\r\n        SELECT \r\n            T.Secti");
            viewString.Append("onCostcentreId AS SectionCostcentre_SectionCostcentreId, \r\n            T.ItemSec");
            viewString.Append("tionId AS SectionCostcentre_ItemSectionId, \r\n            T.CostCentreId AS Secti");
            viewString.Append("onCostcentre_CostCentreId, \r\n            T.CostCentreType AS SectionCostcentre_C");
            viewString.Append("ostCentreType, \r\n            T.SystemCostCentreType AS SectionCostcentre_SystemC");
            viewString.Append("ostCentreType, \r\n            T.[Order] AS SectionCostcentre_Order, \r\n           ");
            viewString.Append(" T.IsDirectCost AS SectionCostcentre_IsDirectCost, \r\n            T.IsOptionalExt");
            viewString.Append("ra AS SectionCostcentre_IsOptionalExtra, \r\n            T.IsPurchaseOrderRaised A");
            viewString.Append("S SectionCostcentre_IsPurchaseOrderRaised, \r\n            T.Status AS SectionCost");
            viewString.Append("centre_Status, \r\n            T.ActivityUser AS SectionCostcentre_ActivityUser, \r");
            viewString.Append("\n            T.IsPrintable AS SectionCostcentre_IsPrintable, \r\n            T.Est");
            viewString.Append("imatedStartTime AS SectionCostcentre_EstimatedStartTime, \r\n            T.Estimat");
            viewString.Append("edDuration AS SectionCostcentre_EstimatedDuration, \r\n            T.EstimatedEndT");
            viewString.Append("ime AS SectionCostcentre_EstimatedEndTime, \r\n            T.ActualDuration AS Sec");
            viewString.Append("tionCostcentre_ActualDuration, \r\n            T.ActualStartDateTime AS SectionCos");
            viewString.Append("tcentre_ActualStartDateTime, \r\n            T.ActualEndTime AS SectionCostcentre_");
            viewString.Append("ActualEndTime, \r\n            T.Qty1Charge AS SectionCostcentre_Qty1Charge, \r\n   ");
            viewString.Append("         T.Qty2Charge AS SectionCostcentre_Qty2Charge, \r\n            T.Qty3Charg");
            viewString.Append("e AS SectionCostcentre_Qty3Charge, \r\n            T.Qty4Charge AS SectionCostcent");
            viewString.Append("re_Qty4Charge, \r\n            T.Qty5Charge AS SectionCostcentre_Qty5Charge, \r\n   ");
            viewString.Append("         T.Qty1MarkUpID AS SectionCostcentre_Qty1MarkUpID, \r\n            T.Qty2M");
            viewString.Append("arkUpID AS SectionCostcentre_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS Secti");
            viewString.Append("onCostcentre_Qty3MarkUpID, \r\n            T.Qty4MarkUpID AS SectionCostcentre_Qty");
            viewString.Append("4MarkUpID, \r\n            T.Qty5MarkUpID AS SectionCostcentre_Qty5MarkUpID, \r\n   ");
            viewString.Append("         T.Qty1MarkUpValue AS SectionCostcentre_Qty1MarkUpValue, \r\n            T");
            viewString.Append(".Qty2MarkUpValue AS SectionCostcentre_Qty2MarkUpValue, \r\n            T.Qty3MarkU");
            viewString.Append("pValue AS SectionCostcentre_Qty3MarkUpValue, \r\n            T.Qty4MarkUpValue AS ");
            viewString.Append("SectionCostcentre_Qty4MarkUpValue, \r\n            T.Qty5MarkUpValue AS SectionCos");
            viewString.Append("tcentre_Qty5MarkUpValue, \r\n            T.Qty1NetTotal AS SectionCostcentre_Qty1N");
            viewString.Append("etTotal, \r\n            T.Qty2NetTotal AS SectionCostcentre_Qty2NetTotal, \r\n     ");
            viewString.Append("       T.Qty3NetTotal AS SectionCostcentre_Qty3NetTotal, \r\n            T.Qty4Net");
            viewString.Append("Total AS SectionCostcentre_Qty4NetTotal, \r\n            T.Qty5NetTotal AS Section");
            viewString.Append("Costcentre_Qty5NetTotal, \r\n            T.Qty1EstimatedPlantCost AS SectionCostce");
            viewString.Append("ntre_Qty1EstimatedPlantCost, \r\n            T.Qty1EstimatedLabourCost AS SectionC");
            viewString.Append("ostcentre_Qty1EstimatedLabourCost, \r\n            T.Qty1EstimatedStockCost AS Sec");
            viewString.Append("tionCostcentre_Qty1EstimatedStockCost, \r\n            T.Qty1EstimatedTime AS Sect");
            viewString.Append("ionCostcentre_Qty1EstimatedTime, \r\n            T.Qty1QuotedPlantCharge AS Sectio");
            viewString.Append("nCostcentre_Qty1QuotedPlantCharge, \r\n            T.Qty1QuotedLabourCharge AS Sec");
            viewString.Append("tionCostcentre_Qty1QuotedLabourCharge, \r\n            T.Qty1QuotedStockCharge AS ");
            viewString.Append("SectionCostcentre_Qty1QuotedStockCharge, \r\n            T.Qty2EstimatedPlantCost ");
            viewString.Append("AS SectionCostcentre_Qty2EstimatedPlantCost, \r\n            T.Qty2EstimatedLabour");
            viewString.Append("Cost AS SectionCostcentre_Qty2EstimatedLabourCost, \r\n            T.Qty2Estimated");
            viewString.Append("StockCost AS SectionCostcentre_Qty2EstimatedStockCost, \r\n            T.Qty2Estim");
            viewString.Append("atedTime AS SectionCostcentre_Qty2EstimatedTime, \r\n            T.Qty2QuotedPlant");
            viewString.Append("Charge AS SectionCostcentre_Qty2QuotedPlantCharge, \r\n            T.Qty2QuotedLab");
            viewString.Append("ourCharge AS SectionCostcentre_Qty2QuotedLabourCharge, \r\n            T.Qty2Quote");
            viewString.Append("dStockCharge AS SectionCostcentre_Qty2QuotedStockCharge, \r\n            T.Qty3Est");
            viewString.Append("imatedPlantCost AS SectionCostcentre_Qty3EstimatedPlantCost, \r\n            T.Qty");
            viewString.Append("3EstimatedLabourCost AS SectionCostcentre_Qty3EstimatedLabourCost, \r\n           ");
            viewString.Append(" T.Qty3EstimatedStockCost AS SectionCostcentre_Qty3EstimatedStockCost, \r\n       ");
            viewString.Append("     T.Qty3EstimatedTime AS SectionCostcentre_Qty3EstimatedTime, \r\n            T");
            viewString.Append(".Qty3QuotedPlantCharge AS SectionCostcentre_Qty3QuotedPlantCharge, \r\n           ");
            viewString.Append(" T.Qty3QuotedLabourCharge AS SectionCostcentre_Qty3QuotedLabourCharge, \r\n       ");
            viewString.Append("     T.Qty3QuotedStockCharge AS SectionCostcentre_Qty3QuotedStockCharge, \r\n     ");
            viewString.Append("       T.Qty4EstimatedPlantCost AS SectionCostcentre_Qty4EstimatedPlantCost, \r\n ");
            viewString.Append("           T.Qty4EstimatedLabourCost AS SectionCostcentre_Qty4EstimatedLabourCos");
            viewString.Append("t, \r\n            T.Qty4EstimatedStockCost AS SectionCostcentre_Qty4EstimatedStoc");
            viewString.Append("kCost, \r\n            T.Qty4EstimatedTime AS SectionCostcentre_Qty4EstimatedTime,");
            viewString.Append(" \r\n            T.Qty4QuotedPlantCharge AS SectionCostcentre_Qty4QuotedPlantCharg");
            viewString.Append("e, \r\n            T.Qty4QuotedLabourCharge AS SectionCostcentre_Qty4QuotedLabourC");
            viewString.Append("harge, \r\n            T.Qty4QuotedStockCharge AS SectionCostcentre_Qty4QuotedStoc");
            viewString.Append("kCharge, \r\n            T.Qty5EstimatedPlantCost AS SectionCostcentre_Qty5Estimat");
            viewString.Append("edPlantCost, \r\n            T.Qty5EstimatedLabourCost AS SectionCostcentre_Qty5Es");
            viewString.Append("timatedLabourCost, \r\n            T.Qty5EstimatedStockCost AS SectionCostcentre_Q");
            viewString.Append("ty5EstimatedStockCost, \r\n            T.Qty5EstimatedTime AS SectionCostcentre_Qt");
            viewString.Append("y5EstimatedTime, \r\n            T.Qty5QuotedPlantCharge AS SectionCostcentre_Qty5");
            viewString.Append("QuotedPlantCharge, \r\n            T.Qty5QuotedLabourCharge AS SectionCostcentre_Q");
            viewString.Append("ty5QuotedLabourCharge, \r\n            T.Qty5QuotedStockCharge AS SectionCostcentr");
            viewString.Append("e_Qty5QuotedStockCharge, \r\n            T.ActualPlantCost AS SectionCostcentre_Ac");
            viewString.Append("tualPlantCost, \r\n            T.ActualLabourCost AS SectionCostcentre_ActualLabou");
            viewString.Append("rCost, \r\n            T.ActualStockCost AS SectionCostcentre_ActualStockCost, \r\n ");
            viewString.Append("           T.Qty1WorkInstructions AS SectionCostcentre_Qty1WorkInstructions, \r\n ");
            viewString.Append("           T.Qty2WorkInstructions AS SectionCostcentre_Qty2WorkInstructions, \r\n ");
            viewString.Append("           T.Qty3WorkInstructions AS SectionCostcentre_Qty3WorkInstructions, \r\n ");
            viewString.Append("           T.Qty4WorkInstructions AS SectionCostcentre_Qty4WorkInstructions, \r\n ");
            viewString.Append("           T.Qty5WorkInstructions AS SectionCostcentre_Qty5WorkInstructions, \r\n ");
            viewString.Append("           T.IsCostCentreUsedinPurchaseOrder AS SectionCostcentre_IsCostCentreUs");
            viewString.Append("edinPurchaseOrder, \r\n            T.IsMinimumCost AS SectionCostcentre_IsMinimumC");
            viewString.Append("ost, \r\n            T.SetupTime AS SectionCostcentre_SetupTime, \r\n            T.I");
            viewString.Append("sScheduled AS SectionCostcentre_IsScheduled, \r\n            T.IsScheduleable AS S");
            viewString.Append("ectionCostcentre_IsScheduleable, \r\n            T.Locked AS SectionCostcentre_Loc");
            viewString.Append("ked, \r\n            T.CostingActualCost AS SectionCostcentre_CostingActualCost, \r");
            viewString.Append("\n            T.CostingActualTime AS SectionCostcentre_CostingActualTime, \r\n     ");
            viewString.Append("       T.CostingActualQty AS SectionCostcentre_CostingActualQty, \r\n            T");
            viewString.Append(".Name AS SectionCostcentre_Name, \r\n            T.Qty1 AS SectionCostcentre_Qty1,");
            viewString.Append(" \r\n            T.Qty2 AS SectionCostcentre_Qty2, \r\n            T.Qty3 AS Section");
            viewString.Append("Costcentre_Qty3, \r\n            T.SetupCost AS SectionCostcentre_SetupCost, \r\n   ");
            viewString.Append("         T.PricePerUnitQty AS SectionCostcentre_PricePerUnitQty, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM BaseDbContext.SectionCostcentres AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostcentre", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostCentreDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostCentreDetail", @"
    SELECT VALUE -- Constructing SectionCostCentreDetail
        [DomainModels.Store.SectionCostCentreDetail](T1.SectionCostCentreDetail_SectionCostCentreDetailId, T1.SectionCostCentreDetail_SectionCostCentreId, T1.SectionCostCentreDetail_StockId, T1.SectionCostCentreDetail_SupplierId, T1.SectionCostCentreDetail_Qty1, T1.SectionCostCentreDetail_Qty2, T1.SectionCostCentreDetail_Qty3, T1.SectionCostCentreDetail_CostPrice, T1.SectionCostCentreDetail_ActualQtyUsed, T1.SectionCostCentreDetail_StockName, T1.SectionCostCentreDetail_Supplier)
    FROM (
        SELECT 
            T.SectionCostCentreDetailId AS SectionCostCentreDetail_SectionCostCentreDetailId, 
            T.SectionCostCentreId AS SectionCostCentreDetail_SectionCostCentreId, 
            T.StockId AS SectionCostCentreDetail_StockId, 
            T.SupplierId AS SectionCostCentreDetail_SupplierId, 
            T.Qty1 AS SectionCostCentreDetail_Qty1, 
            T.Qty2 AS SectionCostCentreDetail_Qty2, 
            T.Qty3 AS SectionCostCentreDetail_Qty3, 
            T.CostPrice AS SectionCostCentreDetail_CostPrice, 
            T.ActualQtyUsed AS SectionCostCentreDetail_ActualQtyUsed, 
            T.StockName AS SectionCostCentreDetail_StockName, 
            T.Supplier AS SectionCostCentreDetail_Supplier, 
            True AS _from0
        FROM BaseDbContext.SectionCostCentreDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionCostCentreResource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionCostCentreResource", @"
    SELECT VALUE -- Constructing SectionCostCentreResource
        [DomainModels.Store.SectionCostCentreResource](T1.SectionCostCentreResource_SectionCostCentreResourceId, T1.SectionCostCentreResource_SectionCostcentreId, T1.SectionCostCentreResource_ResourceId, T1.SectionCostCentreResource_ResourceTime, T1.SectionCostCentreResource_IsScheduleable, T1.SectionCostCentreResource_IsScheduled)
    FROM (
        SELECT 
            T.SectionCostCentreResourceId AS SectionCostCentreResource_SectionCostCentreResourceId, 
            T.SectionCostcentreId AS SectionCostCentreResource_SectionCostcentreId, 
            T.ResourceId AS SectionCostCentreResource_ResourceId, 
            T.ResourceTime AS SectionCostCentreResource_ResourceTime, 
            T.IsScheduleable AS SectionCostCentreResource_IsScheduleable, 
            T.IsScheduled AS SectionCostCentreResource_IsScheduled, 
            True AS _from0
        FROM BaseDbContext.SectionCostCentreResources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.State
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.State", @"
    SELECT VALUE -- Constructing State
        [DomainModels.Store.State](T1.State_StateId, T1.State_CountryId, T1.State_StateCode, T1.State_StateName)
    FROM (
        SELECT 
            T.StateId AS State_StateId, 
            T.CountryId AS State_CountryId, 
            T.StateCode AS State_StateCode, 
            T.StateName AS State_StateName, 
            True AS _from0
        FROM BaseDbContext.States AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Status
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Status", @"
    SELECT VALUE -- Constructing Status
        [DomainModels.Store.Status](T1.Status_StatusId, T1.Status_StatusName, T1.Status_Description, T1.Status_StatusType)
    FROM (
        SELECT 
            T.StatusId AS Status_StatusId, 
            T.StatusName AS Status_StatusName, 
            T.Description AS Status_Description, 
            T.StatusType AS Status_StatusType, 
            True AS _from0
        FROM BaseDbContext.Status AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Estimate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7668);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Estimate\r\n        [DomainModels.Store.Estimat");
            viewString.Append("e](T1.Estimate_EstimateId, T1.[Estimate.Estimate_Code], T1.[Estimate.Estimate_Na");
            viewString.Append("me], T1.Estimate_EnquiryId, T1.Estimate_CompanyId, T1.Estimate_ContactId, T1.Est");
            viewString.Append("imate_StatusId, T1.[Estimate.Estimate_Total], T1.[Estimate.Estimate_ValidUpto], ");
            viewString.Append("T1.Estimate_UserNotes, T1.Estimate_LastUpdatedBy, T1.Estimate_CreationDate, T1.E");
            viewString.Append("stimate_CreationTime, T1.[Estimate.Created_by], T1.Estimate_SalesPersonId, T1.Es");
            viewString.Append("timate_HeadNotes, T1.Estimate_FootNotes, T1.Estimate_EstimateDate, T1.Estimate_P");
            viewString.Append("rojectionDate, T1.Estimate_Greeting, T1.Estimate_AccountNumber, T1.Estimate_Orde");
            viewString.Append("rNo, T1.Estimate_SuccessChanceId, T1.Estimate_LockedBy, T1.Estimate_AddressId, T");
            viewString.Append("1.Estimate_SectionFlagId, T1.Estimate_SourceId, T1.Estimate_ProductId, T1.Estima");
            viewString.Append("te_IsInPipeLine, T1.[Estimate.Order_Code], T1.[Estimate.Order_Date], T1.[Estimat");
            viewString.Append("e.Order_CreationDateTime], T1.[Estimate.Order_DeliveryDate], T1.[Estimate.Order_");
            viewString.Append("ConfirmationDate], T1.[Estimate.Order_Status], T1.[Estimate.Order_CompletionDate");
            viewString.Append("], T1.Estimate_OrderManagerId, T1.Estimate_ArtworkByDate, T1.Estimate_DataByDate");
            viewString.Append(", T1.Estimate_TargetPrintDate, T1.Estimate_StartDeliveryDate, T1.Estimate_PaperB");
            viewString.Append("yDate, T1.Estimate_TargetBindDate, T1.Estimate_FinishDeliveryDate, T1.Estimate_C");
            viewString.Append("lassification1Id, T1.Estimate_Classification2ID, T1.Estimate_IsOfficialOrder, T1");
            viewString.Append(".Estimate_CustomerPO, T1.Estimate_OfficialOrderSetBy, T1.Estimate_OfficialOrderS");
            viewString.Append("etOnDateTime, T1.Estimate_IsCreditApproved, T1.Estimate_CreditLimitForJob, T1.Es");
            viewString.Append("timate_CreditLimitSetBy, T1.Estimate_CreditLimitSetOnDateTime, T1.Estimate_IsJob");
            viewString.Append("AllowedWOCreditCheck, T1.Estimate_AllowJobWOCreditCheckSetBy, T1.Estimate_AllowJ");
            viewString.Append("obWOCreditCheckSetOnDateTime, T1.Estimate_NotesUpdateDateTime, T1.Estimate_Notes");
            viewString.Append("UpdatedByUserId, T1.Estimate_OrderSourceId, T1.Estimate_IsRead, T1.Estimate_Esti");
            viewString.Append("mateSentTo, T1.Estimate_EstimateValueChanged, T1.Estimate_NewItemAdded, T1.Estim");
            viewString.Append("ate_isEstimate, T1.Estimate_isDirectSale, T1.Estimate_LastUpdateDate, T1.Estimat");
            viewString.Append("e_NominalCode, T1.Estimate_BillingAddressId, T1.Estimate_DeliveryCostCenterId, T");
            viewString.Append("1.Estimate_DeliveryCost, T1.Estimate_DeliveryCompletionTime, T1.Estimate_Voucher");
            viewString.Append("DiscountRate, T1.Estimate_ReportSignedBy, T1.Estimate_InvoiceId, T1.Estimate_Ord");
            viewString.Append("erReportSignedBy, T1.Estimate_OrderReportLastPrinted, T1.Estimate_EstimateReport");
            viewString.Append("LastPrinted, T1.Estimate_isEmailSent, T1.Estimate_DiscountVoucherID, T1.Estimate");
            viewString.Append("_ClientStatus, T1.Estimate_RefEstimateId, T1.Estimate_XeroAccessCode, T1.Estimat");
            viewString.Append("e_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimateId AS Esti");
            viewString.Append("mate_EstimateId, \r\n            T.Estimate_Code AS [Estimate.Estimate_Code], \r\n  ");
            viewString.Append("          T.Estimate_Name AS [Estimate.Estimate_Name], \r\n            T.EnquiryId");
            viewString.Append(" AS Estimate_EnquiryId, \r\n            T.CompanyId AS Estimate_CompanyId, \r\n     ");
            viewString.Append("       T.ContactId AS Estimate_ContactId, \r\n            T.StatusId AS Estimate_S");
            viewString.Append("tatusId, \r\n            T.Estimate_Total AS [Estimate.Estimate_Total], \r\n        ");
            viewString.Append("    T.Estimate_ValidUpto AS [Estimate.Estimate_ValidUpto], \r\n            T.UserN");
            viewString.Append("otes AS Estimate_UserNotes, \r\n            T.LastUpdatedBy AS Estimate_LastUpdate");
            viewString.Append("dBy, \r\n            T.CreationDate AS Estimate_CreationDate, \r\n            T.Crea");
            viewString.Append("tionTime AS Estimate_CreationTime, \r\n            T.Created_by AS [Estimate.Creat");
            viewString.Append("ed_by], \r\n            T.SalesPersonId AS Estimate_SalesPersonId, \r\n            T");
            viewString.Append(".HeadNotes AS Estimate_HeadNotes, \r\n            T.FootNotes AS Estimate_FootNote");
            viewString.Append("s, \r\n            T.EstimateDate AS Estimate_EstimateDate, \r\n            T.Projec");
            viewString.Append("tionDate AS Estimate_ProjectionDate, \r\n            T.Greeting AS Estimate_Greeti");
            viewString.Append("ng, \r\n            T.AccountNumber AS Estimate_AccountNumber, \r\n            T.Ord");
            viewString.Append("erNo AS Estimate_OrderNo, \r\n            T.SuccessChanceId AS Estimate_SuccessCha");
            viewString.Append("nceId, \r\n            T.LockedBy AS Estimate_LockedBy, \r\n            T.AddressId ");
            viewString.Append("AS Estimate_AddressId, \r\n            T.SectionFlagId AS Estimate_SectionFlagId, ");
            viewString.Append("\r\n            T.SourceId AS Estimate_SourceId, \r\n            T.ProductId AS Esti");
            viewString.Append("mate_ProductId, \r\n            T.IsInPipeLine AS Estimate_IsInPipeLine, \r\n       ");
            viewString.Append("     T.Order_Code AS [Estimate.Order_Code], \r\n            T.Order_Date AS [Estim");
            viewString.Append("ate.Order_Date], \r\n            T.Order_CreationDateTime AS [Estimate.Order_Creat");
            viewString.Append("ionDateTime], \r\n            T.Order_DeliveryDate AS [Estimate.Order_DeliveryDate");
            viewString.Append("], \r\n            T.Order_ConfirmationDate AS [Estimate.Order_ConfirmationDate], ");
            viewString.Append("\r\n            T.Order_Status AS [Estimate.Order_Status], \r\n            T.Order_C");
            viewString.Append("ompletionDate AS [Estimate.Order_CompletionDate], \r\n            T.OrderManagerId");
            viewString.Append(" AS Estimate_OrderManagerId, \r\n            T.ArtworkByDate AS Estimate_ArtworkBy");
            viewString.Append("Date, \r\n            T.DataByDate AS Estimate_DataByDate, \r\n            T.TargetP");
            viewString.Append("rintDate AS Estimate_TargetPrintDate, \r\n            T.StartDeliveryDate AS Estim");
            viewString.Append("ate_StartDeliveryDate, \r\n            T.PaperByDate AS Estimate_PaperByDate, \r\n  ");
            viewString.Append("          T.TargetBindDate AS Estimate_TargetBindDate, \r\n            T.FinishDel");
            viewString.Append("iveryDate AS Estimate_FinishDeliveryDate, \r\n            T.Classification1Id AS E");
            viewString.Append("stimate_Classification1Id, \r\n            T.Classification2ID AS Estimate_Classif");
            viewString.Append("ication2ID, \r\n            T.IsOfficialOrder AS Estimate_IsOfficialOrder, \r\n     ");
            viewString.Append("       T.CustomerPO AS Estimate_CustomerPO, \r\n            T.OfficialOrderSetBy A");
            viewString.Append("S Estimate_OfficialOrderSetBy, \r\n            T.OfficialOrderSetOnDateTime AS Est");
            viewString.Append("imate_OfficialOrderSetOnDateTime, \r\n            T.IsCreditApproved AS Estimate_I");
            viewString.Append("sCreditApproved, \r\n            T.CreditLimitForJob AS Estimate_CreditLimitForJob");
            viewString.Append(", \r\n            T.CreditLimitSetBy AS Estimate_CreditLimitSetBy, \r\n            T");
            viewString.Append(".CreditLimitSetOnDateTime AS Estimate_CreditLimitSetOnDateTime, \r\n            T.");
            viewString.Append("IsJobAllowedWOCreditCheck AS Estimate_IsJobAllowedWOCreditCheck, \r\n            T");
            viewString.Append(".AllowJobWOCreditCheckSetBy AS Estimate_AllowJobWOCreditCheckSetBy, \r\n          ");
            viewString.Append("  T.AllowJobWOCreditCheckSetOnDateTime AS Estimate_AllowJobWOCreditCheckSetOnDat");
            viewString.Append("eTime, \r\n            T.NotesUpdateDateTime AS Estimate_NotesUpdateDateTime, \r\n  ");
            viewString.Append("          T.NotesUpdatedByUserId AS Estimate_NotesUpdatedByUserId, \r\n           ");
            viewString.Append(" T.OrderSourceId AS Estimate_OrderSourceId, \r\n            T.IsRead AS Estimate_I");
            viewString.Append("sRead, \r\n            T.EstimateSentTo AS Estimate_EstimateSentTo, \r\n            ");
            viewString.Append("T.EstimateValueChanged AS Estimate_EstimateValueChanged, \r\n            T.NewItem");
            viewString.Append("Added AS Estimate_NewItemAdded, \r\n            T.isEstimate AS Estimate_isEstimat");
            viewString.Append("e, \r\n            T.isDirectSale AS Estimate_isDirectSale, \r\n            T.LastUp");
            viewString.Append("dateDate AS Estimate_LastUpdateDate, \r\n            T.NominalCode AS Estimate_Nom");
            viewString.Append("inalCode, \r\n            T.BillingAddressId AS Estimate_BillingAddressId, \r\n     ");
            viewString.Append("       T.DeliveryCostCenterId AS Estimate_DeliveryCostCenterId, \r\n            T.");
            viewString.Append("DeliveryCost AS Estimate_DeliveryCost, \r\n            T.DeliveryCompletionTime AS");
            viewString.Append(" Estimate_DeliveryCompletionTime, \r\n            T.VoucherDiscountRate AS Estimat");
            viewString.Append("e_VoucherDiscountRate, \r\n            T.ReportSignedBy AS Estimate_ReportSignedBy");
            viewString.Append(", \r\n            T.InvoiceId AS Estimate_InvoiceId, \r\n            T.OrderReportSi");
            viewString.Append("gnedBy AS Estimate_OrderReportSignedBy, \r\n            T.OrderReportLastPrinted A");
            viewString.Append("S Estimate_OrderReportLastPrinted, \r\n            T.EstimateReportLastPrinted AS ");
            viewString.Append("Estimate_EstimateReportLastPrinted, \r\n            T.isEmailSent AS Estimate_isEm");
            viewString.Append("ailSent, \r\n            T.DiscountVoucherID AS Estimate_DiscountVoucherID, \r\n    ");
            viewString.Append("        T.ClientStatus AS Estimate_ClientStatus, \r\n            T.RefEstimateId A");
            viewString.Append("S Estimate_RefEstimateId, \r\n            T.XeroAccessCode AS Estimate_XeroAccessC");
            viewString.Append("ode, \r\n            T.OrganisationId AS Estimate_OrganisationId, \r\n            Tr");
            viewString.Append("ue AS _from0\r\n        FROM BaseDbContext.Estimates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Estimate", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaymentGateway
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaymentGateway", "\r\n    SELECT VALUE -- Constructing PaymentGateway\r\n        [DomainModels.Store.Pa" +
                    "ymentGateway](T1.PaymentGateway_PaymentGatewayId, T1.PaymentGateway_BusinessEmai" +
                    "l, T1.PaymentGateway_IdentityToken, T1.PaymentGateway_isActive, T1.PaymentGatewa" +
                    "y_CompanyId, T1.PaymentGateway_PaymentMethodId, T1.PaymentGateway_SecureHash, T1" +
                    ".PaymentGateway_CancelPurchaseUrl, T1.PaymentGateway_ReturnUrl, T1.PaymentGatewa" +
                    "y_NotifyUrl, T1.PaymentGateway_SendToReturnURL, T1.PaymentGateway_UseSandbox, T1" +
                    ".PaymentGateway_LiveApiUrl, T1.PaymentGateway_TestApiUrl)\r\n    FROM (\r\n        S" +
                    "ELECT \r\n            T.PaymentGatewayId AS PaymentGateway_PaymentGatewayId, \r\n   " +
                    "         T.BusinessEmail AS PaymentGateway_BusinessEmail, \r\n            T.Identi" +
                    "tyToken AS PaymentGateway_IdentityToken, \r\n            T.isActive AS PaymentGate" +
                    "way_isActive, \r\n            T.CompanyId AS PaymentGateway_CompanyId, \r\n         " +
                    "   T.PaymentMethodId AS PaymentGateway_PaymentMethodId, \r\n            T.SecureHa" +
                    "sh AS PaymentGateway_SecureHash, \r\n            T.CancelPurchaseUrl AS PaymentGat" +
                    "eway_CancelPurchaseUrl, \r\n            T.ReturnUrl AS PaymentGateway_ReturnUrl, \r" +
                    "\n            T.NotifyUrl AS PaymentGateway_NotifyUrl, \r\n            T.SendToRetu" +
                    "rnURL AS PaymentGateway_SendToReturnURL, \r\n            T.UseSandbox AS PaymentGa" +
                    "teway_UseSandbox, \r\n            T.LiveApiUrl AS PaymentGateway_LiveApiUrl, \r\n   " +
                    "         T.TestApiUrl AS PaymentGateway_TestApiUrl, \r\n            True AS _from0" +
                    "\r\n        FROM BaseDbContext.PaymentGateways AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaymentMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaymentMethod", @"
    SELECT VALUE -- Constructing PaymentMethod
        [DomainModels.Store.PaymentMethod](T1.PaymentMethod_PaymentMethodId, T1.PaymentMethod_MethodName, T1.PaymentMethod_IsActive)
    FROM (
        SELECT 
            T.PaymentMethodId AS PaymentMethod_PaymentMethodId, 
            T.MethodName AS PaymentMethod_MethodName, 
            T.IsActive AS PaymentMethod_IsActive, 
            True AS _from0
        FROM BaseDbContext.PaymentMethods AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PrePayment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PrePayment", @"
    SELECT VALUE -- Constructing PrePayment
        [DomainModels.Store.PrePayment](T1.PrePayment_PrePaymentId, T1.PrePayment_CustomerId, T1.PrePayment_OrderId, T1.PrePayment_Amount, T1.PrePayment_PaymentDate, T1.PrePayment_PayPalResponseId, T1.PrePayment_PaymentMethodId, T1.PrePayment_ReferenceCode, T1.PrePayment_PaymentDescription)
    FROM (
        SELECT 
            T.PrePaymentId AS PrePayment_PrePaymentId, 
            T.CustomerId AS PrePayment_CustomerId, 
            T.OrderId AS PrePayment_OrderId, 
            T.Amount AS PrePayment_Amount, 
            T.PaymentDate AS PrePayment_PaymentDate, 
            T.PayPalResponseId AS PrePayment_PayPalResponseId, 
            T.PaymentMethodId AS PrePayment_PaymentMethodId, 
            T.ReferenceCode AS PrePayment_ReferenceCode, 
            T.PaymentDescription AS PrePayment_PaymentDescription, 
            True AS _from0
        FROM BaseDbContext.PrePayments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.RaveReview
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.RaveReview", @"
    SELECT VALUE -- Constructing RaveReview
        [DomainModels.Store.RaveReview](T1.RaveReview_ReviewId, T1.RaveReview_ReviewBy, T1.RaveReview_Review, T1.RaveReview_ReviewDate, T1.RaveReview_isDisplay, T1.RaveReview_SortOrder, T1.RaveReview_OrganisationId, T1.RaveReview_CompanyId)
    FROM (
        SELECT 
            T.ReviewId AS RaveReview_ReviewId, 
            T.ReviewBy AS RaveReview_ReviewBy, 
            T.Review AS RaveReview_Review, 
            T.ReviewDate AS RaveReview_ReviewDate, 
            T.isDisplay AS RaveReview_isDisplay, 
            T.SortOrder AS RaveReview_SortOrder, 
            T.OrganisationId AS RaveReview_OrganisationId, 
            T.CompanyId AS RaveReview_CompanyId, 
            True AS _from0
        FROM BaseDbContext.RaveReviews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.EmailEvent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.EmailEvent", @"
    SELECT VALUE -- Constructing EmailEvent
        [DomainModels.Store.EmailEvent](T1.EmailEvent_EmailEventId, T1.EmailEvent_EventName, T1.EmailEvent_Description, T1.EmailEvent_EventType)
    FROM (
        SELECT 
            T.EmailEventId AS EmailEvent_EmailEventId, 
            T.EventName AS EmailEvent_EventName, 
            T.Description AS EmailEvent_Description, 
            T.EventType AS EmailEvent_EventType, 
            True AS _from0
        FROM BaseDbContext.EmailEvents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Inquiry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Inquiry", @"
    SELECT VALUE -- Constructing Inquiry
        [DomainModels.Store.Inquiry](T1.Inquiry_InquiryId, T1.Inquiry_Title, T1.Inquiry_ContactId, T1.Inquiry_CreatedDate, T1.Inquiry_SourceId, T1.Inquiry_CompanyId, T1.Inquiry_RequireByDate, T1.Inquiry_SystemUserId, T1.Inquiry_Status, T1.Inquiry_IsDirectInquiry, T1.Inquiry_FlagId, T1.Inquiry_InquiryCode, T1.Inquiry_CreatedBy, T1.Inquiry_OrganisationId)
    FROM (
        SELECT 
            T.InquiryId AS Inquiry_InquiryId, 
            T.Title AS Inquiry_Title, 
            T.ContactId AS Inquiry_ContactId, 
            T.CreatedDate AS Inquiry_CreatedDate, 
            T.SourceId AS Inquiry_SourceId, 
            T.CompanyId AS Inquiry_CompanyId, 
            T.RequireByDate AS Inquiry_RequireByDate, 
            T.SystemUserId AS Inquiry_SystemUserId, 
            T.Status AS Inquiry_Status, 
            T.IsDirectInquiry AS Inquiry_IsDirectInquiry, 
            T.FlagId AS Inquiry_FlagId, 
            T.InquiryCode AS Inquiry_InquiryCode, 
            T.CreatedBy AS Inquiry_CreatedBy, 
            T.OrganisationId AS Inquiry_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.Inquiries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InquiryAttachment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InquiryAttachment", @"
    SELECT VALUE -- Constructing InquiryAttachment
        [DomainModels.Store.InquiryAttachment](T1.InquiryAttachment_AttachmentId, T1.InquiryAttachment_OrignalFileName, T1.InquiryAttachment_AttachmentPath, T1.InquiryAttachment_InquiryId, T1.InquiryAttachment_Extension)
    FROM (
        SELECT 
            T.AttachmentId AS InquiryAttachment_AttachmentId, 
            T.OrignalFileName AS InquiryAttachment_OrignalFileName, 
            T.AttachmentPath AS InquiryAttachment_AttachmentPath, 
            T.InquiryId AS InquiryAttachment_InquiryId, 
            T.Extension AS InquiryAttachment_Extension, 
            True AS _from0
        FROM BaseDbContext.InquiryAttachments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InquiryItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InquiryItem", @"
    SELECT VALUE -- Constructing InquiryItem
        [DomainModels.Store.InquiryItem](T1.InquiryItem_InquiryItemId, T1.InquiryItem_Title, T1.InquiryItem_Notes, T1.InquiryItem_DeliveryDate, T1.InquiryItem_InquiryId, T1.InquiryItem_ProductId)
    FROM (
        SELECT 
            T.InquiryItemId AS InquiryItem_InquiryItemId, 
            T.Title AS InquiryItem_Title, 
            T.Notes AS InquiryItem_Notes, 
            T.DeliveryDate AS InquiryItem_DeliveryDate, 
            T.InquiryId AS InquiryItem_InquiryId, 
            T.ProductId AS InquiryItem_ProductId, 
            True AS _from0
        FROM BaseDbContext.InquiryItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Invoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3131);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoice\r\n        [DomainModels.Store.Invoice]");
            viewString.Append("(T1.Invoice_InvoiceId, T1.Invoice_InvoiceCode, T1.Invoice_InvoiceType, T1.Invoic");
            viewString.Append("e_InvoiceName, T1.Invoice_CompanyId, T1.Invoice_ContactId, T1.Invoice_OrderNo, T");
            viewString.Append("1.Invoice_InvoiceStatus, T1.Invoice_InvoiceTotal, T1.Invoice_InvoiceDate, T1.Inv");
            viewString.Append("oice_LastUpdatedBy, T1.Invoice_CreationDate, T1.Invoice_CreatedBy, T1.Invoice_Ac");
            viewString.Append("countNumber, T1.Invoice_Terms, T1.Invoice_InvoicePostingDate, T1.Invoice_Invoice");
            viewString.Append("PostedBy, T1.Invoice_LockedBy, T1.Invoice_AddressId, T1.Invoice_IsArchive, T1.In");
            viewString.Append("voice_TaxValue, T1.Invoice_GrandTotal, T1.Invoice_FlagID, T1.Invoice_UserNotes, ");
            viewString.Append("T1.Invoice_NotesUpdateDateTime, T1.Invoice_NotesUpdatedByUserID, T1.Invoice_Syst");
            viewString.Append("emSiteId, T1.Invoice_EstimateId, T1.Invoice_IsRead, T1.Invoice_IsProformaInvoice");
            viewString.Append(", T1.Invoice_IsPrinted, T1.Invoice_LastUpdateDate, T1.Invoice_ReportSignedBy, T1");
            viewString.Append(".Invoice_ReportLastPrintedDate, T1.Invoice_HeadNotes, T1.Invoice_FootNotes, T1.I");
            viewString.Append("nvoice_XeroAccessCode, T1.Invoice_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n");
            viewString.Append("            T.InvoiceId AS Invoice_InvoiceId, \r\n            T.InvoiceCode AS Inv");
            viewString.Append("oice_InvoiceCode, \r\n            T.InvoiceType AS Invoice_InvoiceType, \r\n        ");
            viewString.Append("    T.InvoiceName AS Invoice_InvoiceName, \r\n            T.CompanyId AS Invoice_C");
            viewString.Append("ompanyId, \r\n            T.ContactId AS Invoice_ContactId, \r\n            T.OrderN");
            viewString.Append("o AS Invoice_OrderNo, \r\n            T.InvoiceStatus AS Invoice_InvoiceStatus, \r\n");
            viewString.Append("            T.InvoiceTotal AS Invoice_InvoiceTotal, \r\n            T.InvoiceDate ");
            viewString.Append("AS Invoice_InvoiceDate, \r\n            T.LastUpdatedBy AS Invoice_LastUpdatedBy, ");
            viewString.Append("\r\n            T.CreationDate AS Invoice_CreationDate, \r\n            T.CreatedBy ");
            viewString.Append("AS Invoice_CreatedBy, \r\n            T.AccountNumber AS Invoice_AccountNumber, \r\n");
            viewString.Append("            T.Terms AS Invoice_Terms, \r\n            T.InvoicePostingDate AS Invo");
            viewString.Append("ice_InvoicePostingDate, \r\n            T.InvoicePostedBy AS Invoice_InvoicePosted");
            viewString.Append("By, \r\n            T.LockedBy AS Invoice_LockedBy, \r\n            T.AddressId AS I");
            viewString.Append("nvoice_AddressId, \r\n            T.IsArchive AS Invoice_IsArchive, \r\n            ");
            viewString.Append("T.TaxValue AS Invoice_TaxValue, \r\n            T.GrandTotal AS Invoice_GrandTotal");
            viewString.Append(", \r\n            T.FlagID AS Invoice_FlagID, \r\n            T.UserNotes AS Invoice");
            viewString.Append("_UserNotes, \r\n            T.NotesUpdateDateTime AS Invoice_NotesUpdateDateTime, ");
            viewString.Append("\r\n            T.NotesUpdatedByUserID AS Invoice_NotesUpdatedByUserID, \r\n        ");
            viewString.Append("    T.SystemSiteId AS Invoice_SystemSiteId, \r\n            T.EstimateId AS Invoic");
            viewString.Append("e_EstimateId, \r\n            T.IsRead AS Invoice_IsRead, \r\n            T.IsProfor");
            viewString.Append("maInvoice AS Invoice_IsProformaInvoice, \r\n            T.IsPrinted AS Invoice_IsP");
            viewString.Append("rinted, \r\n            T.LastUpdateDate AS Invoice_LastUpdateDate, \r\n            ");
            viewString.Append("T.ReportSignedBy AS Invoice_ReportSignedBy, \r\n            T.ReportLastPrintedDat");
            viewString.Append("e AS Invoice_ReportLastPrintedDate, \r\n            T.HeadNotes AS Invoice_HeadNot");
            viewString.Append("es, \r\n            T.FootNotes AS Invoice_FootNotes, \r\n            T.XeroAccessCo");
            viewString.Append("de AS Invoice_XeroAccessCode, \r\n            T.OrganisationId AS Invoice_Organisa");
            viewString.Append("tionId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Invoices AS T\r\n");
            viewString.Append("    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Invoice", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InvoiceDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InvoiceDetail", "\r\n    SELECT VALUE -- Constructing InvoiceDetail\r\n        [DomainModels.Store.Inv" +
                    "oiceDetail](T1.InvoiceDetail_InvoiceDetailId, T1.InvoiceDetail_InvoiceId, T1.Inv" +
                    "oiceDetail_DetailType, T1.InvoiceDetail_ItemId, T1.InvoiceDetail_InvoiceTitle, T" +
                    "1.InvoiceDetail_NominalCode, T1.InvoiceDetail_ItemCharge, T1.InvoiceDetail_Quant" +
                    "ity, T1.InvoiceDetail_ItemTaxValue, T1.InvoiceDetail_FlagId, T1.InvoiceDetail_De" +
                    "partmentId, T1.InvoiceDetail_Description, T1.InvoiceDetail_ItemType, T1.InvoiceD" +
                    "etail_TaxId, T1.InvoiceDetail_TaxValue, T1.InvoiceDetail_ItemGrossTotal)\r\n    FR" +
                    "OM (\r\n        SELECT \r\n            T.InvoiceDetailId AS InvoiceDetail_InvoiceDet" +
                    "ailId, \r\n            T.InvoiceId AS InvoiceDetail_InvoiceId, \r\n            T.Det" +
                    "ailType AS InvoiceDetail_DetailType, \r\n            T.ItemId AS InvoiceDetail_Ite" +
                    "mId, \r\n            T.InvoiceTitle AS InvoiceDetail_InvoiceTitle, \r\n            T" +
                    ".NominalCode AS InvoiceDetail_NominalCode, \r\n            T.ItemCharge AS Invoice" +
                    "Detail_ItemCharge, \r\n            T.Quantity AS InvoiceDetail_Quantity, \r\n       " +
                    "     T.ItemTaxValue AS InvoiceDetail_ItemTaxValue, \r\n            T.FlagId AS Inv" +
                    "oiceDetail_FlagId, \r\n            T.DepartmentId AS InvoiceDetail_DepartmentId, \r" +
                    "\n            T.Description AS InvoiceDetail_Description, \r\n            T.ItemTyp" +
                    "e AS InvoiceDetail_ItemType, \r\n            T.TaxId AS InvoiceDetail_TaxId, \r\n   " +
                    "         T.TaxValue AS InvoiceDetail_TaxValue, \r\n            T.ItemGrossTotal AS" +
                    " InvoiceDetail_ItemGrossTotal, \r\n            True AS _from0\r\n        FROM BaseDb" +
                    "Context.InvoiceDetails AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.LengthUnit
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.LengthUnit", @"
    SELECT VALUE -- Constructing LengthUnit
        [DomainModels.Store.LengthUnit](T1.LengthUnit_Id, T1.LengthUnit_UnitName, T1.LengthUnit_MM, T1.LengthUnit_CM, T1.LengthUnit_Inch)
    FROM (
        SELECT 
            T.Id AS LengthUnit_Id, 
            T.UnitName AS LengthUnit_UnitName, 
            T.MM AS LengthUnit_MM, 
            T.CM AS LengthUnit_CM, 
            T.Inch AS LengthUnit_Inch, 
            True AS _from0
        FROM BaseDbContext.LengthUnits AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.RegistrationQuestion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.RegistrationQuestion", @"
    SELECT VALUE -- Constructing RegistrationQuestion
        [DomainModels.Store.RegistrationQuestion](T1.RegistrationQuestion_QuestionId, T1.RegistrationQuestion_Question)
    FROM (
        SELECT 
            T.QuestionId AS RegistrationQuestion_QuestionId, 
            T.Question AS RegistrationQuestion_Question, 
            True AS _from0
        FROM BaseDbContext.RegistrationQuestions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Campaign
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9153);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Campaign\r\n        [DomainModels.Store.Campaig");
            viewString.Append("n](T1.Campaign_CampaignId, T1.Campaign_CampaignName, T1.Campaign_Description, T1");
            viewString.Append(".Campaign_DataSourceType, T1.Campaign_RunCampaignFor, T1.Campaign_IncludeCustome");
            viewString.Append("rs, T1.Campaign_IncludeSuppliers, T1.Campaign_IncludeNewsLetterSubscribers, T1.C");
            viewString.Append("ampaign_IncludeProspects, T1.Campaign_IncludeKeyword, T1.Campaign_SearchKeyword,");
            viewString.Append(" T1.Campaign_IncludeType, T1.Campaign_IncludeFlag, T1.Campaign_IncludeName, T1.C");
            viewString.Append("ampaign_IncludeAddress, T1.Campaign_IncludeContactName, T1.Campaign_SubjectA, T1");
            viewString.Append(".Campaign_HTMLMessageA, T1.Campaign_AttachmentFileNameFieldName, T1.Campaign_Att");
            viewString.Append("achmentType, T1.Campaign_EmailField, T1.Campaign_CCEmailField, T1.Campaign_SMTPS");
            viewString.Append("erver, T1.Campaign_FromAddress, T1.Campaign_ReturnPathAddress, T1.Campaign_Reply");
            viewString.Append("ToAddress, T1.Campaign_ErrorsToAddress, T1.Campaign_SMTPServerType, T1.Campaign_");
            viewString.Append("EnableSchedule, T1.Campaign_StartDateTime, T1.Campaign_RepeatEvery, T1.Campaign_");
            viewString.Append("RepeatInterval, T1.Campaign_LastRunOn, T1.Campaign_MessageType, T1.Campaign_ABMe");
            viewString.Append("ssaging, T1.Campaign_SubjectB, T1.Campaign_HTMLMessageB, T1.Campaign_IncludePlai");
            viewString.Append("nText, T1.Campaign_SMTPDelaySeconds, T1.Campaign_EmailAddressLogFiles, T1.Campai");
            viewString.Append("gn_PlainTextMessageA, T1.Campaign_PlainTextMessageB, T1.Campaign_UId, T1.Campaig");
            viewString.Append("n_Private, T1.Campaign_SubscribeEmailUpdateField, T1.Campaign_UnsubscribeEmailHy");
            viewString.Append("perlinkText, T1.Campaign_SubscribeEmailAddress, T1.Campaign_SubscribeEmailHyperl");
            viewString.Append("inkText, T1.Campaign_UnSubscribeCount, T1.Campaign_SubscribeCount, T1.Campaign_B");
            viewString.Append("ounceCount, T1.Campaign_LastRunEndDateTime, T1.Campaign_MessageCount, T1.Campaig");
            viewString.Append("n_SuccessCount, T1.Campaign_FailedCount, T1.Campaign_EnableLogFiles, T1.Campaign");
            viewString.Append("_ContinueIfWritebackError, T1.Campaign_EmailFieldPreviewColumn2, T1.Campaign_Ema");
            viewString.Append("ilFieldPreviewColumn3, T1.Campaign_AttachmentFileName, T1.Campaign_ClearCounters");
            viewString.Append(", T1.Campaign_SMTPServer2, T1.Campaign_LockedByUID, T1.Campaign_UnSubscribeCount");
            viewString.Append("Total, T1.Campaign_SubscribeCountTotal, T1.Campaign_BounceCountTotal, T1.Campaig");
            viewString.Append("n_EnableEmailAddressCache, T1.Campaign_OpenedCount, T1.Campaign_OpenedCountTotal");
            viewString.Append(", T1.Campaign_OpenedEmailUpdateField, T1.Campaign_EnableOpenedEmail, T1.Campaign");
            viewString.Append("_ABMessagingUpdateField, T1.Campaign_EmailLogFileAddress2, T1.Campaign_EmailLogF");
            viewString.Append("ileAddress3, T1.Campaign_CampaignCategory, T1.Campaign_SoftBounceCountTotal, T1.");
            viewString.Append("Campaign_SMTPUsername, T1.Campaign_SMTPPassword, T1.Campaign_EnableWriteBackTab,");
            viewString.Append(" T1.Campaign_EnableClickThruTab, T1.Campaign_UnsubscribeMethod, T1.Campaign_UseW");
            viewString.Append("YSWYG, T1.Campaign_CreationDate, T1.Campaign_Status, T1.Campaign_ValidateEmail, ");
            viewString.Append("T1.Campaign_CampaignType, T1.Campaign_SystemSiteId, T1.Campaign_IncludeCorporate");
            viewString.Append("Customers, T1.Campaign_IsEnabled, T1.Campaign_SendEmailAfterDays, T1.Campaign_Em");
            viewString.Append("ailEvent, T1.Campaign_isSystemEmail, T1.Campaign_FlagIDs, T1.Campaign_CustomerTy");
            viewString.Append("peIDs, T1.Campaign_GroupIDs, T1.Campaign_FromName, T1.Campaign_CampaignReportId,");
            viewString.Append(" T1.Campaign_OrganisationId, T1.Campaign_CompanyId, T1.Campaign_UnsubscribeEmail");
            viewString.Append("Address)\r\n    FROM (\r\n        SELECT \r\n            T.CampaignId AS Campaign_Camp");
            viewString.Append("aignId, \r\n            T.CampaignName AS Campaign_CampaignName, \r\n            T.D");
            viewString.Append("escription AS Campaign_Description, \r\n            T.DataSourceType AS Campaign_D");
            viewString.Append("ataSourceType, \r\n            T.RunCampaignFor AS Campaign_RunCampaignFor, \r\n    ");
            viewString.Append("        T.IncludeCustomers AS Campaign_IncludeCustomers, \r\n            T.Include");
            viewString.Append("Suppliers AS Campaign_IncludeSuppliers, \r\n            T.IncludeNewsLetterSubscri");
            viewString.Append("bers AS Campaign_IncludeNewsLetterSubscribers, \r\n            T.IncludeProspects ");
            viewString.Append("AS Campaign_IncludeProspects, \r\n            T.IncludeKeyword AS Campaign_Include");
            viewString.Append("Keyword, \r\n            T.SearchKeyword AS Campaign_SearchKeyword, \r\n            ");
            viewString.Append("T.IncludeType AS Campaign_IncludeType, \r\n            T.IncludeFlag AS Campaign_I");
            viewString.Append("ncludeFlag, \r\n            T.IncludeName AS Campaign_IncludeName, \r\n            T");
            viewString.Append(".IncludeAddress AS Campaign_IncludeAddress, \r\n            T.IncludeContactName A");
            viewString.Append("S Campaign_IncludeContactName, \r\n            T.SubjectA AS Campaign_SubjectA, \r\n");
            viewString.Append("            T.HTMLMessageA AS Campaign_HTMLMessageA, \r\n            T.AttachmentF");
            viewString.Append("ileNameFieldName AS Campaign_AttachmentFileNameFieldName, \r\n            T.Attach");
            viewString.Append("mentType AS Campaign_AttachmentType, \r\n            T.EmailField AS Campaign_Emai");
            viewString.Append("lField, \r\n            T.CCEmailField AS Campaign_CCEmailField, \r\n            T.S");
            viewString.Append("MTPServer AS Campaign_SMTPServer, \r\n            T.FromAddress AS Campaign_FromAd");
            viewString.Append("dress, \r\n            T.ReturnPathAddress AS Campaign_ReturnPathAddress, \r\n      ");
            viewString.Append("      T.ReplyToAddress AS Campaign_ReplyToAddress, \r\n            T.ErrorsToAddre");
            viewString.Append("ss AS Campaign_ErrorsToAddress, \r\n            T.SMTPServerType AS Campaign_SMTPS");
            viewString.Append("erverType, \r\n            T.EnableSchedule AS Campaign_EnableSchedule, \r\n        ");
            viewString.Append("    T.StartDateTime AS Campaign_StartDateTime, \r\n            T.RepeatEvery AS Ca");
            viewString.Append("mpaign_RepeatEvery, \r\n            T.RepeatInterval AS Campaign_RepeatInterval, \r");
            viewString.Append("\n            T.LastRunOn AS Campaign_LastRunOn, \r\n            T.MessageType AS C");
            viewString.Append("ampaign_MessageType, \r\n            T.ABMessaging AS Campaign_ABMessaging, \r\n    ");
            viewString.Append("        T.SubjectB AS Campaign_SubjectB, \r\n            T.HTMLMessageB AS Campaig");
            viewString.Append("n_HTMLMessageB, \r\n            T.IncludePlainText AS Campaign_IncludePlainText, \r");
            viewString.Append("\n            T.SMTPDelaySeconds AS Campaign_SMTPDelaySeconds, \r\n            T.Em");
            viewString.Append("ailAddressLogFiles AS Campaign_EmailAddressLogFiles, \r\n            T.PlainTextMe");
            viewString.Append("ssageA AS Campaign_PlainTextMessageA, \r\n            T.PlainTextMessageB AS Campa");
            viewString.Append("ign_PlainTextMessageB, \r\n            T.UId AS Campaign_UId, \r\n            T.Priv");
            viewString.Append("ate AS Campaign_Private, \r\n            T.SubscribeEmailUpdateField AS Campaign_S");
            viewString.Append("ubscribeEmailUpdateField, \r\n            T.UnsubscribeEmailHyperlinkText AS Campa");
            viewString.Append("ign_UnsubscribeEmailHyperlinkText, \r\n            T.SubscribeEmailAddress AS Camp");
            viewString.Append("aign_SubscribeEmailAddress, \r\n            T.SubscribeEmailHyperlinkText AS Campa");
            viewString.Append("ign_SubscribeEmailHyperlinkText, \r\n            T.UnSubscribeCount AS Campaign_Un");
            viewString.Append("SubscribeCount, \r\n            T.SubscribeCount AS Campaign_SubscribeCount, \r\n   ");
            viewString.Append("         T.BounceCount AS Campaign_BounceCount, \r\n            T.LastRunEndDateTi");
            viewString.Append("me AS Campaign_LastRunEndDateTime, \r\n            T.MessageCount AS Campaign_Mess");
            viewString.Append("ageCount, \r\n            T.SuccessCount AS Campaign_SuccessCount, \r\n            T");
            viewString.Append(".FailedCount AS Campaign_FailedCount, \r\n            T.EnableLogFiles AS Campaign");
            viewString.Append("_EnableLogFiles, \r\n            T.ContinueIfWritebackError AS Campaign_ContinueIf");
            viewString.Append("WritebackError, \r\n            T.EmailFieldPreviewColumn2 AS Campaign_EmailFieldP");
            viewString.Append("reviewColumn2, \r\n            T.EmailFieldPreviewColumn3 AS Campaign_EmailFieldPr");
            viewString.Append("eviewColumn3, \r\n            T.AttachmentFileName AS Campaign_AttachmentFileName,");
            viewString.Append(" \r\n            T.ClearCounters AS Campaign_ClearCounters, \r\n            T.SMTPSe");
            viewString.Append("rver2 AS Campaign_SMTPServer2, \r\n            T.LockedByUID AS Campaign_LockedByU");
            viewString.Append("ID, \r\n            T.UnSubscribeCountTotal AS Campaign_UnSubscribeCountTotal, \r\n ");
            viewString.Append("           T.SubscribeCountTotal AS Campaign_SubscribeCountTotal, \r\n            ");
            viewString.Append("T.BounceCountTotal AS Campaign_BounceCountTotal, \r\n            T.EnableEmailAddr");
            viewString.Append("essCache AS Campaign_EnableEmailAddressCache, \r\n            T.OpenedCount AS Cam");
            viewString.Append("paign_OpenedCount, \r\n            T.OpenedCountTotal AS Campaign_OpenedCountTotal");
            viewString.Append(", \r\n            T.OpenedEmailUpdateField AS Campaign_OpenedEmailUpdateField, \r\n ");
            viewString.Append("           T.EnableOpenedEmail AS Campaign_EnableOpenedEmail, \r\n            T.AB");
            viewString.Append("MessagingUpdateField AS Campaign_ABMessagingUpdateField, \r\n            T.EmailLo");
            viewString.Append("gFileAddress2 AS Campaign_EmailLogFileAddress2, \r\n            T.EmailLogFileAddr");
            viewString.Append("ess3 AS Campaign_EmailLogFileAddress3, \r\n            T.CampaignCategory AS Campa");
            viewString.Append("ign_CampaignCategory, \r\n            T.SoftBounceCountTotal AS Campaign_SoftBounc");
            viewString.Append("eCountTotal, \r\n            T.SMTPUsername AS Campaign_SMTPUsername, \r\n          ");
            viewString.Append("  T.SMTPPassword AS Campaign_SMTPPassword, \r\n            T.EnableWriteBackTab AS");
            viewString.Append(" Campaign_EnableWriteBackTab, \r\n            T.EnableClickThruTab AS Campaign_Ena");
            viewString.Append("bleClickThruTab, \r\n            T.UnsubscribeMethod AS Campaign_UnsubscribeMethod");
            viewString.Append(", \r\n            T.UseWYSWYG AS Campaign_UseWYSWYG, \r\n            T.CreationDate ");
            viewString.Append("AS Campaign_CreationDate, \r\n            T.Status AS Campaign_Status, \r\n         ");
            viewString.Append("   T.ValidateEmail AS Campaign_ValidateEmail, \r\n            T.CampaignType AS Ca");
            viewString.Append("mpaign_CampaignType, \r\n            T.SystemSiteId AS Campaign_SystemSiteId, \r\n  ");
            viewString.Append("          T.IncludeCorporateCustomers AS Campaign_IncludeCorporateCustomers, \r\n ");
            viewString.Append("           T.IsEnabled AS Campaign_IsEnabled, \r\n            T.SendEmailAfterDays");
            viewString.Append(" AS Campaign_SendEmailAfterDays, \r\n            T.EmailEvent AS Campaign_EmailEve");
            viewString.Append("nt, \r\n            T.isSystemEmail AS Campaign_isSystemEmail, \r\n            T.Fla");
            viewString.Append("gIDs AS Campaign_FlagIDs, \r\n            T.CustomerTypeIDs AS Campaign_CustomerTy");
            viewString.Append("peIDs, \r\n            T.GroupIDs AS Campaign_GroupIDs, \r\n            T.FromName A");
            viewString.Append("S Campaign_FromName, \r\n            T.CampaignReportId AS Campaign_CampaignReport");
            viewString.Append("Id, \r\n            T.OrganisationId AS Campaign_OrganisationId, \r\n            T.C");
            viewString.Append("ompanyId AS Campaign_CompanyId, \r\n            T.UnsubscribeEmailAddress AS Campa");
            viewString.Append("ign_UnsubscribeEmailAddress, \r\n            True AS _from0\r\n        FROM BaseDbCo");
            viewString.Append("ntext.Campaigns AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Campaign", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignEmailVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignEmailVariable", @"
    SELECT VALUE -- Constructing CampaignEmailVariable
        [DomainModels.Store.CampaignEmailVariable](T1.CampaignEmailVariable_VariableId, T1.CampaignEmailVariable_VariableName, T1.CampaignEmailVariable_RefTableName, T1.CampaignEmailVariable_RefFieldName, T1.CampaignEmailVariable_CriteriaFieldName, T1.CampaignEmailVariable_Description, T1.CampaignEmailVariable_SectionId, T1.CampaignEmailVariable_VariableTag, T1.CampaignEmailVariable_Key, T1.CampaignEmailVariable_OrganisationId)
    FROM (
        SELECT 
            T.VariableId AS CampaignEmailVariable_VariableId, 
            T.VariableName AS CampaignEmailVariable_VariableName, 
            T.RefTableName AS CampaignEmailVariable_RefTableName, 
            T.RefFieldName AS CampaignEmailVariable_RefFieldName, 
            T.CriteriaFieldName AS CampaignEmailVariable_CriteriaFieldName, 
            T.Description AS CampaignEmailVariable_Description, 
            T.SectionId AS CampaignEmailVariable_SectionId, 
            T.VariableTag AS CampaignEmailVariable_VariableTag, 
            T.[Key] AS CampaignEmailVariable_Key, 
            T.OrganisationId AS CampaignEmailVariable_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CampaignEmailVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignImage", @"
    SELECT VALUE -- Constructing CampaignImage
        [DomainModels.Store.CampaignImage](T1.CampaignImage_CampaignImageId, T1.CampaignImage_CampaignId, T1.CampaignImage_ImagePath, T1.CampaignImage_ImageName)
    FROM (
        SELECT 
            T.CampaignImageId AS CampaignImage_CampaignImageId, 
            T.CampaignId AS CampaignImage_CampaignId, 
            T.ImagePath AS CampaignImage_ImagePath, 
            T.ImageName AS CampaignImage_ImageName, 
            True AS _from0
        FROM BaseDbContext.CampaignImages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DeliveryNote
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2786);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryNote\r\n        [DomainModels.Store.Del");
            viewString.Append("iveryNote](T1.DeliveryNote_DeliveryNoteId, T1.DeliveryNote_Code, T1.DeliveryNote");
            viewString.Append("_DeliveryDate, T1.DeliveryNote_CompanyId, T1.DeliveryNote_OrderReff, T1.Delivery");
            viewString.Append("Note_footnote, T1.DeliveryNote_Comments, T1.DeliveryNote_LockedBy, T1.DeliveryNo");
            viewString.Append("te_IsStatus, T1.DeliveryNote_ContactId, T1.DeliveryNote_ContactCompany, T1.Deliv");
            viewString.Append("eryNote_CustomerOrderReff, T1.DeliveryNote_AddressId, T1.DeliveryNote_CreatedBy,");
            viewString.Append(" T1.DeliveryNote_CreationDateTime, T1.DeliveryNote_SupplierId, T1.DeliveryNote_S");
            viewString.Append("upplierTelNo, T1.DeliveryNote_CsNo, T1.DeliveryNote_SupplierURL, T1.DeliveryNote");
            viewString.Append("_RaisedBy, T1.DeliveryNote_FlagId, T1.DeliveryNote_EstimateId, T1.DeliveryNote_J");
            viewString.Append("obId, T1.DeliveryNote_InvoiceId, T1.DeliveryNote_OrderId, T1.DeliveryNote_UserNo");
            viewString.Append("tes, T1.DeliveryNote_NotesUpdateDateTime, T1.DeliveryNote_NotesUpdatedByUserId, ");
            viewString.Append("T1.DeliveryNote_SystemSiteId, T1.DeliveryNote_IsRead, T1.DeliveryNote_IsPrinted)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.DeliveryNoteId AS DeliveryNote_Deli");
            viewString.Append("veryNoteId, \r\n            T.Code AS DeliveryNote_Code, \r\n            T.DeliveryD");
            viewString.Append("ate AS DeliveryNote_DeliveryDate, \r\n            T.CompanyId AS DeliveryNote_Comp");
            viewString.Append("anyId, \r\n            T.OrderReff AS DeliveryNote_OrderReff, \r\n            T.foot");
            viewString.Append("note AS DeliveryNote_footnote, \r\n            T.Comments AS DeliveryNote_Comments");
            viewString.Append(", \r\n            T.LockedBy AS DeliveryNote_LockedBy, \r\n            T.IsStatus AS");
            viewString.Append(" DeliveryNote_IsStatus, \r\n            T.ContactId AS DeliveryNote_ContactId, \r\n ");
            viewString.Append("           T.ContactCompany AS DeliveryNote_ContactCompany, \r\n            T.Cust");
            viewString.Append("omerOrderReff AS DeliveryNote_CustomerOrderReff, \r\n            T.AddressId AS De");
            viewString.Append("liveryNote_AddressId, \r\n            T.CreatedBy AS DeliveryNote_CreatedBy, \r\n   ");
            viewString.Append("         T.CreationDateTime AS DeliveryNote_CreationDateTime, \r\n            T.Su");
            viewString.Append("pplierId AS DeliveryNote_SupplierId, \r\n            T.SupplierTelNo AS DeliveryNo");
            viewString.Append("te_SupplierTelNo, \r\n            T.CsNo AS DeliveryNote_CsNo, \r\n            T.Sup");
            viewString.Append("plierURL AS DeliveryNote_SupplierURL, \r\n            T.RaisedBy AS DeliveryNote_R");
            viewString.Append("aisedBy, \r\n            T.FlagId AS DeliveryNote_FlagId, \r\n            T.Estimate");
            viewString.Append("Id AS DeliveryNote_EstimateId, \r\n            T.JobId AS DeliveryNote_JobId, \r\n  ");
            viewString.Append("          T.InvoiceId AS DeliveryNote_InvoiceId, \r\n            T.OrderId AS Deli");
            viewString.Append("veryNote_OrderId, \r\n            T.UserNotes AS DeliveryNote_UserNotes, \r\n       ");
            viewString.Append("     T.NotesUpdateDateTime AS DeliveryNote_NotesUpdateDateTime, \r\n            T.");
            viewString.Append("NotesUpdatedByUserId AS DeliveryNote_NotesUpdatedByUserId, \r\n            T.Syste");
            viewString.Append("mSiteId AS DeliveryNote_SystemSiteId, \r\n            T.IsRead AS DeliveryNote_IsR");
            viewString.Append("ead, \r\n            T.IsPrinted AS DeliveryNote_IsPrinted, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM BaseDbContext.DeliveryNotes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DeliveryNote", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DeliveryNoteDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DeliveryNoteDetail", @"
    SELECT VALUE -- Constructing DeliveryNoteDetail
        [DomainModels.Store.DeliveryNoteDetail](T1.DeliveryNoteDetail_DeliveryDetailid, T1.DeliveryNoteDetail_DeliveryNoteId, T1.DeliveryNoteDetail_Description, T1.DeliveryNoteDetail_ItemId, T1.DeliveryNoteDetail_ItemQty, T1.DeliveryNoteDetail_GrossItemTotal)
    FROM (
        SELECT 
            T.DeliveryDetailid AS DeliveryNoteDetail_DeliveryDetailid, 
            T.DeliveryNoteId AS DeliveryNoteDetail_DeliveryNoteId, 
            T.Description AS DeliveryNoteDetail_Description, 
            T.ItemId AS DeliveryNoteDetail_ItemId, 
            T.ItemQty AS DeliveryNoteDetail_ItemQty, 
            T.GrossItemTotal AS DeliveryNoteDetail_GrossItemTotal, 
            True AS _from0
        FROM BaseDbContext.DeliveryNoteDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyCMYKColor
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyCMYKColor", @"
    SELECT VALUE -- Constructing CompanyCMYKColor
        [DomainModels.Store.CompanyCMYKColor](T1.CompanyCMYKColor_ColorId, T1.CompanyCMYKColor_CompanyId, T1.CompanyCMYKColor_ColorName, T1.CompanyCMYKColor_ColorC, T1.CompanyCMYKColor_ColorM, T1.CompanyCMYKColor_ColorY, T1.CompanyCMYKColor_ColorK)
    FROM (
        SELECT 
            T.ColorId AS CompanyCMYKColor_ColorId, 
            T.CompanyId AS CompanyCMYKColor_CompanyId, 
            T.ColorName AS CompanyCMYKColor_ColorName, 
            T.ColorC AS CompanyCMYKColor_ColorC, 
            T.ColorM AS CompanyCMYKColor_ColorM, 
            T.ColorY AS CompanyCMYKColor_ColorY, 
            T.ColorK AS CompanyCMYKColor_ColorK, 
            True AS _from0
        FROM BaseDbContext.CompanyCMYKColors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Currency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Currency", @"
    SELECT VALUE -- Constructing Currency
        [DomainModels.Store.Currency](T1.Currency_CurrencyId, T1.Currency_CurrencyCode, T1.Currency_CurrencyName, T1.Currency_CurrencySymbol)
    FROM (
        SELECT 
            T.CurrencyId AS Currency_CurrencyId, 
            T.CurrencyCode AS Currency_CurrencyCode, 
            T.CurrencyName AS Currency_CurrencyName, 
            T.CurrencySymbol AS Currency_CurrencySymbol, 
            True AS _from0
        FROM BaseDbContext.Currencies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemAddonCostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemAddonCostCentre", @"
    SELECT VALUE -- Constructing ItemAddonCostCentre
        [DomainModels.Store.ItemAddonCostCentre](T1.ItemAddonCostCentre_ProductAddOnId, T1.ItemAddonCostCentre_ItemStockOptionId, T1.ItemAddonCostCentre_CostCentreId, T1.ItemAddonCostCentre_DiscountPercentage, T1.ItemAddonCostCentre_IsDiscounted, T1.ItemAddonCostCentre_Sequence, T1.ItemAddonCostCentre_IsMandatory)
    FROM (
        SELECT 
            T.ProductAddOnId AS ItemAddonCostCentre_ProductAddOnId, 
            T.ItemStockOptionId AS ItemAddonCostCentre_ItemStockOptionId, 
            T.CostCentreId AS ItemAddonCostCentre_CostCentreId, 
            T.DiscountPercentage AS ItemAddonCostCentre_DiscountPercentage, 
            T.IsDiscounted AS ItemAddonCostCentre_IsDiscounted, 
            T.Sequence AS ItemAddonCostCentre_Sequence, 
            T.IsMandatory AS ItemAddonCostCentre_IsMandatory, 
            True AS _from0
        FROM BaseDbContext.ItemAddonCostCentres AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemVideo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemVideo", @"
    SELECT VALUE -- Constructing ItemVideo
        [DomainModels.Store.ItemVideo](T1.ItemVideo_VideoId, T1.ItemVideo_VideoLink, T1.ItemVideo_Caption, T1.ItemVideo_ItemId)
    FROM (
        SELECT 
            T.VideoId AS ItemVideo_VideoId, 
            T.VideoLink AS ItemVideo_VideoLink, 
            T.Caption AS ItemVideo_Caption, 
            T.ItemId AS ItemVideo_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemVideos AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Address
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2477);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Address\r\n        [DomainModels.Store.Address]");
            viewString.Append("(T1.Address_AddressId, T1.Address_CompanyId, T1.Address_AddressName, T1.Address_");
            viewString.Append("Address1, T1.Address_Address2, T1.Address_Address3, T1.Address_City, T1.Address_");
            viewString.Append("StateId, T1.Address_CountryId, T1.Address_PostCode, T1.Address_Fax, T1.Address_E");
            viewString.Append("mail, T1.Address_URL, T1.Address_Tel1, T1.Address_Tel2, T1.Address_Extension1, T");
            viewString.Append("1.Address_Extension2, T1.Address_Reference, T1.Address_FAO, T1.Address_IsDefault");
            viewString.Append("Address, T1.Address_IsDefaultShippingAddress, T1.Address_isArchived, T1.Address_");
            viewString.Append("TerritoryId, T1.Address_GeoLatitude, T1.Address_GeoLongitude, T1.Address_isPriva");
            viewString.Append("te, T1.Address_ContactId, T1.Address_isDefaultTerrorityBilling, T1.Address_isDef");
            viewString.Append("aultTerrorityShipping, T1.Address_OrganisationId, T1.Address_DisplayOnContactUs)");
            viewString.Append("\r\n    FROM (\r\n        SELECT \r\n            T.AddressId AS Address_AddressId, \r\n ");
            viewString.Append("           T.CompanyId AS Address_CompanyId, \r\n            T.AddressName AS Addr");
            viewString.Append("ess_AddressName, \r\n            T.Address1 AS Address_Address1, \r\n            T.A");
            viewString.Append("ddress2 AS Address_Address2, \r\n            T.Address3 AS Address_Address3, \r\n   ");
            viewString.Append("         T.City AS Address_City, \r\n            T.StateId AS Address_StateId, \r\n ");
            viewString.Append("           T.CountryId AS Address_CountryId, \r\n            T.PostCode AS Address");
            viewString.Append("_PostCode, \r\n            T.Fax AS Address_Fax, \r\n            T.Email AS Address_");
            viewString.Append("Email, \r\n            T.URL AS Address_URL, \r\n            T.Tel1 AS Address_Tel1,");
            viewString.Append(" \r\n            T.Tel2 AS Address_Tel2, \r\n            T.Extension1 AS Address_Ext");
            viewString.Append("ension1, \r\n            T.Extension2 AS Address_Extension2, \r\n            T.Refer");
            viewString.Append("ence AS Address_Reference, \r\n            T.FAO AS Address_FAO, \r\n            T.I");
            viewString.Append("sDefaultAddress AS Address_IsDefaultAddress, \r\n            T.IsDefaultShippingAd");
            viewString.Append("dress AS Address_IsDefaultShippingAddress, \r\n            T.isArchived AS Address");
            viewString.Append("_isArchived, \r\n            T.TerritoryId AS Address_TerritoryId, \r\n            T");
            viewString.Append(".GeoLatitude AS Address_GeoLatitude, \r\n            T.GeoLongitude AS Address_Geo");
            viewString.Append("Longitude, \r\n            T.isPrivate AS Address_isPrivate, \r\n            T.Conta");
            viewString.Append("ctId AS Address_ContactId, \r\n            T.isDefaultTerrorityBilling AS Address_");
            viewString.Append("isDefaultTerrorityBilling, \r\n            T.isDefaultTerrorityShipping AS Address");
            viewString.Append("_isDefaultTerrorityShipping, \r\n            T.OrganisationId AS Address_Organisat");
            viewString.Append("ionId, \r\n            T.DisplayOnContactUs AS Address_DisplayOnContactUs, \r\n     ");
            viewString.Append("       True AS _from0\r\n        FROM BaseDbContext.Addresses AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Address", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ColorPallete
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView62()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ColorPallete", @"
    SELECT VALUE -- Constructing ColorPallete
        [DomainModels.Store.ColorPallete](T1.ColorPallete_PalleteId, T1.ColorPallete_PalleteName, T1.ColorPallete_Color1, T1.ColorPallete_Color2, T1.ColorPallete_Color3, T1.ColorPallete_Color4, T1.ColorPallete_Color5, T1.ColorPallete_Color6, T1.ColorPallete_Color7, T1.ColorPallete_SkinId, T1.ColorPallete_isDefault, T1.ColorPallete_CompanyId)
    FROM (
        SELECT 
            T.PalleteId AS ColorPallete_PalleteId, 
            T.PalleteName AS ColorPallete_PalleteName, 
            T.Color1 AS ColorPallete_Color1, 
            T.Color2 AS ColorPallete_Color2, 
            T.Color3 AS ColorPallete_Color3, 
            T.Color4 AS ColorPallete_Color4, 
            T.Color5 AS ColorPallete_Color5, 
            T.Color6 AS ColorPallete_Color6, 
            T.Color7 AS ColorPallete_Color7, 
            T.SkinId AS ColorPallete_SkinId, 
            T.IsDefault AS ColorPallete_isDefault, 
            T.CompanyId AS ColorPallete_CompanyId, 
            True AS _from0
        FROM BaseDbContext.ColorPalletes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Template
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView63()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3720);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Template\r\n        [DomainModels.Store.Templat");
            viewString.Append("e](T1.Template_ProductId, T1.Template_Code, T1.Template_ProductName, T1.Template");
            viewString.Append("_Description, T1.Template_Thumbnail, T1.Template_Image, T1.Template_IsDisabled, ");
            viewString.Append("T1.Template_PDFTemplateWidth, T1.Template_PDFTemplateHeight, T1.Template_Cutting");
            viewString.Append("Margin, T1.Template_MultiPageCount, T1.Template_Orientation, T1.Template_Matchin");
            viewString.Append("gSetTheme, T1.Template_BaseColorID, T1.Template_SubmittedBy, T1.Template_Submitt");
            viewString.Append("edByName, T1.Template_SubmitDate, T1.Template_Status, T1.Template_ApprovedBy, T1");
            viewString.Append(".Template_ApprovedByName, T1.Template_UserRating, T1.Template_UsedCount, T1.Temp");
            viewString.Append("late_MPCRating, T1.Template_RejectionReason, T1.Template_ApprovalDate, T1.Templa");
            viewString.Append("te_TempString, T1.Template_MatchingSetID, T1.Template_FullView, T1.Template_SLTh");
            viewString.Append("umbnail, T1.Template_SuperView, T1.Template_ColorHex, T1.Template_TemplateOwner,");
            viewString.Append(" T1.Template_TemplateOwnerName, T1.Template_IsPrivate, T1.Template_ApprovedDate,");
            viewString.Append(" T1.Template_IsCorporateEditable, T1.Template_TemplateType, T1.Template_isWaterm");
            viewString.Append("arkText, T1.Template_isSpotTemplate, T1.Template_isCreatedManual, T1.Template_is");
            viewString.Append("EditorChoice, T1.Template_ProductCategoryId, T1.Template_contactId, T1.Template_");
            viewString.Append("realEstateId)\r\n    FROM (\r\n        SELECT \r\n            T.ProductId AS Template_");
            viewString.Append("ProductId, \r\n            T.Code AS Template_Code, \r\n            T.ProductName AS");
            viewString.Append(" Template_ProductName, \r\n            T.Description AS Template_Description, \r\n  ");
            viewString.Append("          T.Thumbnail AS Template_Thumbnail, \r\n            T.Image AS Template_I");
            viewString.Append("mage, \r\n            T.IsDisabled AS Template_IsDisabled, \r\n            T.PDFTemp");
            viewString.Append("lateWidth AS Template_PDFTemplateWidth, \r\n            T.PDFTemplateHeight AS Tem");
            viewString.Append("plate_PDFTemplateHeight, \r\n            T.CuttingMargin AS Template_CuttingMargin");
            viewString.Append(", \r\n            T.MultiPageCount AS Template_MultiPageCount, \r\n            T.Ori");
            viewString.Append("entation AS Template_Orientation, \r\n            T.MatchingSetTheme AS Template_M");
            viewString.Append("atchingSetTheme, \r\n            T.BaseColorID AS Template_BaseColorID, \r\n        ");
            viewString.Append("    T.SubmittedBy AS Template_SubmittedBy, \r\n            T.SubmittedByName AS Te");
            viewString.Append("mplate_SubmittedByName, \r\n            T.SubmitDate AS Template_SubmitDate, \r\n   ");
            viewString.Append("         T.Status AS Template_Status, \r\n            T.ApprovedBy AS Template_App");
            viewString.Append("rovedBy, \r\n            T.ApprovedByName AS Template_ApprovedByName, \r\n          ");
            viewString.Append("  T.UserRating AS Template_UserRating, \r\n            T.UsedCount AS Template_Use");
            viewString.Append("dCount, \r\n            T.MPCRating AS Template_MPCRating, \r\n            T.Rejecti");
            viewString.Append("onReason AS Template_RejectionReason, \r\n            T.ApprovalDate AS Template_A");
            viewString.Append("pprovalDate, \r\n            T.TempString AS Template_TempString, \r\n            T.");
            viewString.Append("MatchingSetID AS Template_MatchingSetID, \r\n            T.FullView AS Template_Fu");
            viewString.Append("llView, \r\n            T.SLThumbnail AS Template_SLThumbnail, \r\n            T.Sup");
            viewString.Append("erView AS Template_SuperView, \r\n            T.ColorHex AS Template_ColorHex, \r\n ");
            viewString.Append("           T.TemplateOwner AS Template_TemplateOwner, \r\n            T.TemplateOw");
            viewString.Append("nerName AS Template_TemplateOwnerName, \r\n            T.IsPrivate AS Template_IsP");
            viewString.Append("rivate, \r\n            T.ApprovedDate AS Template_ApprovedDate, \r\n            T.I");
            viewString.Append("sCorporateEditable AS Template_IsCorporateEditable, \r\n            T.TemplateType");
            viewString.Append(" AS Template_TemplateType, \r\n            T.isWatermarkText AS Template_isWaterma");
            viewString.Append("rkText, \r\n            T.isSpotTemplate AS Template_isSpotTemplate, \r\n           ");
            viewString.Append(" T.isCreatedManual AS Template_isCreatedManual, \r\n            T.isEditorChoice A");
            viewString.Append("S Template_isEditorChoice, \r\n            T.ProductCategoryId AS Template_Product");
            viewString.Append("CategoryId, \r\n            T.contactId AS Template_contactId, \r\n            T.rea");
            viewString.Append("lEstateId AS Template_realEstateId, \r\n            True AS _from0\r\n        FROM B");
            viewString.Append("aseDbContext.Templates AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Template", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplatePage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView64()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplatePage", "\r\n    SELECT VALUE -- Constructing TemplatePage\r\n        [DomainModels.Store.Temp" +
                    "latePage](T1.TemplatePage_ProductPageId, T1.TemplatePage_ProductId, T1.TemplateP" +
                    "age_PageNo, T1.TemplatePage_PageType, T1.TemplatePage_Orientation, T1.TemplatePa" +
                    "ge_BackGroundType, T1.TemplatePage_BackgroundFileName, T1.TemplatePage_ColorC, T" +
                    "1.TemplatePage_ColorM, T1.TemplatePage_ColorY, T1.TemplatePage_PageName, T1.Temp" +
                    "latePage_ColorK, T1.TemplatePage_IsPrintable, T1.TemplatePage_hasOverlayObjects," +
                    " T1.TemplatePage_Width, T1.TemplatePage_Height)\r\n    FROM (\r\n        SELECT \r\n  " +
                    "          T.ProductPageId AS TemplatePage_ProductPageId, \r\n            T.Product" +
                    "Id AS TemplatePage_ProductId, \r\n            T.PageNo AS TemplatePage_PageNo, \r\n " +
                    "           T.PageType AS TemplatePage_PageType, \r\n            T.Orientation AS T" +
                    "emplatePage_Orientation, \r\n            T.BackGroundType AS TemplatePage_BackGrou" +
                    "ndType, \r\n            T.BackgroundFileName AS TemplatePage_BackgroundFileName, \r" +
                    "\n            T.ColorC AS TemplatePage_ColorC, \r\n            T.ColorM AS Template" +
                    "Page_ColorM, \r\n            T.ColorY AS TemplatePage_ColorY, \r\n            T.Page" +
                    "Name AS TemplatePage_PageName, \r\n            T.ColorK AS TemplatePage_ColorK, \r\n" +
                    "            T.IsPrintable AS TemplatePage_IsPrintable, \r\n            T.hasOverla" +
                    "yObjects AS TemplatePage_hasOverlayObjects, \r\n            T.Width AS TemplatePag" +
                    "e_Width, \r\n            T.Height AS TemplatePage_Height, \r\n            True AS _f" +
                    "rom0\r\n        FROM BaseDbContext.TemplatePages AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GlobalLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView65()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GlobalLanguage", @"
    SELECT VALUE -- Constructing GlobalLanguage
        [DomainModels.Store.GlobalLanguage](T1.GlobalLanguage_LanguageId, T1.GlobalLanguage_FriendlyName, T1.GlobalLanguage_uiCulture, T1.GlobalLanguage_culture)
    FROM (
        SELECT 
            T.LanguageId AS GlobalLanguage_LanguageId, 
            T.FriendlyName AS GlobalLanguage_FriendlyName, 
            T.uiCulture AS GlobalLanguage_uiCulture, 
            T.culture AS GlobalLanguage_culture, 
            True AS _from0
        FROM BaseDbContext.GlobalLanguages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsPageTag
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView66()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsPageTag", @"
    SELECT VALUE -- Constructing CmsPageTag
        [DomainModels.Store.CmsPageTag](T1.CmsPageTag_TagId, T1.CmsPageTag_PageId, T1.CmsPageTag_PageTagId, T1.CmsPageTag_CompanyId)
    FROM (
        SELECT 
            T.TagId AS CmsPageTag_TagId, 
            T.PageId AS CmsPageTag_PageId, 
            T.PageTagId AS CmsPageTag_PageTagId, 
            T.CompanyId AS CmsPageTag_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CmsPageTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView67()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsTags", @"
    SELECT VALUE -- Constructing CmsTags
        [DomainModels.Store.CmsTags](T1.CmsTags_TagId, T1.CmsTags_TagName, T1.CmsTags_TagSlug, T1.CmsTags_Description, T1.CmsTags_isDisplay)
    FROM (
        SELECT 
            T.TagId AS CmsTags_TagId, 
            T.TagName AS CmsTags_TagName, 
            T.TagSlug AS CmsTags_TagSlug, 
            T.Description AS CmsTags_Description, 
            T.IsDisplay AS CmsTags_isDisplay, 
            True AS _from0
        FROM BaseDbContext.CmsTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView68()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreType", @"
    SELECT VALUE -- Constructing CostCentreType
        [DomainModels.Store.CostCentreType](T1.CostCentreType_TypeId, T1.CostCentreType_TypeName, T1.CostCentreType_IsSystem, T1.CostCentreType_IsExternal, T1.CostCentreType_OrganisationId)
    FROM (
        SELECT 
            T.TypeId AS CostCentreType_TypeId, 
            T.TypeName AS CostCentreType_TypeName, 
            T.IsSystem AS CostCentreType_IsSystem, 
            T.IsExternal AS CostCentreType_IsExternal, 
            T.OrganisationId AS CostCentreType_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CostCentreTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.FieldVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView69()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.FieldVariable", "\r\n    SELECT VALUE -- Constructing FieldVariable\r\n        [DomainModels.Store.Fie" +
                    "ldVariable](T1.FieldVariable_VariableId, T1.FieldVariable_VariableName, T1.Field" +
                    "Variable_RefTableName, T1.FieldVariable_CriteriaFieldName, T1.FieldVariable_Vari" +
                    "ableSectionId, T1.FieldVariable_VariableTag, T1.FieldVariable_SortOrder, T1.Fiel" +
                    "dVariable_KeyField, T1.FieldVariable_VariableType, T1.FieldVariable_Scope, T1.Fi" +
                    "eldVariable_WaterMark, T1.FieldVariable_DefaultValue, T1.FieldVariable_InputMask" +
                    ", T1.FieldVariable_CompanyId, T1.FieldVariable_OrganisationId, T1.FieldVariable_" +
                    "IsSystem, T1.FieldVariable_VariableTitle)\r\n    FROM (\r\n        SELECT \r\n        " +
                    "    T.VariableId AS FieldVariable_VariableId, \r\n            T.VariableName AS Fi" +
                    "eldVariable_VariableName, \r\n            T.RefTableName AS FieldVariable_RefTable" +
                    "Name, \r\n            T.CriteriaFieldName AS FieldVariable_CriteriaFieldName, \r\n  " +
                    "          T.VariableSectionId AS FieldVariable_VariableSectionId, \r\n            " +
                    "T.VariableTag AS FieldVariable_VariableTag, \r\n            T.SortOrder AS FieldVa" +
                    "riable_SortOrder, \r\n            T.KeyField AS FieldVariable_KeyField, \r\n        " +
                    "    T.VariableType AS FieldVariable_VariableType, \r\n            T.Scope AS Field" +
                    "Variable_Scope, \r\n            T.WaterMark AS FieldVariable_WaterMark, \r\n        " +
                    "    T.DefaultValue AS FieldVariable_DefaultValue, \r\n            T.InputMask AS F" +
                    "ieldVariable_InputMask, \r\n            T.CompanyId AS FieldVariable_CompanyId, \r\n" +
                    "            T.OrganisationId AS FieldVariable_OrganisationId, \r\n            T.Is" +
                    "System AS FieldVariable_IsSystem, \r\n            T.VariableTitle AS FieldVariable" +
                    "_VariableTitle, \r\n            True AS _from0\r\n        FROM BaseDbContext.FieldVa" +
                    "riables AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView70()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateVariable", @"
    SELECT VALUE -- Constructing TemplateVariable
        [DomainModels.Store.TemplateVariable](T1.TemplateVariable_ProductVariableId, T1.TemplateVariable_TemplateId, T1.TemplateVariable_VariableId, T1.TemplateVariable_VariableText)
    FROM (
        SELECT 
            T.ProductVariableId AS TemplateVariable_ProductVariableId, 
            T.TemplateId AS TemplateVariable_TemplateId, 
            T.VariableId AS TemplateVariable_VariableId, 
            T.VariableText AS TemplateVariable_VariableText, 
            True AS _from0
        FROM BaseDbContext.TemplateVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateBackgroundImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView71()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2370);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateBackgroundImage\r\n        [DomainModel");
            viewString.Append("s.Store.TemplateBackgroundImage](T1.TemplateBackgroundImage_Id, T1.TemplateBackg");
            viewString.Append("roundImage_ProductId, T1.TemplateBackgroundImage_ImageName, T1.TemplateBackgroun");
            viewString.Append("dImage_Name, T1.TemplateBackgroundImage_flgPhotobook, T1.TemplateBackgroundImage");
            viewString.Append("_flgCover, T1.TemplateBackgroundImage_BackgroundImageAbsolutePath, T1.TemplateBa");
            viewString.Append("ckgroundImage_BackgroundImageRelativePath, T1.TemplateBackgroundImage_ImageType,");
            viewString.Append(" T1.TemplateBackgroundImage_ImageWidth, T1.TemplateBackgroundImage_ImageHeight, ");
            viewString.Append("T1.TemplateBackgroundImage_ImageTitle, T1.TemplateBackgroundImage_ImageDescripti");
            viewString.Append("on, T1.TemplateBackgroundImage_ImageKeywords, T1.TemplateBackgroundImage_Uploade");
            viewString.Append("dFrom, T1.TemplateBackgroundImage_ContactCompanyId, T1.TemplateBackgroundImage_C");
            viewString.Append("ontactId, T1.TemplateBackgroundImage_hasClippingPath, T1.TemplateBackgroundImage");
            viewString.Append("_clippingFileName)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS TemplateBac");
            viewString.Append("kgroundImage_Id, \r\n            T.ProductId AS TemplateBackgroundImage_ProductId,");
            viewString.Append(" \r\n            T.ImageName AS TemplateBackgroundImage_ImageName, \r\n            T");
            viewString.Append(".Name AS TemplateBackgroundImage_Name, \r\n            T.flgPhotobook AS TemplateB");
            viewString.Append("ackgroundImage_flgPhotobook, \r\n            T.flgCover AS TemplateBackgroundImage");
            viewString.Append("_flgCover, \r\n            T.BackgroundImageAbsolutePath AS TemplateBackgroundImag");
            viewString.Append("e_BackgroundImageAbsolutePath, \r\n            T.BackgroundImageRelativePath AS Te");
            viewString.Append("mplateBackgroundImage_BackgroundImageRelativePath, \r\n            T.ImageType AS ");
            viewString.Append("TemplateBackgroundImage_ImageType, \r\n            T.ImageWidth AS TemplateBackgro");
            viewString.Append("undImage_ImageWidth, \r\n            T.ImageHeight AS TemplateBackgroundImage_Imag");
            viewString.Append("eHeight, \r\n            T.ImageTitle AS TemplateBackgroundImage_ImageTitle, \r\n   ");
            viewString.Append("         T.ImageDescription AS TemplateBackgroundImage_ImageDescription, \r\n     ");
            viewString.Append("       T.ImageKeywords AS TemplateBackgroundImage_ImageKeywords, \r\n            T");
            viewString.Append(".UploadedFrom AS TemplateBackgroundImage_UploadedFrom, \r\n            T.ContactCo");
            viewString.Append("mpanyId AS TemplateBackgroundImage_ContactCompanyId, \r\n            T.ContactId A");
            viewString.Append("S TemplateBackgroundImage_ContactId, \r\n            T.hasClippingPath AS Template");
            viewString.Append("BackgroundImage_hasClippingPath, \r\n            T.clippingFileName AS TemplateBac");
            viewString.Append("kgroundImage_clippingFileName, \r\n            True AS _from0\r\n        FROM BaseDb");
            viewString.Append("Context.TemplateBackgroundImages AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateBackgroundImage", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateObject
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView72()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6126);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateObject\r\n        [DomainModels.Store.T");
            viewString.Append("emplateObject](T1.TemplateObject_ObjectId, T1.TemplateObject_ObjectType, T1.Temp");
            viewString.Append("lateObject_Name, T1.TemplateObject_IsEditable, T1.TemplateObject_IsHidden, T1.Te");
            viewString.Append("mplateObject_IsMandatory, T1.TemplateObject_PositionX, T1.TemplateObject_Positio");
            viewString.Append("nY, T1.TemplateObject_MaxHeight, T1.TemplateObject_MaxWidth, T1.TemplateObject_M");
            viewString.Append("axCharacters, T1.TemplateObject_RotationAngle, T1.TemplateObject_IsFontCustom, T");
            viewString.Append("1.TemplateObject_IsFontNamePrivate, T1.TemplateObject_FontName, T1.TemplateObjec");
            viewString.Append("t_FontSize, T1.TemplateObject_IsBold, T1.TemplateObject_IsItalic, T1.TemplateObj");
            viewString.Append("ect_Allignment, T1.TemplateObject_VAllignment, T1.TemplateObject_Indent, T1.Temp");
            viewString.Append("lateObject_IsUnderlinedText, T1.TemplateObject_ColorType, T1.TemplateObject_Colo");
            viewString.Append("rName, T1.TemplateObject_ColorC, T1.TemplateObject_ColorM, T1.TemplateObject_Col");
            viewString.Append("orY, T1.TemplateObject_ColorK, T1.TemplateObject_Tint, T1.TemplateObject_IsSpotC");
            viewString.Append("olor, T1.TemplateObject_SpotColorName, T1.TemplateObject_ContentString, T1.Templ");
            viewString.Append("ateObject_ContentCaseType, T1.TemplateObject_ProductId, T1.TemplateObject_Displa");
            viewString.Append("yOrderPdf, T1.TemplateObject_DisplayOrderTxtControl, T1.TemplateObject_RColor, T");
            viewString.Append("1.TemplateObject_GColor, T1.TemplateObject_BColor, T1.TemplateObject_LineSpacing");
            viewString.Append(", T1.TemplateObject_ProductPageId, T1.TemplateObject_ParentId, T1.TemplateObject");
            viewString.Append("_CircleRadiusX, T1.TemplateObject_Opacity, T1.TemplateObject_ExField1, T1.Templa");
            viewString.Append("teObject_ExField2, T1.TemplateObject_IsPositionLocked, T1.TemplateObject_ColorHe");
            viewString.Append("x, T1.TemplateObject_CircleRadiusY, T1.TemplateObject_IsTextEditable, T1.Templat");
            viewString.Append("eObject_QuickTextOrder, T1.TemplateObject_IsQuickText, T1.TemplateObject_CharSpa");
            viewString.Append("cing, T1.TemplateObject_watermarkText, T1.TemplateObject_textStyles, T1.Template");
            viewString.Append("Object_AutoShrinkText, T1.TemplateObject_IsOverlayObject, T1.TemplateObject_Clip");
            viewString.Append("pedInfo, T1.TemplateObject_textCase, T1.TemplateObject_originalTextStyles, T1.Te");
            viewString.Append("mplateObject_originalContentString, T1.TemplateObject_hasInlineFontStyle, T1.Tem");
            viewString.Append("plateObject_autoCollapseText, T1.TemplateObject_hasClippingPath, T1.TemplateObje");
            viewString.Append("ct_isBulletPoint, T1.TemplateObject_TextPaddingTop)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.ObjectId AS TemplateObject_ObjectId, \r\n            T.ObjectType ");
            viewString.Append("AS TemplateObject_ObjectType, \r\n            T.Name AS TemplateObject_Name, \r\n   ");
            viewString.Append("         T.IsEditable AS TemplateObject_IsEditable, \r\n            T.IsHidden AS ");
            viewString.Append("TemplateObject_IsHidden, \r\n            T.IsMandatory AS TemplateObject_IsMandato");
            viewString.Append("ry, \r\n            T.PositionX AS TemplateObject_PositionX, \r\n            T.Posit");
            viewString.Append("ionY AS TemplateObject_PositionY, \r\n            T.MaxHeight AS TemplateObject_Ma");
            viewString.Append("xHeight, \r\n            T.MaxWidth AS TemplateObject_MaxWidth, \r\n            T.Ma");
            viewString.Append("xCharacters AS TemplateObject_MaxCharacters, \r\n            T.RotationAngle AS Te");
            viewString.Append("mplateObject_RotationAngle, \r\n            T.IsFontCustom AS TemplateObject_IsFon");
            viewString.Append("tCustom, \r\n            T.IsFontNamePrivate AS TemplateObject_IsFontNamePrivate, ");
            viewString.Append("\r\n            T.FontName AS TemplateObject_FontName, \r\n            T.FontSize AS");
            viewString.Append(" TemplateObject_FontSize, \r\n            T.IsBold AS TemplateObject_IsBold, \r\n   ");
            viewString.Append("         T.IsItalic AS TemplateObject_IsItalic, \r\n            T.Allignment AS Te");
            viewString.Append("mplateObject_Allignment, \r\n            T.VAllignment AS TemplateObject_VAllignme");
            viewString.Append("nt, \r\n            T.Indent AS TemplateObject_Indent, \r\n            T.IsUnderline");
            viewString.Append("dText AS TemplateObject_IsUnderlinedText, \r\n            T.ColorType AS TemplateO");
            viewString.Append("bject_ColorType, \r\n            T.ColorName AS TemplateObject_ColorName, \r\n      ");
            viewString.Append("      T.ColorC AS TemplateObject_ColorC, \r\n            T.ColorM AS TemplateObjec");
            viewString.Append("t_ColorM, \r\n            T.ColorY AS TemplateObject_ColorY, \r\n            T.Color");
            viewString.Append("K AS TemplateObject_ColorK, \r\n            T.Tint AS TemplateObject_Tint, \r\n     ");
            viewString.Append("       T.IsSpotColor AS TemplateObject_IsSpotColor, \r\n            T.SpotColorNam");
            viewString.Append("e AS TemplateObject_SpotColorName, \r\n            T.ContentString AS TemplateObje");
            viewString.Append("ct_ContentString, \r\n            T.ContentCaseType AS TemplateObject_ContentCaseT");
            viewString.Append("ype, \r\n            T.ProductId AS TemplateObject_ProductId, \r\n            T.Disp");
            viewString.Append("layOrderPdf AS TemplateObject_DisplayOrderPdf, \r\n            T.DisplayOrderTxtCo");
            viewString.Append("ntrol AS TemplateObject_DisplayOrderTxtControl, \r\n            T.RColor AS Templa");
            viewString.Append("teObject_RColor, \r\n            T.GColor AS TemplateObject_GColor, \r\n            ");
            viewString.Append("T.BColor AS TemplateObject_BColor, \r\n            T.LineSpacing AS TemplateObject");
            viewString.Append("_LineSpacing, \r\n            T.ProductPageId AS TemplateObject_ProductPageId, \r\n ");
            viewString.Append("           T.ParentId AS TemplateObject_ParentId, \r\n            T.CircleRadiusX ");
            viewString.Append("AS TemplateObject_CircleRadiusX, \r\n            T.Opacity AS TemplateObject_Opaci");
            viewString.Append("ty, \r\n            T.ExField1 AS TemplateObject_ExField1, \r\n            T.ExField");
            viewString.Append("2 AS TemplateObject_ExField2, \r\n            T.IsPositionLocked AS TemplateObject");
            viewString.Append("_IsPositionLocked, \r\n            T.ColorHex AS TemplateObject_ColorHex, \r\n      ");
            viewString.Append("      T.CircleRadiusY AS TemplateObject_CircleRadiusY, \r\n            T.IsTextEdi");
            viewString.Append("table AS TemplateObject_IsTextEditable, \r\n            T.QuickTextOrder AS Templa");
            viewString.Append("teObject_QuickTextOrder, \r\n            T.IsQuickText AS TemplateObject_IsQuickTe");
            viewString.Append("xt, \r\n            T.CharSpacing AS TemplateObject_CharSpacing, \r\n            T.w");
            viewString.Append("atermarkText AS TemplateObject_watermarkText, \r\n            T.textStyles AS Temp");
            viewString.Append("lateObject_textStyles, \r\n            T.AutoShrinkText AS TemplateObject_AutoShri");
            viewString.Append("nkText, \r\n            T.IsOverlayObject AS TemplateObject_IsOverlayObject, \r\n   ");
            viewString.Append("         T.ClippedInfo AS TemplateObject_ClippedInfo, \r\n            T.textCase A");
            viewString.Append("S TemplateObject_textCase, \r\n            T.originalTextStyles AS TemplateObject_");
            viewString.Append("originalTextStyles, \r\n            T.originalContentString AS TemplateObject_orig");
            viewString.Append("inalContentString, \r\n            T.hasInlineFontStyle AS TemplateObject_hasInlin");
            viewString.Append("eFontStyle, \r\n            T.autoCollapseText AS TemplateObject_autoCollapseText,");
            viewString.Append(" \r\n            T.hasClippingPath AS TemplateObject_hasClippingPath, \r\n          ");
            viewString.Append("  T.isBulletPoint AS TemplateObject_isBulletPoint, \r\n            T.TextPaddingTo");
            viewString.Append("p AS TemplateObject_TextPaddingTop, \r\n            True AS _from0\r\n        FROM B");
            viewString.Append("aseDbContext.TemplateObjects AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateObject", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStateTax
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView73()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStateTax", @"
    SELECT VALUE -- Constructing ItemStateTax
        [DomainModels.Store.ItemStateTax](T1.ItemStateTax_ItemStateTaxId, T1.ItemStateTax_CountryId, T1.ItemStateTax_StateId, T1.ItemStateTax_TaxRate, T1.ItemStateTax_ItemId)
    FROM (
        SELECT 
            T.ItemStateTaxId AS ItemStateTax_ItemStateTaxId, 
            T.CountryId AS ItemStateTax_CountryId, 
            T.StateId AS ItemStateTax_StateId, 
            T.TaxRate AS ItemStateTax_TaxRate, 
            T.ItemId AS ItemStateTax_ItemId, 
            True AS _from0
        FROM BaseDbContext.ItemStateTaxes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductMarketBriefAnswer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView74()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductMarketBriefAnswer", @"
    SELECT VALUE -- Constructing ProductMarketBriefAnswer
        [DomainModels.Store.ProductMarketBriefAnswer](T1.ProductMarketBriefAnswer_MarketBriefAnswerId, T1.ProductMarketBriefAnswer_MarketBriefQuestionId, T1.ProductMarketBriefAnswer_AnswerDetail)
    FROM (
        SELECT 
            T.MarketBriefAnswerId AS ProductMarketBriefAnswer_MarketBriefAnswerId, 
            T.MarketBriefQuestionId AS ProductMarketBriefAnswer_MarketBriefQuestionId, 
            T.AnswerDetail AS ProductMarketBriefAnswer_AnswerDetail, 
            True AS _from0
        FROM BaseDbContext.ProductMarketBriefAnswers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductMarketBriefQuestion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView75()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductMarketBriefQuestion", @"
    SELECT VALUE -- Constructing ProductMarketBriefQuestion
        [DomainModels.Store.ProductMarketBriefQuestion](T1.ProductMarketBriefQuestion_MarketBriefQuestionId, T1.ProductMarketBriefQuestion_ItemId, T1.ProductMarketBriefQuestion_QuestionDetail, T1.ProductMarketBriefQuestion_SortOrder, T1.ProductMarketBriefQuestion_isMultipleSelction)
    FROM (
        SELECT 
            T.MarketBriefQuestionId AS ProductMarketBriefQuestion_MarketBriefQuestionId, 
            T.ItemId AS ProductMarketBriefQuestion_ItemId, 
            T.QuestionDetail AS ProductMarketBriefQuestion_QuestionDetail, 
            T.SortOrder AS ProductMarketBriefQuestion_SortOrder, 
            T.IsMultipleSelection AS ProductMarketBriefQuestion_isMultipleSelction, 
            True AS _from0
        FROM BaseDbContext.ProductMarketBriefQuestions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategoryItem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView76()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategoryItem", @"
    SELECT VALUE -- Constructing ProductCategoryItem
        [DomainModels.Store.ProductCategoryItem](T1.ProductCategoryItem_ProductCategoryItemId, T1.ProductCategoryItem_CategoryId, T1.ProductCategoryItem_ItemId)
    FROM (
        SELECT 
            T.ProductCategoryItemId AS ProductCategoryItem_ProductCategoryItemId, 
            T.CategoryId AS ProductCategoryItem_CategoryId, 
            T.ItemId AS ProductCategoryItem_ItemId, 
            True AS _from0
        FROM BaseDbContext.ProductCategoryItems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateColorStyle
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView77()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateColorStyle", @"
    SELECT VALUE -- Constructing TemplateColorStyle
        [DomainModels.Store.TemplateColorStyle](T1.TemplateColorStyle_PelleteId, T1.TemplateColorStyle_ProductId, T1.TemplateColorStyle_Name, T1.TemplateColorStyle_ColorC, T1.TemplateColorStyle_ColorM, T1.TemplateColorStyle_ColorY, T1.TemplateColorStyle_ColorK, T1.TemplateColorStyle_SpotColor, T1.TemplateColorStyle_IsSpotColor, T1.TemplateColorStyle_Field1, T1.TemplateColorStyle_ColorHex, T1.TemplateColorStyle_IsColorActive, T1.TemplateColorStyle_CustomerId)
    FROM (
        SELECT 
            T.PelleteId AS TemplateColorStyle_PelleteId, 
            T.ProductId AS TemplateColorStyle_ProductId, 
            T.Name AS TemplateColorStyle_Name, 
            T.ColorC AS TemplateColorStyle_ColorC, 
            T.ColorM AS TemplateColorStyle_ColorM, 
            T.ColorY AS TemplateColorStyle_ColorY, 
            T.ColorK AS TemplateColorStyle_ColorK, 
            T.SpotColor AS TemplateColorStyle_SpotColor, 
            T.IsSpotColor AS TemplateColorStyle_IsSpotColor, 
            T.Field1 AS TemplateColorStyle_Field1, 
            T.ColorHex AS TemplateColorStyle_ColorHex, 
            T.IsColorActive AS TemplateColorStyle_IsColorActive, 
            T.CustomerId AS TemplateColorStyle_CustomerId, 
            True AS _from0
        FROM BaseDbContext.TemplateColorStyles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateFont
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView78()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateFont", @"
    SELECT VALUE -- Constructing TemplateFont
        [DomainModels.Store.TemplateFont](T1.TemplateFont_ProductFontId, T1.TemplateFont_ProductId, T1.TemplateFont_FontName, T1.TemplateFont_FontDisplayName, T1.TemplateFont_FontFile, T1.TemplateFont_DisplayIndex, T1.TemplateFont_IsPrivateFont, T1.TemplateFont_IsEnable, T1.TemplateFont_FontBytes, T1.TemplateFont_FontPath, T1.TemplateFont_CustomerId)
    FROM (
        SELECT 
            T.ProductFontId AS TemplateFont_ProductFontId, 
            T.ProductId AS TemplateFont_ProductId, 
            T.FontName AS TemplateFont_FontName, 
            T.FontDisplayName AS TemplateFont_FontDisplayName, 
            T.FontFile AS TemplateFont_FontFile, 
            T.DisplayIndex AS TemplateFont_DisplayIndex, 
            T.IsPrivateFont AS TemplateFont_IsPrivateFont, 
            T.IsEnable AS TemplateFont_IsEnable, 
            T.FontBytes AS TemplateFont_FontBytes, 
            T.FontPath AS TemplateFont_FontPath, 
            T.CustomerId AS TemplateFont_CustomerId, 
            True AS _from0
        FROM BaseDbContext.TemplateFonts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ImagePermissions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView79()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ImagePermissions", @"
    SELECT VALUE -- Constructing ImagePermissions
        [DomainModels.Store.ImagePermissions](T1.ImagePermissions_Id, T1.ImagePermissions_TerritoryID, T1.ImagePermissions_ImageId)
    FROM (
        SELECT 
            T.Id AS ImagePermissions_Id, 
            T.TerritoryID AS ImagePermissions_TerritoryID, 
            T.ImageId AS ImagePermissions_ImageId, 
            True AS _from0
        FROM BaseDbContext.ImagePermissions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.FavoriteDesign
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView80()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.FavoriteDesign", @"
    SELECT VALUE -- Constructing FavoriteDesign
        [DomainModels.Store.FavoriteDesign](T1.FavoriteDesign_FavoriteDesignId, T1.FavoriteDesign_TemplateId, T1.FavoriteDesign_ItemId, T1.FavoriteDesign_ContactUserId, T1.FavoriteDesign_IsFavorite, T1.FavoriteDesign_CategoryId)
    FROM (
        SELECT 
            T.FavoriteDesignId AS FavoriteDesign_FavoriteDesignId, 
            T.TemplateId AS FavoriteDesign_TemplateId, 
            T.ItemId AS FavoriteDesign_ItemId, 
            T.ContactUserId AS FavoriteDesign_ContactUserId, 
            T.IsFavorite AS FavoriteDesign_IsFavorite, 
            T.CategoryId AS FavoriteDesign_CategoryId, 
            True AS _from0
        FROM BaseDbContext.FavoriteDesigns AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Phrase
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView81()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Phrase", @"
    SELECT VALUE -- Constructing Phrase
        [DomainModels.Store.Phrase](T1.Phrase_PhraseId, T1.Phrase_Phrase, T1.Phrase_FieldId, T1.Phrase_CompanyId, T1.Phrase_OrganisationId)
    FROM (
        SELECT 
            T.PhraseId AS Phrase_PhraseId, 
            T.Phrase1 AS Phrase_Phrase, 
            T.FieldId AS Phrase_FieldId, 
            T.CompanyId AS Phrase_CompanyId, 
            T.OrganisationId AS Phrase_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.Phrases AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PhraseField
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView82()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PhraseField", @"
    SELECT VALUE -- Constructing PhraseField
        [DomainModels.Store.PhraseField](T1.PhraseField_FieldId, T1.PhraseField_FieldName, T1.PhraseField_SectionId, T1.PhraseField_SortOrder, T1.PhraseField_OrganisationId)
    FROM (
        SELECT 
            T.FieldId AS PhraseField_FieldId, 
            T.FieldName AS PhraseField_FieldName, 
            T.SectionId AS PhraseField_SectionId, 
            T.SortOrder AS PhraseField_SortOrder, 
            T.OrganisationId AS PhraseField_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.PhraseFields AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostcentreInstruction
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView83()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostcentreInstruction", @"
    SELECT VALUE -- Constructing CostcentreInstruction
        [DomainModels.Store.CostcentreInstruction](T1.CostcentreInstruction_InstructionId, T1.CostcentreInstruction_Instruction, T1.CostcentreInstruction_CostCentreId, T1.CostcentreInstruction_CostCenterOption)
    FROM (
        SELECT 
            T.InstructionId AS CostcentreInstruction_InstructionId, 
            T.Instruction AS CostcentreInstruction_Instruction, 
            T.CostCentreId AS CostcentreInstruction_CostCentreId, 
            T.CostCenterOption AS CostcentreInstruction_CostCenterOption, 
            True AS _from0
        FROM BaseDbContext.CostcentreInstructions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostcentreResource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView84()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostcentreResource", @"
    SELECT VALUE -- Constructing CostcentreResource
        [DomainModels.Store.CostcentreResource](T1.CostcentreResource_CostCentreId, T1.CostcentreResource_ResourceId, T1.CostcentreResource_CostCenterResourceId)
    FROM (
        SELECT 
            T.CostCentreId AS CostcentreResource_CostCentreId, 
            T.ResourceId AS CostcentreResource_ResourceId, 
            T.CostCenterResourceId AS CostcentreResource_CostCenterResourceId, 
            True AS _from0
        FROM BaseDbContext.CostcentreResources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostcentreWorkInstructionsChoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView85()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostcentreWorkInstructionsChoice", @"
    SELECT VALUE -- Constructing CostcentreWorkInstructionsChoice
        [DomainModels.Store.CostcentreWorkInstructionsChoice](T1.CostcentreWorkInstructionsChoice_Id, T1.CostcentreWorkInstructionsChoice_Choice, T1.CostcentreWorkInstructionsChoice_InstructionId)
    FROM (
        SELECT 
            T.Id AS CostcentreWorkInstructionsChoice_Id, 
            T.Choice AS CostcentreWorkInstructionsChoice_Choice, 
            T.InstructionId AS CostcentreWorkInstructionsChoice_InstructionId, 
            True AS _from0
        FROM BaseDbContext.CostcentreWorkInstructionsChoices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CmsOffer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView86()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CmsOffer", @"
    SELECT VALUE -- Constructing CmsOffer
        [DomainModels.Store.CmsOffer](T1.CmsOffer_OfferId, T1.CmsOffer_ItemId, T1.CmsOffer_OfferType, T1.CmsOffer_Description, T1.CmsOffer_ItemName, T1.CmsOffer_SortOrder, T1.CmsOffer_CompanyId)
    FROM (
        SELECT 
            T.OfferId AS CmsOffer_OfferId, 
            T.ItemId AS CmsOffer_ItemId, 
            T.OfferType AS CmsOffer_OfferType, 
            T.Description AS CmsOffer_Description, 
            T.ItemName AS CmsOffer_ItemName, 
            T.SortOrder AS CmsOffer_SortOrder, 
            T.CompanyId AS CmsOffer_CompanyId, 
            True AS _from0
        FROM BaseDbContext.CmsOffers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStockUpdateHistory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView87()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStockUpdateHistory", @"
    SELECT VALUE -- Constructing ItemStockUpdateHistory
        [DomainModels.Store.ItemStockUpdateHistory](T1.ItemStockUpdateHistory_StockHistoryId, T1.ItemStockUpdateHistory_ItemId, T1.ItemStockUpdateHistory_LastModifiedQty, T1.ItemStockUpdateHistory_ModifyEvent, T1.ItemStockUpdateHistory_LastModifiedBy, T1.ItemStockUpdateHistory_LastModifiedDate, T1.ItemStockUpdateHistory_OrderID, T1.ItemStockUpdateHistory_StockItemId)
    FROM (
        SELECT 
            T.StockHistoryId AS ItemStockUpdateHistory_StockHistoryId, 
            T.ItemId AS ItemStockUpdateHistory_ItemId, 
            T.LastModifiedQty AS ItemStockUpdateHistory_LastModifiedQty, 
            T.ModifyEvent AS ItemStockUpdateHistory_ModifyEvent, 
            T.LastModifiedBy AS ItemStockUpdateHistory_LastModifiedBy, 
            T.LastModifiedDate AS ItemStockUpdateHistory_LastModifiedDate, 
            T.OrderID AS ItemStockUpdateHistory_OrderID, 
            T.StockItemId AS ItemStockUpdateHistory_StockItemId, 
            True AS _from0
        FROM BaseDbContext.ItemStockUpdateHistories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MediaLibrary
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView88()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MediaLibrary", @"
    SELECT VALUE -- Constructing MediaLibrary
        [DomainModels.Store.MediaLibrary](T1.MediaLibrary_MediaId, T1.MediaLibrary_FilePath, T1.MediaLibrary_FileName, T1.MediaLibrary_FileType, T1.MediaLibrary_CompanyId)
    FROM (
        SELECT 
            T.MediaId AS MediaLibrary_MediaId, 
            T.FilePath AS MediaLibrary_FilePath, 
            T.FileName AS MediaLibrary_FileName, 
            T.FileType AS MediaLibrary_FileType, 
            T.CompanyId AS MediaLibrary_CompanyId, 
            True AS _from0
        FROM BaseDbContext.MediaLibraries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.LookupMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView89()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.LookupMethod", @"
    SELECT VALUE -- Constructing LookupMethod
        [DomainModels.Store.LookupMethod](T1.LookupMethod_MethodId, T1.LookupMethod_Name, T1.LookupMethod_Type, T1.LookupMethod_LockedBy, T1.LookupMethod_OrganisationID, T1.LookupMethod_FlagId, T1.LookupMethod_SystemSiteId)
    FROM (
        SELECT 
            T.MethodId AS LookupMethod_MethodId, 
            T.Name AS LookupMethod_Name, 
            T.Type AS LookupMethod_Type, 
            T.LockedBy AS LookupMethod_LockedBy, 
            T.OrganisationId AS LookupMethod_OrganisationID, 
            T.FlagId AS LookupMethod_FlagId, 
            T.SystemSiteId AS LookupMethod_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.LookupMethods AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Machine
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView90()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5818);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Machine\r\n        [DomainModels.Store.Machine]");
            viewString.Append("(T1.Machine_MachineId, T1.Machine_MachineName, T1.Machine_MachineCatId, T1.Machi");
            viewString.Append("ne_ColourHeads, T1.Machine_isPerfecting, T1.Machine_SetupCharge, T1.Machine_Wash");
            viewString.Append("upPrice, T1.Machine_WashupCost, T1.Machine_MinInkDuctqty, T1.Machine_worknturnch");
            viewString.Append("arge, T1.Machine_MakeReadyCost, T1.Machine_DefaultFilmId, T1.Machine_DefaultPlat");
            viewString.Append("eId, T1.Machine_DefaultPaperId, T1.Machine_isfilmused, T1.Machine_isplateused, T");
            viewString.Append("1.Machine_ismakereadyused, T1.Machine_iswashupused, T1.Machine_maximumsheetweigh");
            viewString.Append("t, T1.Machine_maximumsheetheight, T1.Machine_maximumsheetwidth, T1.Machine_minim");
            viewString.Append("umsheetheight, T1.Machine_minimumsheetwidth, T1.Machine_gripdepth, T1.Machine_gr");
            viewString.Append("ipsideorientaion, T1.Machine_gutterdepth, T1.Machine_headdepth, T1.Machine_Marku");
            viewString.Append("pId, T1.Machine_PressSizeRatio, T1.Machine_Description, T1.Machine_Priority, T1.");
            viewString.Append("Machine_DirectCost, T1.Machine_MinimumCharge, T1.Machine_CostPerCut, T1.Machine_");
            viewString.Append("PricePerCut, T1.Machine_IsAdditionalOption, T1.Machine_IsDisabled, T1.Machine_Lo");
            viewString.Append("ckedBy, T1.Machine_CylinderSizeId, T1.Machine_MaxItemAcrossCylinder, T1.Machine_");
            viewString.Append("Web1MRCost, T1.Machine_Web1MRPrice, T1.Machine_Web2MRCost, T1.Machine_Web2MRPric");
            viewString.Append("e, T1.Machine_ReelMRCost, T1.Machine_ReelMRPrice, T1.Machine_IsMaxColorLimit, T1");
            viewString.Append(".Machine_PressUtilization, T1.Machine_MakeReadyPrice, T1.Machine_InkChargeForUni");
            viewString.Append("queColors, T1.Machine_CompanyId, T1.Machine_FlagId, T1.Machine_IsScheduleable, T");
            viewString.Append("1.Machine_SystemSiteId, T1.Machine_SpoilageType, T1.Machine_SetupTime, T1.Machin");
            viewString.Append("e_TimePerCut, T1.Machine_MakeReadyTime, T1.Machine_WashupTime, T1.Machine_ReelMa");
            viewString.Append("kereadyTime, T1.Machine_LookupMethodId, T1.Machine_OrganisationId, T1.Machine_Se");
            viewString.Append("tupSpoilage, T1.Machine_RunningSpoilage, T1.Machine_CoverageHigh, T1.Machine_Cov");
            viewString.Append("erageMedium, T1.Machine_CoverageLow, T1.Machine_isSheetFed, T1.Machine_Passes, T");
            viewString.Append("1.Machine_IsSpotColor)\r\n    FROM (\r\n        SELECT \r\n            T.MachineId AS ");
            viewString.Append("Machine_MachineId, \r\n            T.MachineName AS Machine_MachineName, \r\n       ");
            viewString.Append("     T.MachineCatId AS Machine_MachineCatId, \r\n            T.ColourHeads AS Mach");
            viewString.Append("ine_ColourHeads, \r\n            T.isPerfecting AS Machine_isPerfecting, \r\n       ");
            viewString.Append("     T.SetupCharge AS Machine_SetupCharge, \r\n            T.WashupPrice AS Machin");
            viewString.Append("e_WashupPrice, \r\n            T.WashupCost AS Machine_WashupCost, \r\n            T");
            viewString.Append(".MinInkDuctqty AS Machine_MinInkDuctqty, \r\n            T.worknturncharge AS Mach");
            viewString.Append("ine_worknturncharge, \r\n            T.MakeReadyCost AS Machine_MakeReadyCost, \r\n ");
            viewString.Append("           T.DefaultFilmId AS Machine_DefaultFilmId, \r\n            T.DefaultPlat");
            viewString.Append("eId AS Machine_DefaultPlateId, \r\n            T.DefaultPaperId AS Machine_Default");
            viewString.Append("PaperId, \r\n            T.isfilmused AS Machine_isfilmused, \r\n            T.ispla");
            viewString.Append("teused AS Machine_isplateused, \r\n            T.ismakereadyused AS Machine_ismake");
            viewString.Append("readyused, \r\n            T.iswashupused AS Machine_iswashupused, \r\n            T");
            viewString.Append(".maximumsheetweight AS Machine_maximumsheetweight, \r\n            T.maximumsheeth");
            viewString.Append("eight AS Machine_maximumsheetheight, \r\n            T.maximumsheetwidth AS Machin");
            viewString.Append("e_maximumsheetwidth, \r\n            T.minimumsheetheight AS Machine_minimumsheeth");
            viewString.Append("eight, \r\n            T.minimumsheetwidth AS Machine_minimumsheetwidth, \r\n       ");
            viewString.Append("     T.gripdepth AS Machine_gripdepth, \r\n            T.gripsideorientaion AS Mac");
            viewString.Append("hine_gripsideorientaion, \r\n            T.gutterdepth AS Machine_gutterdepth, \r\n ");
            viewString.Append("           T.headdepth AS Machine_headdepth, \r\n            T.MarkupId AS Machine");
            viewString.Append("_MarkupId, \r\n            T.PressSizeRatio AS Machine_PressSizeRatio, \r\n         ");
            viewString.Append("   T.Description AS Machine_Description, \r\n            T.Priority AS Machine_Pri");
            viewString.Append("ority, \r\n            T.DirectCost AS Machine_DirectCost, \r\n            T.Minimum");
            viewString.Append("Charge AS Machine_MinimumCharge, \r\n            T.CostPerCut AS Machine_CostPerCu");
            viewString.Append("t, \r\n            T.PricePerCut AS Machine_PricePerCut, \r\n            T.IsAdditio");
            viewString.Append("nalOption AS Machine_IsAdditionalOption, \r\n            T.IsDisabled AS Machine_I");
            viewString.Append("sDisabled, \r\n            T.LockedBy AS Machine_LockedBy, \r\n            T.Cylinde");
            viewString.Append("rSizeId AS Machine_CylinderSizeId, \r\n            T.MaxItemAcrossCylinder AS Mach");
            viewString.Append("ine_MaxItemAcrossCylinder, \r\n            T.Web1MRCost AS Machine_Web1MRCost, \r\n ");
            viewString.Append("           T.Web1MRPrice AS Machine_Web1MRPrice, \r\n            T.Web2MRCost AS M");
            viewString.Append("achine_Web2MRCost, \r\n            T.Web2MRPrice AS Machine_Web2MRPrice, \r\n       ");
            viewString.Append("     T.ReelMRCost AS Machine_ReelMRCost, \r\n            T.ReelMRPrice AS Machine_");
            viewString.Append("ReelMRPrice, \r\n            T.IsMaxColorLimit AS Machine_IsMaxColorLimit, \r\n     ");
            viewString.Append("       T.PressUtilization AS Machine_PressUtilization, \r\n            T.MakeReady");
            viewString.Append("Price AS Machine_MakeReadyPrice, \r\n            T.InkChargeForUniqueColors AS Mac");
            viewString.Append("hine_InkChargeForUniqueColors, \r\n            T.CompanyId AS Machine_CompanyId, \r");
            viewString.Append("\n            T.FlagId AS Machine_FlagId, \r\n            T.IsScheduleable AS Machi");
            viewString.Append("ne_IsScheduleable, \r\n            T.SystemSiteId AS Machine_SystemSiteId, \r\n     ");
            viewString.Append("       T.SpoilageType AS Machine_SpoilageType, \r\n            T.SetupTime AS Mach");
            viewString.Append("ine_SetupTime, \r\n            T.TimePerCut AS Machine_TimePerCut, \r\n            T");
            viewString.Append(".MakeReadyTime AS Machine_MakeReadyTime, \r\n            T.WashupTime AS Machine_W");
            viewString.Append("ashupTime, \r\n            T.ReelMakereadyTime AS Machine_ReelMakereadyTime, \r\n   ");
            viewString.Append("         T.LookupMethodId AS Machine_LookupMethodId, \r\n            T.Organisatio");
            viewString.Append("nId AS Machine_OrganisationId, \r\n            T.SetupSpoilage AS Machine_SetupSpo");
            viewString.Append("ilage, \r\n            T.RunningSpoilage AS Machine_RunningSpoilage, \r\n           ");
            viewString.Append(" T.CoverageHigh AS Machine_CoverageHigh, \r\n            T.CoverageMedium AS Machi");
            viewString.Append("ne_CoverageMedium, \r\n            T.CoverageLow AS Machine_CoverageLow, \r\n       ");
            viewString.Append("     T.isSheetFed AS Machine_isSheetFed, \r\n            T.Passes AS Machine_Passe");
            viewString.Append("s, \r\n            T.IsSpotColor AS Machine_IsSpotColor, \r\n            True AS _fr");
            viewString.Append("om0\r\n        FROM BaseDbContext.Machines AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Machine", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineInkCoverage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView91()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineInkCoverage", @"
    SELECT VALUE -- Constructing MachineInkCoverage
        [DomainModels.Store.MachineInkCoverage](T1.MachineInkCoverage_Id, T1.MachineInkCoverage_SideInkOrder, T1.MachineInkCoverage_SideInkOrderCoverage, T1.MachineInkCoverage_MachineId)
    FROM (
        SELECT 
            T.Id AS MachineInkCoverage_Id, 
            T.SideInkOrder AS MachineInkCoverage_SideInkOrder, 
            T.SideInkOrderCoverage AS MachineInkCoverage_SideInkOrderCoverage, 
            T.MachineId AS MachineInkCoverage_MachineId, 
            True AS _from0
        FROM BaseDbContext.MachineInkCoverages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineResource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView92()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineResource", @"
    SELECT VALUE -- Constructing MachineResource
        [DomainModels.Store.MachineResource](T1.MachineResource_Id, T1.MachineResource_MachineId, T1.MachineResource_ResourceId)
    FROM (
        SELECT 
            T.Id AS MachineResource_Id, 
            T.MachineId AS MachineResource_MachineId, 
            T.ResourceId AS MachineResource_ResourceId, 
            True AS _from0
        FROM BaseDbContext.MachineResources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyCostCentre
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView93()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyCostCentre", @"
    SELECT VALUE -- Constructing CompanyCostCentre
        [DomainModels.Store.CompanyCostCentre](T1.CompanyCostCentre_CompanyCostCenterId, T1.CompanyCostCentre_CompanyId, T1.CompanyCostCentre_CostCentreId, T1.CompanyCostCentre_BrokerMarkup, T1.CompanyCostCentre_ContactMarkup, T1.CompanyCostCentre_isDisplayToUser, T1.CompanyCostCentre_OrganisationId)
    FROM (
        SELECT 
            T.CompanyCostCenterId AS CompanyCostCentre_CompanyCostCenterId, 
            T.CompanyId AS CompanyCostCentre_CompanyId, 
            T.CostCentreId AS CompanyCostCentre_CostCentreId, 
            T.BrokerMarkup AS CompanyCostCentre_BrokerMarkup, 
            T.ContactMarkup AS CompanyCostCentre_ContactMarkup, 
            T.isDisplayToUser AS CompanyCostCentre_isDisplayToUser, 
            T.OrganisationId AS CompanyCostCentre_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.CompanyCostCentres AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PipeLineProduct
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView94()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PipeLineProduct", @"
    SELECT VALUE -- Constructing PipeLineProduct
        [DomainModels.Store.PipeLineProduct](T1.PipeLineProduct_ProductId, T1.PipeLineProduct_Description)
    FROM (
        SELECT 
            T.ProductId AS PipeLineProduct_ProductId, 
            T.Description AS PipeLineProduct_Description, 
            True AS _from0
        FROM BaseDbContext.PipeLineProducts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Activity
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView95()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3478);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Activity\r\n        [DomainModels.Store.Activit");
            viewString.Append("y](T1.Activity_ActivityId, T1.Activity_ActivityTypeId, T1.Activity_ActivityCode,");
            viewString.Append(" T1.Activity_ActivityRef, T1.Activity_ActivityDate, T1.Activity_ActivityTime, T1");
            viewString.Append(".Activity_ActivityStartTime, T1.Activity_ActivityEndTime, T1.Activity_ActivityPr");
            viewString.Append("obability, T1.Activity_ActivityPrice, T1.Activity_ActivityUnit, T1.Activity_Acti");
            viewString.Append("vityNotes, T1.Activity_IsActivityAlarm, T1.Activity_AlarmDate, T1.Activity_Alarm");
            viewString.Append("Time, T1.Activity_ActivityLink, T1.Activity_IsCustomerActivity, T1.Activity_Cont");
            viewString.Append("actId, T1.Activity_SystemUserId, T1.Activity_IsPrivate, T1.Activity_IsComplete, ");
            viewString.Append("T1.Activity_CompletionDate, T1.Activity_CompletionTime, T1.Activity_CompletionSu");
            viewString.Append("ccess, T1.Activity_CompletionResult, T1.Activity_CompletedBy, T1.Activity_IsFoll");
            viewString.Append("owedUp, T1.Activity_FollowedActivityId, T1.Activity_LastModifiedDate, T1.Activit");
            viewString.Append("y_LastModifiedtime, T1.Activity_LastModifiedBy, T1.Activity_CreatedBy, T1.Activi");
            viewString.Append("ty_CampaignId, T1.Activity_IsLocked, T1.Activity_LockedBy, T1.Activity_SystemSit");
            viewString.Append("eId, T1.Activity_CompanyId, T1.Activity_ProductTypeId, T1.Activity_SourceId, T1.");
            viewString.Append("Activity_FlagId)\r\n    FROM (\r\n        SELECT \r\n            T.ActivityId AS Activ");
            viewString.Append("ity_ActivityId, \r\n            T.ActivityTypeId AS Activity_ActivityTypeId, \r\n   ");
            viewString.Append("         T.ActivityCode AS Activity_ActivityCode, \r\n            T.ActivityRef AS");
            viewString.Append(" Activity_ActivityRef, \r\n            T.ActivityDate AS Activity_ActivityDate, \r\n");
            viewString.Append("            T.ActivityTime AS Activity_ActivityTime, \r\n            T.ActivitySta");
            viewString.Append("rtTime AS Activity_ActivityStartTime, \r\n            T.ActivityEndTime AS Activit");
            viewString.Append("y_ActivityEndTime, \r\n            T.ActivityProbability AS Activity_ActivityProba");
            viewString.Append("bility, \r\n            T.ActivityPrice AS Activity_ActivityPrice, \r\n            T");
            viewString.Append(".ActivityUnit AS Activity_ActivityUnit, \r\n            T.ActivityNotes AS Activit");
            viewString.Append("y_ActivityNotes, \r\n            T.IsActivityAlarm AS Activity_IsActivityAlarm, \r\n");
            viewString.Append("            T.AlarmDate AS Activity_AlarmDate, \r\n            T.AlarmTime AS Acti");
            viewString.Append("vity_AlarmTime, \r\n            T.ActivityLink AS Activity_ActivityLink, \r\n       ");
            viewString.Append("     T.IsCustomerActivity AS Activity_IsCustomerActivity, \r\n            T.Contac");
            viewString.Append("tId AS Activity_ContactId, \r\n            T.SystemUserId AS Activity_SystemUserId");
            viewString.Append(", \r\n            T.IsPrivate AS Activity_IsPrivate, \r\n            T.IsComplete AS");
            viewString.Append(" Activity_IsComplete, \r\n            T.CompletionDate AS Activity_CompletionDate,");
            viewString.Append(" \r\n            T.CompletionTime AS Activity_CompletionTime, \r\n            T.Comp");
            viewString.Append("letionSuccess AS Activity_CompletionSuccess, \r\n            T.CompletionResult AS");
            viewString.Append(" Activity_CompletionResult, \r\n            T.CompletedBy AS Activity_CompletedBy,");
            viewString.Append(" \r\n            T.IsFollowedUp AS Activity_IsFollowedUp, \r\n            T.Followed");
            viewString.Append("ActivityId AS Activity_FollowedActivityId, \r\n            T.LastModifiedDate AS A");
            viewString.Append("ctivity_LastModifiedDate, \r\n            T.LastModifiedtime AS Activity_LastModif");
            viewString.Append("iedtime, \r\n            T.LastModifiedBy AS Activity_LastModifiedBy, \r\n          ");
            viewString.Append("  T.CreatedBy AS Activity_CreatedBy, \r\n            T.CampaignId AS Activity_Camp");
            viewString.Append("aignId, \r\n            T.IsLocked AS Activity_IsLocked, \r\n            T.LockedBy ");
            viewString.Append("AS Activity_LockedBy, \r\n            T.SystemSiteId AS Activity_SystemSiteId, \r\n ");
            viewString.Append("           T.CompanyId AS Activity_CompanyId, \r\n            T.ProductTypeId AS A");
            viewString.Append("ctivity_ProductTypeId, \r\n            T.SourceId AS Activity_SourceId, \r\n        ");
            viewString.Append("    T.FlagId AS Activity_FlagId, \r\n            True AS _from0\r\n        FROM Base");
            viewString.Append("DbContext.Activities AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Activity", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.VariableOption
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView96()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.VariableOption", @"
    SELECT VALUE -- Constructing VariableOption
        [DomainModels.Store.VariableOption](T1.VariableOption_VariableOptionId, T1.VariableOption_VariableId, T1.VariableOption_Value, T1.VariableOption_SortOrder)
    FROM (
        SELECT 
            T.VariableOptionId AS VariableOption_VariableOptionId, 
            T.VariableId AS VariableOption_VariableId, 
            T.[Value] AS VariableOption_Value, 
            T.SortOrder AS VariableOption_SortOrder, 
            True AS _from0
        FROM BaseDbContext.VariableOptions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SmartForm
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView97()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SmartForm", @"
    SELECT VALUE -- Constructing SmartForm
        [DomainModels.Store.SmartForm](T1.SmartForm_SmartFormId, T1.SmartForm_Name, T1.SmartForm_CompanyId, T1.SmartForm_OrganisationId, T1.SmartForm_Heading)
    FROM (
        SELECT 
            T.SmartFormId AS SmartForm_SmartFormId, 
            T.Name AS SmartForm_Name, 
            T.CompanyId AS SmartForm_CompanyId, 
            T.OrganisationId AS SmartForm_OrganisationId, 
            T.Heading AS SmartForm_Heading, 
            True AS _from0
        FROM BaseDbContext.SmartForms AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SmartFormDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView98()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SmartFormDetail", @"
    SELECT VALUE -- Constructing SmartFormDetail
        [DomainModels.Store.SmartFormDetail](T1.SmartFormDetail_SmartFormDetailId, T1.SmartFormDetail_SmartFormId, T1.SmartFormDetail_ObjectType, T1.SmartFormDetail_IsRequired, T1.SmartFormDetail_SortOrder, T1.SmartFormDetail_VariableId, T1.SmartFormDetail_CaptionValue)
    FROM (
        SELECT 
            T.SmartFormDetailId AS SmartFormDetail_SmartFormDetailId, 
            T.SmartFormId AS SmartFormDetail_SmartFormId, 
            T.ObjectType AS SmartFormDetail_ObjectType, 
            T.IsRequired AS SmartFormDetail_IsRequired, 
            T.SortOrder AS SmartFormDetail_SortOrder, 
            T.VariableId AS SmartFormDetail_VariableId, 
            T.CaptionValue AS SmartFormDetail_CaptionValue, 
            True AS _from0
        FROM BaseDbContext.SmartFormDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PayPalResponse
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView99()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PayPalResponse", "\r\n    SELECT VALUE -- Constructing PayPalResponse\r\n        [DomainModels.Store.Pa" +
                    "yPalResponse](T1.PayPalResponse_PayPalResponseId, T1.PayPalResponse_RequestId, T" +
                    "1.PayPalResponse_OrderId, T1.PayPalResponse_TransactionId, T1.PayPalResponse_Pay" +
                    "mentPrice, T1.PayPalResponse_FirstName, T1.PayPalResponse_LastName, T1.PayPalRes" +
                    "ponse_Street, T1.PayPalResponse_City, T1.PayPalResponse_State, T1.PayPalResponse" +
                    "_Zip, T1.PayPalResponse_Country, T1.PayPalResponse_IsSuccess, T1.PayPalResponse_" +
                    "ReasonFault, T1.PayPalResponse_ResponseDate, T1.PayPalResponse_TransactionType, " +
                    "T1.PayPalResponse_PaymentStatus, T1.PayPalResponse_PaymentType, T1.PayPalRespons" +
                    "e_PayerEmail, T1.PayPalResponse_PayerStatus, T1.PayPalResponse_ReceiverEmail)\r\n " +
                    "   FROM (\r\n        SELECT \r\n            T.PayPalResponseId AS PayPalResponse_Pay" +
                    "PalResponseId, \r\n            T.RequestId AS PayPalResponse_RequestId, \r\n        " +
                    "    T.OrderId AS PayPalResponse_OrderId, \r\n            T.TransactionId AS PayPal" +
                    "Response_TransactionId, \r\n            T.PaymentPrice AS PayPalResponse_PaymentPr" +
                    "ice, \r\n            T.FirstName AS PayPalResponse_FirstName, \r\n            T.Last" +
                    "Name AS PayPalResponse_LastName, \r\n            T.Street AS PayPalResponse_Street" +
                    ", \r\n            T.City AS PayPalResponse_City, \r\n            T.State AS PayPalRe" +
                    "sponse_State, \r\n            T.Zip AS PayPalResponse_Zip, \r\n            T.Country" +
                    " AS PayPalResponse_Country, \r\n            T.IsSuccess AS PayPalResponse_IsSucces" +
                    "s, \r\n            T.ReasonFault AS PayPalResponse_ReasonFault, \r\n            T.Re" +
                    "sponseDate AS PayPalResponse_ResponseDate, \r\n            T.TransactionType AS Pa" +
                    "yPalResponse_TransactionType, \r\n            T.PaymentStatus AS PayPalResponse_Pa" +
                    "ymentStatus, \r\n            T.PaymentType AS PayPalResponse_PaymentType, \r\n      " +
                    "      T.PayerEmail AS PayPalResponse_PayerEmail, \r\n            T.PayerStatus AS " +
                    "PayPalResponse_PayerStatus, \r\n            T.ReceiverEmail AS PayPalResponse_Rece" +
                    "iverEmail, \r\n            True AS _from0\r\n        FROM BaseDbContext.PayPalRespon" +
                    "ses AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ScopeVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView100()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ScopeVariable", @"
    SELECT VALUE -- Constructing ScopeVariable
        [DomainModels.Store.ScopeVariable](T1.ScopeVariable_ScopeVariableId, T1.ScopeVariable_Id, T1.ScopeVariable_VariableId, T1.ScopeVariable_Value, T1.ScopeVariable_Scope)
    FROM (
        SELECT 
            T.ScopeVariableId AS ScopeVariable_ScopeVariableId, 
            T.Id AS ScopeVariable_Id, 
            T.VariableId AS ScopeVariable_VariableId, 
            T.[Value] AS ScopeVariable_Value, 
            T.Scope AS ScopeVariable_Scope, 
            True AS _from0
        FROM BaseDbContext.ScopeVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.NewsLetterSubscriber
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView101()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.NewsLetterSubscriber", @"
    SELECT VALUE -- Constructing NewsLetterSubscriber
        [DomainModels.Store.NewsLetterSubscriber](T1.NewsLetterSubscriber_SubscriberId, T1.NewsLetterSubscriber_Email, T1.NewsLetterSubscriber_FirstName, T1.NewsLetterSubscriber_LastName, T1.NewsLetterSubscriber_Status, T1.NewsLetterSubscriber_SubscriptionCode, T1.NewsLetterSubscriber_SubscribeDate, T1.NewsLetterSubscriber_UnSubscribeDate, T1.NewsLetterSubscriber_ContactId, T1.NewsLetterSubscriber_ContactCompanyID, T1.NewsLetterSubscriber_FlagId)
    FROM (
        SELECT 
            T.SubscriberId AS NewsLetterSubscriber_SubscriberId, 
            T.Email AS NewsLetterSubscriber_Email, 
            T.FirstName AS NewsLetterSubscriber_FirstName, 
            T.LastName AS NewsLetterSubscriber_LastName, 
            T.Status AS NewsLetterSubscriber_Status, 
            T.SubscriptionCode AS NewsLetterSubscriber_SubscriptionCode, 
            T.SubscribeDate AS NewsLetterSubscriber_SubscribeDate, 
            T.UnSubscribeDate AS NewsLetterSubscriber_UnSubscribeDate, 
            T.ContactId AS NewsLetterSubscriber_ContactId, 
            T.ContactCompanyID AS NewsLetterSubscriber_ContactCompanyID, 
            T.FlagId AS NewsLetterSubscriber_FlagId, 
            True AS _from0
        FROM BaseDbContext.NewsLetterSubscribers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineClickChargeLookup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView102()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineClickChargeLookup", @"
    SELECT VALUE -- Constructing MachineClickChargeLookup
        [DomainModels.Store.MachineClickChargeLookup](T1.MachineClickChargeLookup_Id, T1.MachineClickChargeLookup_MethodId, T1.MachineClickChargeLookup_SheetCost, T1.MachineClickChargeLookup_Sheets, T1.MachineClickChargeLookup_SheetPrice, T1.MachineClickChargeLookup_TimePerHour)
    FROM (
        SELECT 
            T.Id AS MachineClickChargeLookup_Id, 
            T.MethodId AS MachineClickChargeLookup_MethodId, 
            T.SheetCost AS MachineClickChargeLookup_SheetCost, 
            T.Sheets AS MachineClickChargeLookup_Sheets, 
            T.SheetPrice AS MachineClickChargeLookup_SheetPrice, 
            T.TimePerHour AS MachineClickChargeLookup_TimePerHour, 
            True AS _from0
        FROM BaseDbContext.MachineClickChargeLookups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineClickChargeZone
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView103()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7937);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineClickChargeZone\r\n        [DomainModels");
            viewString.Append(".Store.MachineClickChargeZone](T1.MachineClickChargeZone_Id, T1.MachineClickChar");
            viewString.Append("geZone_MethodId, T1.MachineClickChargeZone_From1, T1.MachineClickChargeZone_To1,");
            viewString.Append(" T1.MachineClickChargeZone_Sheets1, T1.MachineClickChargeZone_SheetCost1, T1.Mac");
            viewString.Append("hineClickChargeZone_SheetPrice1, T1.MachineClickChargeZone_From2, T1.MachineClic");
            viewString.Append("kChargeZone_To2, T1.MachineClickChargeZone_Sheets2, T1.MachineClickChargeZone_Sh");
            viewString.Append("eetCost2, T1.MachineClickChargeZone_SheetPrice2, T1.MachineClickChargeZone_From3");
            viewString.Append(", T1.MachineClickChargeZone_To3, T1.MachineClickChargeZone_Sheets3, T1.MachineCl");
            viewString.Append("ickChargeZone_SheetCost3, T1.MachineClickChargeZone_SheetPrice3, T1.MachineClick");
            viewString.Append("ChargeZone_From4, T1.MachineClickChargeZone_To4, T1.MachineClickChargeZone_Sheet");
            viewString.Append("s4, T1.MachineClickChargeZone_SheetCost4, T1.MachineClickChargeZone_SheetPrice4,");
            viewString.Append(" T1.MachineClickChargeZone_From5, T1.MachineClickChargeZone_To5, T1.MachineClick");
            viewString.Append("ChargeZone_Sheets5, T1.MachineClickChargeZone_SheetCost5, T1.MachineClickChargeZ");
            viewString.Append("one_SheetPrice5, T1.MachineClickChargeZone_From6, T1.MachineClickChargeZone_To6,");
            viewString.Append(" T1.MachineClickChargeZone_Sheets6, T1.MachineClickChargeZone_SheetCost6, T1.Mac");
            viewString.Append("hineClickChargeZone_SheetPrice6, T1.MachineClickChargeZone_From7, T1.MachineClic");
            viewString.Append("kChargeZone_To7, T1.MachineClickChargeZone_Sheets7, T1.MachineClickChargeZone_Sh");
            viewString.Append("eetCost7, T1.MachineClickChargeZone_SheetPrice7, T1.MachineClickChargeZone_From8");
            viewString.Append(", T1.MachineClickChargeZone_To8, T1.MachineClickChargeZone_Sheets8, T1.MachineCl");
            viewString.Append("ickChargeZone_SheetCost8, T1.MachineClickChargeZone_SheetPrice8, T1.MachineClick");
            viewString.Append("ChargeZone_From9, T1.MachineClickChargeZone_To9, T1.MachineClickChargeZone_Sheet");
            viewString.Append("s9, T1.MachineClickChargeZone_SheetCost9, T1.MachineClickChargeZone_SheetPrice9,");
            viewString.Append(" T1.MachineClickChargeZone_From10, T1.MachineClickChargeZone_To10, T1.MachineCli");
            viewString.Append("ckChargeZone_Sheets10, T1.MachineClickChargeZone_SheetCost10, T1.MachineClickCha");
            viewString.Append("rgeZone_SheetPrice10, T1.MachineClickChargeZone_From11, T1.MachineClickChargeZon");
            viewString.Append("e_To11, T1.MachineClickChargeZone_Sheets11, T1.MachineClickChargeZone_SheetCost1");
            viewString.Append("1, T1.MachineClickChargeZone_SheetPrice11, T1.MachineClickChargeZone_From12, T1.");
            viewString.Append("MachineClickChargeZone_To12, T1.MachineClickChargeZone_Sheets12, T1.MachineClick");
            viewString.Append("ChargeZone_SheetCost12, T1.MachineClickChargeZone_SheetPrice12, T1.MachineClickC");
            viewString.Append("hargeZone_From13, T1.MachineClickChargeZone_To13, T1.MachineClickChargeZone_Shee");
            viewString.Append("ts13, T1.MachineClickChargeZone_SheetCost13, T1.MachineClickChargeZone_SheetPric");
            viewString.Append("e13, T1.MachineClickChargeZone_From14, T1.MachineClickChargeZone_To14, T1.Machin");
            viewString.Append("eClickChargeZone_Sheets14, T1.MachineClickChargeZone_SheetCost14, T1.MachineClic");
            viewString.Append("kChargeZone_SheetPrice14, T1.MachineClickChargeZone_From15, T1.MachineClickCharg");
            viewString.Append("eZone_To15, T1.MachineClickChargeZone_Sheets15, T1.MachineClickChargeZone_SheetC");
            viewString.Append("ost15, T1.MachineClickChargeZone_SheetPrice15, T1.MachineClickChargeZone_isaccum");
            viewString.Append("ulativecharge, T1.MachineClickChargeZone_IsRoundUp, T1.MachineClickChargeZone_Ti");
            viewString.Append("mePerHour)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineClickChargeZ");
            viewString.Append("one_Id, \r\n            T.MethodId AS MachineClickChargeZone_MethodId, \r\n         ");
            viewString.Append("   T.From1 AS MachineClickChargeZone_From1, \r\n            T.To1 AS MachineClickC");
            viewString.Append("hargeZone_To1, \r\n            T.Sheets1 AS MachineClickChargeZone_Sheets1, \r\n    ");
            viewString.Append("        T.SheetCost1 AS MachineClickChargeZone_SheetCost1, \r\n            T.Sheet");
            viewString.Append("Price1 AS MachineClickChargeZone_SheetPrice1, \r\n            T.From2 AS MachineCl");
            viewString.Append("ickChargeZone_From2, \r\n            T.To2 AS MachineClickChargeZone_To2, \r\n      ");
            viewString.Append("      T.Sheets2 AS MachineClickChargeZone_Sheets2, \r\n            T.SheetCost2 AS");
            viewString.Append(" MachineClickChargeZone_SheetCost2, \r\n            T.SheetPrice2 AS MachineClickC");
            viewString.Append("hargeZone_SheetPrice2, \r\n            T.From3 AS MachineClickChargeZone_From3, \r\n");
            viewString.Append("            T.To3 AS MachineClickChargeZone_To3, \r\n            T.Sheets3 AS Mach");
            viewString.Append("ineClickChargeZone_Sheets3, \r\n            T.SheetCost3 AS MachineClickChargeZone");
            viewString.Append("_SheetCost3, \r\n            T.SheetPrice3 AS MachineClickChargeZone_SheetPrice3, ");
            viewString.Append("\r\n            T.From4 AS MachineClickChargeZone_From4, \r\n            T.To4 AS Ma");
            viewString.Append("chineClickChargeZone_To4, \r\n            T.Sheets4 AS MachineClickChargeZone_Shee");
            viewString.Append("ts4, \r\n            T.SheetCost4 AS MachineClickChargeZone_SheetCost4, \r\n        ");
            viewString.Append("    T.SheetPrice4 AS MachineClickChargeZone_SheetPrice4, \r\n            T.From5 A");
            viewString.Append("S MachineClickChargeZone_From5, \r\n            T.To5 AS MachineClickChargeZone_To");
            viewString.Append("5, \r\n            T.Sheets5 AS MachineClickChargeZone_Sheets5, \r\n            T.Sh");
            viewString.Append("eetCost5 AS MachineClickChargeZone_SheetCost5, \r\n            T.SheetPrice5 AS Ma");
            viewString.Append("chineClickChargeZone_SheetPrice5, \r\n            T.From6 AS MachineClickChargeZon");
            viewString.Append("e_From6, \r\n            T.To6 AS MachineClickChargeZone_To6, \r\n            T.Shee");
            viewString.Append("ts6 AS MachineClickChargeZone_Sheets6, \r\n            T.SheetCost6 AS MachineClic");
            viewString.Append("kChargeZone_SheetCost6, \r\n            T.SheetPrice6 AS MachineClickChargeZone_Sh");
            viewString.Append("eetPrice6, \r\n            T.From7 AS MachineClickChargeZone_From7, \r\n            ");
            viewString.Append("T.To7 AS MachineClickChargeZone_To7, \r\n            T.Sheets7 AS MachineClickChar");
            viewString.Append("geZone_Sheets7, \r\n            T.SheetCost7 AS MachineClickChargeZone_SheetCost7,");
            viewString.Append(" \r\n            T.SheetPrice7 AS MachineClickChargeZone_SheetPrice7, \r\n          ");
            viewString.Append("  T.From8 AS MachineClickChargeZone_From8, \r\n            T.To8 AS MachineClickCh");
            viewString.Append("argeZone_To8, \r\n            T.Sheets8 AS MachineClickChargeZone_Sheets8, \r\n     ");
            viewString.Append("       T.SheetCost8 AS MachineClickChargeZone_SheetCost8, \r\n            T.SheetP");
            viewString.Append("rice8 AS MachineClickChargeZone_SheetPrice8, \r\n            T.From9 AS MachineCli");
            viewString.Append("ckChargeZone_From9, \r\n            T.To9 AS MachineClickChargeZone_To9, \r\n       ");
            viewString.Append("     T.Sheets9 AS MachineClickChargeZone_Sheets9, \r\n            T.SheetCost9 AS ");
            viewString.Append("MachineClickChargeZone_SheetCost9, \r\n            T.SheetPrice9 AS MachineClickCh");
            viewString.Append("argeZone_SheetPrice9, \r\n            T.From10 AS MachineClickChargeZone_From10, \r");
            viewString.Append("\n            T.To10 AS MachineClickChargeZone_To10, \r\n            T.Sheets10 AS ");
            viewString.Append("MachineClickChargeZone_Sheets10, \r\n            T.SheetCost10 AS MachineClickChar");
            viewString.Append("geZone_SheetCost10, \r\n            T.SheetPrice10 AS MachineClickChargeZone_Sheet");
            viewString.Append("Price10, \r\n            T.From11 AS MachineClickChargeZone_From11, \r\n            ");
            viewString.Append("T.To11 AS MachineClickChargeZone_To11, \r\n            T.Sheets11 AS MachineClickC");
            viewString.Append("hargeZone_Sheets11, \r\n            T.SheetCost11 AS MachineClickChargeZone_SheetC");
            viewString.Append("ost11, \r\n            T.SheetPrice11 AS MachineClickChargeZone_SheetPrice11, \r\n  ");
            viewString.Append("          T.From12 AS MachineClickChargeZone_From12, \r\n            T.To12 AS Mac");
            viewString.Append("hineClickChargeZone_To12, \r\n            T.Sheets12 AS MachineClickChargeZone_She");
            viewString.Append("ets12, \r\n            T.SheetCost12 AS MachineClickChargeZone_SheetCost12, \r\n    ");
            viewString.Append("        T.SheetPrice12 AS MachineClickChargeZone_SheetPrice12, \r\n            T.F");
            viewString.Append("rom13 AS MachineClickChargeZone_From13, \r\n            T.To13 AS MachineClickChar");
            viewString.Append("geZone_To13, \r\n            T.Sheets13 AS MachineClickChargeZone_Sheets13, \r\n    ");
            viewString.Append("        T.SheetCost13 AS MachineClickChargeZone_SheetCost13, \r\n            T.She");
            viewString.Append("etPrice13 AS MachineClickChargeZone_SheetPrice13, \r\n            T.From14 AS Mach");
            viewString.Append("ineClickChargeZone_From14, \r\n            T.To14 AS MachineClickChargeZone_To14, ");
            viewString.Append("\r\n            T.Sheets14 AS MachineClickChargeZone_Sheets14, \r\n            T.She");
            viewString.Append("etCost14 AS MachineClickChargeZone_SheetCost14, \r\n            T.SheetPrice14 AS ");
            viewString.Append("MachineClickChargeZone_SheetPrice14, \r\n            T.From15 AS MachineClickCharg");
            viewString.Append("eZone_From15, \r\n            T.To15 AS MachineClickChargeZone_To15, \r\n           ");
            viewString.Append(" T.Sheets15 AS MachineClickChargeZone_Sheets15, \r\n            T.SheetCost15 AS M");
            viewString.Append("achineClickChargeZone_SheetCost15, \r\n            T.SheetPrice15 AS MachineClickC");
            viewString.Append("hargeZone_SheetPrice15, \r\n            T.isaccumulativecharge AS MachineClickChar");
            viewString.Append("geZone_isaccumulativecharge, \r\n            T.IsRoundUp AS MachineClickChargeZone");
            viewString.Append("_IsRoundUp, \r\n            T.TimePerHour AS MachineClickChargeZone_TimePerHour, \r");
            viewString.Append("\n            True AS _from0\r\n        FROM BaseDbContext.MachineClickChargeZones ");
            viewString.Append("AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineClickChargeZone", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineGuillotineCalc
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView104()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineGuillotineCalc", "\r\n    SELECT VALUE -- Constructing MachineGuillotineCalc\r\n        [DomainModels.S" +
                    "tore.MachineGuillotineCalc](T1.MachineGuillotineCalc_Id, T1.MachineGuillotineCal" +
                    "c_MethodId, T1.MachineGuillotineCalc_PaperWeight1, T1.MachineGuillotineCalc_Pape" +
                    "rThroatQty1, T1.MachineGuillotineCalc_PaperWeight2, T1.MachineGuillotineCalc_Pap" +
                    "erThroatQty2, T1.MachineGuillotineCalc_PaperWeight3, T1.MachineGuillotineCalc_Pa" +
                    "perThroatQty3, T1.MachineGuillotineCalc_PaperWeight4, T1.MachineGuillotineCalc_P" +
                    "aperThroatQty4, T1.MachineGuillotineCalc_PaperWeight5, T1.MachineGuillotineCalc_" +
                    "PaperThroatQty5)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineGuillo" +
                    "tineCalc_Id, \r\n            T.MethodId AS MachineGuillotineCalc_MethodId, \r\n     " +
                    "       T.PaperWeight1 AS MachineGuillotineCalc_PaperWeight1, \r\n            T.Pap" +
                    "erThroatQty1 AS MachineGuillotineCalc_PaperThroatQty1, \r\n            T.PaperWeig" +
                    "ht2 AS MachineGuillotineCalc_PaperWeight2, \r\n            T.PaperThroatQty2 AS Ma" +
                    "chineGuillotineCalc_PaperThroatQty2, \r\n            T.PaperWeight3 AS MachineGuil" +
                    "lotineCalc_PaperWeight3, \r\n            T.PaperThroatQty3 AS MachineGuillotineCal" +
                    "c_PaperThroatQty3, \r\n            T.PaperWeight4 AS MachineGuillotineCalc_PaperWe" +
                    "ight4, \r\n            T.PaperThroatQty4 AS MachineGuillotineCalc_PaperThroatQty4," +
                    " \r\n            T.PaperWeight5 AS MachineGuillotineCalc_PaperWeight5, \r\n         " +
                    "   T.PaperThroatQty5 AS MachineGuillotineCalc_PaperThroatQty5, \r\n            Tru" +
                    "e AS _from0\r\n        FROM BaseDbContext.MachineGuillotineCalcs AS T\r\n    ) AS T1" +
                    "");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineMeterPerHourLookup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView105()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3180);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineMeterPerHourLookup\r\n        [DomainMod");
            viewString.Append("els.Store.MachineMeterPerHourLookup](T1.MachineMeterPerHourLookup_Id, T1.Machine");
            viewString.Append("MeterPerHourLookup_MethodId, T1.MachineMeterPerHourLookup_SheetsQty1, T1.Machine");
            viewString.Append("MeterPerHourLookup_SheetsQty2, T1.MachineMeterPerHourLookup_SheetsQty3, T1.Machi");
            viewString.Append("neMeterPerHourLookup_SheetsQty4, T1.MachineMeterPerHourLookup_SheetsQty5, T1.Mac");
            viewString.Append("hineMeterPerHourLookup_SheetWeight1, T1.MachineMeterPerHourLookup_speedqty11, T1");
            viewString.Append(".MachineMeterPerHourLookup_speedqty12, T1.MachineMeterPerHourLookup_speedqty13, ");
            viewString.Append("T1.MachineMeterPerHourLookup_speedqty14, T1.MachineMeterPerHourLookup_speedqty15");
            viewString.Append(", T1.MachineMeterPerHourLookup_SheetWeight2, T1.MachineMeterPerHourLookup_speedq");
            viewString.Append("ty21, T1.MachineMeterPerHourLookup_speedqty22, T1.MachineMeterPerHourLookup_spee");
            viewString.Append("dqty23, T1.MachineMeterPerHourLookup_speedqty24, T1.MachineMeterPerHourLookup_sp");
            viewString.Append("eedqty25, T1.MachineMeterPerHourLookup_SheetWeight3, T1.MachineMeterPerHourLooku");
            viewString.Append("p_speedqty31, T1.MachineMeterPerHourLookup_speedqty32, T1.MachineMeterPerHourLoo");
            viewString.Append("kup_speedqty33, T1.MachineMeterPerHourLookup_speedqty34, T1.MachineMeterPerHourL");
            viewString.Append("ookup_speedqty35, T1.MachineMeterPerHourLookup_hourlyCost, T1.MachineMeterPerHou");
            viewString.Append("rLookup_hourlyPrice)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineMe");
            viewString.Append("terPerHourLookup_Id, \r\n            T.MethodId AS MachineMeterPerHourLookup_Metho");
            viewString.Append("dId, \r\n            T.SheetsQty1 AS MachineMeterPerHourLookup_SheetsQty1, \r\n     ");
            viewString.Append("       T.SheetsQty2 AS MachineMeterPerHourLookup_SheetsQty2, \r\n            T.She");
            viewString.Append("etsQty3 AS MachineMeterPerHourLookup_SheetsQty3, \r\n            T.SheetsQty4 AS M");
            viewString.Append("achineMeterPerHourLookup_SheetsQty4, \r\n            T.SheetsQty5 AS MachineMeterP");
            viewString.Append("erHourLookup_SheetsQty5, \r\n            T.SheetWeight1 AS MachineMeterPerHourLook");
            viewString.Append("up_SheetWeight1, \r\n            T.speedqty11 AS MachineMeterPerHourLookup_speedqt");
            viewString.Append("y11, \r\n            T.speedqty12 AS MachineMeterPerHourLookup_speedqty12, \r\n     ");
            viewString.Append("       T.speedqty13 AS MachineMeterPerHourLookup_speedqty13, \r\n            T.spe");
            viewString.Append("edqty14 AS MachineMeterPerHourLookup_speedqty14, \r\n            T.speedqty15 AS M");
            viewString.Append("achineMeterPerHourLookup_speedqty15, \r\n            T.SheetWeight2 AS MachineMete");
            viewString.Append("rPerHourLookup_SheetWeight2, \r\n            T.speedqty21 AS MachineMeterPerHourLo");
            viewString.Append("okup_speedqty21, \r\n            T.speedqty22 AS MachineMeterPerHourLookup_speedqt");
            viewString.Append("y22, \r\n            T.speedqty23 AS MachineMeterPerHourLookup_speedqty23, \r\n     ");
            viewString.Append("       T.speedqty24 AS MachineMeterPerHourLookup_speedqty24, \r\n            T.spe");
            viewString.Append("edqty25 AS MachineMeterPerHourLookup_speedqty25, \r\n            T.SheetWeight3 AS");
            viewString.Append(" MachineMeterPerHourLookup_SheetWeight3, \r\n            T.speedqty31 AS MachineMe");
            viewString.Append("terPerHourLookup_speedqty31, \r\n            T.speedqty32 AS MachineMeterPerHourLo");
            viewString.Append("okup_speedqty32, \r\n            T.speedqty33 AS MachineMeterPerHourLookup_speedqt");
            viewString.Append("y33, \r\n            T.speedqty34 AS MachineMeterPerHourLookup_speedqty34, \r\n     ");
            viewString.Append("       T.speedqty35 AS MachineMeterPerHourLookup_speedqty35, \r\n            T.hou");
            viewString.Append("rlyCost AS MachineMeterPerHourLookup_hourlyCost, \r\n            T.hourlyPrice AS ");
            viewString.Append("MachineMeterPerHourLookup_hourlyPrice, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M BaseDbContext.MachineMeterPerHourLookups AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineMeterPerHourLookup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachinePerHourLookup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView106()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachinePerHourLookup", @"
    SELECT VALUE -- Constructing MachinePerHourLookup
        [DomainModels.Store.MachinePerHourLookup](T1.MachinePerHourLookup_Id, T1.MachinePerHourLookup_MethodId, T1.MachinePerHourLookup_SpeedCost, T1.MachinePerHourLookup_Speed, T1.MachinePerHourLookup_SpeedPrice)
    FROM (
        SELECT 
            T.Id AS MachinePerHourLookup_Id, 
            T.MethodId AS MachinePerHourLookup_MethodId, 
            T.SpeedCost AS MachinePerHourLookup_SpeedCost, 
            T.Speed AS MachinePerHourLookup_Speed, 
            T.SpeedPrice AS MachinePerHourLookup_SpeedPrice, 
            True AS _from0
        FROM BaseDbContext.MachinePerHourLookups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineSpeedWeightLookup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView107()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3123);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineSpeedWeightLookup\r\n        [DomainMode");
            viewString.Append("ls.Store.MachineSpeedWeightLookup](T1.MachineSpeedWeightLookup_Id, T1.MachineSpe");
            viewString.Append("edWeightLookup_MethodId, T1.MachineSpeedWeightLookup_SheetsQty1, T1.MachineSpeed");
            viewString.Append("WeightLookup_SheetsQty2, T1.MachineSpeedWeightLookup_SheetsQty3, T1.MachineSpeed");
            viewString.Append("WeightLookup_SheetsQty4, T1.MachineSpeedWeightLookup_SheetsQty5, T1.MachineSpeed");
            viewString.Append("WeightLookup_SheetWeight1, T1.MachineSpeedWeightLookup_speedqty11, T1.MachineSpe");
            viewString.Append("edWeightLookup_speedqty12, T1.MachineSpeedWeightLookup_speedqty13, T1.MachineSpe");
            viewString.Append("edWeightLookup_speedqty14, T1.MachineSpeedWeightLookup_speedqty15, T1.MachineSpe");
            viewString.Append("edWeightLookup_SheetWeight2, T1.MachineSpeedWeightLookup_speedqty21, T1.MachineS");
            viewString.Append("peedWeightLookup_speedqty22, T1.MachineSpeedWeightLookup_speedqty23, T1.MachineS");
            viewString.Append("peedWeightLookup_speedqty24, T1.MachineSpeedWeightLookup_speedqty25, T1.MachineS");
            viewString.Append("peedWeightLookup_SheetWeight3, T1.MachineSpeedWeightLookup_speedqty31, T1.Machin");
            viewString.Append("eSpeedWeightLookup_speedqty32, T1.MachineSpeedWeightLookup_speedqty33, T1.Machin");
            viewString.Append("eSpeedWeightLookup_speedqty34, T1.MachineSpeedWeightLookup_speedqty35, T1.Machin");
            viewString.Append("eSpeedWeightLookup_hourlyCost, T1.MachineSpeedWeightLookup_hourlyPrice)\r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.Id AS MachineSpeedWeightLookup_Id, \r\n       ");
            viewString.Append("     T.MethodId AS MachineSpeedWeightLookup_MethodId, \r\n            T.SheetsQty1");
            viewString.Append(" AS MachineSpeedWeightLookup_SheetsQty1, \r\n            T.SheetsQty2 AS MachineSp");
            viewString.Append("eedWeightLookup_SheetsQty2, \r\n            T.SheetsQty3 AS MachineSpeedWeightLook");
            viewString.Append("up_SheetsQty3, \r\n            T.SheetsQty4 AS MachineSpeedWeightLookup_SheetsQty4");
            viewString.Append(", \r\n            T.SheetsQty5 AS MachineSpeedWeightLookup_SheetsQty5, \r\n         ");
            viewString.Append("   T.SheetWeight1 AS MachineSpeedWeightLookup_SheetWeight1, \r\n            T.spee");
            viewString.Append("dqty11 AS MachineSpeedWeightLookup_speedqty11, \r\n            T.speedqty12 AS Mac");
            viewString.Append("hineSpeedWeightLookup_speedqty12, \r\n            T.speedqty13 AS MachineSpeedWeig");
            viewString.Append("htLookup_speedqty13, \r\n            T.speedqty14 AS MachineSpeedWeightLookup_spee");
            viewString.Append("dqty14, \r\n            T.speedqty15 AS MachineSpeedWeightLookup_speedqty15, \r\n   ");
            viewString.Append("         T.SheetWeight2 AS MachineSpeedWeightLookup_SheetWeight2, \r\n            ");
            viewString.Append("T.speedqty21 AS MachineSpeedWeightLookup_speedqty21, \r\n            T.speedqty22 ");
            viewString.Append("AS MachineSpeedWeightLookup_speedqty22, \r\n            T.speedqty23 AS MachineSpe");
            viewString.Append("edWeightLookup_speedqty23, \r\n            T.speedqty24 AS MachineSpeedWeightLooku");
            viewString.Append("p_speedqty24, \r\n            T.speedqty25 AS MachineSpeedWeightLookup_speedqty25,");
            viewString.Append(" \r\n            T.SheetWeight3 AS MachineSpeedWeightLookup_SheetWeight3, \r\n      ");
            viewString.Append("      T.speedqty31 AS MachineSpeedWeightLookup_speedqty31, \r\n            T.speed");
            viewString.Append("qty32 AS MachineSpeedWeightLookup_speedqty32, \r\n            T.speedqty33 AS Mach");
            viewString.Append("ineSpeedWeightLookup_speedqty33, \r\n            T.speedqty34 AS MachineSpeedWeigh");
            viewString.Append("tLookup_speedqty34, \r\n            T.speedqty35 AS MachineSpeedWeightLookup_speed");
            viewString.Append("qty35, \r\n            T.hourlyCost AS MachineSpeedWeightLookup_hourlyCost, \r\n    ");
            viewString.Append("        T.hourlyPrice AS MachineSpeedWeightLookup_hourlyPrice, \r\n            Tru");
            viewString.Append("e AS _from0\r\n        FROM BaseDbContext.MachineSpeedWeightLookups AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineSpeedWeightLookup", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SystemUser
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView108()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SystemUser", "\r\n    SELECT VALUE -- Constructing SystemUser\r\n        [DomainModels.Store.System" +
                    "User](T1.SystemUser_SystemUserId, T1.SystemUser_UserName, T1.SystemUser_Descript" +
                    "ion, T1.SystemUser_OrganizationId, T1.SystemUser_DepartmentId, T1.SystemUser_Ful" +
                    "lName, T1.SystemUser_UserType, T1.SystemUser_RoleId, T1.SystemUser_IsAccountDisa" +
                    "bled, T1.SystemUser_CostPerHour, T1.SystemUser_IsScheduleable, T1.SystemUser_IsS" +
                    "ystemUser, T1.SystemUser_UserAuthToken, T1.SystemUser_Email, T1.SystemUser_Email" +
                    "Signature, T1.SystemUser_EstimateHeadNotes, T1.SystemUser_EstimateFootNotes)\r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.SystemUserId AS SystemUser_SystemUserId" +
                    ", \r\n            T.UserName AS SystemUser_UserName, \r\n            T.Description A" +
                    "S SystemUser_Description, \r\n            T.OrganizationId AS SystemUser_Organizat" +
                    "ionId, \r\n            T.DepartmentId AS SystemUser_DepartmentId, \r\n            T." +
                    "FullName AS SystemUser_FullName, \r\n            T.UserType AS SystemUser_UserType" +
                    ", \r\n            T.RoleId AS SystemUser_RoleId, \r\n            T.IsAccountDisabled" +
                    " AS SystemUser_IsAccountDisabled, \r\n            T.CostPerHour AS SystemUser_Cost" +
                    "PerHour, \r\n            T.IsScheduleable AS SystemUser_IsScheduleable, \r\n        " +
                    "    T.IsSystemUser AS SystemUser_IsSystemUser, \r\n            T.UserAuthToken AS " +
                    "SystemUser_UserAuthToken, \r\n            T.Email AS SystemUser_Email, \r\n         " +
                    "   T.EmailSignature AS SystemUser_EmailSignature, \r\n            T.EstimateHeadNo" +
                    "tes AS SystemUser_EstimateHeadNotes, \r\n            T.EstimateFootNotes AS System" +
                    "User_EstimateFootNotes, \r\n            True AS _from0\r\n        FROM BaseDbContext" +
                    ".SystemUsers AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GoodsReceivedNote
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView109()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3244);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GoodsReceivedNote\r\n        [DomainModels.Stor");
            viewString.Append("e.GoodsReceivedNote](T1.GoodsReceivedNote_GoodsReceivedId, T1.GoodsReceivedNote_");
            viewString.Append("PurchaseId, T1.[GoodsReceivedNote.date_Received], T1.GoodsReceivedNote_SupplierI");
            viewString.Append("d, T1.GoodsReceivedNote_TotalPrice, T1.GoodsReceivedNote_UserId, T1.GoodsReceive");
            viewString.Append("dNote_Address, T1.GoodsReceivedNote_City, T1.GoodsReceivedNote_State, T1.GoodsRe");
            viewString.Append("ceivedNote_PostalCode, T1.GoodsReceivedNote_Country, T1.GoodsReceivedNote_Contac");
            viewString.Append("tId, T1.GoodsReceivedNote_RefNo, T1.GoodsReceivedNote_Comments, T1.GoodsReceived");
            viewString.Append("Note_UserNotes, T1.GoodsReceivedNote_isProduct, T1.GoodsReceivedNote_Tel1, T1.Go");
            viewString.Append("odsReceivedNote_code, T1.GoodsReceivedNote_Discount, T1.GoodsReceivedNote_TotalT");
            viewString.Append("ax, T1.GoodsReceivedNote_grandTotal, T1.GoodsReceivedNote_NetTotal, T1.GoodsRece");
            viewString.Append("ivedNote_discountType, T1.GoodsReceivedNote_Status, T1.GoodsReceivedNote_Created");
            viewString.Append("By, T1.GoodsReceivedNote_LastChangedBy, T1.GoodsReceivedNote_FlagId, T1.GoodsRec");
            viewString.Append("eivedNote_LockedBy, T1.GoodsReceivedNote_SystemSiteId, T1.GoodsReceivedNote_IsRe");
            viewString.Append("ad, T1.GoodsReceivedNote_DeliveryDate, T1.GoodsReceivedNote_Reference1, T1.Goods");
            viewString.Append("ReceivedNote_Reference2, T1.GoodsReceivedNote_CarrierId)\r\n    FROM (\r\n        SE");
            viewString.Append("LECT \r\n            T.GoodsReceivedId AS GoodsReceivedNote_GoodsReceivedId, \r\n   ");
            viewString.Append("         T.PurchaseId AS GoodsReceivedNote_PurchaseId, \r\n            T.date_Rece");
            viewString.Append("ived AS [GoodsReceivedNote.date_Received], \r\n            T.SupplierId AS GoodsRe");
            viewString.Append("ceivedNote_SupplierId, \r\n            T.TotalPrice AS GoodsReceivedNote_TotalPric");
            viewString.Append("e, \r\n            T.UserId AS GoodsReceivedNote_UserId, \r\n            T.Address A");
            viewString.Append("S GoodsReceivedNote_Address, \r\n            T.City AS GoodsReceivedNote_City, \r\n ");
            viewString.Append("           T.State AS GoodsReceivedNote_State, \r\n            T.PostalCode AS Goo");
            viewString.Append("dsReceivedNote_PostalCode, \r\n            T.Country AS GoodsReceivedNote_Country,");
            viewString.Append(" \r\n            T.ContactId AS GoodsReceivedNote_ContactId, \r\n            T.RefNo");
            viewString.Append(" AS GoodsReceivedNote_RefNo, \r\n            T.Comments AS GoodsReceivedNote_Comme");
            viewString.Append("nts, \r\n            T.UserNotes AS GoodsReceivedNote_UserNotes, \r\n            T.i");
            viewString.Append("sProduct AS GoodsReceivedNote_isProduct, \r\n            T.Tel1 AS GoodsReceivedNo");
            viewString.Append("te_Tel1, \r\n            T.code AS GoodsReceivedNote_code, \r\n            T.Discoun");
            viewString.Append("t AS GoodsReceivedNote_Discount, \r\n            T.TotalTax AS GoodsReceivedNote_T");
            viewString.Append("otalTax, \r\n            T.grandTotal AS GoodsReceivedNote_grandTotal, \r\n         ");
            viewString.Append("   T.NetTotal AS GoodsReceivedNote_NetTotal, \r\n            T.discountType AS Goo");
            viewString.Append("dsReceivedNote_discountType, \r\n            T.Status AS GoodsReceivedNote_Status,");
            viewString.Append(" \r\n            T.CreatedBy AS GoodsReceivedNote_CreatedBy, \r\n            T.LastC");
            viewString.Append("hangedBy AS GoodsReceivedNote_LastChangedBy, \r\n            T.FlagId AS GoodsRece");
            viewString.Append("ivedNote_FlagId, \r\n            T.LockedBy AS GoodsReceivedNote_LockedBy, \r\n     ");
            viewString.Append("       T.SystemSiteId AS GoodsReceivedNote_SystemSiteId, \r\n            T.IsRead ");
            viewString.Append("AS GoodsReceivedNote_IsRead, \r\n            T.DeliveryDate AS GoodsReceivedNote_D");
            viewString.Append("eliveryDate, \r\n            T.Reference1 AS GoodsReceivedNote_Reference1, \r\n     ");
            viewString.Append("       T.Reference2 AS GoodsReceivedNote_Reference2, \r\n            T.CarrierId A");
            viewString.Append("S GoodsReceivedNote_CarrierId, \r\n            True AS _from0\r\n        FROM BaseDb");
            viewString.Append("Context.GoodsReceivedNotes AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GoodsReceivedNote", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GoodsReceivedNoteDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView110()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2196);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GoodsReceivedNoteDetail\r\n        [DomainModel");
            viewString.Append("s.Store.GoodsReceivedNoteDetail](T1.GoodsReceivedNoteDetail_GoodsReceivedDetailI");
            viewString.Append("d, T1.GoodsReceivedNoteDetail_ItemId, T1.GoodsReceivedNoteDetail_QtyReceived, T1");
            viewString.Append(".GoodsReceivedNoteDetail_GoodsreceivedId, T1.GoodsReceivedNoteDetail_Price, T1.G");
            viewString.Append("oodsReceivedNoteDetail_PackQty, T1.GoodsReceivedNoteDetail_TotalOrderedqty, T1.G");
            viewString.Append("oodsReceivedNoteDetail_Details, T1.GoodsReceivedNoteDetail_ItemCode, T1.GoodsRec");
            viewString.Append("eivedNoteDetail_Name, T1.GoodsReceivedNoteDetail_TotalPrice, T1.GoodsReceivedNot");
            viewString.Append("eDetail_TaxId, T1.GoodsReceivedNoteDetail_NetTax, T1.GoodsReceivedNoteDetail_Dis");
            viewString.Append("count, T1.GoodsReceivedNoteDetail_FreeItems, T1.GoodsReceivedNoteDetail_Departme");
            viewString.Append("ntId, T1.GoodsReceivedNoteDetail_TaxValue, T1.GoodsReceivedNoteDetail_ProductTyp");
            viewString.Append("e, T1.GoodsReceivedNoteDetail_RefItemId)\r\n    FROM (\r\n        SELECT \r\n         ");
            viewString.Append("   T.GoodsReceivedDetailId AS GoodsReceivedNoteDetail_GoodsReceivedDetailId, \r\n ");
            viewString.Append("           T.ItemId AS GoodsReceivedNoteDetail_ItemId, \r\n            T.QtyReceiv");
            viewString.Append("ed AS GoodsReceivedNoteDetail_QtyReceived, \r\n            T.GoodsreceivedId AS Go");
            viewString.Append("odsReceivedNoteDetail_GoodsreceivedId, \r\n            T.Price AS GoodsReceivedNot");
            viewString.Append("eDetail_Price, \r\n            T.PackQty AS GoodsReceivedNoteDetail_PackQty, \r\n   ");
            viewString.Append("         T.TotalOrderedqty AS GoodsReceivedNoteDetail_TotalOrderedqty, \r\n       ");
            viewString.Append("     T.Details AS GoodsReceivedNoteDetail_Details, \r\n            T.ItemCode AS G");
            viewString.Append("oodsReceivedNoteDetail_ItemCode, \r\n            T.Name AS GoodsReceivedNoteDetail");
            viewString.Append("_Name, \r\n            T.TotalPrice AS GoodsReceivedNoteDetail_TotalPrice, \r\n     ");
            viewString.Append("       T.TaxId AS GoodsReceivedNoteDetail_TaxId, \r\n            T.NetTax AS Goods");
            viewString.Append("ReceivedNoteDetail_NetTax, \r\n            T.Discount AS GoodsReceivedNoteDetail_D");
            viewString.Append("iscount, \r\n            T.FreeItems AS GoodsReceivedNoteDetail_FreeItems, \r\n     ");
            viewString.Append("       T.DepartmentId AS GoodsReceivedNoteDetail_DepartmentId, \r\n            T.T");
            viewString.Append("axValue AS GoodsReceivedNoteDetail_TaxValue, \r\n            T.ProductType AS Good");
            viewString.Append("sReceivedNoteDetail_ProductType, \r\n            T.RefItemId AS GoodsReceivedNoteD");
            viewString.Append("etail_RefItemId, \r\n            True AS _from0\r\n        FROM BaseDbContext.GoodsR");
            viewString.Append("eceivedNoteDetails AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GoodsReceivedNoteDetail", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Purchase
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView111()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2554);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Purchase\r\n        [DomainModels.Store.Purchas");
            viewString.Append("e](T1.Purchase_PurchaseId, T1.Purchase_Code, T1.[Purchase.date_Purchase], T1.Pur");
            viewString.Append("chase_SupplierId, T1.Purchase_ContactId, T1.Purchase_SupplierContactCompany, T1.");
            viewString.Append("Purchase_SupplierContactAddressID, T1.Purchase_TotalPrice, T1.Purchase_UserID, T");
            viewString.Append("1.Purchase_JobID, T1.Purchase_RefNo, T1.Purchase_Comments, T1.Purchase_FootNote,");
            viewString.Append(" T1.Purchase_UserNotes, T1.Purchase_NotesUpdateDateTime, T1.Purchase_NotesUpdate");
            viewString.Append("dByUserId, T1.Purchase_isproduct, T1.Purchase_Status, T1.Purchase_LockedBy, T1.P");
            viewString.Append("urchase_TotalTax, T1.Purchase_Discount, T1.Purchase_discountType, T1.Purchase_Gr");
            viewString.Append("andTotal, T1.Purchase_NetTotal, T1.Purchase_CreatedBy, T1.Purchase_LastChangedBy");
            viewString.Append(", T1.Purchase_FlagID, T1.Purchase_SystemSiteId, T1.Purchase_IsRead, T1.Purchase_");
            viewString.Append("IsPrinted, T1.Purchase_XeroAccessCode)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.PurchaseId AS Purchase_PurchaseId, \r\n            T.Code AS Purchase_Code, \r\n ");
            viewString.Append("           T.date_Purchase AS [Purchase.date_Purchase], \r\n            T.Supplier");
            viewString.Append("Id AS Purchase_SupplierId, \r\n            T.ContactId AS Purchase_ContactId, \r\n  ");
            viewString.Append("          T.SupplierContactCompany AS Purchase_SupplierContactCompany, \r\n       ");
            viewString.Append("     T.SupplierContactAddressID AS Purchase_SupplierContactAddressID, \r\n        ");
            viewString.Append("    T.TotalPrice AS Purchase_TotalPrice, \r\n            T.UserID AS Purchase_User");
            viewString.Append("ID, \r\n            T.JobID AS Purchase_JobID, \r\n            T.RefNo AS Purchase_R");
            viewString.Append("efNo, \r\n            T.Comments AS Purchase_Comments, \r\n            T.FootNote AS");
            viewString.Append(" Purchase_FootNote, \r\n            T.UserNotes AS Purchase_UserNotes, \r\n         ");
            viewString.Append("   T.NotesUpdateDateTime AS Purchase_NotesUpdateDateTime, \r\n            T.NotesU");
            viewString.Append("pdatedByUserId AS Purchase_NotesUpdatedByUserId, \r\n            T.isproduct AS Pu");
            viewString.Append("rchase_isproduct, \r\n            T.Status AS Purchase_Status, \r\n            T.Loc");
            viewString.Append("kedBy AS Purchase_LockedBy, \r\n            T.TotalTax AS Purchase_TotalTax, \r\n   ");
            viewString.Append("         T.Discount AS Purchase_Discount, \r\n            T.discountType AS Purcha");
            viewString.Append("se_discountType, \r\n            T.GrandTotal AS Purchase_GrandTotal, \r\n          ");
            viewString.Append("  T.NetTotal AS Purchase_NetTotal, \r\n            T.CreatedBy AS Purchase_Created");
            viewString.Append("By, \r\n            T.LastChangedBy AS Purchase_LastChangedBy, \r\n            T.Fla");
            viewString.Append("gID AS Purchase_FlagID, \r\n            T.SystemSiteId AS Purchase_SystemSiteId, \r");
            viewString.Append("\n            T.IsRead AS Purchase_IsRead, \r\n            T.IsPrinted AS Purchase_");
            viewString.Append("IsPrinted, \r\n            T.XeroAccessCode AS Purchase_XeroAccessCode, \r\n        ");
            viewString.Append("    True AS _from0\r\n        FROM BaseDbContext.Purchases AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Purchase", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PurchaseDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView112()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PurchaseDetail", "\r\n    SELECT VALUE -- Constructing PurchaseDetail\r\n        [DomainModels.Store.Pu" +
                    "rchaseDetail](T1.PurchaseDetail_PurchaseDetailId, T1.PurchaseDetail_ItemId, T1.P" +
                    "urchaseDetail_quantity, T1.PurchaseDetail_PurchaseId, T1.PurchaseDetail_price, T" +
                    "1.PurchaseDetail_packqty, T1.PurchaseDetail_ItemCode, T1.PurchaseDetail_ServiceD" +
                    "etail, T1.PurchaseDetail_ItemName, T1.PurchaseDetail_TaxId, T1.PurchaseDetail_To" +
                    "talPrice, T1.PurchaseDetail_Discount, T1.PurchaseDetail_NetTax, T1.PurchaseDetai" +
                    "l_freeitems, T1.PurchaseDetail_ItemBalance, T1.PurchaseDetail_DepartmentId, T1.P" +
                    "urchaseDetail_ProductType, T1.PurchaseDetail_RefItemId, T1.PurchaseDetail_TaxVal" +
                    "ue)\r\n    FROM (\r\n        SELECT \r\n            T.PurchaseDetailId AS PurchaseDeta" +
                    "il_PurchaseDetailId, \r\n            T.ItemId AS PurchaseDetail_ItemId, \r\n        " +
                    "    T.quantity AS PurchaseDetail_quantity, \r\n            T.PurchaseId AS Purchas" +
                    "eDetail_PurchaseId, \r\n            T.price AS PurchaseDetail_price, \r\n           " +
                    " T.packqty AS PurchaseDetail_packqty, \r\n            T.ItemCode AS PurchaseDetail" +
                    "_ItemCode, \r\n            T.ServiceDetail AS PurchaseDetail_ServiceDetail, \r\n    " +
                    "        T.ItemName AS PurchaseDetail_ItemName, \r\n            T.TaxId AS Purchase" +
                    "Detail_TaxId, \r\n            T.TotalPrice AS PurchaseDetail_TotalPrice, \r\n       " +
                    "     T.Discount AS PurchaseDetail_Discount, \r\n            T.NetTax AS PurchaseDe" +
                    "tail_NetTax, \r\n            T.freeitems AS PurchaseDetail_freeitems, \r\n          " +
                    "  T.ItemBalance AS PurchaseDetail_ItemBalance, \r\n            T.DepartmentId AS P" +
                    "urchaseDetail_DepartmentId, \r\n            T.ProductType AS PurchaseDetail_Produc" +
                    "tType, \r\n            T.RefItemId AS PurchaseDetail_RefItemId, \r\n            T.Ta" +
                    "xValue AS PurchaseDetail_TaxValue, \r\n            True AS _from0\r\n        FROM Ba" +
                    "seDbContext.PurchaseDetails AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SectionInkCoverage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView113()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SectionInkCoverage", @"
    SELECT VALUE -- Constructing SectionInkCoverage
        [DomainModels.Store.SectionInkCoverage](T1.SectionInkCoverage_Id, T1.SectionInkCoverage_SectionId, T1.SectionInkCoverage_InkOrder, T1.SectionInkCoverage_InkId, T1.SectionInkCoverage_CoverageGroupId, T1.SectionInkCoverage_Side)
    FROM (
        SELECT 
            T.Id AS SectionInkCoverage_Id, 
            T.SectionId AS SectionInkCoverage_SectionId, 
            T.InkOrder AS SectionInkCoverage_InkOrder, 
            T.InkId AS SectionInkCoverage_InkId, 
            T.CoverageGroupId AS SectionInkCoverage_CoverageGroupId, 
            T.Side AS SectionInkCoverage_Side, 
            True AS _from0
        FROM BaseDbContext.SectionInkCoverages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ShippingInformation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView114()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ShippingInformation", @"
    SELECT VALUE -- Constructing ShippingInformation
        [DomainModels.Store.ShippingInformation](T1.ShippingInformation_ShippingId, T1.ShippingInformation_ItemId, T1.ShippingInformation_AddressId, T1.ShippingInformation_Quantity, T1.ShippingInformation_Price, T1.ShippingInformation_DeliveryNoteRaised, T1.ShippingInformation_DeliveryDate, T1.ShippingInformation_EstimateId)
    FROM (
        SELECT 
            T.ShippingId AS ShippingInformation_ShippingId, 
            T.ItemId AS ShippingInformation_ItemId, 
            T.AddressId AS ShippingInformation_AddressId, 
            T.Quantity AS ShippingInformation_Quantity, 
            T.Price AS ShippingInformation_Price, 
            T.DeliveryNoteRaised AS ShippingInformation_DeliveryNoteRaised, 
            T.DeliveryDate AS ShippingInformation_DeliveryDate, 
            T.EstimateId AS ShippingInformation_EstimateId, 
            True AS _from0
        FROM BaseDbContext.ShippingInformations AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineLookupMethod
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView115()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineLookupMethod", @"
    SELECT VALUE -- Constructing MachineLookupMethod
        [DomainModels.Store.MachineLookupMethod](T1.MachineLookupMethod_Id, T1.MachineLookupMethod_MachineId, T1.MachineLookupMethod_MethodId, T1.MachineLookupMethod_DefaultMethod)
    FROM (
        SELECT 
            T.Id AS MachineLookupMethod_Id, 
            T.MachineId AS MachineLookupMethod_MachineId, 
            T.MethodId AS MachineLookupMethod_MethodId, 
            T.DefaultMethod AS MachineLookupMethod_DefaultMethod, 
            True AS _from0
        FROM BaseDbContext.MachineLookupMethods AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.VariableExtension
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView116()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.VariableExtension", @"
    SELECT VALUE -- Constructing VariableExtension
        [DomainModels.Store.VariableExtension](T1.VariableExtension_Id, T1.VariableExtension_FieldVariableId, T1.VariableExtension_CompanyId, T1.VariableExtension_OrganisationId, T1.VariableExtension_VariablePrefix, T1.VariableExtension_VariablePostfix, T1.VariableExtension_CollapsePrefix, T1.VariableExtension_CollapsePostfix)
    FROM (
        SELECT 
            T.Id AS VariableExtension_Id, 
            T.FieldVariableId AS VariableExtension_FieldVariableId, 
            T.CompanyId AS VariableExtension_CompanyId, 
            T.OrganisationId AS VariableExtension_OrganisationId, 
            T.VariablePrefix AS VariableExtension_VariablePrefix, 
            T.VariablePostfix AS VariableExtension_VariablePostfix, 
            T.CollapsePrefix AS VariableExtension_CollapsePrefix, 
            T.CollapsePostfix AS VariableExtension_CollapsePostfix, 
            True AS _from0
        FROM BaseDbContext.VariableExtensions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView117()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(10342);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Companies\r\n        [DomainModels.Company](T1.");
            viewString.Append("Company_CompanyId, T1.Company_AccountNumber, T1.Company_Name, T1.Company_URL, T1");
            viewString.Append(".Company_CreditReference, T1.Company_CreditLimit, T1.Company_Terms, T1.Company_T");
            viewString.Append("ypeId, T1.Company_DefaultNominalCode, T1.Company_DefaultMarkUpId, T1.Company_Acc");
            viewString.Append("ountOpenDate, T1.Company_AccountManagerId, T1.Company_Status, T1.Company_IsCusto");
            viewString.Append("mer, T1.Company_Notes, T1.Company_NotesLastUpdatedDate, T1.Company_NotesLastUpda");
            viewString.Append("tedBy, T1.Company_AccountStatusId, T1.Company_IsDisabled, T1.Company_LockedBy, T");
            viewString.Append("1.Company_AccountBalance, T1.Company_CreationDate, T1.Company_VATRegNumber, T1.C");
            viewString.Append("ompany_VATRegReference, T1.Company_FlagId, T1.Company_PhoneNo, T1.Company_IsGene");
            viewString.Append("ral, T1.Company_SalesPerson, T1.Company_Image, T1.Company_WebAccessCode, T1.Comp");
            viewString.Append("any_isArchived, T1.Company_PayByPersonalCredeitCard, T1.Company_PONumberRequired");
            viewString.Append(", T1.Company_ShowPrices, T1.Company_CarrierWebPath, T1.Company_CarrierTrackingPa");
            viewString.Append("th, T1.Company_CorporateOrderingPolicy, T1.Company_isDisplaySiteHeader, T1.Compa");
            viewString.Append("ny_isDisplayMenuBar, T1.Company_isDisplayBanners, T1.Company_isDisplayFeaturedPr");
            viewString.Append("oducts, T1.Company_isDisplayPromotionalProducts, T1.Company_isDisplayChooseUsIco");
            viewString.Append("ns, T1.Company_isDisplaySecondaryPages, T1.Company_isDisplaySiteFooter, T1.Compa");
            viewString.Append("ny_RedirectWebstoreURL, T1.Company_defaultPalleteId, T1.Company_isBrokerCanDeliv");
            viewString.Append("erSameDay, T1.Company_isWhiteLabel, T1.Company_TwitterURL, T1.Company_FacebookUR");
            viewString.Append("L, T1.Company_LinkedinURL, T1.Company_WebMasterTag, T1.Company_WebAnalyticCode, ");
            viewString.Append("T1.Company_isShowGoogleMap, T1.Company_isTextWatermark, T1.Company_WatermarkText");
            viewString.Append(", T1.Company_CoreCustomerId, T1.Company_StoreBackgroundImage, T1.Company_PriceFl");
            viewString.Append("agId, T1.Company_isIncludeVAT, T1.Company_isAllowRegistrationFromWeb, T1.Company");
            viewString.Append("_MarketingBriefRecipient, T1.Company_isLoginFirstTime, T1.Company_facebookAppId,");
            viewString.Append(" T1.Company_facebookAppKey, T1.Company_twitterAppId, T1.Company_twitterAppKey, T");
            viewString.Append("1.Company_isStoreModePrivate, T1.Company_CustomCSS, T1.Company_TaxPercentageId, ");
            viewString.Append("T1.Company_XeroAccessCode, T1.Company_canUserPlaceOrderWithoutApproval, T1.Compa");
            viewString.Append("ny_CanUserEditProfile, T1.Company_OrganisationId, T1.Company_SalesAndOrderManage");
            viewString.Append("rId1, T1.Company_SalesAndOrderManagerId2, T1.Company_ProductionManagerId1, T1.Co");
            viewString.Append("mpany_ProductionManagerId2, T1.Company_StockNotificationManagerId1, T1.Company_S");
            viewString.Append("tockNotificationManagerId2, T1.Company_IsDeliveryTaxAble, T1.Company_IsDisplayDe");
            viewString.Append("liveryOnCheckout, T1.Company_TaxRate, T1.Company_IsDisplayDiscountVoucherCode, T");
            viewString.Append("1.Company_IsDisplayCorporateBinding, T1.Company_MapImageUrl, T1.Company_PickupAd");
            viewString.Append("dressId, T1.Company_TaxLabel, T1.Company_StoreId, T1.Company_isAddCropMarks, T1.");
            viewString.Append("Company_isCalculateTaxByService, T1.Company_isLaminate, T1.Company_isRoundCorner");
            viewString.Append(", T1.Company_isAcceptPaymentOnline, T1.Company_isOrderApprovalRequired, T1.Compa");
            viewString.Append("ny_isPaymentRequired, T1.Company_includeEmailArtworkOrderReport, T1.Company_incl");
            viewString.Append("udeEmailArtworkOrderXML, T1.Company_includeEmailArtworkOrderJobCard, T1.Company_");
            viewString.Append("makeEmailArtworkOrderProductionReady, T1.Company_ActiveBannerSetId, T1.Company_C");
            viewString.Append("urrentThemeId, T1.Company_isStoreLive, T1.Company_CanUserUpdateAddress, T1.Compa");
            viewString.Append("ny_IsRegisterAccessWebStore, T1.Company_IsRegisterPlaceOrder, T1.Company_IsRegis");
            viewString.Append("terPayOnlyByCreditCard, T1.Company_IsRegisterPlaceDirectOrder, T1.Company_IsRegi");
            viewString.Append("sterPlaceOrderWithoutApproval)\r\n    FROM (\r\n        SELECT \r\n            T.Compa");
            viewString.Append("nyId AS Company_CompanyId, \r\n            T.AccountNumber AS Company_AccountNumbe");
            viewString.Append("r, \r\n            T.Name AS Company_Name, \r\n            T.URL AS Company_URL, \r\n ");
            viewString.Append("           T.CreditReference AS Company_CreditReference, \r\n            T.CreditL");
            viewString.Append("imit AS Company_CreditLimit, \r\n            T.Terms AS Company_Terms, \r\n         ");
            viewString.Append("   T.TypeId AS Company_TypeId, \r\n            T.DefaultNominalCode AS Company_Def");
            viewString.Append("aultNominalCode, \r\n            T.DefaultMarkUpId AS Company_DefaultMarkUpId, \r\n ");
            viewString.Append("           T.AccountOpenDate AS Company_AccountOpenDate, \r\n            T.Account");
            viewString.Append("ManagerId AS Company_AccountManagerId, \r\n            T.Status AS Company_Status,");
            viewString.Append(" \r\n            T.IsCustomer AS Company_IsCustomer, \r\n            T.Notes AS Comp");
            viewString.Append("any_Notes, \r\n            T.NotesLastUpdatedDate AS Company_NotesLastUpdatedDate,");
            viewString.Append(" \r\n            T.NotesLastUpdatedBy AS Company_NotesLastUpdatedBy, \r\n           ");
            viewString.Append(" T.AccountStatusId AS Company_AccountStatusId, \r\n            T.IsDisabled AS Com");
            viewString.Append("pany_IsDisabled, \r\n            T.LockedBy AS Company_LockedBy, \r\n            T.A");
            viewString.Append("ccountBalance AS Company_AccountBalance, \r\n            T.CreationDate AS Company");
            viewString.Append("_CreationDate, \r\n            T.VATRegNumber AS Company_VATRegNumber, \r\n         ");
            viewString.Append("   T.VATRegReference AS Company_VATRegReference, \r\n            T.FlagId AS Compa");
            viewString.Append("ny_FlagId, \r\n            T.PhoneNo AS Company_PhoneNo, \r\n            T.IsGeneral");
            viewString.Append(" AS Company_IsGeneral, \r\n            T.SalesPerson AS Company_SalesPerson, \r\n   ");
            viewString.Append("         T.Image AS Company_Image, \r\n            T.WebAccessCode AS Company_WebA");
            viewString.Append("ccessCode, \r\n            T.isArchived AS Company_isArchived, \r\n            T.Pay");
            viewString.Append("ByPersonalCredeitCard AS Company_PayByPersonalCredeitCard, \r\n            T.PONum");
            viewString.Append("berRequired AS Company_PONumberRequired, \r\n            T.ShowPrices AS Company_S");
            viewString.Append("howPrices, \r\n            T.CarrierWebPath AS Company_CarrierWebPath, \r\n         ");
            viewString.Append("   T.CarrierTrackingPath AS Company_CarrierTrackingPath, \r\n            T.Corpora");
            viewString.Append("teOrderingPolicy AS Company_CorporateOrderingPolicy, \r\n            T.isDisplaySi");
            viewString.Append("teHeader AS Company_isDisplaySiteHeader, \r\n            T.isDisplayMenuBar AS Com");
            viewString.Append("pany_isDisplayMenuBar, \r\n            T.isDisplayBanners AS Company_isDisplayBann");
            viewString.Append("ers, \r\n            T.isDisplayFeaturedProducts AS Company_isDisplayFeaturedProdu");
            viewString.Append("cts, \r\n            T.isDisplayPromotionalProducts AS Company_isDisplayPromotiona");
            viewString.Append("lProducts, \r\n            T.isDisplayChooseUsIcons AS Company_isDisplayChooseUsIc");
            viewString.Append("ons, \r\n            T.isDisplaySecondaryPages AS Company_isDisplaySecondaryPages,");
            viewString.Append(" \r\n            T.isDisplaySiteFooter AS Company_isDisplaySiteFooter, \r\n         ");
            viewString.Append("   T.RedirectWebstoreURL AS Company_RedirectWebstoreURL, \r\n            T.default");
            viewString.Append("PalleteId AS Company_defaultPalleteId, \r\n            T.isBrokerCanDeliverSameDay");
            viewString.Append(" AS Company_isBrokerCanDeliverSameDay, \r\n            T.isWhiteLabel AS Company_i");
            viewString.Append("sWhiteLabel, \r\n            T.TwitterURL AS Company_TwitterURL, \r\n            T.F");
            viewString.Append("acebookURL AS Company_FacebookURL, \r\n            T.LinkedinURL AS Company_Linked");
            viewString.Append("inURL, \r\n            T.WebMasterTag AS Company_WebMasterTag, \r\n            T.Web");
            viewString.Append("AnalyticCode AS Company_WebAnalyticCode, \r\n            T.isShowGoogleMap AS Comp");
            viewString.Append("any_isShowGoogleMap, \r\n            T.isTextWatermark AS Company_isTextWatermark,");
            viewString.Append(" \r\n            T.WatermarkText AS Company_WatermarkText, \r\n            T.CoreCus");
            viewString.Append("tomerId AS Company_CoreCustomerId, \r\n            T.StoreBackgroundImage AS Compa");
            viewString.Append("ny_StoreBackgroundImage, \r\n            T.PriceFlagId AS Company_PriceFlagId, \r\n ");
            viewString.Append("           T.isIncludeVAT AS Company_isIncludeVAT, \r\n            T.isAllowRegist");
            viewString.Append("rationFromWeb AS Company_isAllowRegistrationFromWeb, \r\n            T.MarketingBr");
            viewString.Append("iefRecipient AS Company_MarketingBriefRecipient, \r\n            T.isLoginFirstTim");
            viewString.Append("e AS Company_isLoginFirstTime, \r\n            T.facebookAppId AS Company_facebook");
            viewString.Append("AppId, \r\n            T.facebookAppKey AS Company_facebookAppKey, \r\n            T");
            viewString.Append(".twitterAppId AS Company_twitterAppId, \r\n            T.twitterAppKey AS Company_");
            viewString.Append("twitterAppKey, \r\n            T.isStoreModePrivate AS Company_isStoreModePrivate,");
            viewString.Append(" \r\n            T.CustomCSS AS Company_CustomCSS, \r\n            T.TaxPercentageId");
            viewString.Append(" AS Company_TaxPercentageId, \r\n            T.XeroAccessCode AS Company_XeroAcces");
            viewString.Append("sCode, \r\n            T.canUserPlaceOrderWithoutApproval AS Company_canUserPlaceO");
            viewString.Append("rderWithoutApproval, \r\n            T.CanUserEditProfile AS Company_CanUserEditPr");
            viewString.Append("ofile, \r\n            T.OrganisationId AS Company_OrganisationId, \r\n            T");
            viewString.Append(".SalesAndOrderManagerId1 AS Company_SalesAndOrderManagerId1, \r\n            T.Sal");
            viewString.Append("esAndOrderManagerId2 AS Company_SalesAndOrderManagerId2, \r\n            T.Product");
            viewString.Append("ionManagerId1 AS Company_ProductionManagerId1, \r\n            T.ProductionManager");
            viewString.Append("Id2 AS Company_ProductionManagerId2, \r\n            T.StockNotificationManagerId1");
            viewString.Append(" AS Company_StockNotificationManagerId1, \r\n            T.StockNotificationManage");
            viewString.Append("rId2 AS Company_StockNotificationManagerId2, \r\n            T.IsDeliveryTaxAble A");
            viewString.Append("S Company_IsDeliveryTaxAble, \r\n            T.IsDisplayDeliveryOnCheckout AS Comp");
            viewString.Append("any_IsDisplayDeliveryOnCheckout, \r\n            T.TaxRate AS Company_TaxRate, \r\n ");
            viewString.Append("           T.IsDisplayDiscountVoucherCode AS Company_IsDisplayDiscountVoucherCod");
            viewString.Append("e, \r\n            T.IsDisplayCorporateBinding AS Company_IsDisplayCorporateBindin");
            viewString.Append("g, \r\n            T.MapImageURL AS Company_MapImageUrl, \r\n            T.PickupAdd");
            viewString.Append("ressId AS Company_PickupAddressId, \r\n            T.TaxLabel AS Company_TaxLabel,");
            viewString.Append(" \r\n            T.StoreId AS Company_StoreId, \r\n            T.isAddCropMarks AS C");
            viewString.Append("ompany_isAddCropMarks, \r\n            T.isCalculateTaxByService AS Company_isCalc");
            viewString.Append("ulateTaxByService, \r\n            T.isLaminate AS Company_isLaminate, \r\n         ");
            viewString.Append("   T.isRoundCorner AS Company_isRoundCorner, \r\n            T.isAcceptPaymentOnli");
            viewString.Append("ne AS Company_isAcceptPaymentOnline, \r\n            T.isOrderApprovalRequired AS ");
            viewString.Append("Company_isOrderApprovalRequired, \r\n            T.isPaymentRequired AS Company_is");
            viewString.Append("PaymentRequired, \r\n            T.includeEmailArtworkOrderReport AS Company_inclu");
            viewString.Append("deEmailArtworkOrderReport, \r\n            T.includeEmailArtworkOrderXML AS Compan");
            viewString.Append("y_includeEmailArtworkOrderXML, \r\n            T.includeEmailArtworkOrderJobCard A");
            viewString.Append("S Company_includeEmailArtworkOrderJobCard, \r\n            T.makeEmailArtworkOrder");
            viewString.Append("ProductionReady AS Company_makeEmailArtworkOrderProductionReady, \r\n            T");
            viewString.Append(".ActiveBannerSetId AS Company_ActiveBannerSetId, \r\n            T.CurrentThemeId ");
            viewString.Append("AS Company_CurrentThemeId, \r\n            T.isStoreLive AS Company_isStoreLive, \r");
            viewString.Append("\n            T.CanUserUpdateAddress AS Company_CanUserUpdateAddress, \r\n         ");
            viewString.Append("   T.IsRegisterAccessWebStore AS Company_IsRegisterAccessWebStore, \r\n           ");
            viewString.Append(" T.IsRegisterPlaceOrder AS Company_IsRegisterPlaceOrder, \r\n            T.IsRegis");
            viewString.Append("terPayOnlyByCreditCard AS Company_IsRegisterPayOnlyByCreditCard, \r\n            T");
            viewString.Append(".IsRegisterPlaceDirectOrder AS Company_IsRegisterPlaceDirectOrder, \r\n           ");
            viewString.Append(" T.IsRegisterPlaceOrderWithoutApproval AS Company_IsRegisterPlaceOrderWithoutApp");
            viewString.Append("roval, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.Com");
            viewString.Append("pany AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Companies", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView118()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgets", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgets
        [DomainModels.CmsSkinPageWidget](T1.CmsSkinPageWidget_PageWidgetId, T1.CmsSkinPageWidget_PageId, T1.CmsSkinPageWidget_WidgetId, T1.CmsSkinPageWidget_SkinId, T1.CmsSkinPageWidget_Sequence, T1.CmsSkinPageWidget_CompanyId, T1.CmsSkinPageWidget_OrganisationId)
    FROM (
        SELECT 
            T.PageWidgetId AS CmsSkinPageWidget_PageWidgetId, 
            T.PageId AS CmsSkinPageWidget_PageId, 
            T.WidgetId AS CmsSkinPageWidget_WidgetId, 
            T.SkinId AS CmsSkinPageWidget_SkinId, 
            T.Sequence AS CmsSkinPageWidget_Sequence, 
            T.CompanyId AS CmsSkinPageWidget_CompanyId, 
            T.OrganisationId AS CmsSkinPageWidget_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidget AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsSkinPageWidgetParams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView119()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsSkinPageWidgetParams", @"
    SELECT VALUE -- Constructing CmsSkinPageWidgetParams
        [DomainModels.CmsSkinPageWidgetParam](T1.CmsSkinPageWidgetParam_PageWidgetParamId, T1.CmsSkinPageWidgetParam_PageWidgetId, T1.CmsSkinPageWidgetParam_ParamName, T1.CmsSkinPageWidgetParam_ParamValue)
    FROM (
        SELECT 
            T.PageWidgetParamId AS CmsSkinPageWidgetParam_PageWidgetParamId, 
            T.PageWidgetId AS CmsSkinPageWidgetParam_PageWidgetId, 
            T.ParamName AS CmsSkinPageWidgetParam_ParamName, 
            T.ParamValue AS CmsSkinPageWidgetParam_ParamValue, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsSkinPageWidgetParam AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBanners
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView120()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBanners", @"
    SELECT VALUE -- Constructing CompanyBanners
        [DomainModels.CompanyBanner](T1.CompanyBanner_CompanyBannerId, T1.CompanyBanner_PageId, T1.CompanyBanner_ImageURL, T1.CompanyBanner_Heading, T1.CompanyBanner_Description, T1.CompanyBanner_ItemURL, T1.CompanyBanner_ButtonURL, T1.CompanyBanner_isActive, T1.CompanyBanner_CreatedBy, T1.CompanyBanner_CreateDate, T1.CompanyBanner_ModifyId, T1.CompanyBanner_ModifyDate, T1.CompanyBanner_CompanySetId)
    FROM (
        SELECT 
            T.CompanyBannerId AS CompanyBanner_CompanyBannerId, 
            T.PageId AS CompanyBanner_PageId, 
            T.ImageURL AS CompanyBanner_ImageURL, 
            T.Heading AS CompanyBanner_Heading, 
            T.Description AS CompanyBanner_Description, 
            T.ItemURL AS CompanyBanner_ItemURL, 
            T.ButtonURL AS CompanyBanner_ButtonURL, 
            T.isActive AS CompanyBanner_isActive, 
            T.CreatedBy AS CompanyBanner_CreatedBy, 
            T.CreateDate AS CompanyBanner_CreateDate, 
            T.ModifyId AS CompanyBanner_ModifyId, 
            T.ModifyDate AS CompanyBanner_ModifyDate, 
            T.CompanySetId AS CompanyBanner_CompanySetId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBanner AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyBannerSets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView121()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyBannerSets", @"
    SELECT VALUE -- Constructing CompanyBannerSets
        [DomainModels.CompanyBannerSet](T1.CompanyBannerSet_CompanySetId, T1.CompanyBannerSet_SetName, T1.CompanyBannerSet_CompanyId, T1.CompanyBannerSet_OrganisationId)
    FROM (
        SELECT 
            T.CompanySetId AS CompanyBannerSet_CompanySetId, 
            T.SetName AS CompanyBannerSet_SetName, 
            T.CompanyId AS CompanyBannerSet_CompanyId, 
            T.OrganisationId AS CompanyBannerSet_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyBannerSet AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView122()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyDomains", @"
    SELECT VALUE -- Constructing CompanyDomains
        [DomainModels.CompanyDomain](T1.CompanyDomain_CompanyDomainId, T1.CompanyDomain_Domain, T1.CompanyDomain_CompanyId)
    FROM (
        SELECT 
            T.CompanyDomainId AS CompanyDomain_CompanyDomainId, 
            T.Domain AS CompanyDomain_Domain, 
            T.CompanyId AS CompanyDomain_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyDomain AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Organisations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView123()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4376);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisations\r\n        [DomainModels.Organisa");
            viewString.Append("tion](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.Organ");
            viewString.Append("isation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Organis");
            viewString.Append("ation_City, T1.Organisation_ZipCode, T1.Organisation_Tel, T1.Organisation_Fax, T");
            viewString.Append("1.Organisation_Mobile, T1.Organisation_Email, T1.Organisation_URL, T1.Organisati");
            viewString.Append("on_WebsiteLogo, T1.Organisation_MISLogo, T1.Organisation_TaxRegistrationNo, T1.O");
            viewString.Append("rganisation_LicenseLevel, T1.Organisation_CustomerAccountNumber, T1.Organisation");
            viewString.Append("_SmtpServer, T1.Organisation_SmtpUserName, T1.Organisation_SmtpPassword, T1.Orga");
            viewString.Append("nisation_VATRegNumber, T1.Organisation_SystemLengthUnit, T1.Organisation_SystemW");
            viewString.Append("eightUnit, T1.Organisation_CurrencyId, T1.Organisation_LanguageId, T1.Organisati");
            viewString.Append("on_StateId, T1.Organisation_CountryId, T1.Organisation_BleedAreaSize, T1.Organis");
            viewString.Append("ation_ShowBleedArea, T1.Organisation_isXeroIntegrationRequired, T1.Organisation_");
            viewString.Append("XeroApiId, T1.Organisation_XeroApiKey, T1.Organisation_TaxServiceUrl, T1.Organis");
            viewString.Append("ation_TaxServiceKey, T1.Organisation_IsImperical, T1.Organisation_AgileApiKey, T");
            viewString.Append("1.Organisation_AgileApiUrl, T1.Organisation_isAgileActive, T1.Organisation_isTri");
            viewString.Append("al, T1.Organisation_LiveStoresCount, T1.Organisation_WebStoreOrdersCount, T1.Org");
            viewString.Append("anisation_MisOrdersCount, T1.Organisation_BillingDate, T1.Organisation_OfflineSt");
            viewString.Append("oreClicks, T1.Organisation_CreateContactZapTargetUrl, T1.Organisation_CreateInvo");
            viewString.Append("iceZapTargetUrl, T1.Organisation_IsZapierEnable)\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.OrganisationId AS Organisation_OrganisationId, \r\n            T.Orga");
            viewString.Append("nisationName AS Organisation_OrganisationName, \r\n            T.Address1 AS Organ");
            viewString.Append("isation_Address1, \r\n            T.Address2 AS Organisation_Address2, \r\n         ");
            viewString.Append("   T.Address3 AS Organisation_Address3, \r\n            T.City AS Organisation_Cit");
            viewString.Append("y, \r\n            T.ZipCode AS Organisation_ZipCode, \r\n            T.Tel AS Organ");
            viewString.Append("isation_Tel, \r\n            T.Fax AS Organisation_Fax, \r\n            T.Mobile AS ");
            viewString.Append("Organisation_Mobile, \r\n            T.Email AS Organisation_Email, \r\n            ");
            viewString.Append("T.URL AS Organisation_URL, \r\n            T.WebsiteLogo AS Organisation_WebsiteLo");
            viewString.Append("go, \r\n            T.MISLogo AS Organisation_MISLogo, \r\n            T.TaxRegistra");
            viewString.Append("tionNo AS Organisation_TaxRegistrationNo, \r\n            T.LicenseLevel AS Organi");
            viewString.Append("sation_LicenseLevel, \r\n            T.CustomerAccountNumber AS Organisation_Custo");
            viewString.Append("merAccountNumber, \r\n            T.SmtpServer AS Organisation_SmtpServer, \r\n     ");
            viewString.Append("       T.SmtpUserName AS Organisation_SmtpUserName, \r\n            T.SmtpPassword");
            viewString.Append(" AS Organisation_SmtpPassword, \r\n            T.VATRegNumber AS Organisation_VATR");
            viewString.Append("egNumber, \r\n            T.SystemLengthUnit AS Organisation_SystemLengthUnit, \r\n ");
            viewString.Append("           T.SystemWeightUnit AS Organisation_SystemWeightUnit, \r\n            T.");
            viewString.Append("CurrencyId AS Organisation_CurrencyId, \r\n            T.LanguageId AS Organisatio");
            viewString.Append("n_LanguageId, \r\n            T.StateId AS Organisation_StateId, \r\n            T.C");
            viewString.Append("ountryId AS Organisation_CountryId, \r\n            T.BleedAreaSize AS Organisatio");
            viewString.Append("n_BleedAreaSize, \r\n            T.ShowBleedArea AS Organisation_ShowBleedArea, \r\n");
            viewString.Append("            T.isXeroIntegrationRequired AS Organisation_isXeroIntegrationRequire");
            viewString.Append("d, \r\n            T.XeroApiId AS Organisation_XeroApiId, \r\n            T.XeroApiK");
            viewString.Append("ey AS Organisation_XeroApiKey, \r\n            T.TaxServiceUrl AS Organisation_Tax");
            viewString.Append("ServiceUrl, \r\n            T.TaxServiceKey AS Organisation_TaxServiceKey, \r\n     ");
            viewString.Append("       T.IsImperical AS Organisation_IsImperical, \r\n            T.AgileApiKey AS");
            viewString.Append(" Organisation_AgileApiKey, \r\n            T.AgileApiUrl AS Organisation_AgileApiU");
            viewString.Append("rl, \r\n            T.isAgileActive AS Organisation_isAgileActive, \r\n            T");
            viewString.Append(".isTrial AS Organisation_isTrial, \r\n            T.LiveStoresCount AS Organisatio");
            viewString.Append("n_LiveStoresCount, \r\n            T.WebStoreOrdersCount AS Organisation_WebStoreO");
            viewString.Append("rdersCount, \r\n            T.MisOrdersCount AS Organisation_MisOrdersCount, \r\n   ");
            viewString.Append("         T.BillingDate AS Organisation_BillingDate, \r\n            T.OfflineStore");
            viewString.Append("Clicks AS Organisation_OfflineStoreClicks, \r\n            T.CreateContactZapTarge");
            viewString.Append("tUrl AS Organisation_CreateContactZapTargetUrl, \r\n            T.CreateInvoiceZap");
            viewString.Append("TargetUrl AS Organisation_CreateInvoiceZapTargetUrl, \r\n            T.IsZapierEna");
            viewString.Append("ble AS Organisation_IsZapierEnable, \r\n            True AS _from0\r\n        FROM D");
            viewString.Append("omainModelsStoreContainer.Organisation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Organisations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView124()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5811);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ProductCategories\r\n        [DomainModels.Prod");
            viewString.Append("uctCategory](T1.ProductCategory_ProductCategoryId, T1.ProductCategory_CategoryNa");
            viewString.Append("me, T1.ProductCategory_ContentType, T1.ProductCategory_Description1, T1.ProductC");
            viewString.Append("ategory_Description2, T1.ProductCategory_LockedBy, T1.ProductCategory_CompanyId,");
            viewString.Append(" T1.ProductCategory_ParentCategoryId, T1.ProductCategory_DisplayOrder, T1.Produc");
            viewString.Append("tCategory_ImagePath, T1.ProductCategory_ThumbnailPath, T1.ProductCategory_isEnab");
            viewString.Append("led, T1.ProductCategory_isMarketPlace, T1.ProductCategory_TemplateDesignerMapped");
            viewString.Append("CategoryName, T1.ProductCategory_isArchived, T1.ProductCategory_isPublished, T1.");
            viewString.Append("ProductCategory_TrimmedWidth, T1.ProductCategory_TrimmedHeight, T1.ProductCatego");
            viewString.Append("ry_isColorImposition, T1.ProductCategory_isOrderImposition, T1.ProductCategory_i");
            viewString.Append("sLinkToTemplates, T1.ProductCategory_Sides, T1.ProductCategory_ApplySizeRestrict");
            viewString.Append("ions, T1.ProductCategory_ApplyFoldLines, T1.ProductCategory_WidthRestriction, T1");
            viewString.Append(".ProductCategory_HeightRestriction, T1.ProductCategory_CategoryTypeId, T1.Produc");
            viewString.Append("tCategory_RegionId, T1.ProductCategory_ZoomFactor, T1.ProductCategory_ScaleFacto");
            viewString.Append("r, T1.ProductCategory_isShelfProductCategory, T1.ProductCategory_MetaKeywords, T");
            viewString.Append("1.ProductCategory_MetaDescription, T1.ProductCategory_MetaTitle, T1.ProductCateg");
            viewString.Append("ory_OrganisationId, T1.ProductCategory_SubCategoryDisplayMode1, T1.ProductCatego");
            viewString.Append("ry_SubCategoryDisplayMode2, T1.ProductCategory_SubCategoryDisplayColumns, T1.Pro");
            viewString.Append("ductCategory_CategoryURLText, T1.ProductCategory_MetaOverride, T1.ProductCategor");
            viewString.Append("y_ShortDescription, T1.ProductCategory_SecondaryDescription, T1.ProductCategory_");
            viewString.Append("DefaultSortBy, T1.ProductCategory_ProductsDisplayColumns, T1.ProductCategory_Pro");
            viewString.Append("ductsDisplayRows, T1.ProductCategory_IsDisplayFeaturedproducts, T1.ProductCatego");
            viewString.Append("ry_IsShowAvailablity, T1.ProductCategory_IsShowRewardPoints, T1.ProductCategory_");
            viewString.Append("IsShowListPrice, T1.ProductCategory_IsShowSalePrice, T1.ProductCategory_IsShowSt");
            viewString.Append("ockStatus, T1.ProductCategory_IsShowProductDescription, T1.ProductCategory_IsSho");
            viewString.Append("wProductShortDescription)\r\n    FROM (\r\n        SELECT \r\n            T.ProductCat");
            viewString.Append("egoryId AS ProductCategory_ProductCategoryId, \r\n            T.CategoryName AS Pr");
            viewString.Append("oductCategory_CategoryName, \r\n            T.ContentType AS ProductCategory_Conte");
            viewString.Append("ntType, \r\n            T.Description1 AS ProductCategory_Description1, \r\n        ");
            viewString.Append("    T.Description2 AS ProductCategory_Description2, \r\n            T.LockedBy AS ");
            viewString.Append("ProductCategory_LockedBy, \r\n            T.CompanyId AS ProductCategory_CompanyId");
            viewString.Append(", \r\n            T.ParentCategoryId AS ProductCategory_ParentCategoryId, \r\n      ");
            viewString.Append("      T.DisplayOrder AS ProductCategory_DisplayOrder, \r\n            T.ImagePath ");
            viewString.Append("AS ProductCategory_ImagePath, \r\n            T.ThumbnailPath AS ProductCategory_T");
            viewString.Append("humbnailPath, \r\n            T.isEnabled AS ProductCategory_isEnabled, \r\n        ");
            viewString.Append("    T.isMarketPlace AS ProductCategory_isMarketPlace, \r\n            T.TemplateDe");
            viewString.Append("signerMappedCategoryName AS ProductCategory_TemplateDesignerMappedCategoryName, ");
            viewString.Append("\r\n            T.isArchived AS ProductCategory_isArchived, \r\n            T.isPubl");
            viewString.Append("ished AS ProductCategory_isPublished, \r\n            T.TrimmedWidth AS ProductCat");
            viewString.Append("egory_TrimmedWidth, \r\n            T.TrimmedHeight AS ProductCategory_TrimmedHeig");
            viewString.Append("ht, \r\n            T.isColorImposition AS ProductCategory_isColorImposition, \r\n  ");
            viewString.Append("          T.isOrderImposition AS ProductCategory_isOrderImposition, \r\n          ");
            viewString.Append("  T.isLinkToTemplates AS ProductCategory_isLinkToTemplates, \r\n            T.Side");
            viewString.Append("s AS ProductCategory_Sides, \r\n            T.ApplySizeRestrictions AS ProductCate");
            viewString.Append("gory_ApplySizeRestrictions, \r\n            T.ApplyFoldLines AS ProductCategory_Ap");
            viewString.Append("plyFoldLines, \r\n            T.WidthRestriction AS ProductCategory_WidthRestricti");
            viewString.Append("on, \r\n            T.HeightRestriction AS ProductCategory_HeightRestriction, \r\n  ");
            viewString.Append("          T.CategoryTypeId AS ProductCategory_CategoryTypeId, \r\n            T.Re");
            viewString.Append("gionId AS ProductCategory_RegionId, \r\n            T.ZoomFactor AS ProductCategor");
            viewString.Append("y_ZoomFactor, \r\n            T.ScaleFactor AS ProductCategory_ScaleFactor, \r\n    ");
            viewString.Append("        T.isShelfProductCategory AS ProductCategory_isShelfProductCategory, \r\n  ");
            viewString.Append("          T.MetaKeywords AS ProductCategory_MetaKeywords, \r\n            T.MetaDe");
            viewString.Append("scription AS ProductCategory_MetaDescription, \r\n            T.MetaTitle AS Produ");
            viewString.Append("ctCategory_MetaTitle, \r\n            T.OrganisationId AS ProductCategory_Organisa");
            viewString.Append("tionId, \r\n            T.SubCategoryDisplayMode1 AS ProductCategory_SubCategoryDi");
            viewString.Append("splayMode1, \r\n            T.SubCategoryDisplayMode2 AS ProductCategory_SubCatego");
            viewString.Append("ryDisplayMode2, \r\n            T.SubCategoryDisplayColumns AS ProductCategory_Sub");
            viewString.Append("CategoryDisplayColumns, \r\n            T.CategoryURLText AS ProductCategory_Categ");
            viewString.Append("oryURLText, \r\n            T.MetaOverride AS ProductCategory_MetaOverride, \r\n    ");
            viewString.Append("        T.ShortDescription AS ProductCategory_ShortDescription, \r\n            T.");
            viewString.Append("SecondaryDescription AS ProductCategory_SecondaryDescription, \r\n            T.De");
            viewString.Append("faultSortBy AS ProductCategory_DefaultSortBy, \r\n            T.ProductsDisplayCol");
            viewString.Append("umns AS ProductCategory_ProductsDisplayColumns, \r\n            T.ProductsDisplayR");
            viewString.Append("ows AS ProductCategory_ProductsDisplayRows, \r\n            T.IsDisplayFeaturedpro");
            viewString.Append("ducts AS ProductCategory_IsDisplayFeaturedproducts, \r\n            T.IsShowAvaila");
            viewString.Append("blity AS ProductCategory_IsShowAvailablity, \r\n            T.IsShowRewardPoints A");
            viewString.Append("S ProductCategory_IsShowRewardPoints, \r\n            T.IsShowListPrice AS Product");
            viewString.Append("Category_IsShowListPrice, \r\n            T.IsShowSalePrice AS ProductCategory_IsS");
            viewString.Append("howSalePrice, \r\n            T.IsShowStockStatus AS ProductCategory_IsShowStockSt");
            viewString.Append("atus, \r\n            T.IsShowProductDescription AS ProductCategory_IsShowProductD");
            viewString.Append("escription, \r\n            T.IsShowProductShortDescription AS ProductCategory_IsS");
            viewString.Append("howProductShortDescription, \r\n            True AS _from0\r\n        FROM DomainMod");
            viewString.Append("elsStoreContainer.ProductCategory AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategories", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Widgets
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView125()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Widgets", @"
    SELECT VALUE -- Constructing Widgets
        [DomainModels.Widget](T1.Widget_WidgetId, T1.Widget_WidgetCode, T1.Widget_WidgetName, T1.Widget_WidgetControlName, T1.Widget_WidgetCss, T1.Widget_ThumbnailUrl, T1.Widget_Description)
    FROM (
        SELECT 
            T.WidgetId AS Widget_WidgetId, 
            T.WidgetCode AS Widget_WidgetCode, 
            T.WidgetName AS Widget_WidgetName, 
            T.WidgetControlName AS Widget_WidgetControlName, 
            T.WidgetCss AS Widget_WidgetCss, 
            T.ThumbnailUrl AS Widget_ThumbnailUrl, 
            T.Description AS Widget_Description, 
            True AS _from0
        FROM DomainModelsStoreContainer.Widgets AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CategoryTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView126()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CategoryTerritories", @"
    SELECT VALUE -- Constructing CategoryTerritories
        [DomainModels.CategoryTerritory](T1.CategoryTerritory_CategoryTerritoryId, T1.CategoryTerritory_CompanyId, T1.CategoryTerritory_ProductCategoryId, T1.CategoryTerritory_TerritoryId, T1.CategoryTerritory_OrganisationId)
    FROM (
        SELECT 
            T.CategoryTerritoryId AS CategoryTerritory_CategoryTerritoryId, 
            T.CompanyId AS CategoryTerritory_CompanyId, 
            T.ProductCategoryId AS CategoryTerritory_ProductCategoryId, 
            T.TerritoryId AS CategoryTerritory_TerritoryId, 
            T.OrganisationId AS CategoryTerritory_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CategoryTerritory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView127()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCategories", "\r\n    SELECT VALUE -- Constructing StockCategories\r\n        [DomainModels.StockCa" +
                    "tegory](T1.StockCategory_CategoryId, T1.StockCategory_Code, T1.StockCategory_Nam" +
                    "e, T1.StockCategory_Description, T1.StockCategory_Fixed, T1.StockCategory_ItemWe" +
                    "ight, T1.StockCategory_ItemColour, T1.StockCategory_ItemSizeCustom, T1.StockCate" +
                    "gory_ItemPaperSize, T1.StockCategory_ItemCoatedType, T1.StockCategory_ItemCoated" +
                    ", T1.StockCategory_ItemExposure, T1.StockCategory_ItemCharge, T1.StockCategory_R" +
                    "ecLock, T1.StockCategory_TaxId, T1.StockCategory_Flag1, T1.StockCategory_Flag2, " +
                    "T1.StockCategory_Flag3, T1.StockCategory_Flag4, T1.StockCategory_OrganisationId)" +
                    "\r\n    FROM (\r\n        SELECT \r\n            T.CategoryId AS StockCategory_Categor" +
                    "yId, \r\n            T.Code AS StockCategory_Code, \r\n            T.Name AS StockCa" +
                    "tegory_Name, \r\n            T.Description AS StockCategory_Description, \r\n       " +
                    "     T.fixed AS StockCategory_Fixed, \r\n            T.ItemWeight AS StockCategory" +
                    "_ItemWeight, \r\n            T.ItemColour AS StockCategory_ItemColour, \r\n         " +
                    "   T.ItemSizeCustom AS StockCategory_ItemSizeCustom, \r\n            T.ItemPaperSi" +
                    "ze AS StockCategory_ItemPaperSize, \r\n            T.ItemCoatedType AS StockCatego" +
                    "ry_ItemCoatedType, \r\n            T.ItemCoated AS StockCategory_ItemCoated, \r\n   " +
                    "         T.ItemExposure AS StockCategory_ItemExposure, \r\n            T.ItemCharg" +
                    "e AS StockCategory_ItemCharge, \r\n            T.recLock AS StockCategory_RecLock," +
                    " \r\n            T.TaxId AS StockCategory_TaxId, \r\n            T.Flag1 AS StockCat" +
                    "egory_Flag1, \r\n            T.Flag2 AS StockCategory_Flag2, \r\n            T.Flag3" +
                    " AS StockCategory_Flag3, \r\n            T.Flag4 AS StockCategory_Flag4, \r\n       " +
                    "     T.OrganisationId AS StockCategory_OrganisationId, \r\n            True AS _fr" +
                    "om0\r\n        FROM DomainModelsStoreContainer.StockCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockSubCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView128()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockSubCategories", @"
    SELECT VALUE -- Constructing StockSubCategories
        [DomainModels.StockSubCategory](T1.StockSubCategory_SubCategoryId, T1.StockSubCategory_Code, T1.StockSubCategory_Name, T1.StockSubCategory_Description, T1.StockSubCategory_Fixed, T1.StockSubCategory_CategoryId)
    FROM (
        SELECT 
            T.SubCategoryId AS StockSubCategory_SubCategoryId, 
            T.Code AS StockSubCategory_Code, 
            T.Name AS StockSubCategory_Name, 
            T.Description AS StockSubCategory_Description, 
            T.Fixed AS StockSubCategory_Fixed, 
            T.CategoryId AS StockSubCategory_CategoryId, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockSubCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView129()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2777);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CmsPages\r\n        [DomainModels.CmsPage](T1.C");
            viewString.Append("msPage_PageId, T1.CmsPage_PageName, T1.CmsPage_PageTitle, T1.CmsPage_MenuTitle, ");
            viewString.Append("T1.CmsPage_description, T1.CmsPage_PageRelativePath, T1.CmsPage_SortOrder, T1.[C");
            viewString.Append("msPage.Meta_KeywordContent], T1.[CmsPage.Meta_DescriptionContent], T1.[CmsPage.M");
            viewString.Append("eta_HiddenDescriptionContent], T1.[CmsPage.Meta_CategoryContent], T1.[CmsPage.Me");
            viewString.Append("ta_RobotsContent], T1.[CmsPage.Meta_AuthorContent], T1.[CmsPage.Meta_DateContent");
            viewString.Append("], T1.[CmsPage.Meta_LanguageContent], T1.[CmsPage.Meta_RevisitAfterContent], T1.");
            viewString.Append("[CmsPage.Meta_Title], T1.CmsPage_PageHTML, T1.CmsPage_isUserDefined, T1.CmsPage_");
            viewString.Append("CategoryId, T1.CmsPage_isPromotionalOffer, T1.CmsPage_isSepecialOffer, T1.CmsPag");
            viewString.Append("e_isMPCAdd, T1.CmsPage_LastModifiedDate, T1.CmsPage_PageBanner, T1.CmsPage_PageK");
            viewString.Append("eywords, T1.CmsPage_isEnabled, T1.CmsPage_isDisplay, T1.CmsPage_CompanyId, T1.Cm");
            viewString.Append("sPage_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.PageId AS CmsP");
            viewString.Append("age_PageId, \r\n            T.PageName AS CmsPage_PageName, \r\n            T.PageTi");
            viewString.Append("tle AS CmsPage_PageTitle, \r\n            T.MenuTitle AS CmsPage_MenuTitle, \r\n    ");
            viewString.Append("        T.description AS CmsPage_description, \r\n            T.PageRelativePath A");
            viewString.Append("S CmsPage_PageRelativePath, \r\n            T.SortOrder AS CmsPage_SortOrder, \r\n  ");
            viewString.Append("          T.Meta_KeywordContent AS [CmsPage.Meta_KeywordContent], \r\n            ");
            viewString.Append("T.Meta_DescriptionContent AS [CmsPage.Meta_DescriptionContent], \r\n            T.");
            viewString.Append("Meta_HiddenDescriptionContent AS [CmsPage.Meta_HiddenDescriptionContent], \r\n    ");
            viewString.Append("        T.Meta_CategoryContent AS [CmsPage.Meta_CategoryContent], \r\n            ");
            viewString.Append("T.Meta_RobotsContent AS [CmsPage.Meta_RobotsContent], \r\n            T.Meta_Autho");
            viewString.Append("rContent AS [CmsPage.Meta_AuthorContent], \r\n            T.Meta_DateContent AS [C");
            viewString.Append("msPage.Meta_DateContent], \r\n            T.Meta_LanguageContent AS [CmsPage.Meta_");
            viewString.Append("LanguageContent], \r\n            T.Meta_RevisitAfterContent AS [CmsPage.Meta_Revi");
            viewString.Append("sitAfterContent], \r\n            T.Meta_Title AS [CmsPage.Meta_Title], \r\n        ");
            viewString.Append("    T.PageHTML AS CmsPage_PageHTML, \r\n            T.isUserDefined AS CmsPage_isU");
            viewString.Append("serDefined, \r\n            T.CategoryId AS CmsPage_CategoryId, \r\n            T.is");
            viewString.Append("PromotionalOffer AS CmsPage_isPromotionalOffer, \r\n            T.isSepecialOffer ");
            viewString.Append("AS CmsPage_isSepecialOffer, \r\n            T.isMPCAdd AS CmsPage_isMPCAdd, \r\n    ");
            viewString.Append("        T.LastModifiedDate AS CmsPage_LastModifiedDate, \r\n            T.PageBann");
            viewString.Append("er AS CmsPage_PageBanner, \r\n            T.PageKeywords AS CmsPage_PageKeywords, ");
            viewString.Append("\r\n            T.isEnabled AS CmsPage_isEnabled, \r\n            T.isDisplay AS Cms");
            viewString.Append("Page_isDisplay, \r\n            T.CompanyId AS CmsPage_CompanyId, \r\n            T.");
            viewString.Append("OrganisationId AS CmsPage_OrganisationId, \r\n            True AS _from0\r\n        ");
            viewString.Append("FROM DomainModelsStoreContainer.CmsPage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockCostAndPrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView130()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockCostAndPrices", @"
    SELECT VALUE -- Constructing StockCostAndPrices
        [DomainModels.StockCostAndPrice](T1.StockCostAndPrice_CostPriceId, T1.StockCostAndPrice_ItemId, T1.StockCostAndPrice_CostPrice, T1.StockCostAndPrice_PackCostPrice, T1.StockCostAndPrice_FromDate, T1.StockCostAndPrice_ToDate, T1.StockCostAndPrice_CostOrPriceIdentifier, T1.StockCostAndPrice_ProcessingCharge)
    FROM (
        SELECT 
            T.CostPriceId AS StockCostAndPrice_CostPriceId, 
            T.ItemId AS StockCostAndPrice_ItemId, 
            T.CostPrice AS StockCostAndPrice_CostPrice, 
            T.PackCostPrice AS StockCostAndPrice_PackCostPrice, 
            T.FromDate AS StockCostAndPrice_FromDate, 
            T.ToDate AS StockCostAndPrice_ToDate, 
            T.CostOrPriceIdentifier AS StockCostAndPrice_CostOrPriceIdentifier, 
            T.ProcessingCharge AS StockCostAndPrice_ProcessingCharge, 
            True AS _from0
        FROM DomainModelsStoreContainer.StockCostAndPrice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StockItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView131()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5848);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StockItems\r\n        [DomainModels.StockItem](");
            viewString.Append("T1.StockItem_StockItemId, T1.StockItem_ItemCode, T1.StockItem_ItemName, T1.Stock");
            viewString.Append("Item_AlternateName, T1.StockItem_ItemWeight, T1.StockItem_ItemColour, T1.StockIt");
            viewString.Append("em_ItemSizeCustom, T1.StockItem_ItemSizeId, T1.StockItem_ItemSizeHeight, T1.Stoc");
            viewString.Append("kItem_ItemSizeWidth, T1.StockItem_ItemSizeDim, T1.StockItem_ItemUnitSize, T1.Sto");
            viewString.Append("ckItem_SupplierId, T1.StockItem_CostPrice, T1.StockItem_CategoryId, T1.StockItem");
            viewString.Append("_SubCategoryId, T1.StockItem_LastModifiedDateTime, T1.StockItem_LastModifiedBy, ");
            viewString.Append("T1.StockItem_StockLevel, T1.StockItem_PackageQty, T1.StockItem_Status, T1.StockI");
            viewString.Append("tem_ReOrderLevel, T1.StockItem_StockLocation, T1.StockItem_ItemCoatedType, T1.St");
            viewString.Append("ockItem_ItemExposure, T1.StockItem_ItemExposureTime, T1.StockItem_ItemProcessing");
            viewString.Append("Charge, T1.StockItem_ItemType, T1.StockItem_StockCreated, T1.StockItem_PerQtyRat");
            viewString.Append("e, T1.StockItem_PerQtyQty, T1.StockItem_ItemDescription, T1.StockItem_LockedBy, ");
            viewString.Append("T1.StockItem_ReorderQty, T1.StockItem_LastOrderQty, T1.StockItem_LastOrderDate, ");
            viewString.Append("T1.StockItem_inStock, T1.StockItem_onOrder, T1.StockItem_Allocated, T1.StockItem");
            viewString.Append("_TaxID, T1.StockItem_unitRate, T1.StockItem_ItemCoated, T1.StockItem_ItemSizeSel");
            viewString.Append("ectedUnit, T1.StockItem_ItemWeightSelectedUnit, T1.StockItem_FlagID, T1.StockIte");
            viewString.Append("m_InkAbsorption, T1.StockItem_WashupCounter, T1.StockItem_InkYield, T1.StockItem");
            viewString.Append("_PaperBasicAreaId, T1.StockItem_PaperType, T1.StockItem_PerQtyType, T1.StockItem");
            viewString.Append("_RollWidth, T1.StockItem_RollLength, T1.StockItem_RollStandards, T1.StockItem_De");
            viewString.Append("partmentId, T1.StockItem_InkYieldStandards, T1.StockItem_PerQtyPrice, T1.StockIt");
            viewString.Append("em_PackPrice, T1.StockItem_Region, T1.StockItem_isDisabled, T1.StockItem_InkStan");
            viewString.Append("dards, T1.StockItem_BarCode, T1.StockItem_Image, T1.StockItem_XeroAccessCode, T1");
            viewString.Append(".StockItem_OrganisationId, T1.StockItem_ThresholdLevel, T1.StockItem_ThresholdPr");
            viewString.Append("oductionQuantity, T1.StockItem_isAllowBackOrder, T1.StockItem_IsImperical)\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.StockItemId AS StockItem_StockItemId, \r\n ");
            viewString.Append("           T.ItemCode AS StockItem_ItemCode, \r\n            T.ItemName AS StockIt");
            viewString.Append("em_ItemName, \r\n            T.AlternateName AS StockItem_AlternateName, \r\n       ");
            viewString.Append("     T.ItemWeight AS StockItem_ItemWeight, \r\n            T.ItemColour AS StockIt");
            viewString.Append("em_ItemColour, \r\n            T.ItemSizeCustom AS StockItem_ItemSizeCustom, \r\n   ");
            viewString.Append("         T.ItemSizeId AS StockItem_ItemSizeId, \r\n            T.ItemSizeHeight AS");
            viewString.Append(" StockItem_ItemSizeHeight, \r\n            T.ItemSizeWidth AS StockItem_ItemSizeWi");
            viewString.Append("dth, \r\n            T.ItemSizeDim AS StockItem_ItemSizeDim, \r\n            T.ItemU");
            viewString.Append("nitSize AS StockItem_ItemUnitSize, \r\n            T.SupplierId AS StockItem_Suppl");
            viewString.Append("ierId, \r\n            T.CostPrice AS StockItem_CostPrice, \r\n            T.Categor");
            viewString.Append("yId AS StockItem_CategoryId, \r\n            T.SubCategoryId AS StockItem_SubCateg");
            viewString.Append("oryId, \r\n            T.LastModifiedDateTime AS StockItem_LastModifiedDateTime, \r");
            viewString.Append("\n            T.LastModifiedBy AS StockItem_LastModifiedBy, \r\n            T.Stock");
            viewString.Append("Level AS StockItem_StockLevel, \r\n            T.PackageQty AS StockItem_PackageQt");
            viewString.Append("y, \r\n            T.Status AS StockItem_Status, \r\n            T.ReOrderLevel AS S");
            viewString.Append("tockItem_ReOrderLevel, \r\n            T.StockLocation AS StockItem_StockLocation,");
            viewString.Append(" \r\n            T.ItemCoatedType AS StockItem_ItemCoatedType, \r\n            T.Ite");
            viewString.Append("mExposure AS StockItem_ItemExposure, \r\n            T.ItemExposureTime AS StockIt");
            viewString.Append("em_ItemExposureTime, \r\n            T.ItemProcessingCharge AS StockItem_ItemProce");
            viewString.Append("ssingCharge, \r\n            T.ItemType AS StockItem_ItemType, \r\n            T.Sto");
            viewString.Append("ckCreated AS StockItem_StockCreated, \r\n            T.PerQtyRate AS StockItem_Per");
            viewString.Append("QtyRate, \r\n            T.PerQtyQty AS StockItem_PerQtyQty, \r\n            T.ItemD");
            viewString.Append("escription AS StockItem_ItemDescription, \r\n            T.LockedBy AS StockItem_L");
            viewString.Append("ockedBy, \r\n            T.ReorderQty AS StockItem_ReorderQty, \r\n            T.Las");
            viewString.Append("tOrderQty AS StockItem_LastOrderQty, \r\n            T.LastOrderDate AS StockItem_");
            viewString.Append("LastOrderDate, \r\n            T.inStock AS StockItem_inStock, \r\n            T.onO");
            viewString.Append("rder AS StockItem_onOrder, \r\n            T.Allocated AS StockItem_Allocated, \r\n ");
            viewString.Append("           T.TaxID AS StockItem_TaxID, \r\n            T.unitRate AS StockItem_uni");
            viewString.Append("tRate, \r\n            T.ItemCoated AS StockItem_ItemCoated, \r\n            T.ItemS");
            viewString.Append("izeSelectedUnit AS StockItem_ItemSizeSelectedUnit, \r\n            T.ItemWeightSel");
            viewString.Append("ectedUnit AS StockItem_ItemWeightSelectedUnit, \r\n            T.FlagID AS StockIt");
            viewString.Append("em_FlagID, \r\n            T.InkAbsorption AS StockItem_InkAbsorption, \r\n         ");
            viewString.Append("   T.WashupCounter AS StockItem_WashupCounter, \r\n            T.InkYield AS Stock");
            viewString.Append("Item_InkYield, \r\n            T.PaperBasicAreaId AS StockItem_PaperBasicAreaId, \r");
            viewString.Append("\n            T.PaperType AS StockItem_PaperType, \r\n            T.PerQtyType AS S");
            viewString.Append("tockItem_PerQtyType, \r\n            T.RollWidth AS StockItem_RollWidth, \r\n       ");
            viewString.Append("     T.RollLength AS StockItem_RollLength, \r\n            T.RollStandards AS Stoc");
            viewString.Append("kItem_RollStandards, \r\n            T.DepartmentId AS StockItem_DepartmentId, \r\n ");
            viewString.Append("           T.InkYieldStandards AS StockItem_InkYieldStandards, \r\n            T.P");
            viewString.Append("erQtyPrice AS StockItem_PerQtyPrice, \r\n            T.PackPrice AS StockItem_Pack");
            viewString.Append("Price, \r\n            T.Region AS StockItem_Region, \r\n            T.isDisabled AS");
            viewString.Append(" StockItem_isDisabled, \r\n            T.InkStandards AS StockItem_InkStandards, \r");
            viewString.Append("\n            T.BarCode AS StockItem_BarCode, \r\n            T.Image AS StockItem_");
            viewString.Append("Image, \r\n            T.XeroAccessCode AS StockItem_XeroAccessCode, \r\n           ");
            viewString.Append(" T.OrganisationId AS StockItem_OrganisationId, \r\n            T.ThresholdLevel AS");
            viewString.Append(" StockItem_ThresholdLevel, \r\n            T.ThresholdProductionQuantity AS StockI");
            viewString.Append("tem_ThresholdProductionQuantity, \r\n            T.isAllowBackOrder AS StockItem_i");
            viewString.Append("sAllowBackOrder, \r\n            T.IsImperical AS StockItem_IsImperical, \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM DomainModelsStoreContainer.StockItem AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StockItems", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PageCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView132()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PageCategories", @"
    SELECT VALUE -- Constructing PageCategories
        [DomainModels.PageCategory](T1.PageCategory_CategoryId, T1.PageCategory_CategoryName)
    FROM (
        SELECT 
            T.CategoryId AS PageCategory_CategoryId, 
            T.CategoryName AS PageCategory_CategoryName, 
            True AS _from0
        FROM DomainModelsStoreContainer.PageCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Sections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView133()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Sections", @"
    SELECT VALUE -- Constructing Sections
        [DomainModels.Section](T1.Section_SectionId, T1.Section_SectionName, T1.Section_SecOrder, T1.Section_ParentId, T1.Section_href, T1.Section_SectionImage, T1.Section_Independent)
    FROM (
        SELECT 
            T.SectionId AS Section_SectionId, 
            T.SectionName AS Section_SectionName, 
            T.SecOrder AS Section_SecOrder, 
            T.ParentId AS Section_ParentId, 
            T.href AS Section_href, 
            T.SectionImage AS Section_SectionImage, 
            T.Independent AS Section_Independent, 
            True AS _from0
        FROM DomainModelsStoreContainer.Section AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionFlags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView134()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionFlags", @"
    SELECT VALUE -- Constructing SectionFlags
        [DomainModels.SectionFlag](T1.SectionFlag_SectionFlagId, T1.SectionFlag_SectionId, T1.SectionFlag_FlagName, T1.SectionFlag_FlagColor, T1.SectionFlag_flagDescription, T1.SectionFlag_FlagColumn, T1.SectionFlag_isDefault, T1.SectionFlag_OrganisationId)
    FROM (
        SELECT 
            T.SectionFlagId AS SectionFlag_SectionFlagId, 
            T.SectionId AS SectionFlag_SectionId, 
            T.FlagName AS SectionFlag_FlagName, 
            T.FlagColor AS SectionFlag_FlagColor, 
            T.flagDescription AS SectionFlag_flagDescription, 
            T.FlagColumn AS SectionFlag_FlagColumn, 
            T.isDefault AS SectionFlag_isDefault, 
            T.OrganisationId AS SectionFlag_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionFlag AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.WeightUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView135()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.WeightUnits", @"
    SELECT VALUE -- Constructing WeightUnits
        [DomainModels.WeightUnit](T1.WeightUnit_Id, T1.WeightUnit_UnitName, T1.WeightUnit_Pound, T1.WeightUnit_GSM, T1.WeightUnit_KG)
    FROM (
        SELECT 
            T.Id AS WeightUnit_Id, 
            T.UnitName AS WeightUnit_UnitName, 
            T.Pound AS WeightUnit_Pound, 
            T.GSM AS WeightUnit_GSM, 
            T.KG AS WeightUnit_KG, 
            True AS _from0
        FROM DomainModelsStoreContainer.WeightUnit AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView136()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8167);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CompanyContacts\r\n        [DomainModels.Compan");
            viewString.Append("yContact](T1.CompanyContact_ContactId, T1.CompanyContact_AddressId, T1.CompanyCo");
            viewString.Append("ntact_CompanyId, T1.CompanyContact_FirstName, T1.CompanyContact_MiddleName, T1.C");
            viewString.Append("ompanyContact_LastName, T1.CompanyContact_Title, T1.CompanyContact_HomeTel1, T1.");
            viewString.Append("CompanyContact_HomeTel2, T1.CompanyContact_HomeExtension1, T1.CompanyContact_Hom");
            viewString.Append("eExtension2, T1.CompanyContact_Mobile, T1.CompanyContact_Email, T1.CompanyContac");
            viewString.Append("t_FAX, T1.CompanyContact_JobTitle, T1.CompanyContact_DOB, T1.CompanyContact_Note");
            viewString.Append("s, T1.CompanyContact_IsDefaultContact, T1.CompanyContact_HomeAddress1, T1.Compan");
            viewString.Append("yContact_HomeAddress2, T1.CompanyContact_HomeCity, T1.CompanyContact_HomeState, ");
            viewString.Append("T1.CompanyContact_HomePostCode, T1.CompanyContact_HomeCountry, T1.CompanyContact");
            viewString.Append("_SecretQuestion, T1.CompanyContact_SecretAnswer, T1.CompanyContact_Password, T1.");
            viewString.Append("CompanyContact_URL, T1.CompanyContact_IsEmailSubscription, T1.CompanyContact_IsN");
            viewString.Append("ewsLetterSubscription, T1.CompanyContact_image, T1.CompanyContact_quickFullName,");
            viewString.Append(" T1.CompanyContact_quickTitle, T1.CompanyContact_quickCompanyName, T1.CompanyCon");
            viewString.Append("tact_quickAddress1, T1.CompanyContact_quickAddress2, T1.CompanyContact_quickAddr");
            viewString.Append("ess3, T1.CompanyContact_quickPhone, T1.CompanyContact_quickFax, T1.CompanyContac");
            viewString.Append("t_quickEmail, T1.CompanyContact_quickWebsite, T1.CompanyContact_quickCompMessage");
            viewString.Append(", T1.CompanyContact_QuestionId, T1.CompanyContact_IsApprover, T1.CompanyContact_");
            viewString.Append("isWebAccess, T1.CompanyContact_isPlaceOrder, T1.CompanyContact_CreditLimit, T1.C");
            viewString.Append("ompanyContact_isArchived, T1.CompanyContact_ContactRoleId, T1.CompanyContact_Ter");
            viewString.Append("ritoryId, T1.CompanyContact_ClaimIdentifer, T1.CompanyContact_AuthentifiedBy, T1");
            viewString.Append(".CompanyContact_IsPayByPersonalCreditCard, T1.CompanyContact_IsPricingshown, T1.");
            viewString.Append("CompanyContact_SkypeId, T1.CompanyContact_LinkedinURL, T1.CompanyContact_Faceboo");
            viewString.Append("kURL, T1.CompanyContact_TwitterURL, T1.CompanyContact_authenticationToken, T1.Co");
            viewString.Append("mpanyContact_twitterScreenName, T1.CompanyContact_ShippingAddressId, T1.CompanyC");
            viewString.Append("ontact_isUserLoginFirstTime, T1.CompanyContact_quickMobileNumber, T1.CompanyCont");
            viewString.Append("act_quickTwitterId, T1.CompanyContact_quickFacebookId, T1.CompanyContact_quickLi");
            viewString.Append("nkedInId, T1.CompanyContact_quickOtherId, T1.CompanyContact_POBoxAddress, T1.Com");
            viewString.Append("panyContact_CorporateUnit, T1.CompanyContact_OfficeTradingName, T1.CompanyContac");
            viewString.Append("t_ContractorName, T1.CompanyContact_BPayCRN, T1.CompanyContact_ABN, T1.CompanyCo");
            viewString.Append("ntact_ACN, T1.CompanyContact_AdditionalField1, T1.CompanyContact_AdditionalField");
            viewString.Append("2, T1.CompanyContact_AdditionalField3, T1.CompanyContact_AdditionalField4, T1.Co");
            viewString.Append("mpanyContact_AdditionalField5, T1.CompanyContact_canUserPlaceOrderWithoutApprova");
            viewString.Append("l, T1.CompanyContact_CanUserEditProfile, T1.CompanyContact_canPlaceDirectOrder, ");
            viewString.Append("T1.CompanyContact_OrganisationId, T1.CompanyContact_SecondaryEmail, T1.CompanyCo");
            viewString.Append("ntact_RegistrationDate)\r\n    FROM (\r\n        SELECT \r\n            T.ContactId AS");
            viewString.Append(" CompanyContact_ContactId, \r\n            T.AddressId AS CompanyContact_AddressId");
            viewString.Append(", \r\n            T.CompanyId AS CompanyContact_CompanyId, \r\n            T.FirstNa");
            viewString.Append("me AS CompanyContact_FirstName, \r\n            T.MiddleName AS CompanyContact_Mid");
            viewString.Append("dleName, \r\n            T.LastName AS CompanyContact_LastName, \r\n            T.Ti");
            viewString.Append("tle AS CompanyContact_Title, \r\n            T.HomeTel1 AS CompanyContact_HomeTel1");
            viewString.Append(", \r\n            T.HomeTel2 AS CompanyContact_HomeTel2, \r\n            T.HomeExten");
            viewString.Append("sion1 AS CompanyContact_HomeExtension1, \r\n            T.HomeExtension2 AS Compan");
            viewString.Append("yContact_HomeExtension2, \r\n            T.Mobile AS CompanyContact_Mobile, \r\n    ");
            viewString.Append("        T.Email AS CompanyContact_Email, \r\n            T.FAX AS CompanyContact_F");
            viewString.Append("AX, \r\n            T.JobTitle AS CompanyContact_JobTitle, \r\n            T.DOB AS ");
            viewString.Append("CompanyContact_DOB, \r\n            T.Notes AS CompanyContact_Notes, \r\n           ");
            viewString.Append(" T.IsDefaultContact AS CompanyContact_IsDefaultContact, \r\n            T.HomeAddr");
            viewString.Append("ess1 AS CompanyContact_HomeAddress1, \r\n            T.HomeAddress2 AS CompanyCont");
            viewString.Append("act_HomeAddress2, \r\n            T.HomeCity AS CompanyContact_HomeCity, \r\n       ");
            viewString.Append("     T.HomeState AS CompanyContact_HomeState, \r\n            T.HomePostCode AS Co");
            viewString.Append("mpanyContact_HomePostCode, \r\n            T.HomeCountry AS CompanyContact_HomeCou");
            viewString.Append("ntry, \r\n            T.SecretQuestion AS CompanyContact_SecretQuestion, \r\n       ");
            viewString.Append("     T.SecretAnswer AS CompanyContact_SecretAnswer, \r\n            T.Password AS ");
            viewString.Append("CompanyContact_Password, \r\n            T.URL AS CompanyContact_URL, \r\n          ");
            viewString.Append("  T.IsEmailSubscription AS CompanyContact_IsEmailSubscription, \r\n            T.I");
            viewString.Append("sNewsLetterSubscription AS CompanyContact_IsNewsLetterSubscription, \r\n          ");
            viewString.Append("  T.image AS CompanyContact_image, \r\n            T.quickFullName AS CompanyConta");
            viewString.Append("ct_quickFullName, \r\n            T.quickTitle AS CompanyContact_quickTitle, \r\n   ");
            viewString.Append("         T.quickCompanyName AS CompanyContact_quickCompanyName, \r\n            T.");
            viewString.Append("quickAddress1 AS CompanyContact_quickAddress1, \r\n            T.quickAddress2 AS ");
            viewString.Append("CompanyContact_quickAddress2, \r\n            T.quickAddress3 AS CompanyContact_qu");
            viewString.Append("ickAddress3, \r\n            T.quickPhone AS CompanyContact_quickPhone, \r\n        ");
            viewString.Append("    T.quickFax AS CompanyContact_quickFax, \r\n            T.quickEmail AS Company");
            viewString.Append("Contact_quickEmail, \r\n            T.quickWebsite AS CompanyContact_quickWebsite,");
            viewString.Append(" \r\n            T.quickCompMessage AS CompanyContact_quickCompMessage, \r\n        ");
            viewString.Append("    T.QuestionId AS CompanyContact_QuestionId, \r\n            T.IsApprover AS Com");
            viewString.Append("panyContact_IsApprover, \r\n            T.isWebAccess AS CompanyContact_isWebAcces");
            viewString.Append("s, \r\n            T.isPlaceOrder AS CompanyContact_isPlaceOrder, \r\n            T.");
            viewString.Append("CreditLimit AS CompanyContact_CreditLimit, \r\n            T.isArchived AS Company");
            viewString.Append("Contact_isArchived, \r\n            T.ContactRoleId AS CompanyContact_ContactRoleI");
            viewString.Append("d, \r\n            T.TerritoryId AS CompanyContact_TerritoryId, \r\n            T.Cl");
            viewString.Append("aimIdentifer AS CompanyContact_ClaimIdentifer, \r\n            T.AuthentifiedBy AS");
            viewString.Append(" CompanyContact_AuthentifiedBy, \r\n            T.IsPayByPersonalCreditCard AS Com");
            viewString.Append("panyContact_IsPayByPersonalCreditCard, \r\n            T.IsPricingshown AS Company");
            viewString.Append("Contact_IsPricingshown, \r\n            T.SkypeId AS CompanyContact_SkypeId, \r\n   ");
            viewString.Append("         T.LinkedinURL AS CompanyContact_LinkedinURL, \r\n            T.FacebookUR");
            viewString.Append("L AS CompanyContact_FacebookURL, \r\n            T.TwitterURL AS CompanyContact_Tw");
            viewString.Append("itterURL, \r\n            T.authenticationToken AS CompanyContact_authenticationTo");
            viewString.Append("ken, \r\n            T.twitterScreenName AS CompanyContact_twitterScreenName, \r\n  ");
            viewString.Append("          T.ShippingAddressId AS CompanyContact_ShippingAddressId, \r\n           ");
            viewString.Append(" T.isUserLoginFirstTime AS CompanyContact_isUserLoginFirstTime, \r\n            T.");
            viewString.Append("quickMobileNumber AS CompanyContact_quickMobileNumber, \r\n            T.quickTwit");
            viewString.Append("terId AS CompanyContact_quickTwitterId, \r\n            T.quickFacebookId AS Compa");
            viewString.Append("nyContact_quickFacebookId, \r\n            T.quickLinkedInId AS CompanyContact_qui");
            viewString.Append("ckLinkedInId, \r\n            T.quickOtherId AS CompanyContact_quickOtherId, \r\n   ");
            viewString.Append("         T.POBoxAddress AS CompanyContact_POBoxAddress, \r\n            T.Corporat");
            viewString.Append("eUnit AS CompanyContact_CorporateUnit, \r\n            T.OfficeTradingName AS Comp");
            viewString.Append("anyContact_OfficeTradingName, \r\n            T.ContractorName AS CompanyContact_C");
            viewString.Append("ontractorName, \r\n            T.BPayCRN AS CompanyContact_BPayCRN, \r\n            ");
            viewString.Append("T.ABN AS CompanyContact_ABN, \r\n            T.ACN AS CompanyContact_ACN, \r\n      ");
            viewString.Append("      T.AdditionalField1 AS CompanyContact_AdditionalField1, \r\n            T.Add");
            viewString.Append("itionalField2 AS CompanyContact_AdditionalField2, \r\n            T.AdditionalFiel");
            viewString.Append("d3 AS CompanyContact_AdditionalField3, \r\n            T.AdditionalField4 AS Compa");
            viewString.Append("nyContact_AdditionalField4, \r\n            T.AdditionalField5 AS CompanyContact_A");
            viewString.Append("dditionalField5, \r\n            T.canUserPlaceOrderWithoutApproval AS CompanyCont");
            viewString.Append("act_canUserPlaceOrderWithoutApproval, \r\n            T.CanUserEditProfile AS Comp");
            viewString.Append("anyContact_CanUserEditProfile, \r\n            T.canPlaceDirectOrder AS CompanyCon");
            viewString.Append("tact_canPlaceDirectOrder, \r\n            T.OrganisationId AS CompanyContact_Organ");
            viewString.Append("isationId, \r\n            T.SecondaryEmail AS CompanyContact_SecondaryEmail, \r\n  ");
            viewString.Append("          T.RegistrationDate AS CompanyContact_RegistrationDate, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM DomainModelsStoreContainer.CompanyContact AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyContacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyContactRoles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView137()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyContactRoles", @"
    SELECT VALUE -- Constructing CompanyContactRoles
        [DomainModels.CompanyContactRole](T1.CompanyContactRole_ContactRoleId, T1.CompanyContactRole_ContactRoleName)
    FROM (
        SELECT 
            T.ContactRoleId AS CompanyContactRole_ContactRoleId, 
            T.ContactRoleName AS CompanyContactRole_ContactRoleName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyContactRole AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView138()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyTerritories", @"
    SELECT VALUE -- Constructing CompanyTerritories
        [DomainModels.CompanyTerritory](T1.CompanyTerritory_TerritoryId, T1.CompanyTerritory_TerritoryName, T1.CompanyTerritory_CompanyId, T1.CompanyTerritory_TerritoryCode, T1.CompanyTerritory_isDefault)
    FROM (
        SELECT 
            T.TerritoryId AS CompanyTerritory_TerritoryId, 
            T.TerritoryName AS CompanyTerritory_TerritoryName, 
            T.CompanyId AS CompanyTerritory_CompanyId, 
            T.TerritoryCode AS CompanyTerritory_TerritoryCode, 
            T.isDefault AS CompanyTerritory_isDefault, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyTerritory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView139()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyTypes", @"
    SELECT VALUE -- Constructing CompanyTypes
        [DomainModels.CompanyType](T1.CompanyType_TypeId, T1.CompanyType_IsFixed, T1.CompanyType_TypeName)
    FROM (
        SELECT 
            T.TypeId AS CompanyType_TypeId, 
            T.IsFixed AS CompanyType_IsFixed, 
            T.TypeName AS CompanyType_TypeName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView140()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(12555);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CostCentres\r\n        [DomainModels.CostCentre");
            viewString.Append("](T1.CostCentre_CostCentreId, T1.CostCentre_Name, T1.CostCentre_Description, T1.");
            viewString.Append("CostCentre_Type, T1.CostCentre_CreatedBy, T1.CostCentre_LockedBy, T1.CostCentre_");
            viewString.Append("LastModifiedBy, T1.CostCentre_MinimumCost, T1.CostCentre_SetupCost, T1.CostCentr");
            viewString.Append("e_SetupTime, T1.CostCentre_DefaultVA, T1.CostCentre_DefaultVAId, T1.CostCentre_O");
            viewString.Append("verHeadRate, T1.CostCentre_HourlyCharge, T1.CostCentre_CostPerThousand, T1.CostC");
            viewString.Append("entre_CreationDate, T1.CostCentre_LastModifiedDate, T1.CostCentre_PreferredSuppl");
            viewString.Append("ierId, T1.CostCentre_CodeFileName, T1.CostCentre_nominalCode, T1.CostCentre_Comp");
            viewString.Append("letionTime, T1.CostCentre_HeaderCode, T1.CostCentre_MiddleCode, T1.CostCentre_Fo");
            viewString.Append("oterCode, T1.CostCentre_strCostPlantParsed, T1.CostCentre_strCostPlantUnParsed, ");
            viewString.Append("T1.CostCentre_strCostLabourParsed, T1.CostCentre_strCostLabourUnParsed, T1.CostC");
            viewString.Append("entre_strCostMaterialParsed, T1.CostCentre_strCostMaterialUnParsed, T1.CostCentr");
            viewString.Append("e_strPricePlantParsed, T1.CostCentre_strPricePlantUnParsed, T1.CostCentre_strPri");
            viewString.Append("ceLabourParsed, T1.CostCentre_strPriceLabourUnParsed, T1.CostCentre_strPriceMate");
            viewString.Append("rialParsed, T1.CostCentre_strPriceMaterialUnParsed, T1.CostCentre_strActualCostP");
            viewString.Append("lantParsed, T1.CostCentre_strActualCostPlantUnParsed, T1.CostCentre_strActualCos");
            viewString.Append("tLabourParsed, T1.CostCentre_strActualCostLabourUnParsed, T1.CostCentre_strActua");
            viewString.Append("lCostMaterialParsed, T1.CostCentre_strActualCostMaterialUnParsed, T1.CostCentre_");
            viewString.Append("strTimeParsed, T1.CostCentre_strTimeUnParsed, T1.CostCentre_IsDisabled, T1.CostC");
            viewString.Append("entre_IsDirectCost, T1.CostCentre_SetupSpoilage, T1.CostCentre_RunningSpoilage, ");
            viewString.Append("T1.CostCentre_CalculationMethodType, T1.CostCentre_NoOfHours, T1.CostCentre_PerH");
            viewString.Append("ourCost, T1.CostCentre_PerHourPrice, T1.CostCentre_UnitQuantity, T1.CostCentre_Q");
            viewString.Append("uantitySourceType, T1.CostCentre_QuantityVariableId, T1.CostCentre_QuantityQuest");
            viewString.Append("ionString, T1.CostCentre_QuantityQuestionDefaultValue, T1.CostCentre_QuantityCal");
            viewString.Append("culationString, T1.CostCentre_CostPerUnitQuantity, T1.CostCentre_PricePerUnitQua");
            viewString.Append("ntity, T1.CostCentre_TimePerUnitQuantity, T1.CostCentre_TimeRunSpeed, T1.CostCen");
            viewString.Append("tre_TimeNoOfPasses, T1.CostCentre_TimeSourceType, T1.CostCentre_TimeVariableId, ");
            viewString.Append("T1.CostCentre_TimeQuestionString, T1.CostCentre_TimeQuestionDefaultValue, T1.Cos");
            viewString.Append("tCentre_TimeCalculationString, T1.CostCentre_Priority, T1.CostCentre_CostQuestio");
            viewString.Append("nString, T1.CostCentre_CostDefaultValue, T1.CostCentre_PriceQuestionString, T1.C");
            viewString.Append("ostCentre_PriceDefaultValue, T1.CostCentre_EstimatedTimeQuestionString, T1.CostC");
            viewString.Append("entre_EstimatedTimeDefaultValue, T1.CostCentre_Sequence, T1.CostCentre_CompleteC");
            viewString.Append("ode, T1.CostCentre_ItemDescription, T1.CostCentre_SystemTypeId, T1.CostCentre_Fl");
            viewString.Append("agId, T1.CostCentre_IsScheduleable, T1.CostCentre_SystemSiteId, T1.CostCentre_Is");
            viewString.Append("PrintOnJobCard, T1.CostCentre_WebStoreDesc, T1.CostCentre_isPublished, T1.CostCe");
            viewString.Append("ntre_EstimateProductionTime, T1.CostCentre_MainImageURL, T1.CostCentre_Thumbnail");
            viewString.Append("ImageURL, T1.CostCentre_isOption1, T1.CostCentre_isOption2, T1.CostCentre_isOpti");
            viewString.Append("on3, T1.CostCentre_TextOption1, T1.CostCentre_TextOption2, T1.CostCentre_TextOpt");
            viewString.Append("ion3, T1.CostCentre_CCIDOption1, T1.CostCentre_CCIDOption2, T1.CostCentre_CCIDOp");
            viewString.Append("tion3, T1.CostCentre_SetupCharge2, T1.CostCentre_SetupCharge3, T1.CostCentre_Min");
            viewString.Append("imumCost2, T1.CostCentre_MinimumCost3, T1.CostCentre_PricePerUnitQuantity2, T1.C");
            viewString.Append("ostCentre_PricePerUnitQuantity3, T1.CostCentre_QuantityVariableID2, T1.CostCentr");
            viewString.Append("e_QuantityVariableID3, T1.CostCentre_QuantitySourceType2, T1.CostCentre_Quantity");
            viewString.Append("SourceType3, T1.CostCentre_QuantityQuestionString2, T1.CostCentre_QuantityQuesti");
            viewString.Append("onString3, T1.CostCentre_QuantityQuestionDefaultValue2, T1.CostCentre_QuantityQu");
            viewString.Append("estionDefaultValue3, T1.CostCentre_DefaultVAId2, T1.CostCentre_DefaultVAId3, T1.");
            viewString.Append("CostCentre_IsPrintOnJobCard2, T1.CostCentre_IsPrintOnJobCard3, T1.CostCentre_IsD");
            viewString.Append("irectCost2, T1.CostCentre_IsDirectCost3, T1.CostCentre_PreferredSupplierID2, T1.");
            viewString.Append("CostCentre_PreferredSupplierID3, T1.CostCentre_EstimateProductionTime2, T1.CostC");
            viewString.Append("entre_EstimateProductionTime3, T1.CostCentre_DeliveryCharges, T1.CostCentre_isFr");
            viewString.Append("omMIS, T1.CostCentre_XeroAccessCode, T1.CostCentre_OrganisationId, T1.CostCentre");
            viewString.Append("_DeliveryType, T1.CostCentre_DeliveryServiceType, T1.CostCentre_CarrierId)\r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.CostCentreId AS CostCentre_CostCentreId, ");
            viewString.Append("\r\n            T.Name AS CostCentre_Name, \r\n            T.Description AS CostCent");
            viewString.Append("re_Description, \r\n            T.Type AS CostCentre_Type, \r\n            T.Created");
            viewString.Append("By AS CostCentre_CreatedBy, \r\n            T.LockedBy AS CostCentre_LockedBy, \r\n ");
            viewString.Append("           T.LastModifiedBy AS CostCentre_LastModifiedBy, \r\n            T.Minimu");
            viewString.Append("mCost AS CostCentre_MinimumCost, \r\n            T.SetupCost AS CostCentre_SetupCo");
            viewString.Append("st, \r\n            T.SetupTime AS CostCentre_SetupTime, \r\n            T.DefaultVA");
            viewString.Append(" AS CostCentre_DefaultVA, \r\n            T.DefaultVAId AS CostCentre_DefaultVAId,");
            viewString.Append(" \r\n            T.OverHeadRate AS CostCentre_OverHeadRate, \r\n            T.Hourly");
            viewString.Append("Charge AS CostCentre_HourlyCharge, \r\n            T.CostPerThousand AS CostCentre");
            viewString.Append("_CostPerThousand, \r\n            T.CreationDate AS CostCentre_CreationDate, \r\n   ");
            viewString.Append("         T.LastModifiedDate AS CostCentre_LastModifiedDate, \r\n            T.Pref");
            viewString.Append("erredSupplierId AS CostCentre_PreferredSupplierId, \r\n            T.CodeFileName ");
            viewString.Append("AS CostCentre_CodeFileName, \r\n            T.nominalCode AS CostCentre_nominalCod");
            viewString.Append("e, \r\n            T.CompletionTime AS CostCentre_CompletionTime, \r\n            T.");
            viewString.Append("HeaderCode AS CostCentre_HeaderCode, \r\n            T.MiddleCode AS CostCentre_Mi");
            viewString.Append("ddleCode, \r\n            T.FooterCode AS CostCentre_FooterCode, \r\n            T.s");
            viewString.Append("trCostPlantParsed AS CostCentre_strCostPlantParsed, \r\n            T.strCostPlant");
            viewString.Append("UnParsed AS CostCentre_strCostPlantUnParsed, \r\n            T.strCostLabourParsed");
            viewString.Append(" AS CostCentre_strCostLabourParsed, \r\n            T.strCostLabourUnParsed AS Cos");
            viewString.Append("tCentre_strCostLabourUnParsed, \r\n            T.strCostMaterialParsed AS CostCent");
            viewString.Append("re_strCostMaterialParsed, \r\n            T.strCostMaterialUnParsed AS CostCentre_");
            viewString.Append("strCostMaterialUnParsed, \r\n            T.strPricePlantParsed AS CostCentre_strPr");
            viewString.Append("icePlantParsed, \r\n            T.strPricePlantUnParsed AS CostCentre_strPricePlan");
            viewString.Append("tUnParsed, \r\n            T.strPriceLabourParsed AS CostCentre_strPriceLabourPars");
            viewString.Append("ed, \r\n            T.strPriceLabourUnParsed AS CostCentre_strPriceLabourUnParsed,");
            viewString.Append(" \r\n            T.strPriceMaterialParsed AS CostCentre_strPriceMaterialParsed, \r\n");
            viewString.Append("            T.strPriceMaterialUnParsed AS CostCentre_strPriceMaterialUnParsed, \r");
            viewString.Append("\n            T.strActualCostPlantParsed AS CostCentre_strActualCostPlantParsed, ");
            viewString.Append("\r\n            T.strActualCostPlantUnParsed AS CostCentre_strActualCostPlantUnPar");
            viewString.Append("sed, \r\n            T.strActualCostLabourParsed AS CostCentre_strActualCostLabour");
            viewString.Append("Parsed, \r\n            T.strActualCostLabourUnParsed AS CostCentre_strActualCostL");
            viewString.Append("abourUnParsed, \r\n            T.strActualCostMaterialParsed AS CostCentre_strActu");
            viewString.Append("alCostMaterialParsed, \r\n            T.strActualCostMaterialUnParsed AS CostCentr");
            viewString.Append("e_strActualCostMaterialUnParsed, \r\n            T.strTimeParsed AS CostCentre_str");
            viewString.Append("TimeParsed, \r\n            T.strTimeUnParsed AS CostCentre_strTimeUnParsed, \r\n   ");
            viewString.Append("         T.IsDisabled AS CostCentre_IsDisabled, \r\n            T.IsDirectCost AS ");
            viewString.Append("CostCentre_IsDirectCost, \r\n            T.SetupSpoilage AS CostCentre_SetupSpoila");
            viewString.Append("ge, \r\n            T.RunningSpoilage AS CostCentre_RunningSpoilage, \r\n           ");
            viewString.Append(" T.CalculationMethodType AS CostCentre_CalculationMethodType, \r\n            T.No");
            viewString.Append("OfHours AS CostCentre_NoOfHours, \r\n            T.PerHourCost AS CostCentre_PerHo");
            viewString.Append("urCost, \r\n            T.PerHourPrice AS CostCentre_PerHourPrice, \r\n            T");
            viewString.Append(".UnitQuantity AS CostCentre_UnitQuantity, \r\n            T.QuantitySourceType AS ");
            viewString.Append("CostCentre_QuantitySourceType, \r\n            T.QuantityVariableId AS CostCentre_");
            viewString.Append("QuantityVariableId, \r\n            T.QuantityQuestionString AS CostCentre_Quantit");
            viewString.Append("yQuestionString, \r\n            T.QuantityQuestionDefaultValue AS CostCentre_Quan");
            viewString.Append("tityQuestionDefaultValue, \r\n            T.QuantityCalculationString AS CostCentr");
            viewString.Append("e_QuantityCalculationString, \r\n            T.CostPerUnitQuantity AS CostCentre_C");
            viewString.Append("ostPerUnitQuantity, \r\n            T.PricePerUnitQuantity AS CostCentre_PricePerU");
            viewString.Append("nitQuantity, \r\n            T.TimePerUnitQuantity AS CostCentre_TimePerUnitQuanti");
            viewString.Append("ty, \r\n            T.TimeRunSpeed AS CostCentre_TimeRunSpeed, \r\n            T.Tim");
            viewString.Append("eNoOfPasses AS CostCentre_TimeNoOfPasses, \r\n            T.TimeSourceType AS Cost");
            viewString.Append("Centre_TimeSourceType, \r\n            T.TimeVariableId AS CostCentre_TimeVariable");
            viewString.Append("Id, \r\n            T.TimeQuestionString AS CostCentre_TimeQuestionString, \r\n     ");
            viewString.Append("       T.TimeQuestionDefaultValue AS CostCentre_TimeQuestionDefaultValue, \r\n    ");
            viewString.Append("        T.TimeCalculationString AS CostCentre_TimeCalculationString, \r\n         ");
            viewString.Append("   T.Priority AS CostCentre_Priority, \r\n            T.CostQuestionString AS Cost");
            viewString.Append("Centre_CostQuestionString, \r\n            T.CostDefaultValue AS CostCentre_CostDe");
            viewString.Append("faultValue, \r\n            T.PriceQuestionString AS CostCentre_PriceQuestionStrin");
            viewString.Append("g, \r\n            T.PriceDefaultValue AS CostCentre_PriceDefaultValue, \r\n        ");
            viewString.Append("    T.EstimatedTimeQuestionString AS CostCentre_EstimatedTimeQuestionString, \r\n ");
            viewString.Append("           T.EstimatedTimeDefaultValue AS CostCentre_EstimatedTimeDefaultValue, ");
            viewString.Append("\r\n            T.Sequence AS CostCentre_Sequence, \r\n            T.CompleteCode AS");
            viewString.Append(" CostCentre_CompleteCode, \r\n            T.ItemDescription AS CostCentre_ItemDesc");
            viewString.Append("ription, \r\n            T.SystemTypeId AS CostCentre_SystemTypeId, \r\n            ");
            viewString.Append("T.FlagId AS CostCentre_FlagId, \r\n            T.IsScheduleable AS CostCentre_IsSc");
            viewString.Append("heduleable, \r\n            T.SystemSiteId AS CostCentre_SystemSiteId, \r\n         ");
            viewString.Append("   T.IsPrintOnJobCard AS CostCentre_IsPrintOnJobCard, \r\n            T.WebStoreDe");
            viewString.Append("sc AS CostCentre_WebStoreDesc, \r\n            T.isPublished AS CostCentre_isPubli");
            viewString.Append("shed, \r\n            T.EstimateProductionTime AS CostCentre_EstimateProductionTim");
            viewString.Append("e, \r\n            T.MainImageURL AS CostCentre_MainImageURL, \r\n            T.Thum");
            viewString.Append("bnailImageURL AS CostCentre_ThumbnailImageURL, \r\n            T.isOption1 AS Cost");
            viewString.Append("Centre_isOption1, \r\n            T.isOption2 AS CostCentre_isOption2, \r\n         ");
            viewString.Append("   T.isOption3 AS CostCentre_isOption3, \r\n            T.TextOption1 AS CostCentr");
            viewString.Append("e_TextOption1, \r\n            T.TextOption2 AS CostCentre_TextOption2, \r\n        ");
            viewString.Append("    T.TextOption3 AS CostCentre_TextOption3, \r\n            T.CCIDOption1 AS Cost");
            viewString.Append("Centre_CCIDOption1, \r\n            T.CCIDOption2 AS CostCentre_CCIDOption2, \r\n   ");
            viewString.Append("         T.CCIDOption3 AS CostCentre_CCIDOption3, \r\n            T.SetupCharge2 A");
            viewString.Append("S CostCentre_SetupCharge2, \r\n            T.SetupCharge3 AS CostCentre_SetupCharg");
            viewString.Append("e3, \r\n            T.MinimumCost2 AS CostCentre_MinimumCost2, \r\n            T.Min");
            viewString.Append("imumCost3 AS CostCentre_MinimumCost3, \r\n            T.PricePerUnitQuantity2 AS C");
            viewString.Append("ostCentre_PricePerUnitQuantity2, \r\n            T.PricePerUnitQuantity3 AS CostCe");
            viewString.Append("ntre_PricePerUnitQuantity3, \r\n            T.QuantityVariableID2 AS CostCentre_Qu");
            viewString.Append("antityVariableID2, \r\n            T.QuantityVariableID3 AS CostCentre_QuantityVar");
            viewString.Append("iableID3, \r\n            T.QuantitySourceType2 AS CostCentre_QuantitySourceType2,");
            viewString.Append(" \r\n            T.QuantitySourceType3 AS CostCentre_QuantitySourceType3, \r\n      ");
            viewString.Append("      T.QuantityQuestionString2 AS CostCentre_QuantityQuestionString2, \r\n       ");
            viewString.Append("     T.QuantityQuestionString3 AS CostCentre_QuantityQuestionString3, \r\n        ");
            viewString.Append("    T.QuantityQuestionDefaultValue2 AS CostCentre_QuantityQuestionDefaultValue2,");
            viewString.Append(" \r\n            T.QuantityQuestionDefaultValue3 AS CostCentre_QuantityQuestionDef");
            viewString.Append("aultValue3, \r\n            T.DefaultVAId2 AS CostCentre_DefaultVAId2, \r\n         ");
            viewString.Append("   T.DefaultVAId3 AS CostCentre_DefaultVAId3, \r\n            T.IsPrintOnJobCard2 ");
            viewString.Append("AS CostCentre_IsPrintOnJobCard2, \r\n            T.IsPrintOnJobCard3 AS CostCentre");
            viewString.Append("_IsPrintOnJobCard3, \r\n            T.IsDirectCost2 AS CostCentre_IsDirectCost2, \r");
            viewString.Append("\n            T.IsDirectCost3 AS CostCentre_IsDirectCost3, \r\n            T.Prefer");
            viewString.Append("redSupplierID2 AS CostCentre_PreferredSupplierID2, \r\n            T.PreferredSupp");
            viewString.Append("lierID3 AS CostCentre_PreferredSupplierID3, \r\n            T.EstimateProductionTi");
            viewString.Append("me2 AS CostCentre_EstimateProductionTime2, \r\n            T.EstimateProductionTim");
            viewString.Append("e3 AS CostCentre_EstimateProductionTime3, \r\n            T.DeliveryCharges AS Cos");
            viewString.Append("tCentre_DeliveryCharges, \r\n            T.isFromMIS AS CostCentre_isFromMIS, \r\n  ");
            viewString.Append("          T.XeroAccessCode AS CostCentre_XeroAccessCode, \r\n            T.Organis");
            viewString.Append("ationId AS CostCentre_OrganisationId, \r\n            T.DeliveryType AS CostCentre");
            viewString.Append("_DeliveryType, \r\n            T.DeliveryServiceType AS CostCentre_DeliveryService");
            viewString.Append("Type, \r\n            T.CarrierId AS CostCentre_CarrierId, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM DomainModelsStoreContainer.CostCentre AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentres", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemAttachments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView141()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemAttachments", "\r\n    SELECT VALUE -- Constructing ItemAttachments\r\n        [DomainModels.ItemAtt" +
                    "achment](T1.ItemAttachment_ItemAttachmentId, T1.ItemAttachment_FileTitle, T1.Ite" +
                    "mAttachment_isFromCustomer, T1.ItemAttachment_CompanyId, T1.ItemAttachment_Conta" +
                    "ctId, T1.ItemAttachment_SystemUserId, T1.ItemAttachment_UploadDate, T1.ItemAttac" +
                    "hment_UploadTime, T1.ItemAttachment_Version, T1.ItemAttachment_ItemId, T1.ItemAt" +
                    "tachment_Comments, T1.ItemAttachment_Type, T1.ItemAttachment_IsApproved, T1.Item" +
                    "Attachment_FileName, T1.ItemAttachment_FolderPath, T1.ItemAttachment_FileType, T" +
                    "1.ItemAttachment_ContentType, T1.ItemAttachment_Parent, T1.ItemAttachment_Approv" +
                    "eDate)\r\n    FROM (\r\n        SELECT \r\n            T.ItemAttachmentId AS ItemAttac" +
                    "hment_ItemAttachmentId, \r\n            T.FileTitle AS ItemAttachment_FileTitle, \r" +
                    "\n            T.isFromCustomer AS ItemAttachment_isFromCustomer, \r\n            T." +
                    "CompanyId AS ItemAttachment_CompanyId, \r\n            T.ContactId AS ItemAttachme" +
                    "nt_ContactId, \r\n            T.SystemUserId AS ItemAttachment_SystemUserId, \r\n   " +
                    "         T.UploadDate AS ItemAttachment_UploadDate, \r\n            T.UploadTime A" +
                    "S ItemAttachment_UploadTime, \r\n            T.Version AS ItemAttachment_Version, " +
                    "\r\n            T.ItemId AS ItemAttachment_ItemId, \r\n            T.Comments AS Ite" +
                    "mAttachment_Comments, \r\n            T.Type AS ItemAttachment_Type, \r\n           " +
                    " T.IsApproved AS ItemAttachment_IsApproved, \r\n            T.FileName AS ItemAtta" +
                    "chment_FileName, \r\n            T.FolderPath AS ItemAttachment_FolderPath, \r\n    " +
                    "        T.FileType AS ItemAttachment_FileType, \r\n            T.ContentType AS It" +
                    "emAttachment_ContentType, \r\n            T.Parent AS ItemAttachment_Parent, \r\n   " +
                    "         T.ApproveDate AS ItemAttachment_ApproveDate, \r\n            True AS _fro" +
                    "m0\r\n        FROM DomainModelsStoreContainer.ItemAttachment AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView142()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemImages", @"
    SELECT VALUE -- Constructing ItemImages
        [DomainModels.ItemImage](T1.ItemImage_ProductImageId, T1.ItemImage_ItemId, T1.ItemImage_ImageTitle, T1.ItemImage_ImageURL, T1.ItemImage_ImageType, T1.ItemImage_ImageName, T1.ItemImage_UploadDate)
    FROM (
        SELECT 
            T.ProductImageId AS ItemImage_ProductImageId, 
            T.ItemId AS ItemImage_ItemId, 
            T.ImageTitle AS ItemImage_ImageTitle, 
            T.ImageURL AS ItemImage_ImageURL, 
            T.ImageType AS ItemImage_ImageType, 
            T.ImageName AS ItemImage_ImageName, 
            T.UploadDate AS ItemImage_UploadDate, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemImage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemPriceMatrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView143()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2163);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemPriceMatrices\r\n        [DomainModels.Item");
            viewString.Append("PriceMatrix](T1.ItemPriceMatrix_PriceMatrixId, T1.ItemPriceMatrix_Quantity, T1.I");
            viewString.Append("temPriceMatrix_Price, T1.ItemPriceMatrix_ItemId, T1.ItemPriceMatrix_PricePaperTy");
            viewString.Append("pe1, T1.ItemPriceMatrix_PricePaperType2, T1.ItemPriceMatrix_PricePaperType3, T1.");
            viewString.Append("ItemPriceMatrix_QtyRangeFrom, T1.ItemPriceMatrix_QtyRangeTo, T1.ItemPriceMatrix_");
            viewString.Append("SupplierId, T1.ItemPriceMatrix_PriceStockType4, T1.ItemPriceMatrix_PriceStockTyp");
            viewString.Append("e5, T1.ItemPriceMatrix_PriceStockType6, T1.ItemPriceMatrix_PriceStockType7, T1.I");
            viewString.Append("temPriceMatrix_PriceStockType8, T1.ItemPriceMatrix_PriceStockType9, T1.ItemPrice");
            viewString.Append("Matrix_PriceStockType10, T1.ItemPriceMatrix_PriceStockType11, T1.ItemPriceMatrix");
            viewString.Append("_FlagId, T1.ItemPriceMatrix_SupplierSequence)\r\n    FROM (\r\n        SELECT \r\n    ");
            viewString.Append("        T.PriceMatrixId AS ItemPriceMatrix_PriceMatrixId, \r\n            T.Quanti");
            viewString.Append("ty AS ItemPriceMatrix_Quantity, \r\n            T.Price AS ItemPriceMatrix_Price, ");
            viewString.Append("\r\n            T.ItemId AS ItemPriceMatrix_ItemId, \r\n            T.PricePaperType");
            viewString.Append("1 AS ItemPriceMatrix_PricePaperType1, \r\n            T.PricePaperType2 AS ItemPri");
            viewString.Append("ceMatrix_PricePaperType2, \r\n            T.PricePaperType3 AS ItemPriceMatrix_Pri");
            viewString.Append("cePaperType3, \r\n            T.QtyRangeFrom AS ItemPriceMatrix_QtyRangeFrom, \r\n  ");
            viewString.Append("          T.QtyRangeTo AS ItemPriceMatrix_QtyRangeTo, \r\n            T.SupplierId");
            viewString.Append(" AS ItemPriceMatrix_SupplierId, \r\n            T.PriceStockType4 AS ItemPriceMatr");
            viewString.Append("ix_PriceStockType4, \r\n            T.PriceStockType5 AS ItemPriceMatrix_PriceStoc");
            viewString.Append("kType5, \r\n            T.PriceStockType6 AS ItemPriceMatrix_PriceStockType6, \r\n  ");
            viewString.Append("          T.PriceStockType7 AS ItemPriceMatrix_PriceStockType7, \r\n            T.");
            viewString.Append("PriceStockType8 AS ItemPriceMatrix_PriceStockType8, \r\n            T.PriceStockTy");
            viewString.Append("pe9 AS ItemPriceMatrix_PriceStockType9, \r\n            T.PriceStockType10 AS Item");
            viewString.Append("PriceMatrix_PriceStockType10, \r\n            T.PriceStockType11 AS ItemPriceMatri");
            viewString.Append("x_PriceStockType11, \r\n            T.FlagId AS ItemPriceMatrix_FlagId, \r\n        ");
            viewString.Append("    T.SupplierSequence AS ItemPriceMatrix_SupplierSequence, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM DomainModelsStoreContainer.ItemPriceMatrix AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemPriceMatrices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemProductDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView144()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemProductDetails", @"
    SELECT VALUE -- Constructing ItemProductDetails
        [DomainModels.ItemProductDetail](T1.ItemProductDetail_ItemDetailId, T1.ItemProductDetail_ItemId, T1.ItemProductDetail_isInternalActivity, T1.ItemProductDetail_isAutoCreateSupplierPO, T1.ItemProductDetail_isQtyLimit, T1.ItemProductDetail_QtyLimit, T1.ItemProductDetail_DeliveryTimeSupplier1, T1.ItemProductDetail_DeliveryTimeSupplier2, T1.ItemProductDetail_isPrintItem, T1.ItemProductDetail_isAllowMarketBriefAttachment, T1.ItemProductDetail_MarketBriefSuccessMessage)
    FROM (
        SELECT 
            T.ItemDetailId AS ItemProductDetail_ItemDetailId, 
            T.ItemId AS ItemProductDetail_ItemId, 
            T.isInternalActivity AS ItemProductDetail_isInternalActivity, 
            T.isAutoCreateSupplierPO AS ItemProductDetail_isAutoCreateSupplierPO, 
            T.isQtyLimit AS ItemProductDetail_isQtyLimit, 
            T.QtyLimit AS ItemProductDetail_QtyLimit, 
            T.DeliveryTimeSupplier1 AS ItemProductDetail_DeliveryTimeSupplier1, 
            T.DeliveryTimeSupplier2 AS ItemProductDetail_DeliveryTimeSupplier2, 
            T.isPrintItem AS ItemProductDetail_isPrintItem, 
            T.isAllowMarketBriefAttachment AS ItemProductDetail_isAllowMarketBriefAttachment, 
            T.MarketBriefSuccessMessage AS ItemProductDetail_MarketBriefSuccessMessage, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemProductDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemRelatedItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView145()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemRelatedItems", @"
    SELECT VALUE -- Constructing ItemRelatedItems
        [DomainModels.ItemRelatedItem](T1.ItemRelatedItem_ItemId, T1.ItemRelatedItem_Id, T1.ItemRelatedItem_RelatedItemId)
    FROM (
        SELECT 
            T.ItemId AS ItemRelatedItem_ItemId, 
            T.Id AS ItemRelatedItem_Id, 
            T.RelatedItemId AS ItemRelatedItem_RelatedItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemRelatedItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Items
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView146()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(18145);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Items\r\n        [DomainModels.Item](T1.Item_It");
            viewString.Append("emId, T1.Item_ItemCode, T1.Item_EstimateId, T1.Item_InvoiceId, T1.Item_Title, T1");
            viewString.Append(".Item_Tax1, T1.Item_Tax2, T1.Item_Tax3, T1.Item_CreatedBy, T1.Item_StatusId, T1.");
            viewString.Append("Item_ItemCreationDateTime, T1.Item_ItemLastUpdateDateTime, T1.Item_IsMultipleQty");
            viewString.Append(", T1.Item_RunOnQty, T1.Item_RunonCostCentreProfit, T1.Item_RunonBaseCharge, T1.I");
            viewString.Append("tem_RunOnMarkUpId, T1.Item_RunonPercentageValue, T1.Item_RunOnMarkUpValue, T1.It");
            viewString.Append("em_RunOnNetTotal, T1.Item_Qty1, T1.Item_Qty2, T1.Item_Qty3, T1.Item_Qty1CostCent");
            viewString.Append("reProfit, T1.Item_Qty2CostCentreProfit, T1.Item_Qty3CostCentreProfit, T1.Item_Qt");
            viewString.Append("y1BaseCharge1, T1.Item_Qty2BaseCharge2, T1.Item_Qty3BaseCharge3, T1.Item_Qty1Mar");
            viewString.Append("kUpId1, T1.Item_Qty2MarkUpId2, T1.Item_Qty3MarkUpId3, T1.Item_Qty1MarkUpPercenta");
            viewString.Append("geValue, T1.Item_Qty2MarkUpPercentageValue, T1.Item_Qty3MarkUpPercentageValue, T");
            viewString.Append("1.Item_Qty1MarkUp1Value, T1.Item_Qty2MarkUp2Value, T1.Item_Qty3MarkUp3Value, T1.");
            viewString.Append("Item_Qty1NetTotal, T1.Item_Qty2NetTotal, T1.Item_Qty3NetTotal, T1.Item_Qty1Tax1V");
            viewString.Append("alue, T1.Item_Qty1Tax2Value, T1.Item_Qty1Tax3Value, T1.Item_Qty1GrossTotal, T1.I");
            viewString.Append("tem_Qty2Tax1Value, T1.Item_Qty2Tax2Value, T1.Item_Qty2Tax3Value, T1.Item_Qty2Gro");
            viewString.Append("ssTotal, T1.Item_Qty3Tax1Value, T1.Item_Qty3Tax2Value, T1.Item_Qty3Tax3Value, T1");
            viewString.Append(".Item_Qty3GrossTotal, T1.Item_IsDescriptionLocked, T1.Item_Qty1Title, T1.Item_Qt");
            viewString.Append("y2Title, T1.Item_Qty3Title, T1.Item_RunonTitle, T1.Item_AdditionalInformation, T");
            viewString.Append("1.Item_Qty2Description, T1.Item_Qty3Description, T1.Item_RunonDescription, T1.It");
            viewString.Append("em_EstimateDescriptionTitle1, T1.Item_EstimateDescriptionTitle2, T1.Item_Estimat");
            viewString.Append("eDescriptionTitle3, T1.Item_EstimateDescriptionTitle4, T1.Item_EstimateDescripti");
            viewString.Append("onTitle5, T1.Item_EstimateDescriptionTitle6, T1.Item_EstimateDescriptionTitle7, ");
            viewString.Append("T1.Item_EstimateDescriptionTitle8, T1.Item_EstimateDescriptionTitle9, T1.Item_Es");
            viewString.Append("timateDescriptionTitle10, T1.Item_EstimateDescription1, T1.Item_EstimateDescript");
            viewString.Append("ion2, T1.Item_EstimateDescription3, T1.Item_EstimateDescription4, T1.Item_Estima");
            viewString.Append("teDescription5, T1.Item_EstimateDescription6, T1.Item_EstimateDescription7, T1.I");
            viewString.Append("tem_EstimateDescription8, T1.Item_EstimateDescription9, T1.Item_EstimateDescript");
            viewString.Append("ion10, T1.Item_JobDescriptionTitle1, T1.Item_JobDescriptionTitle2, T1.Item_JobDe");
            viewString.Append("scriptionTitle3, T1.Item_JobDescriptionTitle4, T1.Item_JobDescriptionTitle5, T1.");
            viewString.Append("Item_JobDescriptionTitle6, T1.Item_JobDescriptionTitle7, T1.Item_JobDescriptionT");
            viewString.Append("itle8, T1.Item_JobDescriptionTitle9, T1.Item_JobDescriptionTitle10, T1.Item_JobD");
            viewString.Append("escription1, T1.Item_JobDescription2, T1.Item_JobDescription3, T1.Item_JobDescri");
            viewString.Append("ption4, T1.Item_JobDescription5, T1.Item_JobDescription6, T1.Item_JobDescription");
            viewString.Append("7, T1.Item_JobDescription8, T1.Item_JobDescription9, T1.Item_JobDescription10, T");
            viewString.Append("1.Item_IsParagraphDescription, T1.Item_EstimateDescription, T1.Item_JobDescripti");
            viewString.Append("on, T1.Item_InvoiceDescription, T1.Item_JobCode, T1.Item_JobManagerId, T1.Item_J");
            viewString.Append("obEstimatedStartDateTime, T1.Item_JobEstimatedCompletionDateTime, T1.Item_JobCre");
            viewString.Append("ationDateTime, T1.Item_JobProgressedBy, T1.Item_JobSelectedQty, T1.Item_JobStatu");
            viewString.Append("sId, T1.Item_IsJobCardPrinted, T1.Item_IsItemLibraray, T1.Item_ItemLibrarayGroup");
            viewString.Append("Id, T1.Item_PayInFullInvoiceId, T1.Item_IsGroupItem, T1.Item_ItemType, T1.Item_I");
            viewString.Append("sIncludedInPipeLine, T1.Item_IsRunOnQty, T1.Item_CanCopyToEstimate, T1.Item_Flag");
            viewString.Append("Id, T1.Item_CostCenterDescriptions, T1.Item_IsRead, T1.Item_IsScheduled, T1.Item");
            viewString.Append("_IsPaperStatusChanged, T1.Item_IsJobCardCreated, T1.Item_IsAttachmentAdded, T1.I");
            viewString.Append("tem_IsItemValueChanged, T1.Item_DepartmentId, T1.Item_ItemNotes, T1.Item_Updated");
            viewString.Append("By, T1.Item_LastUpdate, T1.Item_JobActualStartDateTime, T1.Item_JobActualComplet");
            viewString.Append("ionDateTime, T1.Item_IsJobCostingDone, T1.Item_ProductName, T1.Item_ImagePath, T");
            viewString.Append("1.Item_ThumbnailPath, T1.Item_ProductSpecification, T1.Item_CompleteSpecificatio");
            viewString.Append("n, T1.Item_DesignGuideLines, T1.Item_ProductCode, T1.Item_IsPublished, T1.Item_C");
            viewString.Append("ompanyId, T1.Item_PriceDiscountPercentage, T1.Item_IsEnabled, T1.Item_IsSpecialI");
            viewString.Append("tem, T1.Item_IconPath, T1.Item_IsPopular, T1.Item_IsFeatured, T1.Item_IsPromotio");
            viewString.Append("nal, T1.Item_TipsAndHints, T1.Item_FactSheetFileName, T1.Item_IsArchived, T1.Ite");
            viewString.Append("m_NominalCodeId, T1.Item_RefItemId, T1.Item_TemplateId, T1.Item_WebDescription, ");
            viewString.Append("T1.Item_ItemTypeId, T1.Item_IsOrderedItem, T1.Item_JobCardPrintedBy, T1.Item_Job");
            viewString.Append("CardLastPrintedDate, T1.Item_EstimateProductionTime, T1.Item_SortOrder, T1.Item_");
            viewString.Append("LayoutGridContent, T1.Item_HowToVideoContent, T1.Item_File1, T1.Item_File2, T1.I");
            viewString.Append("tem_File3, T1.Item_File4, T1.Item_File5, T1.Item_GridImage, T1.Item_IsQtyRanged,");
            viewString.Append(" T1.Item_CostCentreProfitBroker, T1.Item_BaseChargeBroker, T1.Item_MarkUpValueBr");
            viewString.Append("oker, T1.Item_NetTotalBroker, T1.Item_TaxValueBroker, T1.Item_GrossTotalBroker, ");
            viewString.Append("T1.Item_IsCmyk, T1.Item_SupplierId, T1.Item_IsStockControl, T1.Item_IsUploadImag");
            viewString.Append("e, T1.Item_IsMarketingBrief, T1.Item_SupplierId2, T1.Item_FinishedGoodId, T1.Ite");
            viewString.Append("m_IsFinishedGoodPrivate, T1.Item_MetaKeywords, T1.Item_MetaDescription, T1.Item_");
            viewString.Append("MetaTitle, T1.Item_IsTemplateDesignMode, T1.Item_XeroAccessCode, T1.Item_Default");
            viewString.Append("ItemTax, T1.Item_OrganisationId, T1.Item_PackagingWeight, T1.Item_IsVdpProduct, ");
            viewString.Append("T1.Item_ProductType, T1.Item_TemplateType, T1.Item_DesignerCategoryId, T1.Item_S");
            viewString.Append("calar, T1.Item_ZoomFactor, T1.Item_isAddCropMarks, T1.Item_ItemLength, T1.Item_I");
            viewString.Append("temWidth, T1.Item_ItemHeight, T1.Item_ItemWeight, T1.Item_printCropMarks, T1.Ite");
            viewString.Append("m_drawBleedArea, T1.Item_isMultipagePDF, T1.Item_drawWaterMarkTxt, T1.Item_allow");
            viewString.Append("PdfDownload, T1.Item_allowImageDownload, T1.Item_SmartFormId, T1.Item_IsDigitalD");
            viewString.Append("ownload, T1.Item_IsRealStateProduct, T1.Item_ProductDisplayOptions, T1.Item_Disc");
            viewString.Append("ountVoucherID)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId AS Item_ItemId");
            viewString.Append(", \r\n            T.ItemCode AS Item_ItemCode, \r\n            T.EstimateId AS Item_");
            viewString.Append("EstimateId, \r\n            T.InvoiceId AS Item_InvoiceId, \r\n            T.Title A");
            viewString.Append("S Item_Title, \r\n            T.Tax1 AS Item_Tax1, \r\n            T.Tax2 AS Item_Ta");
            viewString.Append("x2, \r\n            T.Tax3 AS Item_Tax3, \r\n            T.CreatedBy AS Item_Created");
            viewString.Append("By, \r\n            T.Status AS Item_StatusId, \r\n            T.ItemCreationDateTim");
            viewString.Append("e AS Item_ItemCreationDateTime, \r\n            T.ItemLastUpdateDateTime AS Item_I");
            viewString.Append("temLastUpdateDateTime, \r\n            T.IsMultipleQty AS Item_IsMultipleQty, \r\n  ");
            viewString.Append("          T.RunOnQty AS Item_RunOnQty, \r\n            T.RunonCostCentreProfit AS ");
            viewString.Append("Item_RunonCostCentreProfit, \r\n            T.RunonBaseCharge AS Item_RunonBaseCha");
            viewString.Append("rge, \r\n            T.RunOnMarkUpID AS Item_RunOnMarkUpId, \r\n            T.RunonP");
            viewString.Append("ercentageValue AS Item_RunonPercentageValue, \r\n            T.RunOnMarkUpValue AS");
            viewString.Append(" Item_RunOnMarkUpValue, \r\n            T.RunOnNetTotal AS Item_RunOnNetTotal, \r\n ");
            viewString.Append("           T.Qty1 AS Item_Qty1, \r\n            T.Qty2 AS Item_Qty2, \r\n           ");
            viewString.Append(" T.Qty3 AS Item_Qty3, \r\n            T.Qty1CostCentreProfit AS Item_Qty1CostCentr");
            viewString.Append("eProfit, \r\n            T.Qty2CostCentreProfit AS Item_Qty2CostCentreProfit, \r\n  ");
            viewString.Append("          T.Qty3CostCentreProfit AS Item_Qty3CostCentreProfit, \r\n            T.Q");
            viewString.Append("ty1BaseCharge1 AS Item_Qty1BaseCharge1, \r\n            T.Qty2BaseCharge2 AS Item_");
            viewString.Append("Qty2BaseCharge2, \r\n            T.Qty3BaseCharge3 AS Item_Qty3BaseCharge3, \r\n    ");
            viewString.Append("        T.Qty1MarkUpID1 AS Item_Qty1MarkUpId1, \r\n            T.Qty2MarkUpID2 AS ");
            viewString.Append("Item_Qty2MarkUpId2, \r\n            T.Qty3MarkUpID3 AS Item_Qty3MarkUpId3, \r\n     ");
            viewString.Append("       T.Qty1MarkUpPercentageValue AS Item_Qty1MarkUpPercentageValue, \r\n        ");
            viewString.Append("    T.Qty2MarkUpPercentageValue AS Item_Qty2MarkUpPercentageValue, \r\n           ");
            viewString.Append(" T.Qty3MarkUpPercentageValue AS Item_Qty3MarkUpPercentageValue, \r\n            T.");
            viewString.Append("Qty1MarkUp1Value AS Item_Qty1MarkUp1Value, \r\n            T.Qty2MarkUp2Value AS I");
            viewString.Append("tem_Qty2MarkUp2Value, \r\n            T.Qty3MarkUp3Value AS Item_Qty3MarkUp3Value,");
            viewString.Append(" \r\n            T.Qty1NetTotal AS Item_Qty1NetTotal, \r\n            T.Qty2NetTotal");
            viewString.Append(" AS Item_Qty2NetTotal, \r\n            T.Qty3NetTotal AS Item_Qty3NetTotal, \r\n    ");
            viewString.Append("        T.Qty1Tax1Value AS Item_Qty1Tax1Value, \r\n            T.Qty1Tax2Value AS ");
            viewString.Append("Item_Qty1Tax2Value, \r\n            T.Qty1Tax3Value AS Item_Qty1Tax3Value, \r\n     ");
            viewString.Append("       T.Qty1GrossTotal AS Item_Qty1GrossTotal, \r\n            T.Qty2Tax1Value AS");
            viewString.Append(" Item_Qty2Tax1Value, \r\n            T.Qty2Tax2Value AS Item_Qty2Tax2Value, \r\n    ");
            viewString.Append("        T.Qty2Tax3Value AS Item_Qty2Tax3Value, \r\n            T.Qty2grossTotal AS");
            viewString.Append(" Item_Qty2GrossTotal, \r\n            T.Qty3Tax1Value AS Item_Qty3Tax1Value, \r\n   ");
            viewString.Append("         T.Qty3Tax2Value AS Item_Qty3Tax2Value, \r\n            T.Qty3Tax3Value AS");
            viewString.Append(" Item_Qty3Tax3Value, \r\n            T.Qty3GrossTotal AS Item_Qty3GrossTotal, \r\n  ");
            viewString.Append("          T.IsDescriptionLocked AS Item_IsDescriptionLocked, \r\n            T.qty");
            viewString.Append("1title AS Item_Qty1Title, \r\n            T.qty2title AS Item_Qty2Title, \r\n       ");
            viewString.Append("     T.qty3Title AS Item_Qty3Title, \r\n            T.RunonTitle AS Item_RunonTitl");
            viewString.Append("e, \r\n            T.AdditionalInformation AS Item_AdditionalInformation, \r\n      ");
            viewString.Append("      T.qty2Description AS Item_Qty2Description, \r\n            T.qty3Description");
            viewString.Append(" AS Item_Qty3Description, \r\n            T.RunonDescription AS Item_RunonDescript");
            viewString.Append("ion, \r\n            T.EstimateDescriptionTitle1 AS Item_EstimateDescriptionTitle1");
            viewString.Append(", \r\n            T.EstimateDescriptionTitle2 AS Item_EstimateDescriptionTitle2, \r");
            viewString.Append("\n            T.EstimateDescriptionTitle3 AS Item_EstimateDescriptionTitle3, \r\n  ");
            viewString.Append("          T.EstimateDescriptionTitle4 AS Item_EstimateDescriptionTitle4, \r\n     ");
            viewString.Append("       T.EstimateDescriptionTitle5 AS Item_EstimateDescriptionTitle5, \r\n        ");
            viewString.Append("    T.EstimateDescriptionTitle6 AS Item_EstimateDescriptionTitle6, \r\n           ");
            viewString.Append(" T.EstimateDescriptionTitle7 AS Item_EstimateDescriptionTitle7, \r\n            T.");
            viewString.Append("EstimateDescriptionTitle8 AS Item_EstimateDescriptionTitle8, \r\n            T.Est");
            viewString.Append("imateDescriptionTitle9 AS Item_EstimateDescriptionTitle9, \r\n            T.Estima");
            viewString.Append("teDescriptionTitle10 AS Item_EstimateDescriptionTitle10, \r\n            T.Estimat");
            viewString.Append("eDescription1 AS Item_EstimateDescription1, \r\n            T.EstimateDescription2");
            viewString.Append(" AS Item_EstimateDescription2, \r\n            T.EstimateDescription3 AS Item_Esti");
            viewString.Append("mateDescription3, \r\n            T.EstimateDescription4 AS Item_EstimateDescripti");
            viewString.Append("on4, \r\n            T.EstimateDescription5 AS Item_EstimateDescription5, \r\n      ");
            viewString.Append("      T.EstimateDescription6 AS Item_EstimateDescription6, \r\n            T.Estim");
            viewString.Append("ateDescription7 AS Item_EstimateDescription7, \r\n            T.EstimateDescriptio");
            viewString.Append("n8 AS Item_EstimateDescription8, \r\n            T.EstimateDescription9 AS Item_Es");
            viewString.Append("timateDescription9, \r\n            T.EstimateDescription10 AS Item_EstimateDescri");
            viewString.Append("ption10, \r\n            T.JobDescriptionTitle1 AS Item_JobDescriptionTitle1, \r\n  ");
            viewString.Append("          T.JobDescriptionTitle2 AS Item_JobDescriptionTitle2, \r\n            T.J");
            viewString.Append("obDescriptionTitle3 AS Item_JobDescriptionTitle3, \r\n            T.JobDescription");
            viewString.Append("Title4 AS Item_JobDescriptionTitle4, \r\n            T.JobDescriptionTitle5 AS Ite");
            viewString.Append("m_JobDescriptionTitle5, \r\n            T.JobDescriptionTitle6 AS Item_JobDescript");
            viewString.Append("ionTitle6, \r\n            T.JobDescriptionTitle7 AS Item_JobDescriptionTitle7, \r\n");
            viewString.Append("            T.JobDescriptionTitle8 AS Item_JobDescriptionTitle8, \r\n            T");
            viewString.Append(".JobDescriptionTitle9 AS Item_JobDescriptionTitle9, \r\n            T.JobDescripti");
            viewString.Append("onTitle10 AS Item_JobDescriptionTitle10, \r\n            T.JobDescription1 AS Item");
            viewString.Append("_JobDescription1, \r\n            T.JobDescription2 AS Item_JobDescription2, \r\n   ");
            viewString.Append("         T.JobDescription3 AS Item_JobDescription3, \r\n            T.JobDescripti");
            viewString.Append("on4 AS Item_JobDescription4, \r\n            T.JobDescription5 AS Item_JobDescript");
            viewString.Append("ion5, \r\n            T.JobDescription6 AS Item_JobDescription6, \r\n            T.J");
            viewString.Append("obDescription7 AS Item_JobDescription7, \r\n            T.JobDescription8 AS Item_");
            viewString.Append("JobDescription8, \r\n            T.JobDescription9 AS Item_JobDescription9, \r\n    ");
            viewString.Append("        T.JobDescription10 AS Item_JobDescription10, \r\n            T.IsParagraph");
            viewString.Append("Description AS Item_IsParagraphDescription, \r\n            T.EstimateDescription ");
            viewString.Append("AS Item_EstimateDescription, \r\n            T.JobDescription AS Item_JobDescripti");
            viewString.Append("on, \r\n            T.InvoiceDescription AS Item_InvoiceDescription, \r\n           ");
            viewString.Append(" T.JobCode AS Item_JobCode, \r\n            T.JobManagerId AS Item_JobManagerId, \r");
            viewString.Append("\n            T.JobEstimatedStartDateTime AS Item_JobEstimatedStartDateTime, \r\n  ");
            viewString.Append("          T.JobEstimatedCompletionDateTime AS Item_JobEstimatedCompletionDateTim");
            viewString.Append("e, \r\n            T.JobCreationDateTime AS Item_JobCreationDateTime, \r\n          ");
            viewString.Append("  T.JobProgressedBy AS Item_JobProgressedBy, \r\n            T.jobSelectedQty AS I");
            viewString.Append("tem_JobSelectedQty, \r\n            T.JobStatusId AS Item_JobStatusId, \r\n         ");
            viewString.Append("   T.IsJobCardPrinted AS Item_IsJobCardPrinted, \r\n            T.IsItemLibraray A");
            viewString.Append("S Item_IsItemLibraray, \r\n            T.ItemLibrarayGroupId AS Item_ItemLibrarayG");
            viewString.Append("roupId, \r\n            T.PayInFullInvoiceId AS Item_PayInFullInvoiceId, \r\n       ");
            viewString.Append("     T.IsGroupItem AS Item_IsGroupItem, \r\n            T.ItemType AS Item_ItemTyp");
            viewString.Append("e, \r\n            T.IsIncludedInPipeLine AS Item_IsIncludedInPipeLine, \r\n        ");
            viewString.Append("    T.IsRunOnQty AS Item_IsRunOnQty, \r\n            T.CanCopyToEstimate AS Item_C");
            viewString.Append("anCopyToEstimate, \r\n            T.FlagId AS Item_FlagId, \r\n            T.CostCen");
            viewString.Append("terDescriptions AS Item_CostCenterDescriptions, \r\n            T.IsRead AS Item_I");
            viewString.Append("sRead, \r\n            T.IsScheduled AS Item_IsScheduled, \r\n            T.IsPaperS");
            viewString.Append("tatusChanged AS Item_IsPaperStatusChanged, \r\n            T.IsJobCardCreated AS I");
            viewString.Append("tem_IsJobCardCreated, \r\n            T.IsAttachmentAdded AS Item_IsAttachmentAdde");
            viewString.Append("d, \r\n            T.IsItemValueChanged AS Item_IsItemValueChanged, \r\n            ");
            viewString.Append("T.DepartmentId AS Item_DepartmentId, \r\n            T.ItemNotes AS Item_ItemNotes");
            viewString.Append(", \r\n            T.UpdatedBy AS Item_UpdatedBy, \r\n            T.LastUpdate AS Ite");
            viewString.Append("m_LastUpdate, \r\n            T.JobActualStartDateTime AS Item_JobActualStartDateT");
            viewString.Append("ime, \r\n            T.JobActualCompletionDateTime AS Item_JobActualCompletionDate");
            viewString.Append("Time, \r\n            T.IsJobCostingDone AS Item_IsJobCostingDone, \r\n            T");
            viewString.Append(".ProductName AS Item_ProductName, \r\n            T.ImagePath AS Item_ImagePath, \r");
            viewString.Append("\n            T.ThumbnailPath AS Item_ThumbnailPath, \r\n            T.ProductSpeci");
            viewString.Append("fication AS Item_ProductSpecification, \r\n            T.CompleteSpecification AS ");
            viewString.Append("Item_CompleteSpecification, \r\n            T.DesignGuideLines AS Item_DesignGuide");
            viewString.Append("Lines, \r\n            T.ProductCode AS Item_ProductCode, \r\n            T.IsPublis");
            viewString.Append("hed AS Item_IsPublished, \r\n            T.CompanyId AS Item_CompanyId, \r\n        ");
            viewString.Append("    T.PriceDiscountPercentage AS Item_PriceDiscountPercentage, \r\n            T.I");
            viewString.Append("sEnabled AS Item_IsEnabled, \r\n            T.IsSpecialItem AS Item_IsSpecialItem,");
            viewString.Append(" \r\n            T.IconPath AS Item_IconPath, \r\n            T.IsPopular AS Item_Is");
            viewString.Append("Popular, \r\n            T.IsFeatured AS Item_IsFeatured, \r\n            T.IsPromot");
            viewString.Append("ional AS Item_IsPromotional, \r\n            T.TipsAndHints AS Item_TipsAndHints, ");
            viewString.Append("\r\n            T.FactSheetFileName AS Item_FactSheetFileName, \r\n            T.IsA");
            viewString.Append("rchived AS Item_IsArchived, \r\n            T.NominalCodeId AS Item_NominalCodeId,");
            viewString.Append(" \r\n            CAST(T.RefItemId AS [Edm.Int32]) AS Item_RefItemId, \r\n           ");
            viewString.Append(" T.TemplateId AS Item_TemplateId, \r\n            T.WebDescription AS Item_WebDesc");
            viewString.Append("ription, \r\n            T.ItemTypeId AS Item_ItemTypeId, \r\n            T.IsOrdere");
            viewString.Append("dItem AS Item_IsOrderedItem, \r\n            T.JobCardPrintedBy AS Item_JobCardPri");
            viewString.Append("ntedBy, \r\n            T.JobCardLastPrintedDate AS Item_JobCardLastPrintedDate, \r");
            viewString.Append("\n            T.EstimateProductionTime AS Item_EstimateProductionTime, \r\n        ");
            viewString.Append("    T.SortOrder AS Item_SortOrder, \r\n            T.LayoutGridContent AS Item_Lay");
            viewString.Append("outGridContent, \r\n            T.HowToVideoContent AS Item_HowToVideoContent, \r\n ");
            viewString.Append("           T.file1 AS Item_File1, \r\n            T.file2 AS Item_File2, \r\n       ");
            viewString.Append("     T.file3 AS Item_File3, \r\n            T.file4 AS Item_File4, \r\n            T");
            viewString.Append(".file5 AS Item_File5, \r\n            T.GridImage AS Item_GridImage, \r\n           ");
            viewString.Append(" T.isQtyRanged AS Item_IsQtyRanged, \r\n            T.CostCentreProfitBroker AS It");
            viewString.Append("em_CostCentreProfitBroker, \r\n            T.BaseChargeBroker AS Item_BaseChargeBr");
            viewString.Append("oker, \r\n            T.MarkUpValueBroker AS Item_MarkUpValueBroker, \r\n           ");
            viewString.Append(" T.NetTotalBroker AS Item_NetTotalBroker, \r\n            T.TaxValueBroker AS Item");
            viewString.Append("_TaxValueBroker, \r\n            T.GrossTotalBroker AS Item_GrossTotalBroker, \r\n  ");
            viewString.Append("          T.isCMYK AS Item_IsCmyk, \r\n            T.SupplierId AS Item_SupplierId");
            viewString.Append(", \r\n            T.isStockControl AS Item_IsStockControl, \r\n            T.isUploa");
            viewString.Append("dImage AS Item_IsUploadImage, \r\n            T.isMarketingBrief AS Item_IsMarketi");
            viewString.Append("ngBrief, \r\n            T.SupplierID2 AS Item_SupplierId2, \r\n            T.Finish");
            viewString.Append("edGoodId AS Item_FinishedGoodId, \r\n            T.IsFinishedGoodPrivate AS Item_I");
            viewString.Append("sFinishedGoodPrivate, \r\n            T.MetaKeywords AS Item_MetaKeywords, \r\n     ");
            viewString.Append("       T.MetaDescription AS Item_MetaDescription, \r\n            T.MetaTitle AS I");
            viewString.Append("tem_MetaTitle, \r\n            T.isTemplateDesignMode AS Item_IsTemplateDesignMode");
            viewString.Append(", \r\n            T.XeroAccessCode AS Item_XeroAccessCode, \r\n            T.Default");
            viewString.Append("ItemTax AS Item_DefaultItemTax, \r\n            T.OrganisationId AS Item_Organisat");
            viewString.Append("ionId, \r\n            T.PackagingWeight AS Item_PackagingWeight, \r\n            T.");
            viewString.Append("IsVDPProduct AS Item_IsVdpProduct, \r\n            T.ProductType AS Item_ProductTy");
            viewString.Append("pe, \r\n            T.TemplateType AS Item_TemplateType, \r\n            T.DesignerC");
            viewString.Append("ategoryId AS Item_DesignerCategoryId, \r\n            T.Scalar AS Item_Scalar, \r\n ");
            viewString.Append("           T.ZoomFactor AS Item_ZoomFactor, \r\n            T.isAddCropMarks AS It");
            viewString.Append("em_isAddCropMarks, \r\n            T.ItemLength AS Item_ItemLength, \r\n            ");
            viewString.Append("T.ItemWidth AS Item_ItemWidth, \r\n            T.ItemHeight AS Item_ItemHeight, \r\n");
            viewString.Append("            T.ItemWeight AS Item_ItemWeight, \r\n            T.printCropMarks AS I");
            viewString.Append("tem_printCropMarks, \r\n            T.drawBleedArea AS Item_drawBleedArea, \r\n     ");
            viewString.Append("       T.isMultipagePDF AS Item_isMultipagePDF, \r\n            T.drawWaterMarkTxt");
            viewString.Append(" AS Item_drawWaterMarkTxt, \r\n            T.allowPdfDownload AS Item_allowPdfDown");
            viewString.Append("load, \r\n            T.allowImageDownload AS Item_allowImageDownload, \r\n         ");
            viewString.Append("   T.SmartFormId AS Item_SmartFormId, \r\n            T.IsDigitalDownload AS Item_");
            viewString.Append("IsDigitalDownload, \r\n            T.IsRealStateProduct AS Item_IsRealStateProduct");
            viewString.Append(", \r\n            T.ProductDisplayOptions AS Item_ProductDisplayOptions, \r\n       ");
            viewString.Append("     T.DiscountVoucherID AS Item_DiscountVoucherID, \r\n            True AS _from0");
            viewString.Append("\r\n        FROM DomainModelsStoreContainer.Items AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Items", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemSections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView147()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(16132);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemSections\r\n        [DomainModels.ItemSecti");
            viewString.Append("on](T1.ItemSection_ItemSectionId, T1.ItemSection_SectionNo, T1.ItemSection_Secti");
            viewString.Append("onName, T1.ItemSection_IsMainSection, T1.ItemSection_IsMultipleQty, T1.ItemSecti");
            viewString.Append("on_IsRunOnQty, T1.ItemSection_ItemId, T1.ItemSection_Qty1, T1.ItemSection_Qty2, ");
            viewString.Append("T1.ItemSection_Qty3, T1.ItemSection_Qty4, T1.ItemSection_Qty5, T1.ItemSection_Qt");
            viewString.Append("y1Profit, T1.ItemSection_Qty2Profit, T1.ItemSection_Qty3Profit, T1.ItemSection_Q");
            viewString.Append("ty4Profit, T1.ItemSection_Qty5Profit, T1.ItemSection_BaseCharge1, T1.ItemSection");
            viewString.Append("_BaseCharge2, T1.ItemSection_Basecharge3, T1.ItemSection_BaseCharge4, T1.ItemSec");
            viewString.Append("tion_BaseCharge5, T1.ItemSection_RunOnQty, T1.ItemSection_RunOnBaseCharge, T1.It");
            viewString.Append("emSection_RunonProfit, T1.ItemSection_SectionSizeId, T1.ItemSection_IsSectionSiz");
            viewString.Append("eCustom, T1.ItemSection_SectionSizeHeight, T1.ItemSection_SectionSizeWidth, T1.I");
            viewString.Append("temSection_ItemSizeId, T1.ItemSection_IsItemSizeCustom, T1.ItemSection_ItemSizeH");
            viewString.Append("eight, T1.ItemSection_ItemSizeWidth, T1.ItemSection_GuillotineId, T1.ItemSection");
            viewString.Append("_IncludeGutter, T1.ItemSection_PressId, T1.ItemSection_FilmId, T1.ItemSection_Pl");
            viewString.Append("ateId, T1.ItemSection_ItemGutterHorizontal, T1.ItemSection_ItemGutterVertical, T");
            viewString.Append("1.ItemSection_IsPressrestrictionApplied, T1.ItemSection_IsDoubleSided, T1.ItemSe");
            viewString.Append("ction_IsWashup, T1.ItemSection_PrintViewLayoutLandScape, T1.ItemSection_PrintVie");
            viewString.Append("wLayoutPortrait, T1.ItemSection_PrintViewLayout, T1.ItemSection_SetupSpoilage, T");
            viewString.Append("1.ItemSection_RunningSpoilage, T1.ItemSection_RunningSpoilageValue, T1.ItemSecti");
            viewString.Append("on_EstimateForWholePacks, T1.ItemSection_IsFirstTrim, T1.ItemSection_IsSecondTri");
            viewString.Append("m, T1.ItemSection_PaperQty, T1.ItemSection_ImpressionQty1, T1.ItemSection_Impres");
            viewString.Append("sionQty2, T1.ItemSection_ImpressionQty3, T1.ItemSection_ImpressionQty4, T1.ItemS");
            viewString.Append("ection_ImpressionQty5, T1.ItemSection_FilmQty, T1.ItemSection_IsFilmSupplied, T1");
            viewString.Append(".ItemSection_IsPlateSupplied, T1.ItemSection_IsPaperSupplied, T1.ItemSection_Was");
            viewString.Append("hupQty, T1.ItemSection_MakeReadyQty, T1.ItemSection_IsPaperCoated, T1.ItemSectio");
            viewString.Append("n_GuillotineFirstCut, T1.ItemSection_GuillotineSecondCut, T1.ItemSection_Guillot");
            viewString.Append("ineCutTime, T1.ItemSection_GuillotineQty1BundlesFirstTrim, T1.ItemSection_Guillo");
            viewString.Append("tineQty2BundlesFirstTrim, T1.ItemSection_GuillotineQty3BundlesFirstTrim, T1.Item");
            viewString.Append("Section_GuillotineQty1BundlesSecondTrim, T1.ItemSection_GuillotineQty2BundlesSec");
            viewString.Append("ondTrim, T1.ItemSection_GuillotineQty3BundlesSecondTrim, T1.ItemSection_Guilloti");
            viewString.Append("neQty1FirstTrimCuts, T1.ItemSection_GuillotineQty2FirstTrimCuts, T1.ItemSection_");
            viewString.Append("GuillotineQty3FirstTrimCuts, T1.ItemSection_GuillotineQty1SecondTrimCuts, T1.Ite");
            viewString.Append("mSection_GuillotineQty2SecondTrimCuts, T1.ItemSection_GuillotineQty3SecondTrimCu");
            viewString.Append("ts, T1.ItemSection_GuillotineQty1TotalsCuts, T1.ItemSection_GuillotineQty2Totals");
            viewString.Append("Cuts, T1.ItemSection_GuillotineQty3TotalsCuts, T1.ItemSection_AdditionalFilmUsed");
            viewString.Append(", T1.ItemSection_AdditionalPlateUsed, T1.ItemSection_IsFilmUsed, T1.ItemSection_");
            viewString.Append("IsPlateUsed, T1.ItemSection_NoofUniqueInks, T1.ItemSection_WizardRunMode, T1.Ite");
            viewString.Append("mSection_OverAllPTV, T1.ItemSection_ItemPTV, T1.ItemSection_Side1Inks, T1.ItemSe");
            viewString.Append("ction_Side2Inks, T1.ItemSection_IsSwingApplied, T1.ItemSection_SectionType, T1.I");
            viewString.Append("temSection_IsMakeReadyUsed, T1.ItemSection_isWorknTurn, T1.ItemSection_isWorkntu");
            viewString.Append("mble, T1.ItemSection_QuestionQueue, T1.ItemSection_StockQueue, T1.ItemSection_In");
            viewString.Append("putQueue, T1.ItemSection_CostCentreQueue, T1.ItemSection_PressSpeed1, T1.ItemSec");
            viewString.Append("tion_PressSpeed2, T1.ItemSection_PressSpeed3, T1.ItemSection_PressSpeed4, T1.Ite");
            viewString.Append("mSection_PressSpeed5, T1.ItemSection_PrintSheetQty1, T1.ItemSection_PrintSheetQt");
            viewString.Append("y2, T1.ItemSection_PrintSheetQty3, T1.ItemSection_PrintSheetQty4, T1.ItemSection");
            viewString.Append("_PrintSheetQty5, T1.ItemSection_PressHourlyCharge, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady1, T1.ItemSection_PrintChargeExMakeReady2, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady3, T1.ItemSection_PrintChargeExMakeReady4, T1.ItemSection_PrintChargeExM");
            viewString.Append("akeReady5, T1.ItemSection_PaperGsm, T1.ItemSection_PaperPackPrice, T1.ItemSectio");
            viewString.Append("n_PTVRows, T1.ItemSection_PTVColoumns, T1.ItemSection_PaperWeight1, T1.ItemSecti");
            viewString.Append("on_PaperWeight2, T1.ItemSection_PaperWeight3, T1.ItemSection_PaperWeight4, T1.It");
            viewString.Append("emSection_PaperWeight5, T1.ItemSection_FinishedItemQty1, T1.ItemSection_Finished");
            viewString.Append("ItemQty2, T1.ItemSection_FinishedItemQty3, T1.ItemSection_FinishedItemQty4, T1.I");
            viewString.Append("temSection_FinishedItemQty5, T1.ItemSection_ProfileId, T1.ItemSection_SelectedPr");
            viewString.Append("essCalculationMethodId, T1.ItemSection_SectionNotes, T1.ItemSection_IsScheduled,");
            viewString.Append(" T1.ItemSection_ImageType, T1.ItemSection_WebClylinderHeight, T1.ItemSection_Web");
            viewString.Append("CylinderWidth, T1.ItemSection_WebCylinderId, T1.ItemSection_WebPaperLengthWithSp");
            viewString.Append(", T1.ItemSection_WebPaperLengthWoSp, T1.ItemSection_WebReelMakereadyQty, T1.Item");
            viewString.Append("Section_WebStockPaperCost, T1.ItemSection_WebSpoilageType, T1.ItemSection_PressP");
            viewString.Append("assesQty, T1.ItemSection_PrintingType, T1.ItemSection_PadsLeafQty, T1.ItemSectio");
            viewString.Append("n_PadsQuantity, T1.ItemSection_LastUpdateDate, T1.ItemSection_LastUpdatedBy, T1.");
            viewString.Append("ItemSection_Qty1MarkUpID, T1.ItemSection_Qty2MarkUpID, T1.ItemSection_Qty3MarkUp");
            viewString.Append("ID, T1.ItemSection_StockItemID1, T1.ItemSection_StockItemID2, T1.ItemSection_Sto");
            viewString.Append("ckItemID3, T1.ItemSection_Side1PlateQty, T1.ItemSection_IsPortrait, T1.ItemSecti");
            viewString.Append("on_Side2PlateQty, T1.ItemSection_InkColorType, T1.ItemSection_PlateInkId, T1.Ite");
            viewString.Append("mSection_SimilarSections, T1.ItemSection_PressIdSide2, T1.ItemSection_PassesSide");
            viewString.Append("1, T1.ItemSection_PassesSide2, T1.ItemSection_ImpressionCoverageSide1, T1.ItemSe");
            viewString.Append("ction_ImpressionCoverageSide2)\r\n    FROM (\r\n        SELECT \r\n            T.ItemS");
            viewString.Append("ectionId AS ItemSection_ItemSectionId, \r\n            T.SectionNo AS ItemSection_");
            viewString.Append("SectionNo, \r\n            T.SectionName AS ItemSection_SectionName, \r\n           ");
            viewString.Append(" T.IsMainSection AS ItemSection_IsMainSection, \r\n            T.IsMultipleQty AS ");
            viewString.Append("ItemSection_IsMultipleQty, \r\n            T.IsRunOnQty AS ItemSection_IsRunOnQty,");
            viewString.Append(" \r\n            T.ItemId AS ItemSection_ItemId, \r\n            T.Qty1 AS ItemSecti");
            viewString.Append("on_Qty1, \r\n            T.Qty2 AS ItemSection_Qty2, \r\n            T.Qty3 AS ItemS");
            viewString.Append("ection_Qty3, \r\n            T.Qty4 AS ItemSection_Qty4, \r\n            T.Qty5 AS I");
            viewString.Append("temSection_Qty5, \r\n            T.Qty1Profit AS ItemSection_Qty1Profit, \r\n       ");
            viewString.Append("     T.Qty2Profit AS ItemSection_Qty2Profit, \r\n            T.Qty3Profit AS ItemS");
            viewString.Append("ection_Qty3Profit, \r\n            T.Qty4Profit AS ItemSection_Qty4Profit, \r\n     ");
            viewString.Append("       T.Qty5Profit AS ItemSection_Qty5Profit, \r\n            T.BaseCharge1 AS It");
            viewString.Append("emSection_BaseCharge1, \r\n            T.BaseCharge2 AS ItemSection_BaseCharge2, \r");
            viewString.Append("\n            T.Basecharge3 AS ItemSection_Basecharge3, \r\n            T.BaseCharg");
            viewString.Append("e4 AS ItemSection_BaseCharge4, \r\n            T.BaseCharge5 AS ItemSection_BaseCh");
            viewString.Append("arge5, \r\n            T.RunOnQty AS ItemSection_RunOnQty, \r\n            T.RunOnBa");
            viewString.Append("seCharge AS ItemSection_RunOnBaseCharge, \r\n            T.RunonProfit AS ItemSect");
            viewString.Append("ion_RunonProfit, \r\n            T.SectionSizeId AS ItemSection_SectionSizeId, \r\n ");
            viewString.Append("           T.IsSectionSizeCustom AS ItemSection_IsSectionSizeCustom, \r\n         ");
            viewString.Append("   T.SectionSizeHeight AS ItemSection_SectionSizeHeight, \r\n            T.Section");
            viewString.Append("SizeWidth AS ItemSection_SectionSizeWidth, \r\n            T.ItemSizeId AS ItemSec");
            viewString.Append("tion_ItemSizeId, \r\n            T.IsItemSizeCustom AS ItemSection_IsItemSizeCusto");
            viewString.Append("m, \r\n            T.ItemSizeHeight AS ItemSection_ItemSizeHeight, \r\n            T");
            viewString.Append(".ItemSizeWidth AS ItemSection_ItemSizeWidth, \r\n            T.GuillotineId AS Ite");
            viewString.Append("mSection_GuillotineId, \r\n            T.IncludeGutter AS ItemSection_IncludeGutte");
            viewString.Append("r, \r\n            T.PressId AS ItemSection_PressId, \r\n            T.FilmId AS Ite");
            viewString.Append("mSection_FilmId, \r\n            T.PlateId AS ItemSection_PlateId, \r\n            T");
            viewString.Append(".ItemGutterHorizontal AS ItemSection_ItemGutterHorizontal, \r\n            T.ItemG");
            viewString.Append("utterVertical AS ItemSection_ItemGutterVertical, \r\n            T.IsPressrestrict");
            viewString.Append("ionApplied AS ItemSection_IsPressrestrictionApplied, \r\n            T.IsDoubleSid");
            viewString.Append("ed AS ItemSection_IsDoubleSided, \r\n            T.IsWashup AS ItemSection_IsWashu");
            viewString.Append("p, \r\n            T.PrintViewLayoutLandScape AS ItemSection_PrintViewLayoutLandSc");
            viewString.Append("ape, \r\n            T.PrintViewLayoutPortrait AS ItemSection_PrintViewLayoutPortr");
            viewString.Append("ait, \r\n            T.PrintViewLayout AS ItemSection_PrintViewLayout, \r\n         ");
            viewString.Append("   T.SetupSpoilage AS ItemSection_SetupSpoilage, \r\n            T.RunningSpoilage");
            viewString.Append(" AS ItemSection_RunningSpoilage, \r\n            T.RunningSpoilageValue AS ItemSec");
            viewString.Append("tion_RunningSpoilageValue, \r\n            T.EstimateForWholePacks AS ItemSection_");
            viewString.Append("EstimateForWholePacks, \r\n            T.IsFirstTrim AS ItemSection_IsFirstTrim, \r");
            viewString.Append("\n            T.IsSecondTrim AS ItemSection_IsSecondTrim, \r\n            T.PaperQt");
            viewString.Append("y AS ItemSection_PaperQty, \r\n            T.ImpressionQty1 AS ItemSection_Impress");
            viewString.Append("ionQty1, \r\n            T.ImpressionQty2 AS ItemSection_ImpressionQty2, \r\n       ");
            viewString.Append("     T.ImpressionQty3 AS ItemSection_ImpressionQty3, \r\n            T.ImpressionQ");
            viewString.Append("ty4 AS ItemSection_ImpressionQty4, \r\n            T.ImpressionQty5 AS ItemSection");
            viewString.Append("_ImpressionQty5, \r\n            T.FilmQty AS ItemSection_FilmQty, \r\n            T");
            viewString.Append(".IsFilmSupplied AS ItemSection_IsFilmSupplied, \r\n            T.IsPlateSupplied A");
            viewString.Append("S ItemSection_IsPlateSupplied, \r\n            T.IsPaperSupplied AS ItemSection_Is");
            viewString.Append("PaperSupplied, \r\n            T.WashupQty AS ItemSection_WashupQty, \r\n           ");
            viewString.Append(" T.MakeReadyQty AS ItemSection_MakeReadyQty, \r\n            T.IsPaperCoated AS It");
            viewString.Append("emSection_IsPaperCoated, \r\n            T.GuillotineFirstCut AS ItemSection_Guill");
            viewString.Append("otineFirstCut, \r\n            T.GuillotineSecondCut AS ItemSection_GuillotineSeco");
            viewString.Append("ndCut, \r\n            T.GuillotineCutTime AS ItemSection_GuillotineCutTime, \r\n   ");
            viewString.Append("         T.GuillotineQty1BundlesFirstTrim AS ItemSection_GuillotineQty1BundlesFi");
            viewString.Append("rstTrim, \r\n            T.GuillotineQty2BundlesFirstTrim AS ItemSection_Guillotin");
            viewString.Append("eQty2BundlesFirstTrim, \r\n            T.GuillotineQty3BundlesFirstTrim AS ItemSec");
            viewString.Append("tion_GuillotineQty3BundlesFirstTrim, \r\n            T.GuillotineQty1BundlesSecond");
            viewString.Append("Trim AS ItemSection_GuillotineQty1BundlesSecondTrim, \r\n            T.GuillotineQ");
            viewString.Append("ty2BundlesSecondTrim AS ItemSection_GuillotineQty2BundlesSecondTrim, \r\n         ");
            viewString.Append("   T.GuillotineQty3BundlesSecondTrim AS ItemSection_GuillotineQty3BundlesSecondT");
            viewString.Append("rim, \r\n            T.GuillotineQty1FirstTrimCuts AS ItemSection_GuillotineQty1Fi");
            viewString.Append("rstTrimCuts, \r\n            T.GuillotineQty2FirstTrimCuts AS ItemSection_Guilloti");
            viewString.Append("neQty2FirstTrimCuts, \r\n            T.GuillotineQty3FirstTrimCuts AS ItemSection_");
            viewString.Append("GuillotineQty3FirstTrimCuts, \r\n            T.GuillotineQty1SecondTrimCuts AS Ite");
            viewString.Append("mSection_GuillotineQty1SecondTrimCuts, \r\n            T.GuillotineQty2SecondTrimC");
            viewString.Append("uts AS ItemSection_GuillotineQty2SecondTrimCuts, \r\n            T.GuillotineQty3S");
            viewString.Append("econdTrimCuts AS ItemSection_GuillotineQty3SecondTrimCuts, \r\n            T.Guill");
            viewString.Append("otineQty1TotalsCuts AS ItemSection_GuillotineQty1TotalsCuts, \r\n            T.Gui");
            viewString.Append("llotineQty2TotalsCuts AS ItemSection_GuillotineQty2TotalsCuts, \r\n            T.G");
            viewString.Append("uillotineQty3TotalsCuts AS ItemSection_GuillotineQty3TotalsCuts, \r\n            T");
            viewString.Append(".AdditionalFilmUsed AS ItemSection_AdditionalFilmUsed, \r\n            T.Additiona");
            viewString.Append("lPlateUsed AS ItemSection_AdditionalPlateUsed, \r\n            T.IsFilmUsed AS Ite");
            viewString.Append("mSection_IsFilmUsed, \r\n            T.IsPlateUsed AS ItemSection_IsPlateUsed, \r\n ");
            viewString.Append("           T.NoofUniqueInks AS ItemSection_NoofUniqueInks, \r\n            T.Wizar");
            viewString.Append("dRunMode AS ItemSection_WizardRunMode, \r\n            T.OverAllPTV AS ItemSection");
            viewString.Append("_OverAllPTV, \r\n            T.ItemPTV AS ItemSection_ItemPTV, \r\n            T.Sid");
            viewString.Append("e1Inks AS ItemSection_Side1Inks, \r\n            T.Side2Inks AS ItemSection_Side2I");
            viewString.Append("nks, \r\n            T.IsSwingApplied AS ItemSection_IsSwingApplied, \r\n           ");
            viewString.Append(" T.SectionType AS ItemSection_SectionType, \r\n            T.IsMakeReadyUsed AS It");
            viewString.Append("emSection_IsMakeReadyUsed, \r\n            T.isWorknTurn AS ItemSection_isWorknTur");
            viewString.Append("n, \r\n            T.isWorkntumble AS ItemSection_isWorkntumble, \r\n            T.Q");
            viewString.Append("uestionQueue AS ItemSection_QuestionQueue, \r\n            T.StockQueue AS ItemSec");
            viewString.Append("tion_StockQueue, \r\n            T.InputQueue AS ItemSection_InputQueue, \r\n       ");
            viewString.Append("     T.CostCentreQueue AS ItemSection_CostCentreQueue, \r\n            T.PressSpee");
            viewString.Append("d1 AS ItemSection_PressSpeed1, \r\n            T.PressSpeed2 AS ItemSection_PressS");
            viewString.Append("peed2, \r\n            T.PressSpeed3 AS ItemSection_PressSpeed3, \r\n            T.P");
            viewString.Append("ressSpeed4 AS ItemSection_PressSpeed4, \r\n            T.PressSpeed5 AS ItemSectio");
            viewString.Append("n_PressSpeed5, \r\n            T.PrintSheetQty1 AS ItemSection_PrintSheetQty1, \r\n ");
            viewString.Append("           T.PrintSheetQty2 AS ItemSection_PrintSheetQty2, \r\n            T.Print");
            viewString.Append("SheetQty3 AS ItemSection_PrintSheetQty3, \r\n            T.PrintSheetQty4 AS ItemS");
            viewString.Append("ection_PrintSheetQty4, \r\n            T.PrintSheetQty5 AS ItemSection_PrintSheetQ");
            viewString.Append("ty5, \r\n            T.PressHourlyCharge AS ItemSection_PressHourlyCharge, \r\n     ");
            viewString.Append("       T.PrintChargeExMakeReady1 AS ItemSection_PrintChargeExMakeReady1, \r\n     ");
            viewString.Append("       T.PrintChargeExMakeReady2 AS ItemSection_PrintChargeExMakeReady2, \r\n     ");
            viewString.Append("       T.PrintChargeExMakeReady3 AS ItemSection_PrintChargeExMakeReady3, \r\n     ");
            viewString.Append("       T.PrintChargeExMakeReady4 AS ItemSection_PrintChargeExMakeReady4, \r\n     ");
            viewString.Append("       T.PrintChargeExMakeReady5 AS ItemSection_PrintChargeExMakeReady5, \r\n     ");
            viewString.Append("       T.PaperGsm AS ItemSection_PaperGsm, \r\n            T.PaperPackPrice AS Ite");
            viewString.Append("mSection_PaperPackPrice, \r\n            T.PTVRows AS ItemSection_PTVRows, \r\n     ");
            viewString.Append("       T.PTVColoumns AS ItemSection_PTVColoumns, \r\n            T.PaperWeight1 AS");
            viewString.Append(" ItemSection_PaperWeight1, \r\n            T.PaperWeight2 AS ItemSection_PaperWeig");
            viewString.Append("ht2, \r\n            T.PaperWeight3 AS ItemSection_PaperWeight3, \r\n            T.P");
            viewString.Append("aperWeight4 AS ItemSection_PaperWeight4, \r\n            T.PaperWeight5 AS ItemSec");
            viewString.Append("tion_PaperWeight5, \r\n            T.FinishedItemQty1 AS ItemSection_FinishedItemQ");
            viewString.Append("ty1, \r\n            T.FinishedItemQty2 AS ItemSection_FinishedItemQty2, \r\n       ");
            viewString.Append("     T.FinishedItemQty3 AS ItemSection_FinishedItemQty3, \r\n            T.Finishe");
            viewString.Append("dItemQty4 AS ItemSection_FinishedItemQty4, \r\n            T.FinishedItemQty5 AS I");
            viewString.Append("temSection_FinishedItemQty5, \r\n            T.ProfileId AS ItemSection_ProfileId,");
            viewString.Append(" \r\n            T.SelectedPressCalculationMethodId AS ItemSection_SelectedPressCa");
            viewString.Append("lculationMethodId, \r\n            T.SectionNotes AS ItemSection_SectionNotes, \r\n ");
            viewString.Append("           T.IsScheduled AS ItemSection_IsScheduled, \r\n            T.ImageType A");
            viewString.Append("S ItemSection_ImageType, \r\n            T.WebClylinderHeight AS ItemSection_WebCl");
            viewString.Append("ylinderHeight, \r\n            T.WebCylinderWidth AS ItemSection_WebCylinderWidth,");
            viewString.Append(" \r\n            T.WebCylinderId AS ItemSection_WebCylinderId, \r\n            T.Web");
            viewString.Append("PaperLengthWithSp AS ItemSection_WebPaperLengthWithSp, \r\n            T.WebPaperL");
            viewString.Append("engthWoSp AS ItemSection_WebPaperLengthWoSp, \r\n            T.WebReelMakereadyQty");
            viewString.Append(" AS ItemSection_WebReelMakereadyQty, \r\n            T.WebStockPaperCost AS ItemSe");
            viewString.Append("ction_WebStockPaperCost, \r\n            T.WebSpoilageType AS ItemSection_WebSpoil");
            viewString.Append("ageType, \r\n            T.PressPassesQty AS ItemSection_PressPassesQty, \r\n       ");
            viewString.Append("     T.PrintingType AS ItemSection_PrintingType, \r\n            T.PadsLeafQty AS ");
            viewString.Append("ItemSection_PadsLeafQty, \r\n            T.PadsQuantity AS ItemSection_PadsQuantit");
            viewString.Append("y, \r\n            T.LastUpdateDate AS ItemSection_LastUpdateDate, \r\n            T");
            viewString.Append(".LastUpdatedBy AS ItemSection_LastUpdatedBy, \r\n            T.Qty1MarkUpID AS Ite");
            viewString.Append("mSection_Qty1MarkUpID, \r\n            T.Qty2MarkUpID AS ItemSection_Qty2MarkUpID,");
            viewString.Append(" \r\n            T.Qty3MarkUpID AS ItemSection_Qty3MarkUpID, \r\n            T.Stock");
            viewString.Append("ItemID1 AS ItemSection_StockItemID1, \r\n            T.StockItemID2 AS ItemSection");
            viewString.Append("_StockItemID2, \r\n            T.StockItemID3 AS ItemSection_StockItemID3, \r\n     ");
            viewString.Append("       T.Side1PlateQty AS ItemSection_Side1PlateQty, \r\n            T.IsPortrait ");
            viewString.Append("AS ItemSection_IsPortrait, \r\n            T.Side2PlateQty AS ItemSection_Side2Pla");
            viewString.Append("teQty, \r\n            T.InkColorType AS ItemSection_InkColorType, \r\n            T");
            viewString.Append(".PlateInkId AS ItemSection_PlateInkId, \r\n            T.SimilarSections AS ItemSe");
            viewString.Append("ction_SimilarSections, \r\n            T.PressIdSide2 AS ItemSection_PressIdSide2,");
            viewString.Append(" \r\n            T.PassesSide1 AS ItemSection_PassesSide1, \r\n            T.PassesS");
            viewString.Append("ide2 AS ItemSection_PassesSide2, \r\n            T.ImpressionCoverageSide1 AS Item");
            viewString.Append("Section_ImpressionCoverageSide1, \r\n            T.ImpressionCoverageSide2 AS Item");
            viewString.Append("Section_ImpressionCoverageSide2, \r\n            True AS _from0\r\n        FROM Doma");
            viewString.Append("inModelsStoreContainer.ItemSection AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemSections", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStockOptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView148()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStockOptions", @"
    SELECT VALUE -- Constructing ItemStockOptions
        [DomainModels.ItemStockOption](T1.ItemStockOption_ItemStockOptionId, T1.ItemStockOption_ItemId, T1.ItemStockOption_OptionSequence, T1.ItemStockOption_StockId, T1.ItemStockOption_StockLabel, T1.ItemStockOption_CompanyId, T1.ItemStockOption_ImageURL)
    FROM (
        SELECT 
            T.ItemStockOptionId AS ItemStockOption_ItemStockOptionId, 
            T.ItemId AS ItemStockOption_ItemId, 
            T.OptionSequence AS ItemStockOption_OptionSequence, 
            T.StockId AS ItemStockOption_StockId, 
            T.StockLabel AS ItemStockOption_StockLabel, 
            T.CompanyId AS ItemStockOption_CompanyId, 
            T.ImageURL AS ItemStockOption_ImageURL, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemStockOption AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemVdpPrices1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView149()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemVdpPrices1", @"
    SELECT VALUE -- Constructing ItemVdpPrices1
        [DomainModels.ItemVdpPrice](T1.ItemVdpPrice_ItemVdpPriceId, T1.ItemVdpPrice_ClickRangeTo, T1.ItemVdpPrice_ClickRangeFrom, T1.ItemVdpPrice_PricePerClick, T1.ItemVdpPrice_SetupCharge, T1.ItemVdpPrice_ItemId)
    FROM (
        SELECT 
            T.ItemVDPPriceId AS ItemVdpPrice_ItemVdpPriceId, 
            T.ClickRangeTo AS ItemVdpPrice_ClickRangeTo, 
            T.ClickRangeFrom AS ItemVdpPrice_ClickRangeFrom, 
            T.PricePerClick AS ItemVdpPrice_PricePerClick, 
            T.SetupCharge AS ItemVdpPrice_SetupCharge, 
            T.ItemId AS ItemVdpPrice_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemVDPPrice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Countries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView150()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Countries", @"
    SELECT VALUE -- Constructing Countries
        [DomainModels.Country](T1.Country_CountryId, T1.Country_CountryName, T1.Country_CountryCode)
    FROM (
        SELECT 
            T.CountryID AS Country_CountryId, 
            T.CountryName AS Country_CountryName, 
            T.CountryCode AS Country_CountryCode, 
            True AS _from0
        FROM DomainModelsStoreContainer.Country AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostcentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView151()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(10965);
            viewString.Append("\r\n    SELECT VALUE -- Constructing SectionCostcentres\r\n        [DomainModels.Sec");
            viewString.Append("tionCostcentre](T1.SectionCostcentre_SectionCostcentreId, T1.SectionCostcentre_I");
            viewString.Append("temSectionId, T1.SectionCostcentre_CostCentreId, T1.SectionCostcentre_CostCentre");
            viewString.Append("Type, T1.SectionCostcentre_SystemCostCentreType, T1.SectionCostcentre_Order, T1.");
            viewString.Append("SectionCostcentre_IsDirectCost, T1.SectionCostcentre_IsOptionalExtra, T1.Section");
            viewString.Append("Costcentre_IsPurchaseOrderRaised, T1.SectionCostcentre_Status, T1.SectionCostcen");
            viewString.Append("tre_ActivityUser, T1.SectionCostcentre_IsPrintable, T1.SectionCostcentre_Estimat");
            viewString.Append("edStartTime, T1.SectionCostcentre_EstimatedDuration, T1.SectionCostcentre_Estima");
            viewString.Append("tedEndTime, T1.SectionCostcentre_ActualDuration, T1.SectionCostcentre_ActualStar");
            viewString.Append("tDateTime, T1.SectionCostcentre_ActualEndTime, T1.SectionCostcentre_Qty1Charge, ");
            viewString.Append("T1.SectionCostcentre_Qty2Charge, T1.SectionCostcentre_Qty3Charge, T1.SectionCost");
            viewString.Append("centre_Qty4Charge, T1.SectionCostcentre_Qty5Charge, T1.SectionCostcentre_Qty1Mar");
            viewString.Append("kUpID, T1.SectionCostcentre_Qty2MarkUpID, T1.SectionCostcentre_Qty3MarkUpID, T1.");
            viewString.Append("SectionCostcentre_Qty4MarkUpID, T1.SectionCostcentre_Qty5MarkUpID, T1.SectionCos");
            viewString.Append("tcentre_Qty1MarkUpValue, T1.SectionCostcentre_Qty2MarkUpValue, T1.SectionCostcen");
            viewString.Append("tre_Qty3MarkUpValue, T1.SectionCostcentre_Qty4MarkUpValue, T1.SectionCostcentre_");
            viewString.Append("Qty5MarkUpValue, T1.SectionCostcentre_Qty1NetTotal, T1.SectionCostcentre_Qty2Net");
            viewString.Append("Total, T1.SectionCostcentre_Qty3NetTotal, T1.SectionCostcentre_Qty4NetTotal, T1.");
            viewString.Append("SectionCostcentre_Qty5NetTotal, T1.SectionCostcentre_Qty1EstimatedPlantCost, T1.");
            viewString.Append("SectionCostcentre_Qty1EstimatedLabourCost, T1.SectionCostcentre_Qty1EstimatedSto");
            viewString.Append("ckCost, T1.SectionCostcentre_Qty1EstimatedTime, T1.SectionCostcentre_Qty1QuotedP");
            viewString.Append("lantCharge, T1.SectionCostcentre_Qty1QuotedLabourCharge, T1.SectionCostcentre_Qt");
            viewString.Append("y1QuotedStockCharge, T1.SectionCostcentre_Qty2EstimatedPlantCost, T1.SectionCost");
            viewString.Append("centre_Qty2EstimatedLabourCost, T1.SectionCostcentre_Qty2EstimatedStockCost, T1.");
            viewString.Append("SectionCostcentre_Qty2EstimatedTime, T1.SectionCostcentre_Qty2QuotedPlantCharge,");
            viewString.Append(" T1.SectionCostcentre_Qty2QuotedLabourCharge, T1.SectionCostcentre_Qty2QuotedSto");
            viewString.Append("ckCharge, T1.SectionCostcentre_Qty3EstimatedPlantCost, T1.SectionCostcentre_Qty3");
            viewString.Append("EstimatedLabourCost, T1.SectionCostcentre_Qty3EstimatedStockCost, T1.SectionCost");
            viewString.Append("centre_Qty3EstimatedTime, T1.SectionCostcentre_Qty3QuotedPlantCharge, T1.Section");
            viewString.Append("Costcentre_Qty3QuotedLabourCharge, T1.SectionCostcentre_Qty3QuotedStockCharge, T");
            viewString.Append("1.SectionCostcentre_Qty4EstimatedPlantCost, T1.SectionCostcentre_Qty4EstimatedLa");
            viewString.Append("bourCost, T1.SectionCostcentre_Qty4EstimatedStockCost, T1.SectionCostcentre_Qty4");
            viewString.Append("EstimatedTime, T1.SectionCostcentre_Qty4QuotedPlantCharge, T1.SectionCostcentre_");
            viewString.Append("Qty4QuotedLabourCharge, T1.SectionCostcentre_Qty4QuotedStockCharge, T1.SectionCo");
            viewString.Append("stcentre_Qty5EstimatedPlantCost, T1.SectionCostcentre_Qty5EstimatedLabourCost, T");
            viewString.Append("1.SectionCostcentre_Qty5EstimatedStockCost, T1.SectionCostcentre_Qty5EstimatedTi");
            viewString.Append("me, T1.SectionCostcentre_Qty5QuotedPlantCharge, T1.SectionCostcentre_Qty5QuotedL");
            viewString.Append("abourCharge, T1.SectionCostcentre_Qty5QuotedStockCharge, T1.SectionCostcentre_Ac");
            viewString.Append("tualPlantCost, T1.SectionCostcentre_ActualLabourCost, T1.SectionCostcentre_Actua");
            viewString.Append("lStockCost, T1.SectionCostcentre_Qty1WorkInstructions, T1.SectionCostcentre_Qty2");
            viewString.Append("WorkInstructions, T1.SectionCostcentre_Qty3WorkInstructions, T1.SectionCostcentr");
            viewString.Append("e_Qty4WorkInstructions, T1.SectionCostcentre_Qty5WorkInstructions, T1.SectionCos");
            viewString.Append("tcentre_IsCostCentreUsedinPurchaseOrder, T1.SectionCostcentre_IsMinimumCost, T1.");
            viewString.Append("SectionCostcentre_SetupTime, T1.SectionCostcentre_IsScheduled, T1.SectionCostcen");
            viewString.Append("tre_IsScheduleable, T1.SectionCostcentre_Locked, T1.SectionCostcentre_CostingAct");
            viewString.Append("ualCost, T1.SectionCostcentre_CostingActualTime, T1.SectionCostcentre_CostingAct");
            viewString.Append("ualQty, T1.SectionCostcentre_Name, T1.SectionCostcentre_Qty1, T1.SectionCostcent");
            viewString.Append("re_Qty2, T1.SectionCostcentre_Qty3, T1.SectionCostcentre_SetupCost, T1.SectionCo");
            viewString.Append("stcentre_PricePerUnitQty)\r\n    FROM (\r\n        SELECT \r\n            T.SectionCos");
            viewString.Append("tcentreId AS SectionCostcentre_SectionCostcentreId, \r\n            T.ItemSectionI");
            viewString.Append("d AS SectionCostcentre_ItemSectionId, \r\n            T.CostCentreId AS SectionCos");
            viewString.Append("tcentre_CostCentreId, \r\n            T.CostCentreType AS SectionCostcentre_CostCe");
            viewString.Append("ntreType, \r\n            T.SystemCostCentreType AS SectionCostcentre_SystemCostCe");
            viewString.Append("ntreType, \r\n            T.[Order] AS SectionCostcentre_Order, \r\n            T.Is");
            viewString.Append("DirectCost AS SectionCostcentre_IsDirectCost, \r\n            T.IsOptionalExtra AS");
            viewString.Append(" SectionCostcentre_IsOptionalExtra, \r\n            T.IsPurchaseOrderRaised AS Sec");
            viewString.Append("tionCostcentre_IsPurchaseOrderRaised, \r\n            T.Status AS SectionCostcentr");
            viewString.Append("e_Status, \r\n            T.ActivityUser AS SectionCostcentre_ActivityUser, \r\n    ");
            viewString.Append("        T.IsPrintable AS SectionCostcentre_IsPrintable, \r\n            T.Estimate");
            viewString.Append("dStartTime AS SectionCostcentre_EstimatedStartTime, \r\n            T.EstimatedDur");
            viewString.Append("ation AS SectionCostcentre_EstimatedDuration, \r\n            T.EstimatedEndTime A");
            viewString.Append("S SectionCostcentre_EstimatedEndTime, \r\n            T.ActualDuration AS SectionC");
            viewString.Append("ostcentre_ActualDuration, \r\n            T.ActualStartDateTime AS SectionCostcent");
            viewString.Append("re_ActualStartDateTime, \r\n            T.ActualEndTime AS SectionCostcentre_Actua");
            viewString.Append("lEndTime, \r\n            T.Qty1Charge AS SectionCostcentre_Qty1Charge, \r\n        ");
            viewString.Append("    T.Qty2Charge AS SectionCostcentre_Qty2Charge, \r\n            T.Qty3Charge AS ");
            viewString.Append("SectionCostcentre_Qty3Charge, \r\n            T.Qty4Charge AS SectionCostcentre_Qt");
            viewString.Append("y4Charge, \r\n            T.Qty5Charge AS SectionCostcentre_Qty5Charge, \r\n        ");
            viewString.Append("    T.Qty1MarkUpID AS SectionCostcentre_Qty1MarkUpID, \r\n            T.Qty2MarkUp");
            viewString.Append("ID AS SectionCostcentre_Qty2MarkUpID, \r\n            T.Qty3MarkUpID AS SectionCos");
            viewString.Append("tcentre_Qty3MarkUpID, \r\n            T.Qty4MarkUpID AS SectionCostcentre_Qty4Mark");
            viewString.Append("UpID, \r\n            T.Qty5MarkUpID AS SectionCostcentre_Qty5MarkUpID, \r\n        ");
            viewString.Append("    T.Qty1MarkUpValue AS SectionCostcentre_Qty1MarkUpValue, \r\n            T.Qty2");
            viewString.Append("MarkUpValue AS SectionCostcentre_Qty2MarkUpValue, \r\n            T.Qty3MarkUpValu");
            viewString.Append("e AS SectionCostcentre_Qty3MarkUpValue, \r\n            T.Qty4MarkUpValue AS Secti");
            viewString.Append("onCostcentre_Qty4MarkUpValue, \r\n            T.Qty5MarkUpValue AS SectionCostcent");
            viewString.Append("re_Qty5MarkUpValue, \r\n            T.Qty1NetTotal AS SectionCostcentre_Qty1NetTot");
            viewString.Append("al, \r\n            T.Qty2NetTotal AS SectionCostcentre_Qty2NetTotal, \r\n          ");
            viewString.Append("  T.Qty3NetTotal AS SectionCostcentre_Qty3NetTotal, \r\n            T.Qty4NetTotal");
            viewString.Append(" AS SectionCostcentre_Qty4NetTotal, \r\n            T.Qty5NetTotal AS SectionCostc");
            viewString.Append("entre_Qty5NetTotal, \r\n            T.Qty1EstimatedPlantCost AS SectionCostcentre_");
            viewString.Append("Qty1EstimatedPlantCost, \r\n            T.Qty1EstimatedLabourCost AS SectionCostce");
            viewString.Append("ntre_Qty1EstimatedLabourCost, \r\n            T.Qty1EstimatedStockCost AS SectionC");
            viewString.Append("ostcentre_Qty1EstimatedStockCost, \r\n            T.Qty1EstimatedTime AS SectionCo");
            viewString.Append("stcentre_Qty1EstimatedTime, \r\n            T.Qty1QuotedPlantCharge AS SectionCost");
            viewString.Append("centre_Qty1QuotedPlantCharge, \r\n            T.Qty1QuotedLabourCharge AS SectionC");
            viewString.Append("ostcentre_Qty1QuotedLabourCharge, \r\n            T.Qty1QuotedStockCharge AS Secti");
            viewString.Append("onCostcentre_Qty1QuotedStockCharge, \r\n            T.Qty2EstimatedPlantCost AS Se");
            viewString.Append("ctionCostcentre_Qty2EstimatedPlantCost, \r\n            T.Qty2EstimatedLabourCost ");
            viewString.Append("AS SectionCostcentre_Qty2EstimatedLabourCost, \r\n            T.Qty2EstimatedStock");
            viewString.Append("Cost AS SectionCostcentre_Qty2EstimatedStockCost, \r\n            T.Qty2EstimatedT");
            viewString.Append("ime AS SectionCostcentre_Qty2EstimatedTime, \r\n            T.Qty2QuotedPlantCharg");
            viewString.Append("e AS SectionCostcentre_Qty2QuotedPlantCharge, \r\n            T.Qty2QuotedLabourCh");
            viewString.Append("arge AS SectionCostcentre_Qty2QuotedLabourCharge, \r\n            T.Qty2QuotedStoc");
            viewString.Append("kCharge AS SectionCostcentre_Qty2QuotedStockCharge, \r\n            T.Qty3Estimate");
            viewString.Append("dPlantCost AS SectionCostcentre_Qty3EstimatedPlantCost, \r\n            T.Qty3Esti");
            viewString.Append("matedLabourCost AS SectionCostcentre_Qty3EstimatedLabourCost, \r\n            T.Qt");
            viewString.Append("y3EstimatedStockCost AS SectionCostcentre_Qty3EstimatedStockCost, \r\n            ");
            viewString.Append("T.Qty3EstimatedTime AS SectionCostcentre_Qty3EstimatedTime, \r\n            T.Qty3");
            viewString.Append("QuotedPlantCharge AS SectionCostcentre_Qty3QuotedPlantCharge, \r\n            T.Qt");
            viewString.Append("y3QuotedLabourCharge AS SectionCostcentre_Qty3QuotedLabourCharge, \r\n            ");
            viewString.Append("T.Qty3QuotedStockCharge AS SectionCostcentre_Qty3QuotedStockCharge, \r\n          ");
            viewString.Append("  T.Qty4EstimatedPlantCost AS SectionCostcentre_Qty4EstimatedPlantCost, \r\n      ");
            viewString.Append("      T.Qty4EstimatedLabourCost AS SectionCostcentre_Qty4EstimatedLabourCost, \r\n");
            viewString.Append("            T.Qty4EstimatedStockCost AS SectionCostcentre_Qty4EstimatedStockCost");
            viewString.Append(", \r\n            T.Qty4EstimatedTime AS SectionCostcentre_Qty4EstimatedTime, \r\n  ");
            viewString.Append("          T.Qty4QuotedPlantCharge AS SectionCostcentre_Qty4QuotedPlantCharge, \r\n");
            viewString.Append("            T.Qty4QuotedLabourCharge AS SectionCostcentre_Qty4QuotedLabourCharge");
            viewString.Append(", \r\n            T.Qty4QuotedStockCharge AS SectionCostcentre_Qty4QuotedStockChar");
            viewString.Append("ge, \r\n            T.Qty5EstimatedPlantCost AS SectionCostcentre_Qty5EstimatedPla");
            viewString.Append("ntCost, \r\n            T.Qty5EstimatedLabourCost AS SectionCostcentre_Qty5Estimat");
            viewString.Append("edLabourCost, \r\n            T.Qty5EstimatedStockCost AS SectionCostcentre_Qty5Es");
            viewString.Append("timatedStockCost, \r\n            T.Qty5EstimatedTime AS SectionCostcentre_Qty5Est");
            viewString.Append("imatedTime, \r\n            T.Qty5QuotedPlantCharge AS SectionCostcentre_Qty5Quote");
            viewString.Append("dPlantCharge, \r\n            T.Qty5QuotedLabourCharge AS SectionCostcentre_Qty5Qu");
            viewString.Append("otedLabourCharge, \r\n            T.Qty5QuotedStockCharge AS SectionCostcentre_Qty");
            viewString.Append("5QuotedStockCharge, \r\n            T.ActualPlantCost AS SectionCostcentre_ActualP");
            viewString.Append("lantCost, \r\n            T.ActualLabourCost AS SectionCostcentre_ActualLabourCost");
            viewString.Append(", \r\n            T.ActualStockCost AS SectionCostcentre_ActualStockCost, \r\n      ");
            viewString.Append("      T.Qty1WorkInstructions AS SectionCostcentre_Qty1WorkInstructions, \r\n      ");
            viewString.Append("      T.Qty2WorkInstructions AS SectionCostcentre_Qty2WorkInstructions, \r\n      ");
            viewString.Append("      T.Qty3WorkInstructions AS SectionCostcentre_Qty3WorkInstructions, \r\n      ");
            viewString.Append("      T.Qty4WorkInstructions AS SectionCostcentre_Qty4WorkInstructions, \r\n      ");
            viewString.Append("      T.Qty5WorkInstructions AS SectionCostcentre_Qty5WorkInstructions, \r\n      ");
            viewString.Append("      T.IsCostCentreUsedinPurchaseOrder AS SectionCostcentre_IsCostCentreUsedinP");
            viewString.Append("urchaseOrder, \r\n            T.IsMinimumCost AS SectionCostcentre_IsMinimumCost, ");
            viewString.Append("\r\n            T.SetupTime AS SectionCostcentre_SetupTime, \r\n            T.IsSche");
            viewString.Append("duled AS SectionCostcentre_IsScheduled, \r\n            T.IsScheduleable AS Sectio");
            viewString.Append("nCostcentre_IsScheduleable, \r\n            T.Locked AS SectionCostcentre_Locked, ");
            viewString.Append("\r\n            T.CostingActualCost AS SectionCostcentre_CostingActualCost, \r\n    ");
            viewString.Append("        T.CostingActualTime AS SectionCostcentre_CostingActualTime, \r\n          ");
            viewString.Append("  T.CostingActualQty AS SectionCostcentre_CostingActualQty, \r\n            T.Name");
            viewString.Append(" AS SectionCostcentre_Name, \r\n            T.Qty1 AS SectionCostcentre_Qty1, \r\n  ");
            viewString.Append("          T.Qty2 AS SectionCostcentre_Qty2, \r\n            T.Qty3 AS SectionCostc");
            viewString.Append("entre_Qty3, \r\n            T.SetupCost AS SectionCostcentre_SetupCost, \r\n        ");
            viewString.Append("    T.PricePerUnitQty AS SectionCostcentre_PricePerUnitQty, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM DomainModelsStoreContainer.SectionCostcentre AS T\r\n    ) ");
            viewString.Append("AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostcentres", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostCentreDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView152()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostCentreDetails", @"
    SELECT VALUE -- Constructing SectionCostCentreDetails
        [DomainModels.SectionCostCentreDetail](T1.SectionCostCentreDetail_SectionCostCentreDetailId, T1.SectionCostCentreDetail_SectionCostCentreId, T1.SectionCostCentreDetail_StockId, T1.SectionCostCentreDetail_SupplierId, T1.SectionCostCentreDetail_Qty1, T1.SectionCostCentreDetail_Qty2, T1.SectionCostCentreDetail_Qty3, T1.SectionCostCentreDetail_CostPrice, T1.SectionCostCentreDetail_ActualQtyUsed, T1.SectionCostCentreDetail_StockName, T1.SectionCostCentreDetail_Supplier)
    FROM (
        SELECT 
            T.SectionCostCentreDetailId AS SectionCostCentreDetail_SectionCostCentreDetailId, 
            T.SectionCostCentreId AS SectionCostCentreDetail_SectionCostCentreId, 
            T.StockId AS SectionCostCentreDetail_StockId, 
            T.SupplierId AS SectionCostCentreDetail_SupplierId, 
            T.Qty1 AS SectionCostCentreDetail_Qty1, 
            T.Qty2 AS SectionCostCentreDetail_Qty2, 
            T.Qty3 AS SectionCostCentreDetail_Qty3, 
            T.CostPrice AS SectionCostCentreDetail_CostPrice, 
            T.ActualQtyUsed AS SectionCostCentreDetail_ActualQtyUsed, 
            T.StockName AS SectionCostCentreDetail_StockName, 
            T.Supplier AS SectionCostCentreDetail_Supplier, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionCostCentreDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionCostCentreResources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView153()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionCostCentreResources", @"
    SELECT VALUE -- Constructing SectionCostCentreResources
        [DomainModels.SectionCostCentreResource](T1.SectionCostCentreResource_SectionCostCentreResourceId, T1.SectionCostCentreResource_SectionCostcentreId, T1.SectionCostCentreResource_ResourceId, T1.SectionCostCentreResource_ResourceTime, T1.SectionCostCentreResource_IsScheduleable, T1.SectionCostCentreResource_IsScheduled)
    FROM (
        SELECT 
            T.SectionCostCentreResourceId AS SectionCostCentreResource_SectionCostCentreResourceId, 
            T.SectionCostcentreId AS SectionCostCentreResource_SectionCostcentreId, 
            T.ResourceId AS SectionCostCentreResource_ResourceId, 
            T.ResourceTime AS SectionCostCentreResource_ResourceTime, 
            T.IsScheduleable AS SectionCostCentreResource_IsScheduleable, 
            T.IsScheduled AS SectionCostCentreResource_IsScheduled, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionCostCentreResource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.States
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView154()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.States", @"
    SELECT VALUE -- Constructing States
        [DomainModels.State](T1.State_StateId, T1.State_CountryId, T1.State_StateCode, T1.State_StateName)
    FROM (
        SELECT 
            T.StateId AS State_StateId, 
            T.CountryId AS State_CountryId, 
            T.StateCode AS State_StateCode, 
            T.StateName AS State_StateName, 
            True AS _from0
        FROM DomainModelsStoreContainer.State AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Status
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView155()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Status", @"
    SELECT VALUE -- Constructing Status
        [DomainModels.Status](T1.Status_StatusId, T1.Status_StatusName, T1.Status_Description, T1.Status_StatusType)
    FROM (
        SELECT 
            T.StatusId AS Status_StatusId, 
            T.StatusName AS Status_StatusName, 
            T.Description AS Status_Description, 
            T.StatusType AS Status_StatusType, 
            True AS _from0
        FROM DomainModelsStoreContainer.Status AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Estimates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView156()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7675);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Estimates\r\n        [DomainModels.Estimate](T1");
            viewString.Append(".Estimate_EstimateId, T1.[Estimate.Estimate_Code], T1.[Estimate.Estimate_Name], ");
            viewString.Append("T1.Estimate_EnquiryId, T1.Estimate_CompanyId, T1.Estimate_ContactId, T1.Estimate");
            viewString.Append("_StatusId, T1.[Estimate.Estimate_Total], T1.[Estimate.Estimate_ValidUpto], T1.Es");
            viewString.Append("timate_UserNotes, T1.Estimate_LastUpdatedBy, T1.Estimate_CreationDate, T1.Estima");
            viewString.Append("te_CreationTime, T1.[Estimate.Created_by], T1.Estimate_SalesPersonId, T1.Estimat");
            viewString.Append("e_HeadNotes, T1.Estimate_FootNotes, T1.Estimate_EstimateDate, T1.Estimate_Projec");
            viewString.Append("tionDate, T1.Estimate_Greeting, T1.Estimate_AccountNumber, T1.Estimate_OrderNo, ");
            viewString.Append("T1.Estimate_SuccessChanceId, T1.Estimate_LockedBy, T1.Estimate_AddressId, T1.Est");
            viewString.Append("imate_SectionFlagId, T1.Estimate_SourceId, T1.Estimate_ProductId, T1.Estimate_Is");
            viewString.Append("InPipeLine, T1.[Estimate.Order_Code], T1.[Estimate.Order_Date], T1.[Estimate.Ord");
            viewString.Append("er_CreationDateTime], T1.[Estimate.Order_DeliveryDate], T1.[Estimate.Order_Confi");
            viewString.Append("rmationDate], T1.[Estimate.Order_Status], T1.[Estimate.Order_CompletionDate], T1");
            viewString.Append(".Estimate_OrderManagerId, T1.Estimate_ArtworkByDate, T1.Estimate_DataByDate, T1.");
            viewString.Append("Estimate_TargetPrintDate, T1.Estimate_StartDeliveryDate, T1.Estimate_PaperByDate");
            viewString.Append(", T1.Estimate_TargetBindDate, T1.Estimate_FinishDeliveryDate, T1.Estimate_Classi");
            viewString.Append("fication1Id, T1.Estimate_Classification2ID, T1.Estimate_IsOfficialOrder, T1.Esti");
            viewString.Append("mate_CustomerPO, T1.Estimate_OfficialOrderSetBy, T1.Estimate_OfficialOrderSetOnD");
            viewString.Append("ateTime, T1.Estimate_IsCreditApproved, T1.Estimate_CreditLimitForJob, T1.Estimat");
            viewString.Append("e_CreditLimitSetBy, T1.Estimate_CreditLimitSetOnDateTime, T1.Estimate_IsJobAllow");
            viewString.Append("edWOCreditCheck, T1.Estimate_AllowJobWOCreditCheckSetBy, T1.Estimate_AllowJobWOC");
            viewString.Append("reditCheckSetOnDateTime, T1.Estimate_NotesUpdateDateTime, T1.Estimate_NotesUpdat");
            viewString.Append("edByUserId, T1.Estimate_OrderSourceId, T1.Estimate_IsRead, T1.Estimate_EstimateS");
            viewString.Append("entTo, T1.Estimate_EstimateValueChanged, T1.Estimate_NewItemAdded, T1.Estimate_i");
            viewString.Append("sEstimate, T1.Estimate_isDirectSale, T1.Estimate_LastUpdateDate, T1.Estimate_Nom");
            viewString.Append("inalCode, T1.Estimate_BillingAddressId, T1.Estimate_DeliveryCostCenterId, T1.Est");
            viewString.Append("imate_DeliveryCost, T1.Estimate_DeliveryCompletionTime, T1.Estimate_VoucherDisco");
            viewString.Append("untRate, T1.Estimate_ReportSignedBy, T1.Estimate_InvoiceId, T1.Estimate_OrderRep");
            viewString.Append("ortSignedBy, T1.Estimate_OrderReportLastPrinted, T1.Estimate_EstimateReportLastP");
            viewString.Append("rinted, T1.Estimate_isEmailSent, T1.Estimate_DiscountVoucherID, T1.Estimate_Clie");
            viewString.Append("ntStatus, T1.Estimate_RefEstimateId, T1.Estimate_XeroAccessCode, T1.Estimate_Org");
            viewString.Append("anisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimateId AS Estimate_");
            viewString.Append("EstimateId, \r\n            T.Estimate_Code AS [Estimate.Estimate_Code], \r\n       ");
            viewString.Append("     T.Estimate_Name AS [Estimate.Estimate_Name], \r\n            T.EnquiryId AS E");
            viewString.Append("stimate_EnquiryId, \r\n            T.CompanyId AS Estimate_CompanyId, \r\n          ");
            viewString.Append("  T.ContactId AS Estimate_ContactId, \r\n            T.StatusId AS Estimate_Status");
            viewString.Append("Id, \r\n            T.Estimate_Total AS [Estimate.Estimate_Total], \r\n            T");
            viewString.Append(".Estimate_ValidUpto AS [Estimate.Estimate_ValidUpto], \r\n            T.UserNotes ");
            viewString.Append("AS Estimate_UserNotes, \r\n            T.LastUpdatedBy AS Estimate_LastUpdatedBy, ");
            viewString.Append("\r\n            T.CreationDate AS Estimate_CreationDate, \r\n            T.CreationT");
            viewString.Append("ime AS Estimate_CreationTime, \r\n            T.Created_by AS [Estimate.Created_by");
            viewString.Append("], \r\n            T.SalesPersonId AS Estimate_SalesPersonId, \r\n            T.Head");
            viewString.Append("Notes AS Estimate_HeadNotes, \r\n            T.FootNotes AS Estimate_FootNotes, \r\n");
            viewString.Append("            T.EstimateDate AS Estimate_EstimateDate, \r\n            T.ProjectionD");
            viewString.Append("ate AS Estimate_ProjectionDate, \r\n            T.Greeting AS Estimate_Greeting, \r");
            viewString.Append("\n            T.AccountNumber AS Estimate_AccountNumber, \r\n            T.OrderNo ");
            viewString.Append("AS Estimate_OrderNo, \r\n            T.SuccessChanceId AS Estimate_SuccessChanceId");
            viewString.Append(", \r\n            T.LockedBy AS Estimate_LockedBy, \r\n            T.AddressId AS Es");
            viewString.Append("timate_AddressId, \r\n            T.SectionFlagId AS Estimate_SectionFlagId, \r\n   ");
            viewString.Append("         T.SourceId AS Estimate_SourceId, \r\n            T.ProductId AS Estimate_");
            viewString.Append("ProductId, \r\n            T.IsInPipeLine AS Estimate_IsInPipeLine, \r\n            ");
            viewString.Append("T.Order_Code AS [Estimate.Order_Code], \r\n            T.Order_Date AS [Estimate.O");
            viewString.Append("rder_Date], \r\n            T.Order_CreationDateTime AS [Estimate.Order_CreationDa");
            viewString.Append("teTime], \r\n            T.Order_DeliveryDate AS [Estimate.Order_DeliveryDate], \r\n");
            viewString.Append("            T.Order_ConfirmationDate AS [Estimate.Order_ConfirmationDate], \r\n   ");
            viewString.Append("         T.Order_Status AS [Estimate.Order_Status], \r\n            T.Order_Comple");
            viewString.Append("tionDate AS [Estimate.Order_CompletionDate], \r\n            T.OrderManagerId AS E");
            viewString.Append("stimate_OrderManagerId, \r\n            T.ArtworkByDate AS Estimate_ArtworkByDate,");
            viewString.Append(" \r\n            T.DataByDate AS Estimate_DataByDate, \r\n            T.TargetPrintD");
            viewString.Append("ate AS Estimate_TargetPrintDate, \r\n            T.StartDeliveryDate AS Estimate_S");
            viewString.Append("tartDeliveryDate, \r\n            T.PaperByDate AS Estimate_PaperByDate, \r\n       ");
            viewString.Append("     T.TargetBindDate AS Estimate_TargetBindDate, \r\n            T.FinishDelivery");
            viewString.Append("Date AS Estimate_FinishDeliveryDate, \r\n            T.Classification1Id AS Estima");
            viewString.Append("te_Classification1Id, \r\n            T.Classification2ID AS Estimate_Classificati");
            viewString.Append("on2ID, \r\n            T.IsOfficialOrder AS Estimate_IsOfficialOrder, \r\n          ");
            viewString.Append("  T.CustomerPO AS Estimate_CustomerPO, \r\n            T.OfficialOrderSetBy AS Est");
            viewString.Append("imate_OfficialOrderSetBy, \r\n            T.OfficialOrderSetOnDateTime AS Estimate");
            viewString.Append("_OfficialOrderSetOnDateTime, \r\n            T.IsCreditApproved AS Estimate_IsCred");
            viewString.Append("itApproved, \r\n            T.CreditLimitForJob AS Estimate_CreditLimitForJob, \r\n ");
            viewString.Append("           T.CreditLimitSetBy AS Estimate_CreditLimitSetBy, \r\n            T.Cred");
            viewString.Append("itLimitSetOnDateTime AS Estimate_CreditLimitSetOnDateTime, \r\n            T.IsJob");
            viewString.Append("AllowedWOCreditCheck AS Estimate_IsJobAllowedWOCreditCheck, \r\n            T.Allo");
            viewString.Append("wJobWOCreditCheckSetBy AS Estimate_AllowJobWOCreditCheckSetBy, \r\n            T.A");
            viewString.Append("llowJobWOCreditCheckSetOnDateTime AS Estimate_AllowJobWOCreditCheckSetOnDateTime");
            viewString.Append(", \r\n            T.NotesUpdateDateTime AS Estimate_NotesUpdateDateTime, \r\n       ");
            viewString.Append("     T.NotesUpdatedByUserId AS Estimate_NotesUpdatedByUserId, \r\n            T.Or");
            viewString.Append("derSourceId AS Estimate_OrderSourceId, \r\n            T.IsRead AS Estimate_IsRead");
            viewString.Append(", \r\n            T.EstimateSentTo AS Estimate_EstimateSentTo, \r\n            T.Est");
            viewString.Append("imateValueChanged AS Estimate_EstimateValueChanged, \r\n            T.NewItemAdded");
            viewString.Append(" AS Estimate_NewItemAdded, \r\n            T.isEstimate AS Estimate_isEstimate, \r\n");
            viewString.Append("            T.isDirectSale AS Estimate_isDirectSale, \r\n            T.LastUpdateD");
            viewString.Append("ate AS Estimate_LastUpdateDate, \r\n            T.NominalCode AS Estimate_NominalC");
            viewString.Append("ode, \r\n            T.BillingAddressId AS Estimate_BillingAddressId, \r\n          ");
            viewString.Append("  T.DeliveryCostCenterId AS Estimate_DeliveryCostCenterId, \r\n            T.Deliv");
            viewString.Append("eryCost AS Estimate_DeliveryCost, \r\n            T.DeliveryCompletionTime AS Esti");
            viewString.Append("mate_DeliveryCompletionTime, \r\n            T.VoucherDiscountRate AS Estimate_Vou");
            viewString.Append("cherDiscountRate, \r\n            T.ReportSignedBy AS Estimate_ReportSignedBy, \r\n ");
            viewString.Append("           T.InvoiceId AS Estimate_InvoiceId, \r\n            T.OrderReportSignedB");
            viewString.Append("y AS Estimate_OrderReportSignedBy, \r\n            T.OrderReportLastPrinted AS Est");
            viewString.Append("imate_OrderReportLastPrinted, \r\n            T.EstimateReportLastPrinted AS Estim");
            viewString.Append("ate_EstimateReportLastPrinted, \r\n            T.isEmailSent AS Estimate_isEmailSe");
            viewString.Append("nt, \r\n            T.DiscountVoucherID AS Estimate_DiscountVoucherID, \r\n         ");
            viewString.Append("   T.ClientStatus AS Estimate_ClientStatus, \r\n            T.RefEstimateId AS Est");
            viewString.Append("imate_RefEstimateId, \r\n            T.XeroAccessCode AS Estimate_XeroAccessCode, ");
            viewString.Append("\r\n            T.OrganisationId AS Estimate_OrganisationId, \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM DomainModelsStoreContainer.Estimate AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Estimates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaymentGateways
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView157()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaymentGateways", "\r\n    SELECT VALUE -- Constructing PaymentGateways\r\n        [DomainModels.Payment" +
                    "Gateway](T1.PaymentGateway_PaymentGatewayId, T1.PaymentGateway_BusinessEmail, T1" +
                    ".PaymentGateway_IdentityToken, T1.PaymentGateway_isActive, T1.PaymentGateway_Com" +
                    "panyId, T1.PaymentGateway_PaymentMethodId, T1.PaymentGateway_SecureHash, T1.Paym" +
                    "entGateway_CancelPurchaseUrl, T1.PaymentGateway_ReturnUrl, T1.PaymentGateway_Not" +
                    "ifyUrl, T1.PaymentGateway_SendToReturnURL, T1.PaymentGateway_UseSandbox, T1.Paym" +
                    "entGateway_LiveApiUrl, T1.PaymentGateway_TestApiUrl)\r\n    FROM (\r\n        SELECT" +
                    " \r\n            T.PaymentGatewayId AS PaymentGateway_PaymentGatewayId, \r\n        " +
                    "    T.BusinessEmail AS PaymentGateway_BusinessEmail, \r\n            T.IdentityTok" +
                    "en AS PaymentGateway_IdentityToken, \r\n            T.isActive AS PaymentGateway_i" +
                    "sActive, \r\n            T.CompanyId AS PaymentGateway_CompanyId, \r\n            T." +
                    "PaymentMethodId AS PaymentGateway_PaymentMethodId, \r\n            T.SecureHash AS" +
                    " PaymentGateway_SecureHash, \r\n            T.CancelPurchaseUrl AS PaymentGateway_" +
                    "CancelPurchaseUrl, \r\n            T.ReturnUrl AS PaymentGateway_ReturnUrl, \r\n    " +
                    "        T.NotifyUrl AS PaymentGateway_NotifyUrl, \r\n            T.SendToReturnURL" +
                    " AS PaymentGateway_SendToReturnURL, \r\n            T.UseSandbox AS PaymentGateway" +
                    "_UseSandbox, \r\n            T.LiveApiUrl AS PaymentGateway_LiveApiUrl, \r\n        " +
                    "    T.TestApiUrl AS PaymentGateway_TestApiUrl, \r\n            True AS _from0\r\n   " +
                    "     FROM DomainModelsStoreContainer.PaymentGateway AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaymentMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView158()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaymentMethods", @"
    SELECT VALUE -- Constructing PaymentMethods
        [DomainModels.PaymentMethod](T1.PaymentMethod_PaymentMethodId, T1.PaymentMethod_MethodName, T1.PaymentMethod_IsActive)
    FROM (
        SELECT 
            T.PaymentMethodId AS PaymentMethod_PaymentMethodId, 
            T.MethodName AS PaymentMethod_MethodName, 
            T.IsActive AS PaymentMethod_IsActive, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaymentMethod AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PrePayments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView159()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PrePayments", @"
    SELECT VALUE -- Constructing PrePayments
        [DomainModels.PrePayment](T1.PrePayment_PrePaymentId, T1.PrePayment_CustomerId, T1.PrePayment_OrderId, T1.PrePayment_Amount, T1.PrePayment_PaymentDate, T1.PrePayment_PayPalResponseId, T1.PrePayment_PaymentMethodId, T1.PrePayment_ReferenceCode, T1.PrePayment_PaymentDescription)
    FROM (
        SELECT 
            T.PrePaymentId AS PrePayment_PrePaymentId, 
            T.CustomerId AS PrePayment_CustomerId, 
            T.OrderId AS PrePayment_OrderId, 
            T.Amount AS PrePayment_Amount, 
            T.PaymentDate AS PrePayment_PaymentDate, 
            T.PayPalResponseId AS PrePayment_PayPalResponseId, 
            T.PaymentMethodId AS PrePayment_PaymentMethodId, 
            T.ReferenceCode AS PrePayment_ReferenceCode, 
            T.PaymentDescription AS PrePayment_PaymentDescription, 
            True AS _from0
        FROM DomainModelsStoreContainer.PrePayment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.RaveReviews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView160()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.RaveReviews", @"
    SELECT VALUE -- Constructing RaveReviews
        [DomainModels.RaveReview](T1.RaveReview_ReviewId, T1.RaveReview_ReviewBy, T1.RaveReview_Review, T1.RaveReview_ReviewDate, T1.RaveReview_isDisplay, T1.RaveReview_SortOrder, T1.RaveReview_OrganisationId, T1.RaveReview_CompanyId)
    FROM (
        SELECT 
            T.ReviewId AS RaveReview_ReviewId, 
            T.ReviewBy AS RaveReview_ReviewBy, 
            T.Review AS RaveReview_Review, 
            T.ReviewDate AS RaveReview_ReviewDate, 
            T.isDisplay AS RaveReview_isDisplay, 
            T.SortOrder AS RaveReview_SortOrder, 
            T.OrganisationId AS RaveReview_OrganisationId, 
            T.CompanyId AS RaveReview_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.RaveReview AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.EmailEvents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView161()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.EmailEvents", @"
    SELECT VALUE -- Constructing EmailEvents
        [DomainModels.EmailEvent](T1.EmailEvent_EmailEventId, T1.EmailEvent_EventName, T1.EmailEvent_Description, T1.EmailEvent_EventType)
    FROM (
        SELECT 
            T.EmailEventId AS EmailEvent_EmailEventId, 
            T.EventName AS EmailEvent_EventName, 
            T.Description AS EmailEvent_Description, 
            T.EventType AS EmailEvent_EventType, 
            True AS _from0
        FROM DomainModelsStoreContainer.EmailEvent AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Inquiries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView162()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Inquiries", @"
    SELECT VALUE -- Constructing Inquiries
        [DomainModels.Inquiry](T1.Inquiry_InquiryId, T1.Inquiry_Title, T1.Inquiry_ContactId, T1.Inquiry_CreatedDate, T1.Inquiry_SourceId, T1.Inquiry_RequireByDate, T1.Inquiry_SystemUserId, T1.Inquiry_Status, T1.Inquiry_IsDirectInquiry, T1.Inquiry_FlagId, T1.Inquiry_InquiryCode, T1.Inquiry_CreatedBy, T1.Inquiry_OrganisationId, T1.Inquiry_CompanyId)
    FROM (
        SELECT 
            T.InquiryId AS Inquiry_InquiryId, 
            T.Title AS Inquiry_Title, 
            T.ContactId AS Inquiry_ContactId, 
            T.CreatedDate AS Inquiry_CreatedDate, 
            T.SourceId AS Inquiry_SourceId, 
            T.RequireByDate AS Inquiry_RequireByDate, 
            T.SystemUserId AS Inquiry_SystemUserId, 
            T.Status AS Inquiry_Status, 
            T.IsDirectInquiry AS Inquiry_IsDirectInquiry, 
            T.FlagId AS Inquiry_FlagId, 
            T.InquiryCode AS Inquiry_InquiryCode, 
            T.CreatedBy AS Inquiry_CreatedBy, 
            T.OrganisationId AS Inquiry_OrganisationId, 
            T.CompanyId AS Inquiry_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Inquiry AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InquiryAttachments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView163()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InquiryAttachments", @"
    SELECT VALUE -- Constructing InquiryAttachments
        [DomainModels.InquiryAttachment](T1.InquiryAttachment_AttachmentId, T1.InquiryAttachment_OrignalFileName, T1.InquiryAttachment_AttachmentPath, T1.InquiryAttachment_InquiryId, T1.InquiryAttachment_Extension)
    FROM (
        SELECT 
            T.AttachmentId AS InquiryAttachment_AttachmentId, 
            T.OrignalFileName AS InquiryAttachment_OrignalFileName, 
            T.AttachmentPath AS InquiryAttachment_AttachmentPath, 
            T.InquiryId AS InquiryAttachment_InquiryId, 
            T.Extension AS InquiryAttachment_Extension, 
            True AS _from0
        FROM DomainModelsStoreContainer.InquiryAttachment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InquiryItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView164()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InquiryItems", @"
    SELECT VALUE -- Constructing InquiryItems
        [DomainModels.InquiryItem](T1.InquiryItem_InquiryItemId, T1.InquiryItem_Title, T1.InquiryItem_Notes, T1.InquiryItem_DeliveryDate, T1.InquiryItem_InquiryId, T1.InquiryItem_ProductId)
    FROM (
        SELECT 
            T.InquiryItemId AS InquiryItem_InquiryItemId, 
            T.Title AS InquiryItem_Title, 
            T.Notes AS InquiryItem_Notes, 
            T.DeliveryDate AS InquiryItem_DeliveryDate, 
            T.InquiryId AS InquiryItem_InquiryId, 
            T.ProductId AS InquiryItem_ProductId, 
            True AS _from0
        FROM DomainModelsStoreContainer.InquiryItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView165()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3138);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [DomainModels.Invoice](T1.I");
            viewString.Append("nvoice_InvoiceId, T1.Invoice_InvoiceCode, T1.Invoice_InvoiceType, T1.Invoice_Inv");
            viewString.Append("oiceName, T1.Invoice_ContactId, T1.Invoice_OrderNo, T1.Invoice_InvoiceStatus, T1");
            viewString.Append(".Invoice_InvoiceTotal, T1.Invoice_InvoiceDate, T1.Invoice_LastUpdatedBy, T1.Invo");
            viewString.Append("ice_CreationDate, T1.Invoice_CreatedBy, T1.Invoice_AccountNumber, T1.Invoice_Ter");
            viewString.Append("ms, T1.Invoice_InvoicePostingDate, T1.Invoice_InvoicePostedBy, T1.Invoice_Locked");
            viewString.Append("By, T1.Invoice_AddressId, T1.Invoice_IsArchive, T1.Invoice_TaxValue, T1.Invoice_");
            viewString.Append("GrandTotal, T1.Invoice_FlagID, T1.Invoice_UserNotes, T1.Invoice_NotesUpdateDateT");
            viewString.Append("ime, T1.Invoice_NotesUpdatedByUserID, T1.Invoice_SystemSiteId, T1.Invoice_Estima");
            viewString.Append("teId, T1.Invoice_IsRead, T1.Invoice_IsProformaInvoice, T1.Invoice_IsPrinted, T1.");
            viewString.Append("Invoice_LastUpdateDate, T1.Invoice_ReportSignedBy, T1.Invoice_ReportLastPrintedD");
            viewString.Append("ate, T1.Invoice_HeadNotes, T1.Invoice_FootNotes, T1.Invoice_XeroAccessCode, T1.I");
            viewString.Append("nvoice_OrganisationId, T1.Invoice_CompanyId)\r\n    FROM (\r\n        SELECT \r\n     ");
            viewString.Append("       T.InvoiceId AS Invoice_InvoiceId, \r\n            T.InvoiceCode AS Invoice_");
            viewString.Append("InvoiceCode, \r\n            T.InvoiceType AS Invoice_InvoiceType, \r\n            T");
            viewString.Append(".InvoiceName AS Invoice_InvoiceName, \r\n            T.ContactId AS Invoice_Contac");
            viewString.Append("tId, \r\n            T.OrderNo AS Invoice_OrderNo, \r\n            T.InvoiceStatus A");
            viewString.Append("S Invoice_InvoiceStatus, \r\n            T.InvoiceTotal AS Invoice_InvoiceTotal, \r");
            viewString.Append("\n            T.InvoiceDate AS Invoice_InvoiceDate, \r\n            T.LastUpdatedBy");
            viewString.Append(" AS Invoice_LastUpdatedBy, \r\n            T.CreationDate AS Invoice_CreationDate,");
            viewString.Append(" \r\n            T.CreatedBy AS Invoice_CreatedBy, \r\n            T.AccountNumber A");
            viewString.Append("S Invoice_AccountNumber, \r\n            T.Terms AS Invoice_Terms, \r\n            T");
            viewString.Append(".InvoicePostingDate AS Invoice_InvoicePostingDate, \r\n            T.InvoicePosted");
            viewString.Append("By AS Invoice_InvoicePostedBy, \r\n            T.LockedBy AS Invoice_LockedBy, \r\n ");
            viewString.Append("           T.AddressId AS Invoice_AddressId, \r\n            T.IsArchive AS Invoic");
            viewString.Append("e_IsArchive, \r\n            T.TaxValue AS Invoice_TaxValue, \r\n            T.Grand");
            viewString.Append("Total AS Invoice_GrandTotal, \r\n            T.FlagID AS Invoice_FlagID, \r\n       ");
            viewString.Append("     T.UserNotes AS Invoice_UserNotes, \r\n            T.NotesUpdateDateTime AS In");
            viewString.Append("voice_NotesUpdateDateTime, \r\n            T.NotesUpdatedByUserID AS Invoice_Notes");
            viewString.Append("UpdatedByUserID, \r\n            T.SystemSiteId AS Invoice_SystemSiteId, \r\n       ");
            viewString.Append("     T.EstimateId AS Invoice_EstimateId, \r\n            T.IsRead AS Invoice_IsRea");
            viewString.Append("d, \r\n            T.IsProformaInvoice AS Invoice_IsProformaInvoice, \r\n           ");
            viewString.Append(" T.IsPrinted AS Invoice_IsPrinted, \r\n            T.LastUpdateDate AS Invoice_Las");
            viewString.Append("tUpdateDate, \r\n            T.ReportSignedBy AS Invoice_ReportSignedBy, \r\n       ");
            viewString.Append("     T.ReportLastPrintedDate AS Invoice_ReportLastPrintedDate, \r\n            T.H");
            viewString.Append("eadNotes AS Invoice_HeadNotes, \r\n            T.FootNotes AS Invoice_FootNotes, \r");
            viewString.Append("\n            T.XeroAccessCode AS Invoice_XeroAccessCode, \r\n            T.Organis");
            viewString.Append("ationId AS Invoice_OrganisationId, \r\n            T.CompanyId AS Invoice_CompanyI");
            viewString.Append("d, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.Invoice");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InvoiceDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView166()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InvoiceDetails", "\r\n    SELECT VALUE -- Constructing InvoiceDetails\r\n        [DomainModels.InvoiceD" +
                    "etail](T1.InvoiceDetail_InvoiceDetailId, T1.InvoiceDetail_InvoiceId, T1.InvoiceD" +
                    "etail_DetailType, T1.InvoiceDetail_ItemId, T1.InvoiceDetail_InvoiceTitle, T1.Inv" +
                    "oiceDetail_NominalCode, T1.InvoiceDetail_ItemCharge, T1.InvoiceDetail_Quantity, " +
                    "T1.InvoiceDetail_ItemTaxValue, T1.InvoiceDetail_FlagId, T1.InvoiceDetail_Departm" +
                    "entId, T1.InvoiceDetail_Description, T1.InvoiceDetail_ItemType, T1.InvoiceDetail" +
                    "_TaxId, T1.InvoiceDetail_TaxValue, T1.InvoiceDetail_ItemGrossTotal)\r\n    FROM (\r" +
                    "\n        SELECT \r\n            T.InvoiceDetailId AS InvoiceDetail_InvoiceDetailId" +
                    ", \r\n            T.InvoiceId AS InvoiceDetail_InvoiceId, \r\n            T.DetailTy" +
                    "pe AS InvoiceDetail_DetailType, \r\n            T.ItemId AS InvoiceDetail_ItemId, " +
                    "\r\n            T.InvoiceTitle AS InvoiceDetail_InvoiceTitle, \r\n            T.Nomi" +
                    "nalCode AS InvoiceDetail_NominalCode, \r\n            T.ItemCharge AS InvoiceDetai" +
                    "l_ItemCharge, \r\n            T.Quantity AS InvoiceDetail_Quantity, \r\n            " +
                    "T.ItemTaxValue AS InvoiceDetail_ItemTaxValue, \r\n            T.FlagId AS InvoiceD" +
                    "etail_FlagId, \r\n            T.DepartmentId AS InvoiceDetail_DepartmentId, \r\n    " +
                    "        T.Description AS InvoiceDetail_Description, \r\n            T.ItemType AS " +
                    "InvoiceDetail_ItemType, \r\n            T.TaxId AS InvoiceDetail_TaxId, \r\n        " +
                    "    T.TaxValue AS InvoiceDetail_TaxValue, \r\n            T.ItemGrossTotal AS Invo" +
                    "iceDetail_ItemGrossTotal, \r\n            True AS _from0\r\n        FROM DomainModel" +
                    "sStoreContainer.InvoiceDetail AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.LengthUnits
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView167()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.LengthUnits", @"
    SELECT VALUE -- Constructing LengthUnits
        [DomainModels.LengthUnit](T1.LengthUnit_Id, T1.LengthUnit_UnitName, T1.LengthUnit_MM, T1.LengthUnit_CM, T1.LengthUnit_Inch)
    FROM (
        SELECT 
            T.Id AS LengthUnit_Id, 
            T.UnitName AS LengthUnit_UnitName, 
            T.MM AS LengthUnit_MM, 
            T.CM AS LengthUnit_CM, 
            T.Inch AS LengthUnit_Inch, 
            True AS _from0
        FROM DomainModelsStoreContainer.LengthUnit AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.RegistrationQuestions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView168()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.RegistrationQuestions", @"
    SELECT VALUE -- Constructing RegistrationQuestions
        [DomainModels.RegistrationQuestion](T1.RegistrationQuestion_QuestionId, T1.RegistrationQuestion_Question)
    FROM (
        SELECT 
            T.QuestionId AS RegistrationQuestion_QuestionId, 
            T.Question AS RegistrationQuestion_Question, 
            True AS _from0
        FROM DomainModelsStoreContainer.RegistrationQuestion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Campaigns
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView169()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(9160);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Campaigns\r\n        [DomainModels.Campaign](T1");
            viewString.Append(".Campaign_CampaignId, T1.Campaign_CampaignName, T1.Campaign_Description, T1.Camp");
            viewString.Append("aign_DataSourceType, T1.Campaign_RunCampaignFor, T1.Campaign_IncludeCustomers, T");
            viewString.Append("1.Campaign_IncludeSuppliers, T1.Campaign_IncludeProspects, T1.Campaign_IncludeKe");
            viewString.Append("yword, T1.Campaign_SearchKeyword, T1.Campaign_IncludeType, T1.Campaign_IncludeFl");
            viewString.Append("ag, T1.Campaign_IncludeName, T1.Campaign_IncludeAddress, T1.Campaign_IncludeCont");
            viewString.Append("actName, T1.Campaign_SubjectA, T1.Campaign_HTMLMessageA, T1.Campaign_AttachmentF");
            viewString.Append("ileNameFieldName, T1.Campaign_AttachmentType, T1.Campaign_EmailField, T1.Campaig");
            viewString.Append("n_CCEmailField, T1.Campaign_SMTPServer, T1.Campaign_FromAddress, T1.Campaign_Ret");
            viewString.Append("urnPathAddress, T1.Campaign_ReplyToAddress, T1.Campaign_ErrorsToAddress, T1.Camp");
            viewString.Append("aign_SMTPServerType, T1.Campaign_EnableSchedule, T1.Campaign_StartDateTime, T1.C");
            viewString.Append("ampaign_RepeatEvery, T1.Campaign_RepeatInterval, T1.Campaign_LastRunOn, T1.Campa");
            viewString.Append("ign_MessageType, T1.Campaign_ABMessaging, T1.Campaign_SubjectB, T1.Campaign_HTML");
            viewString.Append("MessageB, T1.Campaign_IncludePlainText, T1.Campaign_SMTPDelaySeconds, T1.Campaig");
            viewString.Append("n_EmailAddressLogFiles, T1.Campaign_PlainTextMessageA, T1.Campaign_PlainTextMess");
            viewString.Append("ageB, T1.Campaign_UId, T1.Campaign_Private, T1.Campaign_SubscribeEmailUpdateFiel");
            viewString.Append("d, T1.Campaign_UnsubscribeEmailHyperlinkText, T1.Campaign_SubscribeEmailAddress,");
            viewString.Append(" T1.Campaign_SubscribeEmailHyperlinkText, T1.Campaign_UnSubscribeCount, T1.Campa");
            viewString.Append("ign_SubscribeCount, T1.Campaign_BounceCount, T1.Campaign_LastRunEndDateTime, T1.");
            viewString.Append("Campaign_MessageCount, T1.Campaign_SuccessCount, T1.Campaign_FailedCount, T1.Cam");
            viewString.Append("paign_EnableLogFiles, T1.Campaign_ContinueIfWritebackError, T1.Campaign_EmailFie");
            viewString.Append("ldPreviewColumn2, T1.Campaign_EmailFieldPreviewColumn3, T1.Campaign_AttachmentFi");
            viewString.Append("leName, T1.Campaign_ClearCounters, T1.Campaign_SMTPServer2, T1.Campaign_LockedBy");
            viewString.Append("UID, T1.Campaign_UnSubscribeCountTotal, T1.Campaign_SubscribeCountTotal, T1.Camp");
            viewString.Append("aign_BounceCountTotal, T1.Campaign_EnableEmailAddressCache, T1.Campaign_OpenedCo");
            viewString.Append("unt, T1.Campaign_OpenedCountTotal, T1.Campaign_OpenedEmailUpdateField, T1.Campai");
            viewString.Append("gn_EnableOpenedEmail, T1.Campaign_ABMessagingUpdateField, T1.Campaign_EmailLogFi");
            viewString.Append("leAddress2, T1.Campaign_EmailLogFileAddress3, T1.Campaign_CampaignCategory, T1.C");
            viewString.Append("ampaign_SoftBounceCountTotal, T1.Campaign_SMTPUsername, T1.Campaign_SMTPPassword");
            viewString.Append(", T1.Campaign_EnableWriteBackTab, T1.Campaign_EnableClickThruTab, T1.Campaign_Un");
            viewString.Append("subscribeMethod, T1.Campaign_UseWYSWYG, T1.Campaign_CreationDate, T1.Campaign_St");
            viewString.Append("atus, T1.Campaign_ValidateEmail, T1.Campaign_CampaignType, T1.Campaign_SystemSit");
            viewString.Append("eId, T1.Campaign_IncludeCorporateCustomers, T1.Campaign_IsEnabled, T1.Campaign_S");
            viewString.Append("endEmailAfterDays, T1.Campaign_EmailEvent, T1.Campaign_isSystemEmail, T1.Campaig");
            viewString.Append("n_FlagIDs, T1.Campaign_CustomerTypeIDs, T1.Campaign_GroupIDs, T1.Campaign_FromNa");
            viewString.Append("me, T1.Campaign_CampaignReportId, T1.Campaign_OrganisationId, T1.Campaign_Compan");
            viewString.Append("yId, T1.Campaign_UnsubscribeEmailAddress, T1.Campaign_IncludeNewsLetterSubscribe");
            viewString.Append("rs)\r\n    FROM (\r\n        SELECT \r\n            T.CampaignId AS Campaign_CampaignI");
            viewString.Append("d, \r\n            T.CampaignName AS Campaign_CampaignName, \r\n            T.Descri");
            viewString.Append("ption AS Campaign_Description, \r\n            T.DataSourceType AS Campaign_DataSo");
            viewString.Append("urceType, \r\n            T.RunCampaignFor AS Campaign_RunCampaignFor, \r\n         ");
            viewString.Append("   T.IncludeCustomers AS Campaign_IncludeCustomers, \r\n            T.IncludeSuppl");
            viewString.Append("iers AS Campaign_IncludeSuppliers, \r\n            T.IncludeProspects AS Campaign_");
            viewString.Append("IncludeProspects, \r\n            T.IncludeKeyword AS Campaign_IncludeKeyword, \r\n ");
            viewString.Append("           T.SearchKeyword AS Campaign_SearchKeyword, \r\n            T.IncludeTyp");
            viewString.Append("e AS Campaign_IncludeType, \r\n            T.IncludeFlag AS Campaign_IncludeFlag, ");
            viewString.Append("\r\n            T.IncludeName AS Campaign_IncludeName, \r\n            T.IncludeAddr");
            viewString.Append("ess AS Campaign_IncludeAddress, \r\n            T.IncludeContactName AS Campaign_I");
            viewString.Append("ncludeContactName, \r\n            T.SubjectA AS Campaign_SubjectA, \r\n            ");
            viewString.Append("T.HTMLMessageA AS Campaign_HTMLMessageA, \r\n            T.AttachmentFileNameField");
            viewString.Append("Name AS Campaign_AttachmentFileNameFieldName, \r\n            T.AttachmentType AS ");
            viewString.Append("Campaign_AttachmentType, \r\n            T.EmailField AS Campaign_EmailField, \r\n  ");
            viewString.Append("          T.CCEmailField AS Campaign_CCEmailField, \r\n            T.SMTPServer AS");
            viewString.Append(" Campaign_SMTPServer, \r\n            T.FromAddress AS Campaign_FromAddress, \r\n   ");
            viewString.Append("         T.ReturnPathAddress AS Campaign_ReturnPathAddress, \r\n            T.Repl");
            viewString.Append("yToAddress AS Campaign_ReplyToAddress, \r\n            T.ErrorsToAddress AS Campai");
            viewString.Append("gn_ErrorsToAddress, \r\n            T.SMTPServerType AS Campaign_SMTPServerType, \r");
            viewString.Append("\n            T.EnableSchedule AS Campaign_EnableSchedule, \r\n            T.StartD");
            viewString.Append("ateTime AS Campaign_StartDateTime, \r\n            T.RepeatEvery AS Campaign_Repea");
            viewString.Append("tEvery, \r\n            T.RepeatInterval AS Campaign_RepeatInterval, \r\n           ");
            viewString.Append(" T.LastRunOn AS Campaign_LastRunOn, \r\n            T.MessageType AS Campaign_Mess");
            viewString.Append("ageType, \r\n            T.ABMessaging AS Campaign_ABMessaging, \r\n            T.Su");
            viewString.Append("bjectB AS Campaign_SubjectB, \r\n            T.HTMLMessageB AS Campaign_HTMLMessag");
            viewString.Append("eB, \r\n            T.IncludePlainText AS Campaign_IncludePlainText, \r\n           ");
            viewString.Append(" T.SMTPDelaySeconds AS Campaign_SMTPDelaySeconds, \r\n            T.EmailAddressLo");
            viewString.Append("gFiles AS Campaign_EmailAddressLogFiles, \r\n            T.PlainTextMessageA AS Ca");
            viewString.Append("mpaign_PlainTextMessageA, \r\n            T.PlainTextMessageB AS Campaign_PlainTex");
            viewString.Append("tMessageB, \r\n            T.UId AS Campaign_UId, \r\n            T.Private AS Campa");
            viewString.Append("ign_Private, \r\n            T.SubscribeEmailUpdateField AS Campaign_SubscribeEmai");
            viewString.Append("lUpdateField, \r\n            T.UnsubscribeEmailHyperlinkText AS Campaign_Unsubscr");
            viewString.Append("ibeEmailHyperlinkText, \r\n            T.SubscribeEmailAddress AS Campaign_Subscri");
            viewString.Append("beEmailAddress, \r\n            T.SubscribeEmailHyperlinkText AS Campaign_Subscrib");
            viewString.Append("eEmailHyperlinkText, \r\n            T.UnSubscribeCount AS Campaign_UnSubscribeCou");
            viewString.Append("nt, \r\n            T.SubscribeCount AS Campaign_SubscribeCount, \r\n            T.B");
            viewString.Append("ounceCount AS Campaign_BounceCount, \r\n            T.LastRunEndDateTime AS Campai");
            viewString.Append("gn_LastRunEndDateTime, \r\n            T.MessageCount AS Campaign_MessageCount, \r\n");
            viewString.Append("            T.SuccessCount AS Campaign_SuccessCount, \r\n            T.FailedCount");
            viewString.Append(" AS Campaign_FailedCount, \r\n            T.EnableLogFiles AS Campaign_EnableLogFi");
            viewString.Append("les, \r\n            T.ContinueIfWritebackError AS Campaign_ContinueIfWritebackErr");
            viewString.Append("or, \r\n            T.EmailFieldPreviewColumn2 AS Campaign_EmailFieldPreviewColumn");
            viewString.Append("2, \r\n            T.EmailFieldPreviewColumn3 AS Campaign_EmailFieldPreviewColumn3");
            viewString.Append(", \r\n            T.AttachmentFileName AS Campaign_AttachmentFileName, \r\n         ");
            viewString.Append("   T.ClearCounters AS Campaign_ClearCounters, \r\n            T.SMTPServer2 AS Cam");
            viewString.Append("paign_SMTPServer2, \r\n            T.LockedByUID AS Campaign_LockedByUID, \r\n      ");
            viewString.Append("      T.UnSubscribeCountTotal AS Campaign_UnSubscribeCountTotal, \r\n            T");
            viewString.Append(".SubscribeCountTotal AS Campaign_SubscribeCountTotal, \r\n            T.BounceCoun");
            viewString.Append("tTotal AS Campaign_BounceCountTotal, \r\n            T.EnableEmailAddressCache AS ");
            viewString.Append("Campaign_EnableEmailAddressCache, \r\n            T.OpenedCount AS Campaign_Opened");
            viewString.Append("Count, \r\n            T.OpenedCountTotal AS Campaign_OpenedCountTotal, \r\n        ");
            viewString.Append("    T.OpenedEmailUpdateField AS Campaign_OpenedEmailUpdateField, \r\n            T");
            viewString.Append(".EnableOpenedEmail AS Campaign_EnableOpenedEmail, \r\n            T.ABMessagingUpd");
            viewString.Append("ateField AS Campaign_ABMessagingUpdateField, \r\n            T.EmailLogFileAddress");
            viewString.Append("2 AS Campaign_EmailLogFileAddress2, \r\n            T.EmailLogFileAddress3 AS Camp");
            viewString.Append("aign_EmailLogFileAddress3, \r\n            T.CampaignCategory AS Campaign_Campaign");
            viewString.Append("Category, \r\n            T.SoftBounceCountTotal AS Campaign_SoftBounceCountTotal,");
            viewString.Append(" \r\n            T.SMTPUsername AS Campaign_SMTPUsername, \r\n            T.SMTPPass");
            viewString.Append("word AS Campaign_SMTPPassword, \r\n            T.EnableWriteBackTab AS Campaign_En");
            viewString.Append("ableWriteBackTab, \r\n            T.EnableClickThruTab AS Campaign_EnableClickThru");
            viewString.Append("Tab, \r\n            T.UnsubscribeMethod AS Campaign_UnsubscribeMethod, \r\n        ");
            viewString.Append("    T.UseWYSWYG AS Campaign_UseWYSWYG, \r\n            T.CreationDate AS Campaign_");
            viewString.Append("CreationDate, \r\n            T.Status AS Campaign_Status, \r\n            T.Validat");
            viewString.Append("eEmail AS Campaign_ValidateEmail, \r\n            T.CampaignType AS Campaign_Campa");
            viewString.Append("ignType, \r\n            T.SystemSiteId AS Campaign_SystemSiteId, \r\n            T.");
            viewString.Append("IncludeCorporateCustomers AS Campaign_IncludeCorporateCustomers, \r\n            T");
            viewString.Append(".IsEnabled AS Campaign_IsEnabled, \r\n            T.SendEmailAfterDays AS Campaign");
            viewString.Append("_SendEmailAfterDays, \r\n            T.EmailEvent AS Campaign_EmailEvent, \r\n      ");
            viewString.Append("      T.isSystemEmail AS Campaign_isSystemEmail, \r\n            T.FlagIDs AS Camp");
            viewString.Append("aign_FlagIDs, \r\n            T.CustomerTypeIDs AS Campaign_CustomerTypeIDs, \r\n   ");
            viewString.Append("         T.GroupIDs AS Campaign_GroupIDs, \r\n            T.FromName AS Campaign_F");
            viewString.Append("romName, \r\n            T.CampaignReportId AS Campaign_CampaignReportId, \r\n      ");
            viewString.Append("      T.OrganisationId AS Campaign_OrganisationId, \r\n            T.CompanyId AS ");
            viewString.Append("Campaign_CompanyId, \r\n            T.UnsubscribeEmailAddress AS Campaign_Unsubscr");
            viewString.Append("ibeEmailAddress, \r\n            T.IncludeNewsLetterSubscribers AS Campaign_Includ");
            viewString.Append("eNewsLetterSubscribers, \r\n            True AS _from0\r\n        FROM DomainModelsS");
            viewString.Append("toreContainer.Campaign AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Campaigns", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignEmailVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView170()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignEmailVariables", @"
    SELECT VALUE -- Constructing CampaignEmailVariables
        [DomainModels.CampaignEmailVariable](T1.CampaignEmailVariable_VariableId, T1.CampaignEmailVariable_VariableName, T1.CampaignEmailVariable_RefTableName, T1.CampaignEmailVariable_RefFieldName, T1.CampaignEmailVariable_CriteriaFieldName, T1.CampaignEmailVariable_Description, T1.CampaignEmailVariable_SectionId, T1.CampaignEmailVariable_VariableTag, T1.CampaignEmailVariable_Key, T1.CampaignEmailVariable_OrganisationId)
    FROM (
        SELECT 
            T.VariableId AS CampaignEmailVariable_VariableId, 
            T.VariableName AS CampaignEmailVariable_VariableName, 
            T.RefTableName AS CampaignEmailVariable_RefTableName, 
            T.RefFieldName AS CampaignEmailVariable_RefFieldName, 
            T.CriteriaFieldName AS CampaignEmailVariable_CriteriaFieldName, 
            T.Description AS CampaignEmailVariable_Description, 
            T.SectionId AS CampaignEmailVariable_SectionId, 
            T.VariableTag AS CampaignEmailVariable_VariableTag, 
            T.[Key] AS CampaignEmailVariable_Key, 
            T.OrganisationId AS CampaignEmailVariable_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CampaignEmailVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView171()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignImages", @"
    SELECT VALUE -- Constructing CampaignImages
        [DomainModels.CampaignImage](T1.CampaignImage_CampaignImageId, T1.CampaignImage_CampaignId, T1.CampaignImage_ImagePath, T1.CampaignImage_ImageName)
    FROM (
        SELECT 
            T.CampaignImageId AS CampaignImage_CampaignImageId, 
            T.CampaignId AS CampaignImage_CampaignId, 
            T.ImagePath AS CampaignImage_ImagePath, 
            T.ImageName AS CampaignImage_ImageName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CampaignImage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DeliveryNotes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView172()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2793);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DeliveryNotes\r\n        [DomainModels.Delivery");
            viewString.Append("Note](T1.DeliveryNote_DeliveryNoteId, T1.DeliveryNote_Code, T1.DeliveryNote_Deli");
            viewString.Append("veryDate, T1.DeliveryNote_OrderReff, T1.DeliveryNote_footnote, T1.DeliveryNote_C");
            viewString.Append("omments, T1.DeliveryNote_LockedBy, T1.DeliveryNote_IsStatus, T1.DeliveryNote_Con");
            viewString.Append("tactId, T1.DeliveryNote_ContactCompany, T1.DeliveryNote_CustomerOrderReff, T1.De");
            viewString.Append("liveryNote_AddressId, T1.DeliveryNote_CreatedBy, T1.DeliveryNote_CreationDateTim");
            viewString.Append("e, T1.DeliveryNote_SupplierId, T1.DeliveryNote_SupplierTelNo, T1.DeliveryNote_Cs");
            viewString.Append("No, T1.DeliveryNote_SupplierURL, T1.DeliveryNote_RaisedBy, T1.DeliveryNote_FlagI");
            viewString.Append("d, T1.DeliveryNote_EstimateId, T1.DeliveryNote_JobId, T1.DeliveryNote_InvoiceId,");
            viewString.Append(" T1.DeliveryNote_OrderId, T1.DeliveryNote_UserNotes, T1.DeliveryNote_NotesUpdate");
            viewString.Append("DateTime, T1.DeliveryNote_NotesUpdatedByUserId, T1.DeliveryNote_SystemSiteId, T1");
            viewString.Append(".DeliveryNote_IsRead, T1.DeliveryNote_IsPrinted, T1.DeliveryNote_CompanyId)\r\n   ");
            viewString.Append(" FROM (\r\n        SELECT \r\n            T.DeliveryNoteId AS DeliveryNote_DeliveryN");
            viewString.Append("oteId, \r\n            T.Code AS DeliveryNote_Code, \r\n            T.DeliveryDate A");
            viewString.Append("S DeliveryNote_DeliveryDate, \r\n            T.OrderReff AS DeliveryNote_OrderReff");
            viewString.Append(", \r\n            T.footnote AS DeliveryNote_footnote, \r\n            T.Comments AS");
            viewString.Append(" DeliveryNote_Comments, \r\n            T.LockedBy AS DeliveryNote_LockedBy, \r\n   ");
            viewString.Append("         T.IsStatus AS DeliveryNote_IsStatus, \r\n            T.ContactId AS Deliv");
            viewString.Append("eryNote_ContactId, \r\n            T.ContactCompany AS DeliveryNote_ContactCompany");
            viewString.Append(", \r\n            T.CustomerOrderReff AS DeliveryNote_CustomerOrderReff, \r\n       ");
            viewString.Append("     T.AddressId AS DeliveryNote_AddressId, \r\n            T.CreatedBy AS Deliver");
            viewString.Append("yNote_CreatedBy, \r\n            T.CreationDateTime AS DeliveryNote_CreationDateTi");
            viewString.Append("me, \r\n            T.SupplierId AS DeliveryNote_SupplierId, \r\n            T.Suppl");
            viewString.Append("ierTelNo AS DeliveryNote_SupplierTelNo, \r\n            T.CsNo AS DeliveryNote_CsN");
            viewString.Append("o, \r\n            T.SupplierURL AS DeliveryNote_SupplierURL, \r\n            T.Rais");
            viewString.Append("edBy AS DeliveryNote_RaisedBy, \r\n            T.FlagId AS DeliveryNote_FlagId, \r\n");
            viewString.Append("            T.EstimateId AS DeliveryNote_EstimateId, \r\n            T.JobId AS De");
            viewString.Append("liveryNote_JobId, \r\n            T.InvoiceId AS DeliveryNote_InvoiceId, \r\n       ");
            viewString.Append("     T.OrderId AS DeliveryNote_OrderId, \r\n            T.UserNotes AS DeliveryNot");
            viewString.Append("e_UserNotes, \r\n            T.NotesUpdateDateTime AS DeliveryNote_NotesUpdateDate");
            viewString.Append("Time, \r\n            T.NotesUpdatedByUserId AS DeliveryNote_NotesUpdatedByUserId,");
            viewString.Append(" \r\n            T.SystemSiteId AS DeliveryNote_SystemSiteId, \r\n            T.IsRe");
            viewString.Append("ad AS DeliveryNote_IsRead, \r\n            T.IsPrinted AS DeliveryNote_IsPrinted, ");
            viewString.Append("\r\n            T.CompanyId AS DeliveryNote_CompanyId, \r\n            True AS _from");
            viewString.Append("0\r\n        FROM DomainModelsStoreContainer.DeliveryNote AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DeliveryNotes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DeliveryNoteDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView173()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DeliveryNoteDetails", @"
    SELECT VALUE -- Constructing DeliveryNoteDetails
        [DomainModels.DeliveryNoteDetail](T1.DeliveryNoteDetail_DeliveryDetailid, T1.DeliveryNoteDetail_DeliveryNoteId, T1.DeliveryNoteDetail_Description, T1.DeliveryNoteDetail_ItemId, T1.DeliveryNoteDetail_ItemQty, T1.DeliveryNoteDetail_GrossItemTotal)
    FROM (
        SELECT 
            T.DeliveryDetailid AS DeliveryNoteDetail_DeliveryDetailid, 
            T.DeliveryNoteId AS DeliveryNoteDetail_DeliveryNoteId, 
            T.Description AS DeliveryNoteDetail_Description, 
            T.ItemId AS DeliveryNoteDetail_ItemId, 
            T.ItemQty AS DeliveryNoteDetail_ItemQty, 
            T.GrossItemTotal AS DeliveryNoteDetail_GrossItemTotal, 
            True AS _from0
        FROM DomainModelsStoreContainer.DeliveryNoteDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyCMYKColors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView174()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyCMYKColors", @"
    SELECT VALUE -- Constructing CompanyCMYKColors
        [DomainModels.CompanyCMYKColor](T1.CompanyCMYKColor_ColorId, T1.CompanyCMYKColor_CompanyId, T1.CompanyCMYKColor_ColorName, T1.CompanyCMYKColor_ColorC, T1.CompanyCMYKColor_ColorM, T1.CompanyCMYKColor_ColorY, T1.CompanyCMYKColor_ColorK)
    FROM (
        SELECT 
            T.ColorId AS CompanyCMYKColor_ColorId, 
            T.CompanyId AS CompanyCMYKColor_CompanyId, 
            T.ColorName AS CompanyCMYKColor_ColorName, 
            T.ColorC AS CompanyCMYKColor_ColorC, 
            T.ColorM AS CompanyCMYKColor_ColorM, 
            T.ColorY AS CompanyCMYKColor_ColorY, 
            T.ColorK AS CompanyCMYKColor_ColorK, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyCMYKColor AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Currencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView175()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Currencies", @"
    SELECT VALUE -- Constructing Currencies
        [DomainModels.Currency](T1.Currency_CurrencyId, T1.Currency_CurrencyCode, T1.Currency_CurrencyName, T1.Currency_CurrencySymbol)
    FROM (
        SELECT 
            T.CurrencyId AS Currency_CurrencyId, 
            T.CurrencyCode AS Currency_CurrencyCode, 
            T.CurrencyName AS Currency_CurrencyName, 
            T.CurrencySymbol AS Currency_CurrencySymbol, 
            True AS _from0
        FROM DomainModelsStoreContainer.Currency AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemAddonCostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView176()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemAddonCostCentres", @"
    SELECT VALUE -- Constructing ItemAddonCostCentres
        [DomainModels.ItemAddonCostCentre](T1.ItemAddonCostCentre_ProductAddOnId, T1.ItemAddonCostCentre_ItemStockOptionId, T1.ItemAddonCostCentre_CostCentreId, T1.ItemAddonCostCentre_DiscountPercentage, T1.ItemAddonCostCentre_IsDiscounted, T1.ItemAddonCostCentre_Sequence, T1.ItemAddonCostCentre_IsMandatory)
    FROM (
        SELECT 
            T.ProductAddOnId AS ItemAddonCostCentre_ProductAddOnId, 
            T.ItemStockOptionId AS ItemAddonCostCentre_ItemStockOptionId, 
            T.CostCentreId AS ItemAddonCostCentre_CostCentreId, 
            T.DiscountPercentage AS ItemAddonCostCentre_DiscountPercentage, 
            T.IsDiscounted AS ItemAddonCostCentre_IsDiscounted, 
            T.Sequence AS ItemAddonCostCentre_Sequence, 
            T.IsMandatory AS ItemAddonCostCentre_IsMandatory, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemAddonCostCentre AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemVideos
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView177()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemVideos", @"
    SELECT VALUE -- Constructing ItemVideos
        [DomainModels.ItemVideo](T1.ItemVideo_VideoId, T1.ItemVideo_VideoLink, T1.ItemVideo_Caption, T1.ItemVideo_ItemId)
    FROM (
        SELECT 
            T.VideoId AS ItemVideo_VideoId, 
            T.VideoLink AS ItemVideo_VideoLink, 
            T.Caption AS ItemVideo_Caption, 
            T.ItemId AS ItemVideo_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemVideo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Addresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView178()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2484);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Addresses\r\n        [DomainModels.Address](T1.");
            viewString.Append("Address_AddressId, T1.Address_CompanyId, T1.Address_AddressName, T1.Address_Addr");
            viewString.Append("ess1, T1.Address_Address2, T1.Address_Address3, T1.Address_City, T1.Address_Post");
            viewString.Append("Code, T1.Address_Fax, T1.Address_Email, T1.Address_URL, T1.Address_Tel1, T1.Addr");
            viewString.Append("ess_Tel2, T1.Address_Extension1, T1.Address_Extension2, T1.Address_Reference, T1");
            viewString.Append(".Address_FAO, T1.Address_IsDefaultAddress, T1.Address_IsDefaultShippingAddress, ");
            viewString.Append("T1.Address_isArchived, T1.Address_TerritoryId, T1.Address_GeoLatitude, T1.Addres");
            viewString.Append("s_GeoLongitude, T1.Address_isPrivate, T1.Address_ContactId, T1.Address_isDefault");
            viewString.Append("TerrorityBilling, T1.Address_isDefaultTerrorityShipping, T1.Address_Organisation");
            viewString.Append("Id, T1.Address_DisplayOnContactUs, T1.Address_StateId, T1.Address_CountryId)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.AddressId AS Address_AddressId, \r\n     ");
            viewString.Append("       T.CompanyId AS Address_CompanyId, \r\n            T.AddressName AS Address_");
            viewString.Append("AddressName, \r\n            T.Address1 AS Address_Address1, \r\n            T.Addre");
            viewString.Append("ss2 AS Address_Address2, \r\n            T.Address3 AS Address_Address3, \r\n       ");
            viewString.Append("     T.City AS Address_City, \r\n            T.PostCode AS Address_PostCode, \r\n   ");
            viewString.Append("         T.Fax AS Address_Fax, \r\n            T.Email AS Address_Email, \r\n       ");
            viewString.Append("     T.URL AS Address_URL, \r\n            T.Tel1 AS Address_Tel1, \r\n            T");
            viewString.Append(".Tel2 AS Address_Tel2, \r\n            T.Extension1 AS Address_Extension1, \r\n     ");
            viewString.Append("       T.Extension2 AS Address_Extension2, \r\n            T.Reference AS Address_");
            viewString.Append("Reference, \r\n            T.FAO AS Address_FAO, \r\n            T.IsDefaultAddress ");
            viewString.Append("AS Address_IsDefaultAddress, \r\n            T.IsDefaultShippingAddress AS Address");
            viewString.Append("_IsDefaultShippingAddress, \r\n            T.isArchived AS Address_isArchived, \r\n ");
            viewString.Append("           T.TerritoryId AS Address_TerritoryId, \r\n            T.GeoLatitude AS ");
            viewString.Append("Address_GeoLatitude, \r\n            T.GeoLongitude AS Address_GeoLongitude, \r\n   ");
            viewString.Append("         T.isPrivate AS Address_isPrivate, \r\n            T.ContactId AS Address_");
            viewString.Append("ContactId, \r\n            T.isDefaultTerrorityBilling AS Address_isDefaultTerrori");
            viewString.Append("tyBilling, \r\n            T.isDefaultTerrorityShipping AS Address_isDefaultTerror");
            viewString.Append("ityShipping, \r\n            T.OrganisationId AS Address_OrganisationId, \r\n       ");
            viewString.Append("     T.DisplayOnContactUs AS Address_DisplayOnContactUs, \r\n            T.StateId");
            viewString.Append(" AS Address_StateId, \r\n            T.CountryId AS Address_CountryId, \r\n         ");
            viewString.Append("   True AS _from0\r\n        FROM DomainModelsStoreContainer.Address AS T\r\n    ) A");
            viewString.Append("S T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Addresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ColorPalletes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView179()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ColorPalletes", @"
    SELECT VALUE -- Constructing ColorPalletes
        [DomainModels.ColorPallete](T1.ColorPallete_PalleteId, T1.ColorPallete_PalleteName, T1.ColorPallete_Color1, T1.ColorPallete_Color2, T1.ColorPallete_Color3, T1.ColorPallete_Color4, T1.ColorPallete_Color5, T1.ColorPallete_Color6, T1.ColorPallete_Color7, T1.ColorPallete_SkinId, T1.ColorPallete_IsDefault, T1.ColorPallete_CompanyId)
    FROM (
        SELECT 
            T.PalleteId AS ColorPallete_PalleteId, 
            T.PalleteName AS ColorPallete_PalleteName, 
            T.Color1 AS ColorPallete_Color1, 
            T.Color2 AS ColorPallete_Color2, 
            T.Color3 AS ColorPallete_Color3, 
            T.Color4 AS ColorPallete_Color4, 
            T.Color5 AS ColorPallete_Color5, 
            T.Color6 AS ColorPallete_Color6, 
            T.Color7 AS ColorPallete_Color7, 
            T.SkinId AS ColorPallete_SkinId, 
            T.isDefault AS ColorPallete_IsDefault, 
            T.CompanyId AS ColorPallete_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ColorPallete AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Templates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView180()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3727);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Templates\r\n        [DomainModels.Template](T1");
            viewString.Append(".Template_ProductId, T1.Template_Code, T1.Template_ProductName, T1.Template_Desc");
            viewString.Append("ription, T1.Template_Thumbnail, T1.Template_Image, T1.Template_IsDisabled, T1.Te");
            viewString.Append("mplate_PDFTemplateWidth, T1.Template_PDFTemplateHeight, T1.Template_CuttingMargi");
            viewString.Append("n, T1.Template_MultiPageCount, T1.Template_Orientation, T1.Template_MatchingSetT");
            viewString.Append("heme, T1.Template_BaseColorID, T1.Template_SubmittedBy, T1.Template_SubmittedByN");
            viewString.Append("ame, T1.Template_SubmitDate, T1.Template_Status, T1.Template_ApprovedBy, T1.Temp");
            viewString.Append("late_ApprovedByName, T1.Template_UserRating, T1.Template_UsedCount, T1.Template_");
            viewString.Append("MPCRating, T1.Template_RejectionReason, T1.Template_ApprovalDate, T1.Template_Te");
            viewString.Append("mpString, T1.Template_MatchingSetID, T1.Template_FullView, T1.Template_SLThumbna");
            viewString.Append("il, T1.Template_SuperView, T1.Template_ColorHex, T1.Template_TemplateOwner, T1.T");
            viewString.Append("emplate_TemplateOwnerName, T1.Template_IsPrivate, T1.Template_ApprovedDate, T1.T");
            viewString.Append("emplate_IsCorporateEditable, T1.Template_TemplateType, T1.Template_isWatermarkTe");
            viewString.Append("xt, T1.Template_isSpotTemplate, T1.Template_isCreatedManual, T1.Template_isEdito");
            viewString.Append("rChoice, T1.Template_ProductCategoryId, T1.Template_contactId, T1.Template_realE");
            viewString.Append("stateId)\r\n    FROM (\r\n        SELECT \r\n            T.ProductId AS Template_Produ");
            viewString.Append("ctId, \r\n            T.Code AS Template_Code, \r\n            T.ProductName AS Temp");
            viewString.Append("late_ProductName, \r\n            T.Description AS Template_Description, \r\n       ");
            viewString.Append("     T.Thumbnail AS Template_Thumbnail, \r\n            T.Image AS Template_Image,");
            viewString.Append(" \r\n            T.IsDisabled AS Template_IsDisabled, \r\n            T.PDFTemplateW");
            viewString.Append("idth AS Template_PDFTemplateWidth, \r\n            T.PDFTemplateHeight AS Template");
            viewString.Append("_PDFTemplateHeight, \r\n            T.CuttingMargin AS Template_CuttingMargin, \r\n ");
            viewString.Append("           T.MultiPageCount AS Template_MultiPageCount, \r\n            T.Orientat");
            viewString.Append("ion AS Template_Orientation, \r\n            T.MatchingSetTheme AS Template_Matchi");
            viewString.Append("ngSetTheme, \r\n            T.BaseColorID AS Template_BaseColorID, \r\n            T");
            viewString.Append(".SubmittedBy AS Template_SubmittedBy, \r\n            T.SubmittedByName AS Templat");
            viewString.Append("e_SubmittedByName, \r\n            T.SubmitDate AS Template_SubmitDate, \r\n        ");
            viewString.Append("    T.Status AS Template_Status, \r\n            T.ApprovedBy AS Template_Approved");
            viewString.Append("By, \r\n            T.ApprovedByName AS Template_ApprovedByName, \r\n            T.U");
            viewString.Append("serRating AS Template_UserRating, \r\n            T.UsedCount AS Template_UsedCoun");
            viewString.Append("t, \r\n            T.MPCRating AS Template_MPCRating, \r\n            T.RejectionRea");
            viewString.Append("son AS Template_RejectionReason, \r\n            T.ApprovalDate AS Template_Approv");
            viewString.Append("alDate, \r\n            T.TempString AS Template_TempString, \r\n            T.Match");
            viewString.Append("ingSetID AS Template_MatchingSetID, \r\n            T.FullView AS Template_FullVie");
            viewString.Append("w, \r\n            T.SLThumbnail AS Template_SLThumbnail, \r\n            T.SuperVie");
            viewString.Append("w AS Template_SuperView, \r\n            T.ColorHex AS Template_ColorHex, \r\n      ");
            viewString.Append("      T.TemplateOwner AS Template_TemplateOwner, \r\n            T.TemplateOwnerNa");
            viewString.Append("me AS Template_TemplateOwnerName, \r\n            T.IsPrivate AS Template_IsPrivat");
            viewString.Append("e, \r\n            T.ApprovedDate AS Template_ApprovedDate, \r\n            T.IsCorp");
            viewString.Append("orateEditable AS Template_IsCorporateEditable, \r\n            T.TemplateType AS T");
            viewString.Append("emplate_TemplateType, \r\n            T.isWatermarkText AS Template_isWatermarkTex");
            viewString.Append("t, \r\n            T.isSpotTemplate AS Template_isSpotTemplate, \r\n            T.is");
            viewString.Append("CreatedManual AS Template_isCreatedManual, \r\n            T.isEditorChoice AS Tem");
            viewString.Append("plate_isEditorChoice, \r\n            T.ProductCategoryId AS Template_ProductCateg");
            viewString.Append("oryId, \r\n            T.contactId AS Template_contactId, \r\n            T.realEsta");
            viewString.Append("teId AS Template_realEstateId, \r\n            True AS _from0\r\n        FROM Domain");
            viewString.Append("ModelsStoreContainer.Template AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Templates", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplatePages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView181()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplatePages", "\r\n    SELECT VALUE -- Constructing TemplatePages\r\n        [DomainModels.TemplateP" +
                    "age](T1.TemplatePage_ProductPageId, T1.TemplatePage_ProductId, T1.TemplatePage_P" +
                    "ageNo, T1.TemplatePage_PageType, T1.TemplatePage_Orientation, T1.TemplatePage_Ba" +
                    "ckGroundType, T1.TemplatePage_BackgroundFileName, T1.TemplatePage_ColorC, T1.Tem" +
                    "platePage_ColorM, T1.TemplatePage_ColorY, T1.TemplatePage_PageName, T1.TemplateP" +
                    "age_ColorK, T1.TemplatePage_IsPrintable, T1.TemplatePage_hasOverlayObjects, T1.T" +
                    "emplatePage_Width, T1.TemplatePage_Height)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.ProductPageId AS TemplatePage_ProductPageId, \r\n            T.ProductId AS" +
                    " TemplatePage_ProductId, \r\n            T.PageNo AS TemplatePage_PageNo, \r\n      " +
                    "      T.PageType AS TemplatePage_PageType, \r\n            T.Orientation AS Templa" +
                    "tePage_Orientation, \r\n            T.BackGroundType AS TemplatePage_BackGroundTyp" +
                    "e, \r\n            T.BackgroundFileName AS TemplatePage_BackgroundFileName, \r\n    " +
                    "        T.ColorC AS TemplatePage_ColorC, \r\n            T.ColorM AS TemplatePage_" +
                    "ColorM, \r\n            T.ColorY AS TemplatePage_ColorY, \r\n            T.PageName " +
                    "AS TemplatePage_PageName, \r\n            T.ColorK AS TemplatePage_ColorK, \r\n     " +
                    "       T.IsPrintable AS TemplatePage_IsPrintable, \r\n            T.hasOverlayObje" +
                    "cts AS TemplatePage_hasOverlayObjects, \r\n            T.Width AS TemplatePage_Wid" +
                    "th, \r\n            T.Height AS TemplatePage_Height, \r\n            True AS _from0\r" +
                    "\n        FROM DomainModelsStoreContainer.TemplatePage AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GlobalLanguages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView182()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GlobalLanguages", @"
    SELECT VALUE -- Constructing GlobalLanguages
        [DomainModels.GlobalLanguage](T1.GlobalLanguage_LanguageId, T1.GlobalLanguage_FriendlyName, T1.GlobalLanguage_uiCulture, T1.GlobalLanguage_culture)
    FROM (
        SELECT 
            T.LanguageId AS GlobalLanguage_LanguageId, 
            T.FriendlyName AS GlobalLanguage_FriendlyName, 
            T.uiCulture AS GlobalLanguage_uiCulture, 
            T.culture AS GlobalLanguage_culture, 
            True AS _from0
        FROM DomainModelsStoreContainer.GlobalLanguage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsPageTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView183()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsPageTags", @"
    SELECT VALUE -- Constructing CmsPageTags
        [DomainModels.CmsPageTag](T1.CmsPageTag_TagId, T1.CmsPageTag_PageId, T1.CmsPageTag_PageTagId, T1.CmsPageTag_CompanyId)
    FROM (
        SELECT 
            T.TagId AS CmsPageTag_TagId, 
            T.PageId AS CmsPageTag_PageId, 
            T.PageTagId AS CmsPageTag_PageTagId, 
            T.CompanyId AS CmsPageTag_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsPageTag AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsTags
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView184()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsTags", @"
    SELECT VALUE -- Constructing CmsTags
        [DomainModels.CmsTag](T1.CmsTag_TagId, T1.CmsTag_TagName, T1.CmsTag_TagSlug, T1.CmsTag_Description, T1.CmsTag_IsDisplay)
    FROM (
        SELECT 
            T.TagId AS CmsTag_TagId, 
            T.TagName AS CmsTag_TagName, 
            T.TagSlug AS CmsTag_TagSlug, 
            T.Description AS CmsTag_Description, 
            T.isDisplay AS CmsTag_IsDisplay, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsTags AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView185()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreTypes", @"
    SELECT VALUE -- Constructing CostCentreTypes
        [DomainModels.CostCentreType](T1.CostCentreType_TypeId, T1.CostCentreType_TypeName, T1.CostCentreType_IsSystem, T1.CostCentreType_IsExternal, T1.CostCentreType_OrganisationId)
    FROM (
        SELECT 
            T.TypeId AS CostCentreType_TypeId, 
            T.TypeName AS CostCentreType_TypeName, 
            T.IsSystem AS CostCentreType_IsSystem, 
            T.IsExternal AS CostCentreType_IsExternal, 
            T.OrganisationId AS CostCentreType_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.FieldVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView186()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.FieldVariables", "\r\n    SELECT VALUE -- Constructing FieldVariables\r\n        [DomainModels.FieldVar" +
                    "iable](T1.FieldVariable_VariableId, T1.FieldVariable_VariableName, T1.FieldVaria" +
                    "ble_RefTableName, T1.FieldVariable_CriteriaFieldName, T1.FieldVariable_VariableS" +
                    "ectionId, T1.FieldVariable_VariableTag, T1.FieldVariable_SortOrder, T1.FieldVari" +
                    "able_KeyField, T1.FieldVariable_VariableType, T1.FieldVariable_Scope, T1.FieldVa" +
                    "riable_WaterMark, T1.FieldVariable_DefaultValue, T1.FieldVariable_InputMask, T1." +
                    "FieldVariable_CompanyId, T1.FieldVariable_OrganisationId, T1.FieldVariable_IsSys" +
                    "tem, T1.FieldVariable_VariableTitle)\r\n    FROM (\r\n        SELECT \r\n            T" +
                    ".VariableId AS FieldVariable_VariableId, \r\n            T.VariableName AS FieldVa" +
                    "riable_VariableName, \r\n            T.RefTableName AS FieldVariable_RefTableName," +
                    " \r\n            T.CriteriaFieldName AS FieldVariable_CriteriaFieldName, \r\n       " +
                    "     T.VariableSectionId AS FieldVariable_VariableSectionId, \r\n            T.Var" +
                    "iableTag AS FieldVariable_VariableTag, \r\n            T.SortOrder AS FieldVariabl" +
                    "e_SortOrder, \r\n            T.KeyField AS FieldVariable_KeyField, \r\n            T" +
                    ".VariableType AS FieldVariable_VariableType, \r\n            T.Scope AS FieldVaria" +
                    "ble_Scope, \r\n            T.WaterMark AS FieldVariable_WaterMark, \r\n            T" +
                    ".DefaultValue AS FieldVariable_DefaultValue, \r\n            T.InputMask AS FieldV" +
                    "ariable_InputMask, \r\n            T.CompanyId AS FieldVariable_CompanyId, \r\n     " +
                    "       T.OrganisationId AS FieldVariable_OrganisationId, \r\n            T.IsSyste" +
                    "m AS FieldVariable_IsSystem, \r\n            T.VariableTitle AS FieldVariable_Vari" +
                    "ableTitle, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer" +
                    ".FieldVariable AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView187()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateVariables", @"
    SELECT VALUE -- Constructing TemplateVariables
        [DomainModels.TemplateVariable](T1.TemplateVariable_ProductVariableId, T1.TemplateVariable_TemplateId, T1.TemplateVariable_VariableId, T1.TemplateVariable_VariableText)
    FROM (
        SELECT 
            T.ProductVariableId AS TemplateVariable_ProductVariableId, 
            T.TemplateId AS TemplateVariable_TemplateId, 
            T.VariableId AS TemplateVariable_VariableId, 
            T.VariableText AS TemplateVariable_VariableText, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateBackgroundImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView188()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2377);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateBackgroundImages\r\n        [DomainMode");
            viewString.Append("ls.TemplateBackgroundImage](T1.TemplateBackgroundImage_Id, T1.TemplateBackground");
            viewString.Append("Image_ProductId, T1.TemplateBackgroundImage_ImageName, T1.TemplateBackgroundImag");
            viewString.Append("e_Name, T1.TemplateBackgroundImage_flgPhotobook, T1.TemplateBackgroundImage_flgC");
            viewString.Append("over, T1.TemplateBackgroundImage_BackgroundImageAbsolutePath, T1.TemplateBackgro");
            viewString.Append("undImage_BackgroundImageRelativePath, T1.TemplateBackgroundImage_ImageType, T1.T");
            viewString.Append("emplateBackgroundImage_ImageWidth, T1.TemplateBackgroundImage_ImageHeight, T1.Te");
            viewString.Append("mplateBackgroundImage_ImageTitle, T1.TemplateBackgroundImage_ImageDescription, T");
            viewString.Append("1.TemplateBackgroundImage_ImageKeywords, T1.TemplateBackgroundImage_UploadedFrom");
            viewString.Append(", T1.TemplateBackgroundImage_ContactCompanyId, T1.TemplateBackgroundImage_Contac");
            viewString.Append("tId, T1.TemplateBackgroundImage_hasClippingPath, T1.TemplateBackgroundImage_clip");
            viewString.Append("pingFileName)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS TemplateBackgrou");
            viewString.Append("ndImage_Id, \r\n            T.ProductId AS TemplateBackgroundImage_ProductId, \r\n  ");
            viewString.Append("          T.ImageName AS TemplateBackgroundImage_ImageName, \r\n            T.Name");
            viewString.Append(" AS TemplateBackgroundImage_Name, \r\n            T.flgPhotobook AS TemplateBackgr");
            viewString.Append("oundImage_flgPhotobook, \r\n            T.flgCover AS TemplateBackgroundImage_flgC");
            viewString.Append("over, \r\n            T.BackgroundImageAbsolutePath AS TemplateBackgroundImage_Bac");
            viewString.Append("kgroundImageAbsolutePath, \r\n            T.BackgroundImageRelativePath AS Templat");
            viewString.Append("eBackgroundImage_BackgroundImageRelativePath, \r\n            T.ImageType AS Templ");
            viewString.Append("ateBackgroundImage_ImageType, \r\n            T.ImageWidth AS TemplateBackgroundIm");
            viewString.Append("age_ImageWidth, \r\n            T.ImageHeight AS TemplateBackgroundImage_ImageHeig");
            viewString.Append("ht, \r\n            T.ImageTitle AS TemplateBackgroundImage_ImageTitle, \r\n        ");
            viewString.Append("    T.ImageDescription AS TemplateBackgroundImage_ImageDescription, \r\n          ");
            viewString.Append("  T.ImageKeywords AS TemplateBackgroundImage_ImageKeywords, \r\n            T.Uplo");
            viewString.Append("adedFrom AS TemplateBackgroundImage_UploadedFrom, \r\n            T.ContactCompany");
            viewString.Append("Id AS TemplateBackgroundImage_ContactCompanyId, \r\n            T.ContactId AS Tem");
            viewString.Append("plateBackgroundImage_ContactId, \r\n            T.hasClippingPath AS TemplateBackg");
            viewString.Append("roundImage_hasClippingPath, \r\n            T.clippingFileName AS TemplateBackgrou");
            viewString.Append("ndImage_clippingFileName, \r\n            True AS _from0\r\n        FROM DomainModel");
            viewString.Append("sStoreContainer.TemplateBackgroundImage AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateBackgroundImages", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateObjects
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView189()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6133);
            viewString.Append("\r\n    SELECT VALUE -- Constructing TemplateObjects\r\n        [DomainModels.Templa");
            viewString.Append("teObject](T1.TemplateObject_ObjectId, T1.TemplateObject_ObjectType, T1.TemplateO");
            viewString.Append("bject_Name, T1.TemplateObject_IsEditable, T1.TemplateObject_IsHidden, T1.Templat");
            viewString.Append("eObject_IsMandatory, T1.TemplateObject_PositionX, T1.TemplateObject_PositionY, T");
            viewString.Append("1.TemplateObject_MaxHeight, T1.TemplateObject_MaxWidth, T1.TemplateObject_MaxCha");
            viewString.Append("racters, T1.TemplateObject_RotationAngle, T1.TemplateObject_IsFontCustom, T1.Tem");
            viewString.Append("plateObject_IsFontNamePrivate, T1.TemplateObject_FontName, T1.TemplateObject_Fon");
            viewString.Append("tSize, T1.TemplateObject_IsBold, T1.TemplateObject_IsItalic, T1.TemplateObject_A");
            viewString.Append("llignment, T1.TemplateObject_VAllignment, T1.TemplateObject_Indent, T1.TemplateO");
            viewString.Append("bject_IsUnderlinedText, T1.TemplateObject_ColorType, T1.TemplateObject_ColorName");
            viewString.Append(", T1.TemplateObject_ColorC, T1.TemplateObject_ColorM, T1.TemplateObject_ColorY, ");
            viewString.Append("T1.TemplateObject_ColorK, T1.TemplateObject_Tint, T1.TemplateObject_IsSpotColor,");
            viewString.Append(" T1.TemplateObject_SpotColorName, T1.TemplateObject_ContentString, T1.TemplateOb");
            viewString.Append("ject_ContentCaseType, T1.TemplateObject_ProductId, T1.TemplateObject_DisplayOrde");
            viewString.Append("rPdf, T1.TemplateObject_DisplayOrderTxtControl, T1.TemplateObject_RColor, T1.Tem");
            viewString.Append("plateObject_GColor, T1.TemplateObject_BColor, T1.TemplateObject_LineSpacing, T1.");
            viewString.Append("TemplateObject_ProductPageId, T1.TemplateObject_ParentId, T1.TemplateObject_Circ");
            viewString.Append("leRadiusX, T1.TemplateObject_Opacity, T1.TemplateObject_ExField1, T1.TemplateObj");
            viewString.Append("ect_ExField2, T1.TemplateObject_IsPositionLocked, T1.TemplateObject_ColorHex, T1");
            viewString.Append(".TemplateObject_CircleRadiusY, T1.TemplateObject_IsTextEditable, T1.TemplateObje");
            viewString.Append("ct_QuickTextOrder, T1.TemplateObject_IsQuickText, T1.TemplateObject_CharSpacing,");
            viewString.Append(" T1.TemplateObject_watermarkText, T1.TemplateObject_textStyles, T1.TemplateObjec");
            viewString.Append("t_AutoShrinkText, T1.TemplateObject_IsOverlayObject, T1.TemplateObject_ClippedIn");
            viewString.Append("fo, T1.TemplateObject_textCase, T1.TemplateObject_originalTextStyles, T1.Templat");
            viewString.Append("eObject_originalContentString, T1.TemplateObject_hasInlineFontStyle, T1.Template");
            viewString.Append("Object_autoCollapseText, T1.TemplateObject_hasClippingPath, T1.TemplateObject_is");
            viewString.Append("BulletPoint, T1.TemplateObject_TextPaddingTop)\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.ObjectId AS TemplateObject_ObjectId, \r\n            T.ObjectType AS Te");
            viewString.Append("mplateObject_ObjectType, \r\n            T.Name AS TemplateObject_Name, \r\n        ");
            viewString.Append("    T.IsEditable AS TemplateObject_IsEditable, \r\n            T.IsHidden AS Templ");
            viewString.Append("ateObject_IsHidden, \r\n            T.IsMandatory AS TemplateObject_IsMandatory, \r");
            viewString.Append("\n            T.PositionX AS TemplateObject_PositionX, \r\n            T.PositionY ");
            viewString.Append("AS TemplateObject_PositionY, \r\n            T.MaxHeight AS TemplateObject_MaxHeig");
            viewString.Append("ht, \r\n            T.MaxWidth AS TemplateObject_MaxWidth, \r\n            T.MaxChar");
            viewString.Append("acters AS TemplateObject_MaxCharacters, \r\n            T.RotationAngle AS Templat");
            viewString.Append("eObject_RotationAngle, \r\n            T.IsFontCustom AS TemplateObject_IsFontCust");
            viewString.Append("om, \r\n            T.IsFontNamePrivate AS TemplateObject_IsFontNamePrivate, \r\n   ");
            viewString.Append("         T.FontName AS TemplateObject_FontName, \r\n            T.FontSize AS Temp");
            viewString.Append("lateObject_FontSize, \r\n            T.IsBold AS TemplateObject_IsBold, \r\n        ");
            viewString.Append("    T.IsItalic AS TemplateObject_IsItalic, \r\n            T.Allignment AS Templat");
            viewString.Append("eObject_Allignment, \r\n            T.VAllignment AS TemplateObject_VAllignment, \r");
            viewString.Append("\n            T.Indent AS TemplateObject_Indent, \r\n            T.IsUnderlinedText");
            viewString.Append(" AS TemplateObject_IsUnderlinedText, \r\n            T.ColorType AS TemplateObject");
            viewString.Append("_ColorType, \r\n            T.ColorName AS TemplateObject_ColorName, \r\n           ");
            viewString.Append(" T.ColorC AS TemplateObject_ColorC, \r\n            T.ColorM AS TemplateObject_Col");
            viewString.Append("orM, \r\n            T.ColorY AS TemplateObject_ColorY, \r\n            T.ColorK AS ");
            viewString.Append("TemplateObject_ColorK, \r\n            T.Tint AS TemplateObject_Tint, \r\n          ");
            viewString.Append("  T.IsSpotColor AS TemplateObject_IsSpotColor, \r\n            T.SpotColorName AS ");
            viewString.Append("TemplateObject_SpotColorName, \r\n            T.ContentString AS TemplateObject_Co");
            viewString.Append("ntentString, \r\n            T.ContentCaseType AS TemplateObject_ContentCaseType, ");
            viewString.Append("\r\n            T.ProductId AS TemplateObject_ProductId, \r\n            T.DisplayOr");
            viewString.Append("derPdf AS TemplateObject_DisplayOrderPdf, \r\n            T.DisplayOrderTxtControl");
            viewString.Append(" AS TemplateObject_DisplayOrderTxtControl, \r\n            T.RColor AS TemplateObj");
            viewString.Append("ect_RColor, \r\n            T.GColor AS TemplateObject_GColor, \r\n            T.BCo");
            viewString.Append("lor AS TemplateObject_BColor, \r\n            T.LineSpacing AS TemplateObject_Line");
            viewString.Append("Spacing, \r\n            T.ProductPageId AS TemplateObject_ProductPageId, \r\n      ");
            viewString.Append("      T.ParentId AS TemplateObject_ParentId, \r\n            T.CircleRadiusX AS Te");
            viewString.Append("mplateObject_CircleRadiusX, \r\n            T.Opacity AS TemplateObject_Opacity, \r");
            viewString.Append("\n            T.ExField1 AS TemplateObject_ExField1, \r\n            T.ExField2 AS ");
            viewString.Append("TemplateObject_ExField2, \r\n            T.IsPositionLocked AS TemplateObject_IsPo");
            viewString.Append("sitionLocked, \r\n            T.ColorHex AS TemplateObject_ColorHex, \r\n           ");
            viewString.Append(" T.CircleRadiusY AS TemplateObject_CircleRadiusY, \r\n            T.IsTextEditable");
            viewString.Append(" AS TemplateObject_IsTextEditable, \r\n            T.QuickTextOrder AS TemplateObj");
            viewString.Append("ect_QuickTextOrder, \r\n            T.IsQuickText AS TemplateObject_IsQuickText, \r");
            viewString.Append("\n            T.CharSpacing AS TemplateObject_CharSpacing, \r\n            T.waterm");
            viewString.Append("arkText AS TemplateObject_watermarkText, \r\n            T.textStyles AS TemplateO");
            viewString.Append("bject_textStyles, \r\n            T.AutoShrinkText AS TemplateObject_AutoShrinkTex");
            viewString.Append("t, \r\n            T.IsOverlayObject AS TemplateObject_IsOverlayObject, \r\n        ");
            viewString.Append("    T.ClippedInfo AS TemplateObject_ClippedInfo, \r\n            T.textCase AS Tem");
            viewString.Append("plateObject_textCase, \r\n            T.originalTextStyles AS TemplateObject_origi");
            viewString.Append("nalTextStyles, \r\n            T.originalContentString AS TemplateObject_originalC");
            viewString.Append("ontentString, \r\n            T.hasInlineFontStyle AS TemplateObject_hasInlineFont");
            viewString.Append("Style, \r\n            T.autoCollapseText AS TemplateObject_autoCollapseText, \r\n  ");
            viewString.Append("          T.hasClippingPath AS TemplateObject_hasClippingPath, \r\n            T.i");
            viewString.Append("sBulletPoint AS TemplateObject_isBulletPoint, \r\n            T.TextPaddingTop AS ");
            viewString.Append("TemplateObject_TextPaddingTop, \r\n            True AS _from0\r\n        FROM Domain");
            viewString.Append("ModelsStoreContainer.TemplateObject AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateObjects", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStateTaxes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView190()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStateTaxes", @"
    SELECT VALUE -- Constructing ItemStateTaxes
        [DomainModels.ItemStateTax](T1.ItemStateTax_ItemStateTaxId, T1.ItemStateTax_CountryId, T1.ItemStateTax_StateId, T1.ItemStateTax_TaxRate, T1.ItemStateTax_ItemId)
    FROM (
        SELECT 
            T.ItemStateTaxId AS ItemStateTax_ItemStateTaxId, 
            T.CountryId AS ItemStateTax_CountryId, 
            T.StateId AS ItemStateTax_StateId, 
            T.TaxRate AS ItemStateTax_TaxRate, 
            T.ItemId AS ItemStateTax_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemStateTax AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductMarketBriefAnswers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView191()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductMarketBriefAnswers", @"
    SELECT VALUE -- Constructing ProductMarketBriefAnswers
        [DomainModels.ProductMarketBriefAnswer](T1.ProductMarketBriefAnswer_MarketBriefAnswerId, T1.ProductMarketBriefAnswer_MarketBriefQuestionId, T1.ProductMarketBriefAnswer_AnswerDetail)
    FROM (
        SELECT 
            T.MarketBriefAnswerId AS ProductMarketBriefAnswer_MarketBriefAnswerId, 
            T.MarketBriefQuestionId AS ProductMarketBriefAnswer_MarketBriefQuestionId, 
            T.AnswerDetail AS ProductMarketBriefAnswer_AnswerDetail, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductMarketBriefAnswer AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductMarketBriefQuestions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView192()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductMarketBriefQuestions", @"
    SELECT VALUE -- Constructing ProductMarketBriefQuestions
        [DomainModels.ProductMarketBriefQuestion](T1.ProductMarketBriefQuestion_MarketBriefQuestionId, T1.ProductMarketBriefQuestion_ItemId, T1.ProductMarketBriefQuestion_QuestionDetail, T1.ProductMarketBriefQuestion_SortOrder, T1.ProductMarketBriefQuestion_IsMultipleSelection)
    FROM (
        SELECT 
            T.MarketBriefQuestionId AS ProductMarketBriefQuestion_MarketBriefQuestionId, 
            T.ItemId AS ProductMarketBriefQuestion_ItemId, 
            T.QuestionDetail AS ProductMarketBriefQuestion_QuestionDetail, 
            T.SortOrder AS ProductMarketBriefQuestion_SortOrder, 
            T.isMultipleSelction AS ProductMarketBriefQuestion_IsMultipleSelection, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductMarketBriefQuestion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategoryItems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView193()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategoryItems", @"
    SELECT VALUE -- Constructing ProductCategoryItems
        [DomainModels.ProductCategoryItem](T1.ProductCategoryItem_ProductCategoryItemId, T1.ProductCategoryItem_CategoryId, T1.ProductCategoryItem_ItemId)
    FROM (
        SELECT 
            T.ProductCategoryItemId AS ProductCategoryItem_ProductCategoryItemId, 
            T.CategoryId AS ProductCategoryItem_CategoryId, 
            T.ItemId AS ProductCategoryItem_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductCategoryItem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateColorStyles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView194()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateColorStyles", @"
    SELECT VALUE -- Constructing TemplateColorStyles
        [DomainModels.TemplateColorStyle](T1.TemplateColorStyle_PelleteId, T1.TemplateColorStyle_ProductId, T1.TemplateColorStyle_Name, T1.TemplateColorStyle_ColorC, T1.TemplateColorStyle_ColorM, T1.TemplateColorStyle_ColorY, T1.TemplateColorStyle_ColorK, T1.TemplateColorStyle_SpotColor, T1.TemplateColorStyle_IsSpotColor, T1.TemplateColorStyle_Field1, T1.TemplateColorStyle_ColorHex, T1.TemplateColorStyle_IsColorActive, T1.TemplateColorStyle_CustomerId)
    FROM (
        SELECT 
            T.PelleteId AS TemplateColorStyle_PelleteId, 
            T.ProductId AS TemplateColorStyle_ProductId, 
            T.Name AS TemplateColorStyle_Name, 
            T.ColorC AS TemplateColorStyle_ColorC, 
            T.ColorM AS TemplateColorStyle_ColorM, 
            T.ColorY AS TemplateColorStyle_ColorY, 
            T.ColorK AS TemplateColorStyle_ColorK, 
            T.SpotColor AS TemplateColorStyle_SpotColor, 
            T.IsSpotColor AS TemplateColorStyle_IsSpotColor, 
            T.Field1 AS TemplateColorStyle_Field1, 
            T.ColorHex AS TemplateColorStyle_ColorHex, 
            T.IsColorActive AS TemplateColorStyle_IsColorActive, 
            T.CustomerId AS TemplateColorStyle_CustomerId, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateColorStyle AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateFonts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView195()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateFonts", @"
    SELECT VALUE -- Constructing TemplateFonts
        [DomainModels.TemplateFont](T1.TemplateFont_ProductFontId, T1.TemplateFont_ProductId, T1.TemplateFont_FontName, T1.TemplateFont_FontDisplayName, T1.TemplateFont_FontFile, T1.TemplateFont_DisplayIndex, T1.TemplateFont_IsPrivateFont, T1.TemplateFont_IsEnable, T1.TemplateFont_FontBytes, T1.TemplateFont_FontPath, T1.TemplateFont_CustomerId)
    FROM (
        SELECT 
            T.ProductFontId AS TemplateFont_ProductFontId, 
            T.ProductId AS TemplateFont_ProductId, 
            T.FontName AS TemplateFont_FontName, 
            T.FontDisplayName AS TemplateFont_FontDisplayName, 
            T.FontFile AS TemplateFont_FontFile, 
            T.DisplayIndex AS TemplateFont_DisplayIndex, 
            T.IsPrivateFont AS TemplateFont_IsPrivateFont, 
            T.IsEnable AS TemplateFont_IsEnable, 
            T.FontBytes AS TemplateFont_FontBytes, 
            T.FontPath AS TemplateFont_FontPath, 
            T.CustomerId AS TemplateFont_CustomerId, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateFont AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ImagePermissions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView196()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ImagePermissions", @"
    SELECT VALUE -- Constructing ImagePermissions
        [DomainModels.ImagePermission](T1.ImagePermission_Id, T1.ImagePermission_TerritoryID, T1.ImagePermission_ImageId)
    FROM (
        SELECT 
            T.Id AS ImagePermission_Id, 
            T.TerritoryID AS ImagePermission_TerritoryID, 
            T.ImageId AS ImagePermission_ImageId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ImagePermissions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.FavoriteDesigns
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView197()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.FavoriteDesigns", @"
    SELECT VALUE -- Constructing FavoriteDesigns
        [DomainModels.FavoriteDesign](T1.FavoriteDesign_FavoriteDesignId, T1.FavoriteDesign_TemplateId, T1.FavoriteDesign_ItemId, T1.FavoriteDesign_ContactUserId, T1.FavoriteDesign_IsFavorite, T1.FavoriteDesign_CategoryId)
    FROM (
        SELECT 
            T.FavoriteDesignId AS FavoriteDesign_FavoriteDesignId, 
            T.TemplateId AS FavoriteDesign_TemplateId, 
            T.ItemId AS FavoriteDesign_ItemId, 
            T.ContactUserId AS FavoriteDesign_ContactUserId, 
            T.IsFavorite AS FavoriteDesign_IsFavorite, 
            T.CategoryId AS FavoriteDesign_CategoryId, 
            True AS _from0
        FROM DomainModelsStoreContainer.FavoriteDesign AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Phrases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView198()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Phrases", @"
    SELECT VALUE -- Constructing Phrases
        [DomainModels.Phrase](T1.Phrase_PhraseId, T1.Phrase_Phrase1, T1.Phrase_FieldId, T1.Phrase_CompanyId, T1.Phrase_OrganisationId)
    FROM (
        SELECT 
            T.PhraseId AS Phrase_PhraseId, 
            T.Phrase AS Phrase_Phrase1, 
            T.FieldId AS Phrase_FieldId, 
            T.CompanyId AS Phrase_CompanyId, 
            T.OrganisationId AS Phrase_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Phrase AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PhraseFields
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView199()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PhraseFields", @"
    SELECT VALUE -- Constructing PhraseFields
        [DomainModels.PhraseField](T1.PhraseField_FieldId, T1.PhraseField_FieldName, T1.PhraseField_SectionId, T1.PhraseField_SortOrder, T1.PhraseField_OrganisationId)
    FROM (
        SELECT 
            T.FieldId AS PhraseField_FieldId, 
            T.FieldName AS PhraseField_FieldName, 
            T.SectionId AS PhraseField_SectionId, 
            T.SortOrder AS PhraseField_SortOrder, 
            T.OrganisationId AS PhraseField_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.PhraseField AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostcentreInstructions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView200()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostcentreInstructions", @"
    SELECT VALUE -- Constructing CostcentreInstructions
        [DomainModels.CostcentreInstruction](T1.CostcentreInstruction_InstructionId, T1.CostcentreInstruction_Instruction, T1.CostcentreInstruction_CostCentreId, T1.CostcentreInstruction_CostCenterOption)
    FROM (
        SELECT 
            T.InstructionId AS CostcentreInstruction_InstructionId, 
            T.Instruction AS CostcentreInstruction_Instruction, 
            T.CostCentreId AS CostcentreInstruction_CostCentreId, 
            T.CostCenterOption AS CostcentreInstruction_CostCenterOption, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostcentreInstruction AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostcentreResources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView201()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostcentreResources", @"
    SELECT VALUE -- Constructing CostcentreResources
        [DomainModels.CostcentreResource](T1.CostcentreResource_CostCentreId, T1.CostcentreResource_ResourceId, T1.CostcentreResource_CostCenterResourceId)
    FROM (
        SELECT 
            T.CostCentreId AS CostcentreResource_CostCentreId, 
            T.ResourceId AS CostcentreResource_ResourceId, 
            T.CostCenterResourceId AS CostcentreResource_CostCenterResourceId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostcentreResource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostcentreWorkInstructionsChoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView202()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostcentreWorkInstructionsChoices", @"
    SELECT VALUE -- Constructing CostcentreWorkInstructionsChoices
        [DomainModels.CostcentreWorkInstructionsChoice](T1.CostcentreWorkInstructionsChoice_Id, T1.CostcentreWorkInstructionsChoice_Choice, T1.CostcentreWorkInstructionsChoice_InstructionId)
    FROM (
        SELECT 
            T.Id AS CostcentreWorkInstructionsChoice_Id, 
            T.Choice AS CostcentreWorkInstructionsChoice_Choice, 
            T.InstructionId AS CostcentreWorkInstructionsChoice_InstructionId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostcentreWorkInstructionsChoice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CmsOffers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView203()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CmsOffers", @"
    SELECT VALUE -- Constructing CmsOffers
        [DomainModels.CmsOffer](T1.CmsOffer_OfferId, T1.CmsOffer_ItemId, T1.CmsOffer_OfferType, T1.CmsOffer_Description, T1.CmsOffer_ItemName, T1.CmsOffer_SortOrder, T1.CmsOffer_CompanyId)
    FROM (
        SELECT 
            T.OfferId AS CmsOffer_OfferId, 
            T.ItemId AS CmsOffer_ItemId, 
            T.OfferType AS CmsOffer_OfferType, 
            T.Description AS CmsOffer_Description, 
            T.ItemName AS CmsOffer_ItemName, 
            T.SortOrder AS CmsOffer_SortOrder, 
            T.CompanyId AS CmsOffer_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CmsOffer AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStockUpdateHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView204()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStockUpdateHistories", @"
    SELECT VALUE -- Constructing ItemStockUpdateHistories
        [DomainModels.ItemStockUpdateHistory](T1.ItemStockUpdateHistory_StockHistoryId, T1.ItemStockUpdateHistory_ItemId, T1.ItemStockUpdateHistory_LastModifiedQty, T1.ItemStockUpdateHistory_ModifyEvent, T1.ItemStockUpdateHistory_LastModifiedBy, T1.ItemStockUpdateHistory_LastModifiedDate, T1.ItemStockUpdateHistory_OrderID, T1.ItemStockUpdateHistory_StockItemId)
    FROM (
        SELECT 
            T.StockHistoryId AS ItemStockUpdateHistory_StockHistoryId, 
            T.ItemId AS ItemStockUpdateHistory_ItemId, 
            T.LastModifiedQty AS ItemStockUpdateHistory_LastModifiedQty, 
            T.ModifyEvent AS ItemStockUpdateHistory_ModifyEvent, 
            T.LastModifiedBy AS ItemStockUpdateHistory_LastModifiedBy, 
            T.LastModifiedDate AS ItemStockUpdateHistory_LastModifiedDate, 
            T.OrderID AS ItemStockUpdateHistory_OrderID, 
            T.StockItemId AS ItemStockUpdateHistory_StockItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemStockUpdateHistory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MediaLibraries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView205()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MediaLibraries", @"
    SELECT VALUE -- Constructing MediaLibraries
        [DomainModels.MediaLibrary](T1.MediaLibrary_MediaId, T1.MediaLibrary_FilePath, T1.MediaLibrary_FileName, T1.MediaLibrary_FileType, T1.MediaLibrary_CompanyId)
    FROM (
        SELECT 
            T.MediaId AS MediaLibrary_MediaId, 
            T.FilePath AS MediaLibrary_FilePath, 
            T.FileName AS MediaLibrary_FileName, 
            T.FileType AS MediaLibrary_FileType, 
            T.CompanyId AS MediaLibrary_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.MediaLibrary AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.LookupMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView206()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.LookupMethods", @"
    SELECT VALUE -- Constructing LookupMethods
        [DomainModels.LookupMethod](T1.LookupMethod_MethodId, T1.LookupMethod_Name, T1.LookupMethod_Type, T1.LookupMethod_LockedBy, T1.LookupMethod_FlagId, T1.LookupMethod_SystemSiteId, T1.LookupMethod_OrganisationId)
    FROM (
        SELECT 
            T.MethodId AS LookupMethod_MethodId, 
            T.Name AS LookupMethod_Name, 
            T.Type AS LookupMethod_Type, 
            T.LockedBy AS LookupMethod_LockedBy, 
            T.FlagId AS LookupMethod_FlagId, 
            T.SystemSiteId AS LookupMethod_SystemSiteId, 
            T.OrganisationID AS LookupMethod_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.LookupMethod AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Machines
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView207()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5825);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Machines\r\n        [DomainModels.Machine](T1.M");
            viewString.Append("achine_MachineId, T1.Machine_MachineName, T1.Machine_MachineCatId, T1.Machine_Co");
            viewString.Append("lourHeads, T1.Machine_isPerfecting, T1.Machine_SetupCharge, T1.Machine_WashupPri");
            viewString.Append("ce, T1.Machine_WashupCost, T1.Machine_MinInkDuctqty, T1.Machine_worknturncharge,");
            viewString.Append(" T1.Machine_MakeReadyCost, T1.Machine_DefaultFilmId, T1.Machine_DefaultPlateId, ");
            viewString.Append("T1.Machine_DefaultPaperId, T1.Machine_isfilmused, T1.Machine_isplateused, T1.Mac");
            viewString.Append("hine_ismakereadyused, T1.Machine_iswashupused, T1.Machine_maximumsheetweight, T1");
            viewString.Append(".Machine_maximumsheetheight, T1.Machine_maximumsheetwidth, T1.Machine_minimumshe");
            viewString.Append("etheight, T1.Machine_minimumsheetwidth, T1.Machine_gripdepth, T1.Machine_gripsid");
            viewString.Append("eorientaion, T1.Machine_gutterdepth, T1.Machine_headdepth, T1.Machine_PressSizeR");
            viewString.Append("atio, T1.Machine_Description, T1.Machine_Priority, T1.Machine_DirectCost, T1.Mac");
            viewString.Append("hine_MinimumCharge, T1.Machine_CostPerCut, T1.Machine_PricePerCut, T1.Machine_Is");
            viewString.Append("AdditionalOption, T1.Machine_IsDisabled, T1.Machine_LockedBy, T1.Machine_Cylinde");
            viewString.Append("rSizeId, T1.Machine_MaxItemAcrossCylinder, T1.Machine_Web1MRCost, T1.Machine_Web");
            viewString.Append("1MRPrice, T1.Machine_Web2MRCost, T1.Machine_Web2MRPrice, T1.Machine_ReelMRCost, ");
            viewString.Append("T1.Machine_ReelMRPrice, T1.Machine_IsMaxColorLimit, T1.Machine_PressUtilization,");
            viewString.Append(" T1.Machine_MakeReadyPrice, T1.Machine_InkChargeForUniqueColors, T1.Machine_Comp");
            viewString.Append("anyId, T1.Machine_FlagId, T1.Machine_IsScheduleable, T1.Machine_SystemSiteId, T1");
            viewString.Append(".Machine_SpoilageType, T1.Machine_SetupTime, T1.Machine_TimePerCut, T1.Machine_M");
            viewString.Append("akeReadyTime, T1.Machine_WashupTime, T1.Machine_ReelMakereadyTime, T1.Machine_Lo");
            viewString.Append("okupMethodId, T1.Machine_MarkupId, T1.Machine_OrganisationId, T1.Machine_SetupSp");
            viewString.Append("oilage, T1.Machine_RunningSpoilage, T1.Machine_CoverageHigh, T1.Machine_Coverage");
            viewString.Append("Medium, T1.Machine_CoverageLow, T1.Machine_isSheetFed, T1.Machine_Passes, T1.Mac");
            viewString.Append("hine_IsSpotColor)\r\n    FROM (\r\n        SELECT \r\n            T.MachineId AS Machi");
            viewString.Append("ne_MachineId, \r\n            T.MachineName AS Machine_MachineName, \r\n            ");
            viewString.Append("T.MachineCatId AS Machine_MachineCatId, \r\n            T.ColourHeads AS Machine_C");
            viewString.Append("olourHeads, \r\n            T.isPerfecting AS Machine_isPerfecting, \r\n            ");
            viewString.Append("T.SetupCharge AS Machine_SetupCharge, \r\n            T.WashupPrice AS Machine_Was");
            viewString.Append("hupPrice, \r\n            T.WashupCost AS Machine_WashupCost, \r\n            T.MinI");
            viewString.Append("nkDuctqty AS Machine_MinInkDuctqty, \r\n            T.worknturncharge AS Machine_w");
            viewString.Append("orknturncharge, \r\n            T.MakeReadyCost AS Machine_MakeReadyCost, \r\n      ");
            viewString.Append("      T.DefaultFilmId AS Machine_DefaultFilmId, \r\n            T.DefaultPlateId A");
            viewString.Append("S Machine_DefaultPlateId, \r\n            T.DefaultPaperId AS Machine_DefaultPaper");
            viewString.Append("Id, \r\n            T.isfilmused AS Machine_isfilmused, \r\n            T.isplateuse");
            viewString.Append("d AS Machine_isplateused, \r\n            T.ismakereadyused AS Machine_ismakeready");
            viewString.Append("used, \r\n            T.iswashupused AS Machine_iswashupused, \r\n            T.maxi");
            viewString.Append("mumsheetweight AS Machine_maximumsheetweight, \r\n            T.maximumsheetheight");
            viewString.Append(" AS Machine_maximumsheetheight, \r\n            T.maximumsheetwidth AS Machine_max");
            viewString.Append("imumsheetwidth, \r\n            T.minimumsheetheight AS Machine_minimumsheetheight");
            viewString.Append(", \r\n            T.minimumsheetwidth AS Machine_minimumsheetwidth, \r\n            ");
            viewString.Append("T.gripdepth AS Machine_gripdepth, \r\n            T.gripsideorientaion AS Machine_");
            viewString.Append("gripsideorientaion, \r\n            T.gutterdepth AS Machine_gutterdepth, \r\n      ");
            viewString.Append("      T.headdepth AS Machine_headdepth, \r\n            T.PressSizeRatio AS Machin");
            viewString.Append("e_PressSizeRatio, \r\n            T.Description AS Machine_Description, \r\n        ");
            viewString.Append("    T.Priority AS Machine_Priority, \r\n            T.DirectCost AS Machine_Direct");
            viewString.Append("Cost, \r\n            T.MinimumCharge AS Machine_MinimumCharge, \r\n            T.Co");
            viewString.Append("stPerCut AS Machine_CostPerCut, \r\n            T.PricePerCut AS Machine_PricePerC");
            viewString.Append("ut, \r\n            T.IsAdditionalOption AS Machine_IsAdditionalOption, \r\n        ");
            viewString.Append("    T.IsDisabled AS Machine_IsDisabled, \r\n            T.LockedBy AS Machine_Lock");
            viewString.Append("edBy, \r\n            T.CylinderSizeId AS Machine_CylinderSizeId, \r\n            T.");
            viewString.Append("MaxItemAcrossCylinder AS Machine_MaxItemAcrossCylinder, \r\n            T.Web1MRCo");
            viewString.Append("st AS Machine_Web1MRCost, \r\n            T.Web1MRPrice AS Machine_Web1MRPrice, \r\n");
            viewString.Append("            T.Web2MRCost AS Machine_Web2MRCost, \r\n            T.Web2MRPrice AS M");
            viewString.Append("achine_Web2MRPrice, \r\n            T.ReelMRCost AS Machine_ReelMRCost, \r\n        ");
            viewString.Append("    T.ReelMRPrice AS Machine_ReelMRPrice, \r\n            T.IsMaxColorLimit AS Mac");
            viewString.Append("hine_IsMaxColorLimit, \r\n            T.PressUtilization AS Machine_PressUtilizati");
            viewString.Append("on, \r\n            T.MakeReadyPrice AS Machine_MakeReadyPrice, \r\n            T.In");
            viewString.Append("kChargeForUniqueColors AS Machine_InkChargeForUniqueColors, \r\n            T.Comp");
            viewString.Append("anyId AS Machine_CompanyId, \r\n            T.FlagId AS Machine_FlagId, \r\n        ");
            viewString.Append("    T.IsScheduleable AS Machine_IsScheduleable, \r\n            T.SystemSiteId AS ");
            viewString.Append("Machine_SystemSiteId, \r\n            T.SpoilageType AS Machine_SpoilageType, \r\n  ");
            viewString.Append("          T.SetupTime AS Machine_SetupTime, \r\n            T.TimePerCut AS Machin");
            viewString.Append("e_TimePerCut, \r\n            T.MakeReadyTime AS Machine_MakeReadyTime, \r\n        ");
            viewString.Append("    T.WashupTime AS Machine_WashupTime, \r\n            T.ReelMakereadyTime AS Mac");
            viewString.Append("hine_ReelMakereadyTime, \r\n            T.LookupMethodId AS Machine_LookupMethodId");
            viewString.Append(", \r\n            T.MarkupId AS Machine_MarkupId, \r\n            T.OrganisationId A");
            viewString.Append("S Machine_OrganisationId, \r\n            T.SetupSpoilage AS Machine_SetupSpoilage");
            viewString.Append(", \r\n            T.RunningSpoilage AS Machine_RunningSpoilage, \r\n            T.Co");
            viewString.Append("verageHigh AS Machine_CoverageHigh, \r\n            T.CoverageMedium AS Machine_Co");
            viewString.Append("verageMedium, \r\n            T.CoverageLow AS Machine_CoverageLow, \r\n            ");
            viewString.Append("T.isSheetFed AS Machine_isSheetFed, \r\n            T.Passes AS Machine_Passes, \r\n");
            viewString.Append("            T.IsSpotColor AS Machine_IsSpotColor, \r\n            True AS _from0\r\n");
            viewString.Append("        FROM DomainModelsStoreContainer.Machine AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Machines", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineInkCoverages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView208()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineInkCoverages", @"
    SELECT VALUE -- Constructing MachineInkCoverages
        [DomainModels.MachineInkCoverage](T1.MachineInkCoverage_Id, T1.MachineInkCoverage_SideInkOrder, T1.MachineInkCoverage_SideInkOrderCoverage, T1.MachineInkCoverage_MachineId)
    FROM (
        SELECT 
            T.Id AS MachineInkCoverage_Id, 
            T.SideInkOrder AS MachineInkCoverage_SideInkOrder, 
            T.SideInkOrderCoverage AS MachineInkCoverage_SideInkOrderCoverage, 
            T.MachineId AS MachineInkCoverage_MachineId, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineInkCoverage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineResources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView209()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineResources", @"
    SELECT VALUE -- Constructing MachineResources
        [DomainModels.MachineResource](T1.MachineResource_Id, T1.MachineResource_MachineId, T1.MachineResource_ResourceId)
    FROM (
        SELECT 
            T.Id AS MachineResource_Id, 
            T.MachineId AS MachineResource_MachineId, 
            T.ResourceId AS MachineResource_ResourceId, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineResource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyCostCentres
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView210()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyCostCentres", @"
    SELECT VALUE -- Constructing CompanyCostCentres
        [DomainModels.CompanyCostCentre](T1.CompanyCostCentre_CompanyCostCenterId, T1.CompanyCostCentre_CompanyId, T1.CompanyCostCentre_CostCentreId, T1.CompanyCostCentre_BrokerMarkup, T1.CompanyCostCentre_ContactMarkup, T1.CompanyCostCentre_isDisplayToUser, T1.CompanyCostCentre_OrganisationId)
    FROM (
        SELECT 
            T.CompanyCostCenterId AS CompanyCostCentre_CompanyCostCenterId, 
            T.CompanyId AS CompanyCostCentre_CompanyId, 
            T.CostCentreId AS CompanyCostCentre_CostCentreId, 
            T.BrokerMarkup AS CompanyCostCentre_BrokerMarkup, 
            T.ContactMarkup AS CompanyCostCentre_ContactMarkup, 
            T.isDisplayToUser AS CompanyCostCentre_isDisplayToUser, 
            T.OrganisationId AS CompanyCostCentre_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyCostCentre AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PipeLineProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView211()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PipeLineProducts", @"
    SELECT VALUE -- Constructing PipeLineProducts
        [DomainModels.PipeLineProduct](T1.PipeLineProduct_ProductId, T1.PipeLineProduct_Description)
    FROM (
        SELECT 
            T.ProductId AS PipeLineProduct_ProductId, 
            T.Description AS PipeLineProduct_Description, 
            True AS _from0
        FROM DomainModelsStoreContainer.PipeLineProduct AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Activities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView212()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3485);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Activities\r\n        [DomainModels.Activity](T");
            viewString.Append("1.Activity_ActivityId, T1.Activity_ActivityTypeId, T1.Activity_ActivityCode, T1.");
            viewString.Append("Activity_ActivityRef, T1.Activity_ActivityDate, T1.Activity_ActivityTime, T1.Act");
            viewString.Append("ivity_ActivityStartTime, T1.Activity_ActivityEndTime, T1.Activity_ActivityProbab");
            viewString.Append("ility, T1.Activity_ActivityPrice, T1.Activity_ActivityUnit, T1.Activity_Activity");
            viewString.Append("Notes, T1.Activity_IsActivityAlarm, T1.Activity_AlarmDate, T1.Activity_AlarmTime");
            viewString.Append(", T1.Activity_ActivityLink, T1.Activity_IsCustomerActivity, T1.Activity_ContactI");
            viewString.Append("d, T1.Activity_SystemUserId, T1.Activity_IsPrivate, T1.Activity_IsComplete, T1.A");
            viewString.Append("ctivity_CompletionDate, T1.Activity_CompletionTime, T1.Activity_CompletionSucces");
            viewString.Append("s, T1.Activity_CompletionResult, T1.Activity_CompletedBy, T1.Activity_IsFollowed");
            viewString.Append("Up, T1.Activity_FollowedActivityId, T1.Activity_LastModifiedDate, T1.Activity_La");
            viewString.Append("stModifiedtime, T1.Activity_LastModifiedBy, T1.Activity_CreatedBy, T1.Activity_C");
            viewString.Append("ampaignId, T1.Activity_IsLocked, T1.Activity_LockedBy, T1.Activity_SystemSiteId,");
            viewString.Append(" T1.Activity_CompanyId, T1.Activity_ProductTypeId, T1.Activity_SourceId, T1.Acti");
            viewString.Append("vity_FlagId)\r\n    FROM (\r\n        SELECT \r\n            T.ActivityId AS Activity_");
            viewString.Append("ActivityId, \r\n            T.ActivityTypeId AS Activity_ActivityTypeId, \r\n       ");
            viewString.Append("     T.ActivityCode AS Activity_ActivityCode, \r\n            T.ActivityRef AS Act");
            viewString.Append("ivity_ActivityRef, \r\n            T.ActivityDate AS Activity_ActivityDate, \r\n    ");
            viewString.Append("        T.ActivityTime AS Activity_ActivityTime, \r\n            T.ActivityStartTi");
            viewString.Append("me AS Activity_ActivityStartTime, \r\n            T.ActivityEndTime AS Activity_Ac");
            viewString.Append("tivityEndTime, \r\n            T.ActivityProbability AS Activity_ActivityProbabili");
            viewString.Append("ty, \r\n            T.ActivityPrice AS Activity_ActivityPrice, \r\n            T.Act");
            viewString.Append("ivityUnit AS Activity_ActivityUnit, \r\n            T.ActivityNotes AS Activity_Ac");
            viewString.Append("tivityNotes, \r\n            T.IsActivityAlarm AS Activity_IsActivityAlarm, \r\n    ");
            viewString.Append("        T.AlarmDate AS Activity_AlarmDate, \r\n            T.AlarmTime AS Activity");
            viewString.Append("_AlarmTime, \r\n            T.ActivityLink AS Activity_ActivityLink, \r\n           ");
            viewString.Append(" T.IsCustomerActivity AS Activity_IsCustomerActivity, \r\n            T.ContactId ");
            viewString.Append("AS Activity_ContactId, \r\n            T.SystemUserId AS Activity_SystemUserId, \r\n");
            viewString.Append("            T.IsPrivate AS Activity_IsPrivate, \r\n            T.IsComplete AS Act");
            viewString.Append("ivity_IsComplete, \r\n            T.CompletionDate AS Activity_CompletionDate, \r\n ");
            viewString.Append("           T.CompletionTime AS Activity_CompletionTime, \r\n            T.Completi");
            viewString.Append("onSuccess AS Activity_CompletionSuccess, \r\n            T.CompletionResult AS Act");
            viewString.Append("ivity_CompletionResult, \r\n            T.CompletedBy AS Activity_CompletedBy, \r\n ");
            viewString.Append("           T.IsFollowedUp AS Activity_IsFollowedUp, \r\n            T.FollowedActi");
            viewString.Append("vityId AS Activity_FollowedActivityId, \r\n            T.LastModifiedDate AS Activ");
            viewString.Append("ity_LastModifiedDate, \r\n            T.LastModifiedtime AS Activity_LastModifiedt");
            viewString.Append("ime, \r\n            T.LastModifiedBy AS Activity_LastModifiedBy, \r\n            T.");
            viewString.Append("CreatedBy AS Activity_CreatedBy, \r\n            T.CampaignId AS Activity_Campaign");
            viewString.Append("Id, \r\n            T.IsLocked AS Activity_IsLocked, \r\n            T.LockedBy AS A");
            viewString.Append("ctivity_LockedBy, \r\n            T.SystemSiteId AS Activity_SystemSiteId, \r\n     ");
            viewString.Append("       T.CompanyId AS Activity_CompanyId, \r\n            T.ProductTypeId AS Activ");
            viewString.Append("ity_ProductTypeId, \r\n            T.SourceId AS Activity_SourceId, \r\n            ");
            viewString.Append("T.FlagId AS Activity_FlagId, \r\n            True AS _from0\r\n        FROM DomainMo");
            viewString.Append("delsStoreContainer.Activity AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Activities", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VariableOptions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView213()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VariableOptions", @"
    SELECT VALUE -- Constructing VariableOptions
        [DomainModels.VariableOption](T1.VariableOption_VariableOptionId, T1.VariableOption_VariableId, T1.VariableOption_Value, T1.VariableOption_SortOrder)
    FROM (
        SELECT 
            T.VariableOptionId AS VariableOption_VariableOptionId, 
            T.VariableId AS VariableOption_VariableId, 
            T.[Value] AS VariableOption_Value, 
            T.SortOrder AS VariableOption_SortOrder, 
            True AS _from0
        FROM DomainModelsStoreContainer.VariableOption AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SmartForms
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView214()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SmartForms", @"
    SELECT VALUE -- Constructing SmartForms
        [DomainModels.SmartForm](T1.SmartForm_SmartFormId, T1.SmartForm_Name, T1.SmartForm_CompanyId, T1.SmartForm_OrganisationId, T1.SmartForm_Heading)
    FROM (
        SELECT 
            T.SmartFormId AS SmartForm_SmartFormId, 
            T.Name AS SmartForm_Name, 
            T.CompanyId AS SmartForm_CompanyId, 
            T.OrganisationId AS SmartForm_OrganisationId, 
            T.Heading AS SmartForm_Heading, 
            True AS _from0
        FROM DomainModelsStoreContainer.SmartForm AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SmartFormDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView215()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SmartFormDetails", @"
    SELECT VALUE -- Constructing SmartFormDetails
        [DomainModels.SmartFormDetail](T1.SmartFormDetail_SmartFormDetailId, T1.SmartFormDetail_SmartFormId, T1.SmartFormDetail_ObjectType, T1.SmartFormDetail_IsRequired, T1.SmartFormDetail_SortOrder, T1.SmartFormDetail_VariableId, T1.SmartFormDetail_CaptionValue)
    FROM (
        SELECT 
            T.SmartFormDetailId AS SmartFormDetail_SmartFormDetailId, 
            T.SmartFormId AS SmartFormDetail_SmartFormId, 
            T.ObjectType AS SmartFormDetail_ObjectType, 
            T.IsRequired AS SmartFormDetail_IsRequired, 
            T.SortOrder AS SmartFormDetail_SortOrder, 
            T.VariableId AS SmartFormDetail_VariableId, 
            T.CaptionValue AS SmartFormDetail_CaptionValue, 
            True AS _from0
        FROM DomainModelsStoreContainer.SmartFormDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PayPalResponses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView216()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PayPalResponses", "\r\n    SELECT VALUE -- Constructing PayPalResponses\r\n        [DomainModels.PayPalR" +
                    "esponse](T1.PayPalResponse_PayPalResponseId, T1.PayPalResponse_RequestId, T1.Pay" +
                    "PalResponse_OrderId, T1.PayPalResponse_TransactionId, T1.PayPalResponse_PaymentP" +
                    "rice, T1.PayPalResponse_FirstName, T1.PayPalResponse_LastName, T1.PayPalResponse" +
                    "_Street, T1.PayPalResponse_City, T1.PayPalResponse_State, T1.PayPalResponse_Zip," +
                    " T1.PayPalResponse_Country, T1.PayPalResponse_IsSuccess, T1.PayPalResponse_Reaso" +
                    "nFault, T1.PayPalResponse_ResponseDate, T1.PayPalResponse_TransactionType, T1.Pa" +
                    "yPalResponse_PaymentStatus, T1.PayPalResponse_PaymentType, T1.PayPalResponse_Pay" +
                    "erEmail, T1.PayPalResponse_PayerStatus, T1.PayPalResponse_ReceiverEmail)\r\n    FR" +
                    "OM (\r\n        SELECT \r\n            T.PayPalResponseId AS PayPalResponse_PayPalRe" +
                    "sponseId, \r\n            T.RequestId AS PayPalResponse_RequestId, \r\n            T" +
                    ".OrderId AS PayPalResponse_OrderId, \r\n            T.TransactionId AS PayPalRespo" +
                    "nse_TransactionId, \r\n            T.PaymentPrice AS PayPalResponse_PaymentPrice, " +
                    "\r\n            T.FirstName AS PayPalResponse_FirstName, \r\n            T.LastName " +
                    "AS PayPalResponse_LastName, \r\n            T.Street AS PayPalResponse_Street, \r\n " +
                    "           T.City AS PayPalResponse_City, \r\n            T.State AS PayPalRespons" +
                    "e_State, \r\n            T.Zip AS PayPalResponse_Zip, \r\n            T.Country AS P" +
                    "ayPalResponse_Country, \r\n            T.IsSuccess AS PayPalResponse_IsSuccess, \r\n" +
                    "            T.ReasonFault AS PayPalResponse_ReasonFault, \r\n            T.Respons" +
                    "eDate AS PayPalResponse_ResponseDate, \r\n            T.TransactionType AS PayPalR" +
                    "esponse_TransactionType, \r\n            T.PaymentStatus AS PayPalResponse_Payment" +
                    "Status, \r\n            T.PaymentType AS PayPalResponse_PaymentType, \r\n           " +
                    " T.PayerEmail AS PayPalResponse_PayerEmail, \r\n            T.PayerStatus AS PayPa" +
                    "lResponse_PayerStatus, \r\n            T.ReceiverEmail AS PayPalResponse_ReceiverE" +
                    "mail, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.PayP" +
                    "alResponse AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ScopeVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView217()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ScopeVariables", @"
    SELECT VALUE -- Constructing ScopeVariables
        [DomainModels.ScopeVariable](T1.ScopeVariable_ScopeVariableId, T1.ScopeVariable_Id, T1.ScopeVariable_VariableId, T1.ScopeVariable_Value, T1.ScopeVariable_Scope)
    FROM (
        SELECT 
            T.ScopeVariableId AS ScopeVariable_ScopeVariableId, 
            T.Id AS ScopeVariable_Id, 
            T.VariableId AS ScopeVariable_VariableId, 
            T.[Value] AS ScopeVariable_Value, 
            T.Scope AS ScopeVariable_Scope, 
            True AS _from0
        FROM DomainModelsStoreContainer.ScopeVariable AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.NewsLetterSubscribers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView218()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.NewsLetterSubscribers", @"
    SELECT VALUE -- Constructing NewsLetterSubscribers
        [DomainModels.NewsLetterSubscriber](T1.NewsLetterSubscriber_SubscriberId, T1.NewsLetterSubscriber_Email, T1.NewsLetterSubscriber_FirstName, T1.NewsLetterSubscriber_LastName, T1.NewsLetterSubscriber_Status, T1.NewsLetterSubscriber_SubscriptionCode, T1.NewsLetterSubscriber_SubscribeDate, T1.NewsLetterSubscriber_UnSubscribeDate, T1.NewsLetterSubscriber_ContactId, T1.NewsLetterSubscriber_ContactCompanyID, T1.NewsLetterSubscriber_FlagId)
    FROM (
        SELECT 
            T.SubscriberId AS NewsLetterSubscriber_SubscriberId, 
            T.Email AS NewsLetterSubscriber_Email, 
            T.FirstName AS NewsLetterSubscriber_FirstName, 
            T.LastName AS NewsLetterSubscriber_LastName, 
            T.Status AS NewsLetterSubscriber_Status, 
            T.SubscriptionCode AS NewsLetterSubscriber_SubscriptionCode, 
            T.SubscribeDate AS NewsLetterSubscriber_SubscribeDate, 
            T.UnSubscribeDate AS NewsLetterSubscriber_UnSubscribeDate, 
            T.ContactId AS NewsLetterSubscriber_ContactId, 
            T.ContactCompanyID AS NewsLetterSubscriber_ContactCompanyID, 
            T.FlagId AS NewsLetterSubscriber_FlagId, 
            True AS _from0
        FROM DomainModelsStoreContainer.NewsLetterSubscriber AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineClickChargeLookups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView219()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineClickChargeLookups", @"
    SELECT VALUE -- Constructing MachineClickChargeLookups
        [DomainModels.MachineClickChargeLookup](T1.MachineClickChargeLookup_Id, T1.MachineClickChargeLookup_MethodId, T1.MachineClickChargeLookup_SheetCost, T1.MachineClickChargeLookup_Sheets, T1.MachineClickChargeLookup_SheetPrice, T1.MachineClickChargeLookup_TimePerHour)
    FROM (
        SELECT 
            T.Id AS MachineClickChargeLookup_Id, 
            T.MethodId AS MachineClickChargeLookup_MethodId, 
            T.SheetCost AS MachineClickChargeLookup_SheetCost, 
            T.Sheets AS MachineClickChargeLookup_Sheets, 
            T.SheetPrice AS MachineClickChargeLookup_SheetPrice, 
            T.TimePerHour AS MachineClickChargeLookup_TimePerHour, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineClickChargeLookup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineClickChargeZones
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView220()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7944);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineClickChargeZones\r\n        [DomainModel");
            viewString.Append("s.MachineClickChargeZone](T1.MachineClickChargeZone_Id, T1.MachineClickChargeZon");
            viewString.Append("e_MethodId, T1.MachineClickChargeZone_From1, T1.MachineClickChargeZone_To1, T1.M");
            viewString.Append("achineClickChargeZone_Sheets1, T1.MachineClickChargeZone_SheetCost1, T1.MachineC");
            viewString.Append("lickChargeZone_SheetPrice1, T1.MachineClickChargeZone_From2, T1.MachineClickChar");
            viewString.Append("geZone_To2, T1.MachineClickChargeZone_Sheets2, T1.MachineClickChargeZone_SheetCo");
            viewString.Append("st2, T1.MachineClickChargeZone_SheetPrice2, T1.MachineClickChargeZone_From3, T1.");
            viewString.Append("MachineClickChargeZone_To3, T1.MachineClickChargeZone_Sheets3, T1.MachineClickCh");
            viewString.Append("argeZone_SheetCost3, T1.MachineClickChargeZone_SheetPrice3, T1.MachineClickCharg");
            viewString.Append("eZone_From4, T1.MachineClickChargeZone_To4, T1.MachineClickChargeZone_Sheets4, T");
            viewString.Append("1.MachineClickChargeZone_SheetCost4, T1.MachineClickChargeZone_SheetPrice4, T1.M");
            viewString.Append("achineClickChargeZone_From5, T1.MachineClickChargeZone_To5, T1.MachineClickCharg");
            viewString.Append("eZone_Sheets5, T1.MachineClickChargeZone_SheetCost5, T1.MachineClickChargeZone_S");
            viewString.Append("heetPrice5, T1.MachineClickChargeZone_From6, T1.MachineClickChargeZone_To6, T1.M");
            viewString.Append("achineClickChargeZone_Sheets6, T1.MachineClickChargeZone_SheetCost6, T1.MachineC");
            viewString.Append("lickChargeZone_SheetPrice6, T1.MachineClickChargeZone_From7, T1.MachineClickChar");
            viewString.Append("geZone_To7, T1.MachineClickChargeZone_Sheets7, T1.MachineClickChargeZone_SheetCo");
            viewString.Append("st7, T1.MachineClickChargeZone_SheetPrice7, T1.MachineClickChargeZone_From8, T1.");
            viewString.Append("MachineClickChargeZone_To8, T1.MachineClickChargeZone_Sheets8, T1.MachineClickCh");
            viewString.Append("argeZone_SheetCost8, T1.MachineClickChargeZone_SheetPrice8, T1.MachineClickCharg");
            viewString.Append("eZone_From9, T1.MachineClickChargeZone_To9, T1.MachineClickChargeZone_Sheets9, T");
            viewString.Append("1.MachineClickChargeZone_SheetCost9, T1.MachineClickChargeZone_SheetPrice9, T1.M");
            viewString.Append("achineClickChargeZone_From10, T1.MachineClickChargeZone_To10, T1.MachineClickCha");
            viewString.Append("rgeZone_Sheets10, T1.MachineClickChargeZone_SheetCost10, T1.MachineClickChargeZo");
            viewString.Append("ne_SheetPrice10, T1.MachineClickChargeZone_From11, T1.MachineClickChargeZone_To1");
            viewString.Append("1, T1.MachineClickChargeZone_Sheets11, T1.MachineClickChargeZone_SheetCost11, T1");
            viewString.Append(".MachineClickChargeZone_SheetPrice11, T1.MachineClickChargeZone_From12, T1.Machi");
            viewString.Append("neClickChargeZone_To12, T1.MachineClickChargeZone_Sheets12, T1.MachineClickCharg");
            viewString.Append("eZone_SheetCost12, T1.MachineClickChargeZone_SheetPrice12, T1.MachineClickCharge");
            viewString.Append("Zone_From13, T1.MachineClickChargeZone_To13, T1.MachineClickChargeZone_Sheets13,");
            viewString.Append(" T1.MachineClickChargeZone_SheetCost13, T1.MachineClickChargeZone_SheetPrice13, ");
            viewString.Append("T1.MachineClickChargeZone_From14, T1.MachineClickChargeZone_To14, T1.MachineClic");
            viewString.Append("kChargeZone_Sheets14, T1.MachineClickChargeZone_SheetCost14, T1.MachineClickChar");
            viewString.Append("geZone_SheetPrice14, T1.MachineClickChargeZone_From15, T1.MachineClickChargeZone");
            viewString.Append("_To15, T1.MachineClickChargeZone_Sheets15, T1.MachineClickChargeZone_SheetCost15");
            viewString.Append(", T1.MachineClickChargeZone_SheetPrice15, T1.MachineClickChargeZone_isaccumulati");
            viewString.Append("vecharge, T1.MachineClickChargeZone_IsRoundUp, T1.MachineClickChargeZone_TimePer");
            viewString.Append("Hour)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineClickChargeZone_I");
            viewString.Append("d, \r\n            T.MethodId AS MachineClickChargeZone_MethodId, \r\n            T.");
            viewString.Append("From1 AS MachineClickChargeZone_From1, \r\n            T.To1 AS MachineClickCharge");
            viewString.Append("Zone_To1, \r\n            T.Sheets1 AS MachineClickChargeZone_Sheets1, \r\n         ");
            viewString.Append("   T.SheetCost1 AS MachineClickChargeZone_SheetCost1, \r\n            T.SheetPrice");
            viewString.Append("1 AS MachineClickChargeZone_SheetPrice1, \r\n            T.From2 AS MachineClickCh");
            viewString.Append("argeZone_From2, \r\n            T.To2 AS MachineClickChargeZone_To2, \r\n           ");
            viewString.Append(" T.Sheets2 AS MachineClickChargeZone_Sheets2, \r\n            T.SheetCost2 AS Mach");
            viewString.Append("ineClickChargeZone_SheetCost2, \r\n            T.SheetPrice2 AS MachineClickCharge");
            viewString.Append("Zone_SheetPrice2, \r\n            T.From3 AS MachineClickChargeZone_From3, \r\n     ");
            viewString.Append("       T.To3 AS MachineClickChargeZone_To3, \r\n            T.Sheets3 AS MachineCl");
            viewString.Append("ickChargeZone_Sheets3, \r\n            T.SheetCost3 AS MachineClickChargeZone_Shee");
            viewString.Append("tCost3, \r\n            T.SheetPrice3 AS MachineClickChargeZone_SheetPrice3, \r\n   ");
            viewString.Append("         T.From4 AS MachineClickChargeZone_From4, \r\n            T.To4 AS Machine");
            viewString.Append("ClickChargeZone_To4, \r\n            T.Sheets4 AS MachineClickChargeZone_Sheets4, ");
            viewString.Append("\r\n            T.SheetCost4 AS MachineClickChargeZone_SheetCost4, \r\n            T");
            viewString.Append(".SheetPrice4 AS MachineClickChargeZone_SheetPrice4, \r\n            T.From5 AS Mac");
            viewString.Append("hineClickChargeZone_From5, \r\n            T.To5 AS MachineClickChargeZone_To5, \r\n");
            viewString.Append("            T.Sheets5 AS MachineClickChargeZone_Sheets5, \r\n            T.SheetCo");
            viewString.Append("st5 AS MachineClickChargeZone_SheetCost5, \r\n            T.SheetPrice5 AS Machine");
            viewString.Append("ClickChargeZone_SheetPrice5, \r\n            T.From6 AS MachineClickChargeZone_Fro");
            viewString.Append("m6, \r\n            T.To6 AS MachineClickChargeZone_To6, \r\n            T.Sheets6 A");
            viewString.Append("S MachineClickChargeZone_Sheets6, \r\n            T.SheetCost6 AS MachineClickChar");
            viewString.Append("geZone_SheetCost6, \r\n            T.SheetPrice6 AS MachineClickChargeZone_SheetPr");
            viewString.Append("ice6, \r\n            T.From7 AS MachineClickChargeZone_From7, \r\n            T.To7");
            viewString.Append(" AS MachineClickChargeZone_To7, \r\n            T.Sheets7 AS MachineClickChargeZon");
            viewString.Append("e_Sheets7, \r\n            T.SheetCost7 AS MachineClickChargeZone_SheetCost7, \r\n  ");
            viewString.Append("          T.SheetPrice7 AS MachineClickChargeZone_SheetPrice7, \r\n            T.F");
            viewString.Append("rom8 AS MachineClickChargeZone_From8, \r\n            T.To8 AS MachineClickChargeZ");
            viewString.Append("one_To8, \r\n            T.Sheets8 AS MachineClickChargeZone_Sheets8, \r\n          ");
            viewString.Append("  T.SheetCost8 AS MachineClickChargeZone_SheetCost8, \r\n            T.SheetPrice8");
            viewString.Append(" AS MachineClickChargeZone_SheetPrice8, \r\n            T.From9 AS MachineClickCha");
            viewString.Append("rgeZone_From9, \r\n            T.To9 AS MachineClickChargeZone_To9, \r\n            ");
            viewString.Append("T.Sheets9 AS MachineClickChargeZone_Sheets9, \r\n            T.SheetCost9 AS Machi");
            viewString.Append("neClickChargeZone_SheetCost9, \r\n            T.SheetPrice9 AS MachineClickChargeZ");
            viewString.Append("one_SheetPrice9, \r\n            T.From10 AS MachineClickChargeZone_From10, \r\n    ");
            viewString.Append("        T.To10 AS MachineClickChargeZone_To10, \r\n            T.Sheets10 AS Machi");
            viewString.Append("neClickChargeZone_Sheets10, \r\n            T.SheetCost10 AS MachineClickChargeZon");
            viewString.Append("e_SheetCost10, \r\n            T.SheetPrice10 AS MachineClickChargeZone_SheetPrice");
            viewString.Append("10, \r\n            T.From11 AS MachineClickChargeZone_From11, \r\n            T.To1");
            viewString.Append("1 AS MachineClickChargeZone_To11, \r\n            T.Sheets11 AS MachineClickCharge");
            viewString.Append("Zone_Sheets11, \r\n            T.SheetCost11 AS MachineClickChargeZone_SheetCost11");
            viewString.Append(", \r\n            T.SheetPrice11 AS MachineClickChargeZone_SheetPrice11, \r\n       ");
            viewString.Append("     T.From12 AS MachineClickChargeZone_From12, \r\n            T.To12 AS MachineC");
            viewString.Append("lickChargeZone_To12, \r\n            T.Sheets12 AS MachineClickChargeZone_Sheets12");
            viewString.Append(", \r\n            T.SheetCost12 AS MachineClickChargeZone_SheetCost12, \r\n         ");
            viewString.Append("   T.SheetPrice12 AS MachineClickChargeZone_SheetPrice12, \r\n            T.From13");
            viewString.Append(" AS MachineClickChargeZone_From13, \r\n            T.To13 AS MachineClickChargeZon");
            viewString.Append("e_To13, \r\n            T.Sheets13 AS MachineClickChargeZone_Sheets13, \r\n         ");
            viewString.Append("   T.SheetCost13 AS MachineClickChargeZone_SheetCost13, \r\n            T.SheetPri");
            viewString.Append("ce13 AS MachineClickChargeZone_SheetPrice13, \r\n            T.From14 AS MachineCl");
            viewString.Append("ickChargeZone_From14, \r\n            T.To14 AS MachineClickChargeZone_To14, \r\n   ");
            viewString.Append("         T.Sheets14 AS MachineClickChargeZone_Sheets14, \r\n            T.SheetCos");
            viewString.Append("t14 AS MachineClickChargeZone_SheetCost14, \r\n            T.SheetPrice14 AS Machi");
            viewString.Append("neClickChargeZone_SheetPrice14, \r\n            T.From15 AS MachineClickChargeZone");
            viewString.Append("_From15, \r\n            T.To15 AS MachineClickChargeZone_To15, \r\n            T.Sh");
            viewString.Append("eets15 AS MachineClickChargeZone_Sheets15, \r\n            T.SheetCost15 AS Machin");
            viewString.Append("eClickChargeZone_SheetCost15, \r\n            T.SheetPrice15 AS MachineClickCharge");
            viewString.Append("Zone_SheetPrice15, \r\n            T.isaccumulativecharge AS MachineClickChargeZon");
            viewString.Append("e_isaccumulativecharge, \r\n            T.IsRoundUp AS MachineClickChargeZone_IsRo");
            viewString.Append("undUp, \r\n            T.TimePerHour AS MachineClickChargeZone_TimePerHour, \r\n    ");
            viewString.Append("        True AS _from0\r\n        FROM DomainModelsStoreContainer.MachineClickChar");
            viewString.Append("geZone AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineClickChargeZones", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineGuillotineCalcs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView221()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineGuillotineCalcs", "\r\n    SELECT VALUE -- Constructing MachineGuillotineCalcs\r\n        [DomainModels." +
                    "MachineGuillotineCalc](T1.MachineGuillotineCalc_Id, T1.MachineGuillotineCalc_Met" +
                    "hodId, T1.MachineGuillotineCalc_PaperWeight1, T1.MachineGuillotineCalc_PaperThro" +
                    "atQty1, T1.MachineGuillotineCalc_PaperWeight2, T1.MachineGuillotineCalc_PaperThr" +
                    "oatQty2, T1.MachineGuillotineCalc_PaperWeight3, T1.MachineGuillotineCalc_PaperTh" +
                    "roatQty3, T1.MachineGuillotineCalc_PaperWeight4, T1.MachineGuillotineCalc_PaperT" +
                    "hroatQty4, T1.MachineGuillotineCalc_PaperWeight5, T1.MachineGuillotineCalc_Paper" +
                    "ThroatQty5)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineGuillotineC" +
                    "alc_Id, \r\n            T.MethodId AS MachineGuillotineCalc_MethodId, \r\n          " +
                    "  T.PaperWeight1 AS MachineGuillotineCalc_PaperWeight1, \r\n            T.PaperThr" +
                    "oatQty1 AS MachineGuillotineCalc_PaperThroatQty1, \r\n            T.PaperWeight2 A" +
                    "S MachineGuillotineCalc_PaperWeight2, \r\n            T.PaperThroatQty2 AS Machine" +
                    "GuillotineCalc_PaperThroatQty2, \r\n            T.PaperWeight3 AS MachineGuillotin" +
                    "eCalc_PaperWeight3, \r\n            T.PaperThroatQty3 AS MachineGuillotineCalc_Pap" +
                    "erThroatQty3, \r\n            T.PaperWeight4 AS MachineGuillotineCalc_PaperWeight4" +
                    ", \r\n            T.PaperThroatQty4 AS MachineGuillotineCalc_PaperThroatQty4, \r\n  " +
                    "          T.PaperWeight5 AS MachineGuillotineCalc_PaperWeight5, \r\n            T." +
                    "PaperThroatQty5 AS MachineGuillotineCalc_PaperThroatQty5, \r\n            True AS " +
                    "_from0\r\n        FROM DomainModelsStoreContainer.MachineGuillotineCalc AS T\r\n    " +
                    ") AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineMeterPerHourLookups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView222()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3187);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineMeterPerHourLookups\r\n        [DomainMo");
            viewString.Append("dels.MachineMeterPerHourLookup](T1.MachineMeterPerHourLookup_Id, T1.MachineMeter");
            viewString.Append("PerHourLookup_MethodId, T1.MachineMeterPerHourLookup_SheetsQty1, T1.MachineMeter");
            viewString.Append("PerHourLookup_SheetsQty2, T1.MachineMeterPerHourLookup_SheetsQty3, T1.MachineMet");
            viewString.Append("erPerHourLookup_SheetsQty4, T1.MachineMeterPerHourLookup_SheetsQty5, T1.MachineM");
            viewString.Append("eterPerHourLookup_SheetWeight1, T1.MachineMeterPerHourLookup_speedqty11, T1.Mach");
            viewString.Append("ineMeterPerHourLookup_speedqty12, T1.MachineMeterPerHourLookup_speedqty13, T1.Ma");
            viewString.Append("chineMeterPerHourLookup_speedqty14, T1.MachineMeterPerHourLookup_speedqty15, T1.");
            viewString.Append("MachineMeterPerHourLookup_SheetWeight2, T1.MachineMeterPerHourLookup_speedqty21,");
            viewString.Append(" T1.MachineMeterPerHourLookup_speedqty22, T1.MachineMeterPerHourLookup_speedqty2");
            viewString.Append("3, T1.MachineMeterPerHourLookup_speedqty24, T1.MachineMeterPerHourLookup_speedqt");
            viewString.Append("y25, T1.MachineMeterPerHourLookup_SheetWeight3, T1.MachineMeterPerHourLookup_spe");
            viewString.Append("edqty31, T1.MachineMeterPerHourLookup_speedqty32, T1.MachineMeterPerHourLookup_s");
            viewString.Append("peedqty33, T1.MachineMeterPerHourLookup_speedqty34, T1.MachineMeterPerHourLookup");
            viewString.Append("_speedqty35, T1.MachineMeterPerHourLookup_hourlyCost, T1.MachineMeterPerHourLook");
            viewString.Append("up_hourlyPrice)\r\n    FROM (\r\n        SELECT \r\n            T.Id AS MachineMeterPe");
            viewString.Append("rHourLookup_Id, \r\n            T.MethodId AS MachineMeterPerHourLookup_MethodId, ");
            viewString.Append("\r\n            T.SheetsQty1 AS MachineMeterPerHourLookup_SheetsQty1, \r\n          ");
            viewString.Append("  T.SheetsQty2 AS MachineMeterPerHourLookup_SheetsQty2, \r\n            T.SheetsQt");
            viewString.Append("y3 AS MachineMeterPerHourLookup_SheetsQty3, \r\n            T.SheetsQty4 AS Machin");
            viewString.Append("eMeterPerHourLookup_SheetsQty4, \r\n            T.SheetsQty5 AS MachineMeterPerHou");
            viewString.Append("rLookup_SheetsQty5, \r\n            T.SheetWeight1 AS MachineMeterPerHourLookup_Sh");
            viewString.Append("eetWeight1, \r\n            T.speedqty11 AS MachineMeterPerHourLookup_speedqty11, ");
            viewString.Append("\r\n            T.speedqty12 AS MachineMeterPerHourLookup_speedqty12, \r\n          ");
            viewString.Append("  T.speedqty13 AS MachineMeterPerHourLookup_speedqty13, \r\n            T.speedqty");
            viewString.Append("14 AS MachineMeterPerHourLookup_speedqty14, \r\n            T.speedqty15 AS Machin");
            viewString.Append("eMeterPerHourLookup_speedqty15, \r\n            T.SheetWeight2 AS MachineMeterPerH");
            viewString.Append("ourLookup_SheetWeight2, \r\n            T.speedqty21 AS MachineMeterPerHourLookup_");
            viewString.Append("speedqty21, \r\n            T.speedqty22 AS MachineMeterPerHourLookup_speedqty22, ");
            viewString.Append("\r\n            T.speedqty23 AS MachineMeterPerHourLookup_speedqty23, \r\n          ");
            viewString.Append("  T.speedqty24 AS MachineMeterPerHourLookup_speedqty24, \r\n            T.speedqty");
            viewString.Append("25 AS MachineMeterPerHourLookup_speedqty25, \r\n            T.SheetWeight3 AS Mach");
            viewString.Append("ineMeterPerHourLookup_SheetWeight3, \r\n            T.speedqty31 AS MachineMeterPe");
            viewString.Append("rHourLookup_speedqty31, \r\n            T.speedqty32 AS MachineMeterPerHourLookup_");
            viewString.Append("speedqty32, \r\n            T.speedqty33 AS MachineMeterPerHourLookup_speedqty33, ");
            viewString.Append("\r\n            T.speedqty34 AS MachineMeterPerHourLookup_speedqty34, \r\n          ");
            viewString.Append("  T.speedqty35 AS MachineMeterPerHourLookup_speedqty35, \r\n            T.hourlyCo");
            viewString.Append("st AS MachineMeterPerHourLookup_hourlyCost, \r\n            T.hourlyPrice AS Machi");
            viewString.Append("neMeterPerHourLookup_hourlyPrice, \r\n            True AS _from0\r\n        FROM Dom");
            viewString.Append("ainModelsStoreContainer.MachineMeterPerHourLookup AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineMeterPerHourLookups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachinePerHourLookups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView223()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachinePerHourLookups", @"
    SELECT VALUE -- Constructing MachinePerHourLookups
        [DomainModels.MachinePerHourLookup](T1.MachinePerHourLookup_Id, T1.MachinePerHourLookup_MethodId, T1.MachinePerHourLookup_SpeedCost, T1.MachinePerHourLookup_Speed, T1.MachinePerHourLookup_SpeedPrice)
    FROM (
        SELECT 
            T.Id AS MachinePerHourLookup_Id, 
            T.MethodId AS MachinePerHourLookup_MethodId, 
            T.SpeedCost AS MachinePerHourLookup_SpeedCost, 
            T.Speed AS MachinePerHourLookup_Speed, 
            T.SpeedPrice AS MachinePerHourLookup_SpeedPrice, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachinePerHourLookup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineSpeedWeightLookups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView224()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3130);
            viewString.Append("\r\n    SELECT VALUE -- Constructing MachineSpeedWeightLookups\r\n        [DomainMod");
            viewString.Append("els.MachineSpeedWeightLookup](T1.MachineSpeedWeightLookup_Id, T1.MachineSpeedWei");
            viewString.Append("ghtLookup_MethodId, T1.MachineSpeedWeightLookup_SheetsQty1, T1.MachineSpeedWeigh");
            viewString.Append("tLookup_SheetsQty2, T1.MachineSpeedWeightLookup_SheetsQty3, T1.MachineSpeedWeigh");
            viewString.Append("tLookup_SheetsQty4, T1.MachineSpeedWeightLookup_SheetsQty5, T1.MachineSpeedWeigh");
            viewString.Append("tLookup_SheetWeight1, T1.MachineSpeedWeightLookup_speedqty11, T1.MachineSpeedWei");
            viewString.Append("ghtLookup_speedqty12, T1.MachineSpeedWeightLookup_speedqty13, T1.MachineSpeedWei");
            viewString.Append("ghtLookup_speedqty14, T1.MachineSpeedWeightLookup_speedqty15, T1.MachineSpeedWei");
            viewString.Append("ghtLookup_SheetWeight2, T1.MachineSpeedWeightLookup_speedqty21, T1.MachineSpeedW");
            viewString.Append("eightLookup_speedqty22, T1.MachineSpeedWeightLookup_speedqty23, T1.MachineSpeedW");
            viewString.Append("eightLookup_speedqty24, T1.MachineSpeedWeightLookup_speedqty25, T1.MachineSpeedW");
            viewString.Append("eightLookup_SheetWeight3, T1.MachineSpeedWeightLookup_speedqty31, T1.MachineSpee");
            viewString.Append("dWeightLookup_speedqty32, T1.MachineSpeedWeightLookup_speedqty33, T1.MachineSpee");
            viewString.Append("dWeightLookup_speedqty34, T1.MachineSpeedWeightLookup_speedqty35, T1.MachineSpee");
            viewString.Append("dWeightLookup_hourlyCost, T1.MachineSpeedWeightLookup_hourlyPrice)\r\n    FROM (\r\n");
            viewString.Append("        SELECT \r\n            T.Id AS MachineSpeedWeightLookup_Id, \r\n            ");
            viewString.Append("T.MethodId AS MachineSpeedWeightLookup_MethodId, \r\n            T.SheetsQty1 AS M");
            viewString.Append("achineSpeedWeightLookup_SheetsQty1, \r\n            T.SheetsQty2 AS MachineSpeedWe");
            viewString.Append("ightLookup_SheetsQty2, \r\n            T.SheetsQty3 AS MachineSpeedWeightLookup_Sh");
            viewString.Append("eetsQty3, \r\n            T.SheetsQty4 AS MachineSpeedWeightLookup_SheetsQty4, \r\n ");
            viewString.Append("           T.SheetsQty5 AS MachineSpeedWeightLookup_SheetsQty5, \r\n            T.");
            viewString.Append("SheetWeight1 AS MachineSpeedWeightLookup_SheetWeight1, \r\n            T.speedqty1");
            viewString.Append("1 AS MachineSpeedWeightLookup_speedqty11, \r\n            T.speedqty12 AS MachineS");
            viewString.Append("peedWeightLookup_speedqty12, \r\n            T.speedqty13 AS MachineSpeedWeightLoo");
            viewString.Append("kup_speedqty13, \r\n            T.speedqty14 AS MachineSpeedWeightLookup_speedqty1");
            viewString.Append("4, \r\n            T.speedqty15 AS MachineSpeedWeightLookup_speedqty15, \r\n        ");
            viewString.Append("    T.SheetWeight2 AS MachineSpeedWeightLookup_SheetWeight2, \r\n            T.spe");
            viewString.Append("edqty21 AS MachineSpeedWeightLookup_speedqty21, \r\n            T.speedqty22 AS Ma");
            viewString.Append("chineSpeedWeightLookup_speedqty22, \r\n            T.speedqty23 AS MachineSpeedWei");
            viewString.Append("ghtLookup_speedqty23, \r\n            T.speedqty24 AS MachineSpeedWeightLookup_spe");
            viewString.Append("edqty24, \r\n            T.speedqty25 AS MachineSpeedWeightLookup_speedqty25, \r\n  ");
            viewString.Append("          T.SheetWeight3 AS MachineSpeedWeightLookup_SheetWeight3, \r\n           ");
            viewString.Append(" T.speedqty31 AS MachineSpeedWeightLookup_speedqty31, \r\n            T.speedqty32");
            viewString.Append(" AS MachineSpeedWeightLookup_speedqty32, \r\n            T.speedqty33 AS MachineSp");
            viewString.Append("eedWeightLookup_speedqty33, \r\n            T.speedqty34 AS MachineSpeedWeightLook");
            viewString.Append("up_speedqty34, \r\n            T.speedqty35 AS MachineSpeedWeightLookup_speedqty35");
            viewString.Append(", \r\n            T.hourlyCost AS MachineSpeedWeightLookup_hourlyCost, \r\n         ");
            viewString.Append("   T.hourlyPrice AS MachineSpeedWeightLookup_hourlyPrice, \r\n            True AS ");
            viewString.Append("_from0\r\n        FROM DomainModelsStoreContainer.MachineSpeedWeightLookup AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineSpeedWeightLookups", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SystemUsers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView225()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SystemUsers", "\r\n    SELECT VALUE -- Constructing SystemUsers\r\n        [DomainModels.SystemUser]" +
                    "(T1.SystemUser_SystemUserId, T1.SystemUser_UserName, T1.SystemUser_Description, " +
                    "T1.SystemUser_OrganizationId, T1.SystemUser_DepartmentId, T1.SystemUser_FullName" +
                    ", T1.SystemUser_UserType, T1.SystemUser_RoleId, T1.SystemUser_IsAccountDisabled," +
                    " T1.SystemUser_CostPerHour, T1.SystemUser_IsScheduleable, T1.SystemUser_IsSystem" +
                    "User, T1.SystemUser_UserAuthToken, T1.SystemUser_Email, T1.SystemUser_EmailSigna" +
                    "ture, T1.SystemUser_EstimateHeadNotes, T1.SystemUser_EstimateFootNotes)\r\n    FRO" +
                    "M (\r\n        SELECT \r\n            T.SystemUserId AS SystemUser_SystemUserId, \r\n " +
                    "           T.UserName AS SystemUser_UserName, \r\n            T.Description AS Sys" +
                    "temUser_Description, \r\n            T.OrganizationId AS SystemUser_OrganizationId" +
                    ", \r\n            T.DepartmentId AS SystemUser_DepartmentId, \r\n            T.FullN" +
                    "ame AS SystemUser_FullName, \r\n            T.UserType AS SystemUser_UserType, \r\n " +
                    "           T.RoleId AS SystemUser_RoleId, \r\n            T.IsAccountDisabled AS S" +
                    "ystemUser_IsAccountDisabled, \r\n            T.CostPerHour AS SystemUser_CostPerHo" +
                    "ur, \r\n            T.IsScheduleable AS SystemUser_IsScheduleable, \r\n            T" +
                    ".IsSystemUser AS SystemUser_IsSystemUser, \r\n            T.UserAuthToken AS Syste" +
                    "mUser_UserAuthToken, \r\n            T.Email AS SystemUser_Email, \r\n            T." +
                    "EmailSignature AS SystemUser_EmailSignature, \r\n            T.EstimateHeadNotes A" +
                    "S SystemUser_EstimateHeadNotes, \r\n            T.EstimateFootNotes AS SystemUser_" +
                    "EstimateFootNotes, \r\n            True AS _from0\r\n        FROM DomainModelsStoreC" +
                    "ontainer.SystemUser AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GoodsReceivedNotes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView226()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3251);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GoodsReceivedNotes\r\n        [DomainModels.Goo");
            viewString.Append("dsReceivedNote](T1.GoodsReceivedNote_GoodsReceivedId, T1.GoodsReceivedNote_Purch");
            viewString.Append("aseId, T1.[GoodsReceivedNote.date_Received], T1.GoodsReceivedNote_SupplierId, T1");
            viewString.Append(".GoodsReceivedNote_TotalPrice, T1.GoodsReceivedNote_UserId, T1.GoodsReceivedNote");
            viewString.Append("_Address, T1.GoodsReceivedNote_City, T1.GoodsReceivedNote_State, T1.GoodsReceive");
            viewString.Append("dNote_PostalCode, T1.GoodsReceivedNote_Country, T1.GoodsReceivedNote_ContactId, ");
            viewString.Append("T1.GoodsReceivedNote_RefNo, T1.GoodsReceivedNote_Comments, T1.GoodsReceivedNote_");
            viewString.Append("UserNotes, T1.GoodsReceivedNote_isProduct, T1.GoodsReceivedNote_Tel1, T1.GoodsRe");
            viewString.Append("ceivedNote_code, T1.GoodsReceivedNote_Discount, T1.GoodsReceivedNote_TotalTax, T");
            viewString.Append("1.GoodsReceivedNote_grandTotal, T1.GoodsReceivedNote_NetTotal, T1.GoodsReceivedN");
            viewString.Append("ote_discountType, T1.GoodsReceivedNote_Status, T1.GoodsReceivedNote_CreatedBy, T");
            viewString.Append("1.GoodsReceivedNote_LastChangedBy, T1.GoodsReceivedNote_FlagId, T1.GoodsReceived");
            viewString.Append("Note_LockedBy, T1.GoodsReceivedNote_SystemSiteId, T1.GoodsReceivedNote_IsRead, T");
            viewString.Append("1.GoodsReceivedNote_DeliveryDate, T1.GoodsReceivedNote_Reference1, T1.GoodsRecei");
            viewString.Append("vedNote_Reference2, T1.GoodsReceivedNote_CarrierId)\r\n    FROM (\r\n        SELECT ");
            viewString.Append("\r\n            T.GoodsReceivedId AS GoodsReceivedNote_GoodsReceivedId, \r\n        ");
            viewString.Append("    T.PurchaseId AS GoodsReceivedNote_PurchaseId, \r\n            T.date_Received ");
            viewString.Append("AS [GoodsReceivedNote.date_Received], \r\n            T.SupplierId AS GoodsReceive");
            viewString.Append("dNote_SupplierId, \r\n            T.TotalPrice AS GoodsReceivedNote_TotalPrice, \r\n");
            viewString.Append("            T.UserId AS GoodsReceivedNote_UserId, \r\n            T.Address AS Goo");
            viewString.Append("dsReceivedNote_Address, \r\n            T.City AS GoodsReceivedNote_City, \r\n      ");
            viewString.Append("      T.State AS GoodsReceivedNote_State, \r\n            T.PostalCode AS GoodsRec");
            viewString.Append("eivedNote_PostalCode, \r\n            T.Country AS GoodsReceivedNote_Country, \r\n  ");
            viewString.Append("          T.ContactId AS GoodsReceivedNote_ContactId, \r\n            T.RefNo AS G");
            viewString.Append("oodsReceivedNote_RefNo, \r\n            T.Comments AS GoodsReceivedNote_Comments, ");
            viewString.Append("\r\n            T.UserNotes AS GoodsReceivedNote_UserNotes, \r\n            T.isProd");
            viewString.Append("uct AS GoodsReceivedNote_isProduct, \r\n            T.Tel1 AS GoodsReceivedNote_Te");
            viewString.Append("l1, \r\n            T.code AS GoodsReceivedNote_code, \r\n            T.Discount AS ");
            viewString.Append("GoodsReceivedNote_Discount, \r\n            T.TotalTax AS GoodsReceivedNote_TotalT");
            viewString.Append("ax, \r\n            T.grandTotal AS GoodsReceivedNote_grandTotal, \r\n            T.");
            viewString.Append("NetTotal AS GoodsReceivedNote_NetTotal, \r\n            T.discountType AS GoodsRec");
            viewString.Append("eivedNote_discountType, \r\n            T.Status AS GoodsReceivedNote_Status, \r\n  ");
            viewString.Append("          T.CreatedBy AS GoodsReceivedNote_CreatedBy, \r\n            T.LastChange");
            viewString.Append("dBy AS GoodsReceivedNote_LastChangedBy, \r\n            T.FlagId AS GoodsReceivedN");
            viewString.Append("ote_FlagId, \r\n            T.LockedBy AS GoodsReceivedNote_LockedBy, \r\n          ");
            viewString.Append("  T.SystemSiteId AS GoodsReceivedNote_SystemSiteId, \r\n            T.IsRead AS Go");
            viewString.Append("odsReceivedNote_IsRead, \r\n            T.DeliveryDate AS GoodsReceivedNote_Delive");
            viewString.Append("ryDate, \r\n            T.Reference1 AS GoodsReceivedNote_Reference1, \r\n          ");
            viewString.Append("  T.Reference2 AS GoodsReceivedNote_Reference2, \r\n            T.CarrierId AS Goo");
            viewString.Append("dsReceivedNote_CarrierId, \r\n            True AS _from0\r\n        FROM DomainModel");
            viewString.Append("sStoreContainer.GoodsReceivedNote AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GoodsReceivedNotes", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GoodsReceivedNoteDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView227()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2203);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GoodsReceivedNoteDetails\r\n        [DomainMode");
            viewString.Append("ls.GoodsReceivedNoteDetail](T1.GoodsReceivedNoteDetail_GoodsReceivedDetailId, T1");
            viewString.Append(".GoodsReceivedNoteDetail_ItemId, T1.GoodsReceivedNoteDetail_QtyReceived, T1.Good");
            viewString.Append("sReceivedNoteDetail_GoodsreceivedId, T1.GoodsReceivedNoteDetail_Price, T1.GoodsR");
            viewString.Append("eceivedNoteDetail_PackQty, T1.GoodsReceivedNoteDetail_TotalOrderedqty, T1.GoodsR");
            viewString.Append("eceivedNoteDetail_Details, T1.GoodsReceivedNoteDetail_ItemCode, T1.GoodsReceived");
            viewString.Append("NoteDetail_Name, T1.GoodsReceivedNoteDetail_TotalPrice, T1.GoodsReceivedNoteDeta");
            viewString.Append("il_TaxId, T1.GoodsReceivedNoteDetail_NetTax, T1.GoodsReceivedNoteDetail_Discount");
            viewString.Append(", T1.GoodsReceivedNoteDetail_FreeItems, T1.GoodsReceivedNoteDetail_DepartmentId,");
            viewString.Append(" T1.GoodsReceivedNoteDetail_TaxValue, T1.GoodsReceivedNoteDetail_ProductType, T1");
            viewString.Append(".GoodsReceivedNoteDetail_RefItemId)\r\n    FROM (\r\n        SELECT \r\n            T.");
            viewString.Append("GoodsReceivedDetailId AS GoodsReceivedNoteDetail_GoodsReceivedDetailId, \r\n      ");
            viewString.Append("      T.ItemId AS GoodsReceivedNoteDetail_ItemId, \r\n            T.QtyReceived AS");
            viewString.Append(" GoodsReceivedNoteDetail_QtyReceived, \r\n            T.GoodsreceivedId AS GoodsRe");
            viewString.Append("ceivedNoteDetail_GoodsreceivedId, \r\n            T.Price AS GoodsReceivedNoteDeta");
            viewString.Append("il_Price, \r\n            T.PackQty AS GoodsReceivedNoteDetail_PackQty, \r\n        ");
            viewString.Append("    T.TotalOrderedqty AS GoodsReceivedNoteDetail_TotalOrderedqty, \r\n            ");
            viewString.Append("T.Details AS GoodsReceivedNoteDetail_Details, \r\n            T.ItemCode AS GoodsR");
            viewString.Append("eceivedNoteDetail_ItemCode, \r\n            T.Name AS GoodsReceivedNoteDetail_Name");
            viewString.Append(", \r\n            T.TotalPrice AS GoodsReceivedNoteDetail_TotalPrice, \r\n          ");
            viewString.Append("  T.TaxId AS GoodsReceivedNoteDetail_TaxId, \r\n            T.NetTax AS GoodsRecei");
            viewString.Append("vedNoteDetail_NetTax, \r\n            T.Discount AS GoodsReceivedNoteDetail_Discou");
            viewString.Append("nt, \r\n            T.FreeItems AS GoodsReceivedNoteDetail_FreeItems, \r\n          ");
            viewString.Append("  T.DepartmentId AS GoodsReceivedNoteDetail_DepartmentId, \r\n            T.TaxVal");
            viewString.Append("ue AS GoodsReceivedNoteDetail_TaxValue, \r\n            T.ProductType AS GoodsRece");
            viewString.Append("ivedNoteDetail_ProductType, \r\n            T.RefItemId AS GoodsReceivedNoteDetail");
            viewString.Append("_RefItemId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContaine");
            viewString.Append("r.GoodsReceivedNoteDetail AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GoodsReceivedNoteDetails", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Purchases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView228()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2561);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Purchases\r\n        [DomainModels.Purchase](T1");
            viewString.Append(".Purchase_PurchaseId, T1.Purchase_Code, T1.[Purchase.date_Purchase], T1.Purchase");
            viewString.Append("_SupplierId, T1.Purchase_ContactId, T1.Purchase_SupplierContactCompany, T1.Purch");
            viewString.Append("ase_SupplierContactAddressID, T1.Purchase_TotalPrice, T1.Purchase_UserID, T1.Pur");
            viewString.Append("chase_JobID, T1.Purchase_RefNo, T1.Purchase_Comments, T1.Purchase_FootNote, T1.P");
            viewString.Append("urchase_UserNotes, T1.Purchase_NotesUpdateDateTime, T1.Purchase_NotesUpdatedByUs");
            viewString.Append("erId, T1.Purchase_isproduct, T1.Purchase_Status, T1.Purchase_LockedBy, T1.Purcha");
            viewString.Append("se_TotalTax, T1.Purchase_Discount, T1.Purchase_discountType, T1.Purchase_GrandTo");
            viewString.Append("tal, T1.Purchase_NetTotal, T1.Purchase_CreatedBy, T1.Purchase_LastChangedBy, T1.");
            viewString.Append("Purchase_FlagID, T1.Purchase_SystemSiteId, T1.Purchase_IsRead, T1.Purchase_IsPri");
            viewString.Append("nted, T1.Purchase_XeroAccessCode)\r\n    FROM (\r\n        SELECT \r\n            T.Pu");
            viewString.Append("rchaseId AS Purchase_PurchaseId, \r\n            T.Code AS Purchase_Code, \r\n      ");
            viewString.Append("      T.date_Purchase AS [Purchase.date_Purchase], \r\n            T.SupplierId AS");
            viewString.Append(" Purchase_SupplierId, \r\n            T.ContactId AS Purchase_ContactId, \r\n       ");
            viewString.Append("     T.SupplierContactCompany AS Purchase_SupplierContactCompany, \r\n            ");
            viewString.Append("T.SupplierContactAddressID AS Purchase_SupplierContactAddressID, \r\n            T");
            viewString.Append(".TotalPrice AS Purchase_TotalPrice, \r\n            T.UserID AS Purchase_UserID, \r");
            viewString.Append("\n            T.JobID AS Purchase_JobID, \r\n            T.RefNo AS Purchase_RefNo,");
            viewString.Append(" \r\n            T.Comments AS Purchase_Comments, \r\n            T.FootNote AS Purc");
            viewString.Append("hase_FootNote, \r\n            T.UserNotes AS Purchase_UserNotes, \r\n            T.");
            viewString.Append("NotesUpdateDateTime AS Purchase_NotesUpdateDateTime, \r\n            T.NotesUpdate");
            viewString.Append("dByUserId AS Purchase_NotesUpdatedByUserId, \r\n            T.isproduct AS Purchas");
            viewString.Append("e_isproduct, \r\n            T.Status AS Purchase_Status, \r\n            T.LockedBy");
            viewString.Append(" AS Purchase_LockedBy, \r\n            T.TotalTax AS Purchase_TotalTax, \r\n        ");
            viewString.Append("    T.Discount AS Purchase_Discount, \r\n            T.discountType AS Purchase_di");
            viewString.Append("scountType, \r\n            T.GrandTotal AS Purchase_GrandTotal, \r\n            T.N");
            viewString.Append("etTotal AS Purchase_NetTotal, \r\n            T.CreatedBy AS Purchase_CreatedBy, \r");
            viewString.Append("\n            T.LastChangedBy AS Purchase_LastChangedBy, \r\n            T.FlagID A");
            viewString.Append("S Purchase_FlagID, \r\n            T.SystemSiteId AS Purchase_SystemSiteId, \r\n    ");
            viewString.Append("        T.IsRead AS Purchase_IsRead, \r\n            T.IsPrinted AS Purchase_IsPri");
            viewString.Append("nted, \r\n            T.XeroAccessCode AS Purchase_XeroAccessCode, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM DomainModelsStoreContainer.Purchase AS T\r\n    ) AS T");
            viewString.Append("1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Purchases", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PurchaseDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView229()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PurchaseDetails", "\r\n    SELECT VALUE -- Constructing PurchaseDetails\r\n        [DomainModels.Purchas" +
                    "eDetail](T1.PurchaseDetail_PurchaseDetailId, T1.PurchaseDetail_ItemId, T1.Purcha" +
                    "seDetail_quantity, T1.PurchaseDetail_PurchaseId, T1.PurchaseDetail_price, T1.Pur" +
                    "chaseDetail_packqty, T1.PurchaseDetail_ItemCode, T1.PurchaseDetail_ServiceDetail" +
                    ", T1.PurchaseDetail_ItemName, T1.PurchaseDetail_TaxId, T1.PurchaseDetail_TotalPr" +
                    "ice, T1.PurchaseDetail_Discount, T1.PurchaseDetail_NetTax, T1.PurchaseDetail_fre" +
                    "eitems, T1.PurchaseDetail_ItemBalance, T1.PurchaseDetail_DepartmentId, T1.Purcha" +
                    "seDetail_ProductType, T1.PurchaseDetail_RefItemId, T1.PurchaseDetail_TaxValue)\r\n" +
                    "    FROM (\r\n        SELECT \r\n            T.PurchaseDetailId AS PurchaseDetail_Pu" +
                    "rchaseDetailId, \r\n            T.ItemId AS PurchaseDetail_ItemId, \r\n            T" +
                    ".quantity AS PurchaseDetail_quantity, \r\n            T.PurchaseId AS PurchaseDeta" +
                    "il_PurchaseId, \r\n            T.price AS PurchaseDetail_price, \r\n            T.pa" +
                    "ckqty AS PurchaseDetail_packqty, \r\n            T.ItemCode AS PurchaseDetail_Item" +
                    "Code, \r\n            T.ServiceDetail AS PurchaseDetail_ServiceDetail, \r\n         " +
                    "   T.ItemName AS PurchaseDetail_ItemName, \r\n            T.TaxId AS PurchaseDetai" +
                    "l_TaxId, \r\n            T.TotalPrice AS PurchaseDetail_TotalPrice, \r\n            " +
                    "T.Discount AS PurchaseDetail_Discount, \r\n            T.NetTax AS PurchaseDetail_" +
                    "NetTax, \r\n            T.freeitems AS PurchaseDetail_freeitems, \r\n            T.I" +
                    "temBalance AS PurchaseDetail_ItemBalance, \r\n            T.DepartmentId AS Purcha" +
                    "seDetail_DepartmentId, \r\n            T.ProductType AS PurchaseDetail_ProductType" +
                    ", \r\n            T.RefItemId AS PurchaseDetail_RefItemId, \r\n            T.TaxValu" +
                    "e AS PurchaseDetail_TaxValue, \r\n            True AS _from0\r\n        FROM DomainM" +
                    "odelsStoreContainer.PurchaseDetail AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SectionInkCoverages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView230()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SectionInkCoverages", @"
    SELECT VALUE -- Constructing SectionInkCoverages
        [DomainModels.SectionInkCoverage](T1.SectionInkCoverage_Id, T1.SectionInkCoverage_SectionId, T1.SectionInkCoverage_InkOrder, T1.SectionInkCoverage_InkId, T1.SectionInkCoverage_CoverageGroupId, T1.SectionInkCoverage_Side)
    FROM (
        SELECT 
            T.Id AS SectionInkCoverage_Id, 
            T.SectionId AS SectionInkCoverage_SectionId, 
            T.InkOrder AS SectionInkCoverage_InkOrder, 
            T.InkId AS SectionInkCoverage_InkId, 
            T.CoverageGroupId AS SectionInkCoverage_CoverageGroupId, 
            T.Side AS SectionInkCoverage_Side, 
            True AS _from0
        FROM DomainModelsStoreContainer.SectionInkCoverage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ShippingInformations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView231()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ShippingInformations", @"
    SELECT VALUE -- Constructing ShippingInformations
        [DomainModels.ShippingInformation](T1.ShippingInformation_ShippingId, T1.ShippingInformation_ItemId, T1.ShippingInformation_AddressId, T1.ShippingInformation_Quantity, T1.ShippingInformation_Price, T1.ShippingInformation_DeliveryNoteRaised, T1.ShippingInformation_DeliveryDate, T1.ShippingInformation_EstimateId)
    FROM (
        SELECT 
            T.ShippingId AS ShippingInformation_ShippingId, 
            T.ItemId AS ShippingInformation_ItemId, 
            T.AddressId AS ShippingInformation_AddressId, 
            T.Quantity AS ShippingInformation_Quantity, 
            T.Price AS ShippingInformation_Price, 
            T.DeliveryNoteRaised AS ShippingInformation_DeliveryNoteRaised, 
            T.DeliveryDate AS ShippingInformation_DeliveryDate, 
            T.EstimateId AS ShippingInformation_EstimateId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ShippingInformation AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineLookupMethods
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView232()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineLookupMethods", @"
    SELECT VALUE -- Constructing MachineLookupMethods
        [DomainModels.MachineLookupMethod](T1.MachineLookupMethod_Id, T1.MachineLookupMethod_MachineId, T1.MachineLookupMethod_MethodId, T1.MachineLookupMethod_DefaultMethod)
    FROM (
        SELECT 
            T.Id AS MachineLookupMethod_Id, 
            T.MachineId AS MachineLookupMethod_MachineId, 
            T.MethodId AS MachineLookupMethod_MethodId, 
            T.DefaultMethod AS MachineLookupMethod_DefaultMethod, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineLookupMethod AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VariableExtensions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView233()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VariableExtensions", @"
    SELECT VALUE -- Constructing VariableExtensions
        [DomainModels.VariableExtension](T1.VariableExtension_Id, T1.VariableExtension_FieldVariableId, T1.VariableExtension_CompanyId, T1.VariableExtension_OrganisationId, T1.VariableExtension_VariablePrefix, T1.VariableExtension_VariablePostfix, T1.VariableExtension_CollapsePrefix, T1.VariableExtension_CollapsePostfix)
    FROM (
        SELECT 
            T.Id AS VariableExtension_Id, 
            T.FieldVariableId AS VariableExtension_FieldVariableId, 
            T.CompanyId AS VariableExtension_CompanyId, 
            T.OrganisationId AS VariableExtension_OrganisationId, 
            T.VariablePrefix AS VariableExtension_VariablePrefix, 
            T.VariablePostfix AS VariableExtension_VariablePostfix, 
            T.CollapsePrefix AS VariableExtension_CollapsePrefix, 
            T.CollapsePostfix AS VariableExtension_CollapsePostfix, 
            True AS _from0
        FROM DomainModelsStoreContainer.VariableExtension AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ChartOfAccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView234()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ChartOfAccount", "\r\n    SELECT VALUE -- Constructing ChartOfAccount\r\n        [DomainModels.Store.Ch" +
                    "artOfAccount](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccou" +
                    "nt_Name, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType," +
                    " T1.ChartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Descri" +
                    "ption, T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_I" +
                    "sFixed, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliatio" +
                    "n, T1.ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_System" +
                    "SiteId, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_Accoun" +
                    "tNo, \r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance" +
                    " AS ChartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOf" +
                    "Account_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n " +
                    "           T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description " +
                    "AS ChartOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, " +
                    "\r\n            T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS " +
                    "ChartOfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastA" +
                    "ctivityDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconcil" +
                    "iation, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRea" +
                    "d AS ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_Syste" +
                    "mSiteId, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n      " +
                    "      True AS _from0\r\n        FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS " +
                    "T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView235()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "Id AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeId AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeId AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteId AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.ChartOfAccount AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView236()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Markup", @"
    SELECT VALUE -- Constructing Markup
        [DomainModels.Store.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_OrganisationId)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.OrganisationId AS Markup_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.Markups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.prefix
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView237()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3853);
            viewString.Append("\r\n    SELECT VALUE -- Constructing prefix\r\n        [DomainModels.Store.prefix](T");
            viewString.Append("1.prefix_EstimatePrefix, T1.prefix_EstimateStart, T1.prefix_EstimateNext, T1.pre");
            viewString.Append("fix_InvoicePrefix, T1.prefix_InvoiceStart, T1.prefix_InvoiceNext, T1.prefix_JobP");
            viewString.Append("refix, T1.prefix_JobStart, T1.prefix_JobNext, T1.prefix_POPrefix, T1.prefix_POSt");
            viewString.Append("art, T1.prefix_PONext, T1.prefix_GOFPrefix, T1.prefix_GOFStart, T1.prefix_GOFNex");
            viewString.Append("t, T1.prefix_ITEMPrefix, T1.prefix_ITEMStart, T1.prefix_ITEMNext, T1.prefix_Deli");
            viewString.Append("veryNPrefix, T1.prefix_DeliveryNStart, T1.prefix_DeliveryNNext, T1.prefix_JobCar");
            viewString.Append("dPrefix, T1.prefix_JobCardStart, T1.prefix_JobCardNext, T1.prefix_GRNPrefix, T1.");
            viewString.Append("prefix_GRNStart, T1.prefix_GRNNext, T1.prefix_ProductPrefix, T1.prefix_ProductSt");
            viewString.Append("art, T1.prefix_ProductNext, T1.prefix_FinishedGoodsPrefix, T1.prefix_FinishedGoo");
            viewString.Append("dsStart, T1.prefix_FinishedGoodsNext, T1.prefix_OrderPrefix, T1.prefix_OrderStar");
            viewString.Append("t, T1.prefix_OrderNext, T1.prefix_EnquiryPrefix, T1.prefix_EnquiryStart, T1.pref");
            viewString.Append("ix_EnquiryNext, T1.prefix_StockItemPrefix, T1.prefix_StockItemStart, T1.prefix_S");
            viewString.Append("tockItemNext, T1.prefix_SystemSiteID, T1.prefix_PrefixId, T1.prefix_DepartmentId");
            viewString.Append(", T1.prefix_MarkupId, T1.prefix_JobManagerId, T1.prefix_OrderManagerId, T1.prefi");
            viewString.Append("x_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimatePrefix AS ");
            viewString.Append("prefix_EstimatePrefix, \r\n            T.EstimateStart AS prefix_EstimateStart, \r\n");
            viewString.Append("            T.EstimateNext AS prefix_EstimateNext, \r\n            T.InvoicePrefix");
            viewString.Append(" AS prefix_InvoicePrefix, \r\n            T.InvoiceStart AS prefix_InvoiceStart, \r");
            viewString.Append("\n            T.InvoiceNext AS prefix_InvoiceNext, \r\n            T.JobPrefix AS p");
            viewString.Append("refix_JobPrefix, \r\n            T.JobStart AS prefix_JobStart, \r\n            T.Jo");
            viewString.Append("bNext AS prefix_JobNext, \r\n            T.PoPrefix AS prefix_POPrefix, \r\n        ");
            viewString.Append("    T.PoStart AS prefix_POStart, \r\n            T.PoNext AS prefix_PONext, \r\n    ");
            viewString.Append("        T.GofPrefix AS prefix_GOFPrefix, \r\n            T.GofStart AS prefix_GOFS");
            viewString.Append("tart, \r\n            T.GofNext AS prefix_GOFNext, \r\n            T.ItemPrefix AS p");
            viewString.Append("refix_ITEMPrefix, \r\n            T.ItemStart AS prefix_ITEMStart, \r\n            T");
            viewString.Append(".ItemNext AS prefix_ITEMNext, \r\n            T.DeliveryNPrefix AS prefix_Delivery");
            viewString.Append("NPrefix, \r\n            T.DeliveryNStart AS prefix_DeliveryNStart, \r\n            ");
            viewString.Append("T.DeliveryNNext AS prefix_DeliveryNNext, \r\n            T.JobCardPrefix AS prefix");
            viewString.Append("_JobCardPrefix, \r\n            T.JobCardStart AS prefix_JobCardStart, \r\n         ");
            viewString.Append("   T.JobCardNext AS prefix_JobCardNext, \r\n            T.GrnPrefix AS prefix_GRNP");
            viewString.Append("refix, \r\n            T.GrnStart AS prefix_GRNStart, \r\n            T.GrnNext AS p");
            viewString.Append("refix_GRNNext, \r\n            T.ProductPrefix AS prefix_ProductPrefix, \r\n        ");
            viewString.Append("    T.ProductStart AS prefix_ProductStart, \r\n            T.ProductNext AS prefix");
            viewString.Append("_ProductNext, \r\n            T.FinishedGoodsPrefix AS prefix_FinishedGoodsPrefix,");
            viewString.Append(" \r\n            T.FinishedGoodsStart AS prefix_FinishedGoodsStart, \r\n            ");
            viewString.Append("T.FinishedGoodsNext AS prefix_FinishedGoodsNext, \r\n            T.OrderPrefix AS ");
            viewString.Append("prefix_OrderPrefix, \r\n            T.OrderStart AS prefix_OrderStart, \r\n         ");
            viewString.Append("   T.OrderNext AS prefix_OrderNext, \r\n            T.EnquiryPrefix AS prefix_Enqu");
            viewString.Append("iryPrefix, \r\n            T.EnquiryStart AS prefix_EnquiryStart, \r\n            T.");
            viewString.Append("EnquiryNext AS prefix_EnquiryNext, \r\n            T.StockItemPrefix AS prefix_Sto");
            viewString.Append("ckItemPrefix, \r\n            T.StockItemStart AS prefix_StockItemStart, \r\n       ");
            viewString.Append("     T.StockItemNext AS prefix_StockItemNext, \r\n            T.SystemSiteId AS pr");
            viewString.Append("efix_SystemSiteID, \r\n            T.PrefixId AS prefix_PrefixId, \r\n            T.");
            viewString.Append("DepartmentId AS prefix_DepartmentId, \r\n            T.MarkupId AS prefix_MarkupId");
            viewString.Append(", \r\n            T.JobManagerId AS prefix_JobManagerId, \r\n            T.OrderMana");
            viewString.Append("gerId AS prefix_OrderManagerId, \r\n            T.OrganisationId AS prefix_Organis");
            viewString.Append("ationId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Prefixes1 AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.prefix", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Markups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView238()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Markups", @"
    SELECT VALUE -- Constructing Markups
        [DomainModels.Markup](T1.Markup_MarkUpId, T1.Markup_MarkUpName, T1.Markup_MarkUpRate, T1.Markup_IsFixed, T1.Markup_IsDefault, T1.Markup_OrganisationId)
    FROM (
        SELECT 
            T.MarkUpId AS Markup_MarkUpId, 
            T.MarkUpName AS Markup_MarkUpName, 
            T.MarkUpRate AS Markup_MarkUpRate, 
            T.IsFixed AS Markup_IsFixed, 
            T.IsDefault AS Markup_IsDefault, 
            T.OrganisationId AS Markup_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Prefixes1
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView239()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3860);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Prefixes1\r\n        [DomainModels.Prefix](T1.P");
            viewString.Append("refix_EstimatePrefix, T1.Prefix_EstimateStart, T1.Prefix_EstimateNext, T1.Prefix");
            viewString.Append("_InvoicePrefix, T1.Prefix_InvoiceStart, T1.Prefix_InvoiceNext, T1.Prefix_JobPref");
            viewString.Append("ix, T1.Prefix_JobStart, T1.Prefix_JobNext, T1.Prefix_PoPrefix, T1.Prefix_PoStart");
            viewString.Append(", T1.Prefix_PoNext, T1.Prefix_GofPrefix, T1.Prefix_GofStart, T1.Prefix_GofNext, ");
            viewString.Append("T1.Prefix_ItemPrefix, T1.Prefix_ItemStart, T1.Prefix_ItemNext, T1.Prefix_Deliver");
            viewString.Append("yNPrefix, T1.Prefix_DeliveryNStart, T1.Prefix_DeliveryNNext, T1.Prefix_JobCardPr");
            viewString.Append("efix, T1.Prefix_JobCardStart, T1.Prefix_JobCardNext, T1.Prefix_GrnPrefix, T1.Pre");
            viewString.Append("fix_GrnStart, T1.Prefix_GrnNext, T1.Prefix_ProductPrefix, T1.Prefix_ProductStart");
            viewString.Append(", T1.Prefix_ProductNext, T1.Prefix_FinishedGoodsPrefix, T1.Prefix_FinishedGoodsS");
            viewString.Append("tart, T1.Prefix_FinishedGoodsNext, T1.Prefix_OrderPrefix, T1.Prefix_OrderStart, ");
            viewString.Append("T1.Prefix_OrderNext, T1.Prefix_EnquiryPrefix, T1.Prefix_EnquiryStart, T1.Prefix_");
            viewString.Append("EnquiryNext, T1.Prefix_StockItemPrefix, T1.Prefix_StockItemStart, T1.Prefix_Stoc");
            viewString.Append("kItemNext, T1.Prefix_SystemSiteId, T1.Prefix_PrefixId, T1.Prefix_DepartmentId, T");
            viewString.Append("1.Prefix_MarkupId, T1.Prefix_JobManagerId, T1.Prefix_OrderManagerId, T1.Prefix_O");
            viewString.Append("rganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.EstimatePrefix AS Pre");
            viewString.Append("fix_EstimatePrefix, \r\n            T.EstimateStart AS Prefix_EstimateStart, \r\n   ");
            viewString.Append("         T.EstimateNext AS Prefix_EstimateNext, \r\n            T.InvoicePrefix AS");
            viewString.Append(" Prefix_InvoicePrefix, \r\n            T.InvoiceStart AS Prefix_InvoiceStart, \r\n  ");
            viewString.Append("          T.InvoiceNext AS Prefix_InvoiceNext, \r\n            T.JobPrefix AS Pref");
            viewString.Append("ix_JobPrefix, \r\n            T.JobStart AS Prefix_JobStart, \r\n            T.JobNe");
            viewString.Append("xt AS Prefix_JobNext, \r\n            T.POPrefix AS Prefix_PoPrefix, \r\n           ");
            viewString.Append(" T.POStart AS Prefix_PoStart, \r\n            T.PONext AS Prefix_PoNext, \r\n       ");
            viewString.Append("     T.GOFPrefix AS Prefix_GofPrefix, \r\n            T.GOFStart AS Prefix_GofStar");
            viewString.Append("t, \r\n            T.GOFNext AS Prefix_GofNext, \r\n            T.ITEMPrefix AS Pref");
            viewString.Append("ix_ItemPrefix, \r\n            T.ITEMStart AS Prefix_ItemStart, \r\n            T.IT");
            viewString.Append("EMNext AS Prefix_ItemNext, \r\n            T.DeliveryNPrefix AS Prefix_DeliveryNPr");
            viewString.Append("efix, \r\n            T.DeliveryNStart AS Prefix_DeliveryNStart, \r\n            T.D");
            viewString.Append("eliveryNNext AS Prefix_DeliveryNNext, \r\n            T.JobCardPrefix AS Prefix_Jo");
            viewString.Append("bCardPrefix, \r\n            T.JobCardStart AS Prefix_JobCardStart, \r\n            ");
            viewString.Append("T.JobCardNext AS Prefix_JobCardNext, \r\n            T.GRNPrefix AS Prefix_GrnPref");
            viewString.Append("ix, \r\n            T.GRNStart AS Prefix_GrnStart, \r\n            T.GRNNext AS Pref");
            viewString.Append("ix_GrnNext, \r\n            T.ProductPrefix AS Prefix_ProductPrefix, \r\n           ");
            viewString.Append(" T.ProductStart AS Prefix_ProductStart, \r\n            T.ProductNext AS Prefix_Pr");
            viewString.Append("oductNext, \r\n            T.FinishedGoodsPrefix AS Prefix_FinishedGoodsPrefix, \r\n");
            viewString.Append("            T.FinishedGoodsStart AS Prefix_FinishedGoodsStart, \r\n            T.F");
            viewString.Append("inishedGoodsNext AS Prefix_FinishedGoodsNext, \r\n            T.OrderPrefix AS Pre");
            viewString.Append("fix_OrderPrefix, \r\n            T.OrderStart AS Prefix_OrderStart, \r\n            ");
            viewString.Append("T.OrderNext AS Prefix_OrderNext, \r\n            T.EnquiryPrefix AS Prefix_Enquiry");
            viewString.Append("Prefix, \r\n            T.EnquiryStart AS Prefix_EnquiryStart, \r\n            T.Enq");
            viewString.Append("uiryNext AS Prefix_EnquiryNext, \r\n            T.StockItemPrefix AS Prefix_StockI");
            viewString.Append("temPrefix, \r\n            T.StockItemStart AS Prefix_StockItemStart, \r\n          ");
            viewString.Append("  T.StockItemNext AS Prefix_StockItemNext, \r\n            T.SystemSiteID AS Prefi");
            viewString.Append("x_SystemSiteId, \r\n            T.PrefixId AS Prefix_PrefixId, \r\n            T.Dep");
            viewString.Append("artmentId AS Prefix_DepartmentId, \r\n            T.MarkupId AS Prefix_MarkupId, \r");
            viewString.Append("\n            T.JobManagerId AS Prefix_JobManagerId, \r\n            T.OrderManager");
            viewString.Append("Id AS Prefix_OrderManagerId, \r\n            T.OrganisationId AS Prefix_Organisati");
            viewString.Append("onId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.pref");
            viewString.Append("ix AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Prefixes1", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperSize
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView240()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperSize", @"
    SELECT VALUE -- Constructing PaperSize
        [DomainModels.Store.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_isArchived, T1.PaperSize_OrganisationId, T1.PaperSize_IsImperical)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.IsArchived AS PaperSize_isArchived, 
            T.OrganisationId AS PaperSize_OrganisationId, 
            T.IsImperical AS PaperSize_IsImperical, 
            True AS _from0
        FROM BaseDbContext.PaperSizes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperSizes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView241()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperSizes", @"
    SELECT VALUE -- Constructing PaperSizes
        [DomainModels.PaperSize](T1.PaperSize_PaperSizeId, T1.PaperSize_Name, T1.PaperSize_Height, T1.PaperSize_Width, T1.PaperSize_SizeMeasure, T1.PaperSize_Area, T1.PaperSize_IsFixed, T1.PaperSize_Region, T1.PaperSize_IsArchived, T1.PaperSize_OrganisationId, T1.PaperSize_IsImperical)
    FROM (
        SELECT 
            T.PaperSizeId AS PaperSize_PaperSizeId, 
            T.Name AS PaperSize_Name, 
            T.Height AS PaperSize_Height, 
            T.Width AS PaperSize_Width, 
            T.SizeMeasure AS PaperSize_SizeMeasure, 
            T.Area AS PaperSize_Area, 
            T.IsFixed AS PaperSize_IsFixed, 
            T.Region AS PaperSize_Region, 
            T.isArchived AS PaperSize_IsArchived, 
            T.OrganisationId AS PaperSize_OrganisationId, 
            T.IsImperical AS PaperSize_IsImperical, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperSize AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemStockControl
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView242()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5074);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemStockControl\r\n        [DomainModels.Store");
            viewString.Append(".ItemStockControl](T1.ItemStockControl_Id, T1.ItemStockControl_ItemId, T1.ItemSt");
            viewString.Append("ockControl_ThumbnailURL, T1.ItemStockControl_ImageURL, T1.ItemStockControl_Conte");
            viewString.Append("ntType, T1.ItemStockControl_Description1, T1.ItemStockControl_Description2, T1.I");
            viewString.Append("temStockControl_Description3, T1.ItemStockControl_LockedBy, T1.ItemStockControl_");
            viewString.Append("InStock, T1.ItemStockControl_Allocated, T1.ItemStockControl_ThresholdLevel, T1.I");
            viewString.Append("temStockControl_ThresholdProductionQuantity, T1.ItemStockControl_Location, T1.It");
            viewString.Append("emStockControl_FinishedGoodType, T1.ItemStockControl_FinishedGoodStockItemId, T1");
            viewString.Append(".ItemStockControl_SupplierId, T1.ItemStockControl_SupplierCode, T1.ItemStockCont");
            viewString.Append("rol_ProductCode, T1.ItemStockControl_NominalCode, T1.ItemStockControl_BarCode, T");
            viewString.Append("1.ItemStockControl_FinishedGoodCode, T1.ItemStockControl_TaxId, T1.ItemStockCont");
            viewString.Append("rol_RangeThresholdLevel, T1.ItemStockControl_FromThresholdDate, T1.ItemStockCont");
            viewString.Append("rol_ToThresholdDate, T1.ItemStockControl_Cost, T1.ItemStockControl_UnitQuantity,");
            viewString.Append(" T1.ItemStockControl_PackQuantity, T1.ItemStockControl_RangeThresholdLevel1, T1.");
            viewString.Append("ItemStockControl_RangeThresholdLevel2, T1.ItemStockControl_FromThresholdDate1, T");
            viewString.Append("1.ItemStockControl_FromThresholdDate2, T1.ItemStockControl_ToThresholdDate1, T1.");
            viewString.Append("ItemStockControl_ToThresholdDate2, T1.ItemStockControl_SystemSiteId, T1.ItemStoc");
            viewString.Append("kControl_File1URL, T1.ItemStockControl_File2URL, T1.ItemStockControl_IsForWeb, T");
            viewString.Append("1.ItemStockControl_IsShowStockOnWeb, T1.ItemStockControl_IsShowPriceOnWeb, T1.It");
            viewString.Append("emStockControl_IsShowFreeStockOnWeb, T1.ItemStockControl_IsShowAllocatedStockOnW");
            viewString.Append("eb, T1.ItemStockControl_IsDisabled, T1.ItemStockControl_FlagId, T1.ItemStockCont");
            viewString.Append("rol_IsRead, T1.ItemStockControl_CreatedBy, T1.ItemStockControl_SiteDepartmentId,");
            viewString.Append(" T1.ItemStockControl_isAllowBackOrder)\r\n    FROM (\r\n        SELECT \r\n           ");
            viewString.Append(" T.Id AS ItemStockControl_Id, \r\n            T.ItemId AS ItemStockControl_ItemId,");
            viewString.Append(" \r\n            T.ThumbnailURL AS ItemStockControl_ThumbnailURL, \r\n            T.");
            viewString.Append("ImageURL AS ItemStockControl_ImageURL, \r\n            T.ContentType AS ItemStockC");
            viewString.Append("ontrol_ContentType, \r\n            T.Description1 AS ItemStockControl_Description");
            viewString.Append("1, \r\n            T.Description2 AS ItemStockControl_Description2, \r\n            ");
            viewString.Append("T.Description3 AS ItemStockControl_Description3, \r\n            T.LockedBy AS Ite");
            viewString.Append("mStockControl_LockedBy, \r\n            T.InStock AS ItemStockControl_InStock, \r\n ");
            viewString.Append("           T.Allocated AS ItemStockControl_Allocated, \r\n            T.ThresholdL");
            viewString.Append("evel AS ItemStockControl_ThresholdLevel, \r\n            T.ThresholdProductionQuan");
            viewString.Append("tity AS ItemStockControl_ThresholdProductionQuantity, \r\n            T.Location A");
            viewString.Append("S ItemStockControl_Location, \r\n            T.FinishedGoodType AS ItemStockContro");
            viewString.Append("l_FinishedGoodType, \r\n            T.FinishedGoodStockItemId AS ItemStockControl_");
            viewString.Append("FinishedGoodStockItemId, \r\n            T.SupplierId AS ItemStockControl_Supplier");
            viewString.Append("Id, \r\n            T.SupplierCode AS ItemStockControl_SupplierCode, \r\n           ");
            viewString.Append(" T.ProductCode AS ItemStockControl_ProductCode, \r\n            T.NominalCode AS I");
            viewString.Append("temStockControl_NominalCode, \r\n            T.BarCode AS ItemStockControl_BarCode");
            viewString.Append(", \r\n            T.FinishedGoodCode AS ItemStockControl_FinishedGoodCode, \r\n     ");
            viewString.Append("       T.TaxId AS ItemStockControl_TaxId, \r\n            T.RangeThresholdLevel AS");
            viewString.Append(" ItemStockControl_RangeThresholdLevel, \r\n            T.FromThresholdDate AS Item");
            viewString.Append("StockControl_FromThresholdDate, \r\n            T.ToThresholdDate AS ItemStockCont");
            viewString.Append("rol_ToThresholdDate, \r\n            T.Cost AS ItemStockControl_Cost, \r\n          ");
            viewString.Append("  T.UnitQuantity AS ItemStockControl_UnitQuantity, \r\n            T.PackQuantity ");
            viewString.Append("AS ItemStockControl_PackQuantity, \r\n            T.RangeThresholdLevel1 AS ItemSt");
            viewString.Append("ockControl_RangeThresholdLevel1, \r\n            T.RangeThresholdLevel2 AS ItemSto");
            viewString.Append("ckControl_RangeThresholdLevel2, \r\n            T.FromThresholdDate1 AS ItemStockC");
            viewString.Append("ontrol_FromThresholdDate1, \r\n            T.FromThresholdDate2 AS ItemStockContro");
            viewString.Append("l_FromThresholdDate2, \r\n            T.ToThresholdDate1 AS ItemStockControl_ToThr");
            viewString.Append("esholdDate1, \r\n            T.ToThresholdDate2 AS ItemStockControl_ToThresholdDat");
            viewString.Append("e2, \r\n            T.SystemSiteId AS ItemStockControl_SystemSiteId, \r\n           ");
            viewString.Append(" T.File1URL AS ItemStockControl_File1URL, \r\n            T.File2URL AS ItemStockC");
            viewString.Append("ontrol_File2URL, \r\n            T.IsForWeb AS ItemStockControl_IsForWeb, \r\n      ");
            viewString.Append("      T.IsShowStockOnWeb AS ItemStockControl_IsShowStockOnWeb, \r\n            T.I");
            viewString.Append("sShowPriceOnWeb AS ItemStockControl_IsShowPriceOnWeb, \r\n            T.IsShowFree");
            viewString.Append("StockOnWeb AS ItemStockControl_IsShowFreeStockOnWeb, \r\n            T.IsShowAlloc");
            viewString.Append("atedStockOnWeb AS ItemStockControl_IsShowAllocatedStockOnWeb, \r\n            T.Is");
            viewString.Append("Disabled AS ItemStockControl_IsDisabled, \r\n            T.FlagId AS ItemStockCont");
            viewString.Append("rol_FlagId, \r\n            T.IsRead AS ItemStockControl_IsRead, \r\n            T.C");
            viewString.Append("reatedBy AS ItemStockControl_CreatedBy, \r\n            T.SiteDepartmentId AS Item");
            viewString.Append("StockControl_SiteDepartmentId, \r\n            T.isAllowBackOrder AS ItemStockCont");
            viewString.Append("rol_isAllowBackOrder, \r\n            True AS _from0\r\n        FROM BaseDbContext.I");
            viewString.Append("temStockControls AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemStockControl", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemStockControls
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView243()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5081);
            viewString.Append("\r\n    SELECT VALUE -- Constructing ItemStockControls\r\n        [DomainModels.Item");
            viewString.Append("StockControl](T1.ItemStockControl_Id, T1.ItemStockControl_ItemId, T1.ItemStockCo");
            viewString.Append("ntrol_ThumbnailURL, T1.ItemStockControl_ImageURL, T1.ItemStockControl_ContentTyp");
            viewString.Append("e, T1.ItemStockControl_Description1, T1.ItemStockControl_Description2, T1.ItemSt");
            viewString.Append("ockControl_Description3, T1.ItemStockControl_LockedBy, T1.ItemStockControl_InSto");
            viewString.Append("ck, T1.ItemStockControl_Allocated, T1.ItemStockControl_ThresholdLevel, T1.ItemSt");
            viewString.Append("ockControl_ThresholdProductionQuantity, T1.ItemStockControl_Location, T1.ItemSto");
            viewString.Append("ckControl_FinishedGoodType, T1.ItemStockControl_FinishedGoodStockItemId, T1.Item");
            viewString.Append("StockControl_SupplierId, T1.ItemStockControl_SupplierCode, T1.ItemStockControl_P");
            viewString.Append("roductCode, T1.ItemStockControl_NominalCode, T1.ItemStockControl_BarCode, T1.Ite");
            viewString.Append("mStockControl_FinishedGoodCode, T1.ItemStockControl_TaxId, T1.ItemStockControl_R");
            viewString.Append("angeThresholdLevel, T1.ItemStockControl_FromThresholdDate, T1.ItemStockControl_T");
            viewString.Append("oThresholdDate, T1.ItemStockControl_Cost, T1.ItemStockControl_UnitQuantity, T1.I");
            viewString.Append("temStockControl_PackQuantity, T1.ItemStockControl_RangeThresholdLevel1, T1.ItemS");
            viewString.Append("tockControl_RangeThresholdLevel2, T1.ItemStockControl_FromThresholdDate1, T1.Ite");
            viewString.Append("mStockControl_FromThresholdDate2, T1.ItemStockControl_ToThresholdDate1, T1.ItemS");
            viewString.Append("tockControl_ToThresholdDate2, T1.ItemStockControl_SystemSiteId, T1.ItemStockCont");
            viewString.Append("rol_File1URL, T1.ItemStockControl_File2URL, T1.ItemStockControl_IsForWeb, T1.Ite");
            viewString.Append("mStockControl_IsShowStockOnWeb, T1.ItemStockControl_IsShowPriceOnWeb, T1.ItemSto");
            viewString.Append("ckControl_IsShowFreeStockOnWeb, T1.ItemStockControl_IsShowAllocatedStockOnWeb, T");
            viewString.Append("1.ItemStockControl_IsDisabled, T1.ItemStockControl_FlagId, T1.ItemStockControl_I");
            viewString.Append("sRead, T1.ItemStockControl_CreatedBy, T1.ItemStockControl_SiteDepartmentId, T1.I");
            viewString.Append("temStockControl_isAllowBackOrder)\r\n    FROM (\r\n        SELECT \r\n            T.Id");
            viewString.Append(" AS ItemStockControl_Id, \r\n            T.ItemId AS ItemStockControl_ItemId, \r\n  ");
            viewString.Append("          T.ThumbnailURL AS ItemStockControl_ThumbnailURL, \r\n            T.Image");
            viewString.Append("URL AS ItemStockControl_ImageURL, \r\n            T.ContentType AS ItemStockContro");
            viewString.Append("l_ContentType, \r\n            T.Description1 AS ItemStockControl_Description1, \r\n");
            viewString.Append("            T.Description2 AS ItemStockControl_Description2, \r\n            T.Des");
            viewString.Append("cription3 AS ItemStockControl_Description3, \r\n            T.LockedBy AS ItemStoc");
            viewString.Append("kControl_LockedBy, \r\n            T.InStock AS ItemStockControl_InStock, \r\n      ");
            viewString.Append("      T.Allocated AS ItemStockControl_Allocated, \r\n            T.ThresholdLevel ");
            viewString.Append("AS ItemStockControl_ThresholdLevel, \r\n            T.ThresholdProductionQuantity ");
            viewString.Append("AS ItemStockControl_ThresholdProductionQuantity, \r\n            T.Location AS Ite");
            viewString.Append("mStockControl_Location, \r\n            T.FinishedGoodType AS ItemStockControl_Fin");
            viewString.Append("ishedGoodType, \r\n            T.FinishedGoodStockItemId AS ItemStockControl_Finis");
            viewString.Append("hedGoodStockItemId, \r\n            T.SupplierId AS ItemStockControl_SupplierId, \r");
            viewString.Append("\n            T.SupplierCode AS ItemStockControl_SupplierCode, \r\n            T.Pr");
            viewString.Append("oductCode AS ItemStockControl_ProductCode, \r\n            T.NominalCode AS ItemSt");
            viewString.Append("ockControl_NominalCode, \r\n            T.BarCode AS ItemStockControl_BarCode, \r\n ");
            viewString.Append("           T.FinishedGoodCode AS ItemStockControl_FinishedGoodCode, \r\n          ");
            viewString.Append("  T.TaxId AS ItemStockControl_TaxId, \r\n            T.RangeThresholdLevel AS Item");
            viewString.Append("StockControl_RangeThresholdLevel, \r\n            T.FromThresholdDate AS ItemStock");
            viewString.Append("Control_FromThresholdDate, \r\n            T.ToThresholdDate AS ItemStockControl_T");
            viewString.Append("oThresholdDate, \r\n            T.Cost AS ItemStockControl_Cost, \r\n            T.U");
            viewString.Append("nitQuantity AS ItemStockControl_UnitQuantity, \r\n            T.PackQuantity AS It");
            viewString.Append("emStockControl_PackQuantity, \r\n            T.RangeThresholdLevel1 AS ItemStockCo");
            viewString.Append("ntrol_RangeThresholdLevel1, \r\n            T.RangeThresholdLevel2 AS ItemStockCon");
            viewString.Append("trol_RangeThresholdLevel2, \r\n            T.FromThresholdDate1 AS ItemStockContro");
            viewString.Append("l_FromThresholdDate1, \r\n            T.FromThresholdDate2 AS ItemStockControl_Fro");
            viewString.Append("mThresholdDate2, \r\n            T.ToThresholdDate1 AS ItemStockControl_ToThreshol");
            viewString.Append("dDate1, \r\n            T.ToThresholdDate2 AS ItemStockControl_ToThresholdDate2, \r");
            viewString.Append("\n            T.SystemSiteId AS ItemStockControl_SystemSiteId, \r\n            T.Fi");
            viewString.Append("le1URL AS ItemStockControl_File1URL, \r\n            T.File2URL AS ItemStockContro");
            viewString.Append("l_File2URL, \r\n            T.IsForWeb AS ItemStockControl_IsForWeb, \r\n           ");
            viewString.Append(" T.IsShowStockOnWeb AS ItemStockControl_IsShowStockOnWeb, \r\n            T.IsShow");
            viewString.Append("PriceOnWeb AS ItemStockControl_IsShowPriceOnWeb, \r\n            T.IsShowFreeStock");
            viewString.Append("OnWeb AS ItemStockControl_IsShowFreeStockOnWeb, \r\n            T.IsShowAllocatedS");
            viewString.Append("tockOnWeb AS ItemStockControl_IsShowAllocatedStockOnWeb, \r\n            T.IsDisab");
            viewString.Append("led AS ItemStockControl_IsDisabled, \r\n            T.FlagId AS ItemStockControl_F");
            viewString.Append("lagId, \r\n            T.IsRead AS ItemStockControl_IsRead, \r\n            T.Create");
            viewString.Append("dBy AS ItemStockControl_CreatedBy, \r\n            T.SiteDepartmentId AS ItemStock");
            viewString.Append("Control_SiteDepartmentId, \r\n            T.isAllowBackOrder AS ItemStockControl_i");
            viewString.Append("sAllowBackOrder, \r\n            True AS _from0\r\n        FROM DomainModelsStoreCon");
            viewString.Append("tainer.ItemStockControl AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemStockControls", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.SystemEmail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView244()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.SystemEmail", @"
    SELECT VALUE -- Constructing SystemEmail
        [DomainModels.Store.SystemEmail](T1.SystemEmail_Id, T1.SystemEmail_Title, T1.SystemEmail_FFrom, T1.SystemEmail_FromEmail, T1.SystemEmail_Subject, T1.SystemEmail_Body, T1.SystemEmail_TextBody, T1.SystemEmail_LockedBy, T1.SystemEmail_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS SystemEmail_Id, 
            T.Title AS SystemEmail_Title, 
            T.FFrom AS SystemEmail_FFrom, 
            T.FromEmail AS SystemEmail_FromEmail, 
            T.Subject AS SystemEmail_Subject, 
            T.Body AS SystemEmail_Body, 
            T.TextBody AS SystemEmail_TextBody, 
            T.LockedBy AS SystemEmail_LockedBy, 
            T.SystemSiteId AS SystemEmail_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.SystemEmails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SystemEmails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView245()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SystemEmails", @"
    SELECT VALUE -- Constructing SystemEmails
        [DomainModels.SystemEmail](T1.SystemEmail_Id, T1.SystemEmail_Title, T1.SystemEmail_FFrom, T1.SystemEmail_FromEmail, T1.SystemEmail_Subject, T1.SystemEmail_Body, T1.SystemEmail_TextBody, T1.SystemEmail_LockedBy, T1.SystemEmail_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS SystemEmail_Id, 
            T.Title AS SystemEmail_Title, 
            T.FFrom AS SystemEmail_FFrom, 
            T.FromEmail AS SystemEmail_FromEmail, 
            T.Subject AS SystemEmail_Subject, 
            T.Body AS SystemEmail_Body, 
            T.TextBody AS SystemEmail_TextBody, 
            T.LockedBy AS SystemEmail_LockedBy, 
            T.SystemSiteId AS SystemEmail_SystemSiteId, 
            True AS _from0
        FROM DomainModelsStoreContainer.SystemEmail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaperBasisArea
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView246()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaperBasisArea", @"
    SELECT VALUE -- Constructing PaperBasisArea
        [DomainModels.Store.PaperBasisArea](T1.PaperBasisArea_PaperBasisAreaId, T1.PaperBasisArea_Name, T1.PaperBasisArea_Value, T1.PaperBasisArea_IsSystem)
    FROM (
        SELECT 
            T.PaperBasisAreaId AS PaperBasisArea_PaperBasisAreaId, 
            T.Name AS PaperBasisArea_Name, 
            T.[Value] AS PaperBasisArea_Value, 
            T.IsSystem AS PaperBasisArea_IsSystem, 
            True AS _from0
        FROM BaseDbContext.PaperBasisAreas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaperBasisAreas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView247()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaperBasisAreas", @"
    SELECT VALUE -- Constructing PaperBasisAreas
        [DomainModels.PaperBasisArea](T1.PaperBasisArea_PaperBasisAreaId, T1.PaperBasisArea_Name, T1.PaperBasisArea_Value, T1.PaperBasisArea_IsSystem)
    FROM (
        SELECT 
            T.PaperBasisAreaId AS PaperBasisArea_PaperBasisAreaId, 
            T.Name AS PaperBasisArea_Name, 
            T.[Value] AS PaperBasisArea_Value, 
            T.IsSystem AS PaperBasisArea_IsSystem, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaperBasisArea AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GetItemsListView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView248()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3453);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetItemsListView\r\n        [DomainModels.Store");
            viewString.Append(".GetItemsListView](T1.GetItemsListView_ItemId, T1.GetItemsListView_ItemCode, T1.");
            viewString.Append("GetItemsListView_isQtyRanged, T1.GetItemsListView_EstimateId, T1.GetItemsListVie");
            viewString.Append("w_ProductName, T1.GetItemsListView_ProductCode, T1.GetItemsListView_ProductCateg");
            viewString.Append("oryName, T1.GetItemsListView_ProductCategoryIds, T1.GetItemsListView_MinPrice, T");
            viewString.Append("1.GetItemsListView_ImagePath, T1.GetItemsListView_ThumbnailPath, T1.GetItemsList");
            viewString.Append("View_IconPath, T1.GetItemsListView_IsEnabled, T1.GetItemsListView_IsSpecialItem,");
            viewString.Append(" T1.GetItemsListView_IsPopular, T1.GetItemsListView_IsFeatured, T1.GetItemsListV");
            viewString.Append("iew_IsPromotional, T1.GetItemsListView_IsPublished, T1.GetItemsListView_ProductT");
            viewString.Append("ype, T1.GetItemsListView_ProductSpecification, T1.GetItemsListView_CompleteSpeci");
            viewString.Append("fication, T1.GetItemsListView_IsArchived, T1.GetItemsListView_SortOrder, T1.GetI");
            viewString.Append("temsListView_OrganisationId, T1.GetItemsListView_WebDescription, T1.GetItemsList");
            viewString.Append("View_PriceDiscountPercentage, T1.GetItemsListView_DefaultItemTax, T1.GetItemsLis");
            viewString.Append("tView_isUploadImage, T1.GetItemsListView_CompanyId, T1.GetItemsListView_Template");
            viewString.Append("Id, T1.GetItemsListView_printCropMarks, T1.GetItemsListView_drawWaterMarkTxt, T1");
            viewString.Append(".GetItemsListView_TemplateType)\r\n    FROM (\r\n        SELECT \r\n            T.Item");
            viewString.Append("Id AS GetItemsListView_ItemId, \r\n            T.ItemCode AS GetItemsListView_Item");
            viewString.Append("Code, \r\n            T.IsQtyRanged AS GetItemsListView_isQtyRanged, \r\n           ");
            viewString.Append(" T.EstimateId AS GetItemsListView_EstimateId, \r\n            T.ProductName AS Get");
            viewString.Append("ItemsListView_ProductName, \r\n            T.ProductCode AS GetItemsListView_Produ");
            viewString.Append("ctCode, \r\n            T.ProductCategoryName AS GetItemsListView_ProductCategoryN");
            viewString.Append("ame, \r\n            T.ProductCategoryIds AS GetItemsListView_ProductCategoryIds, ");
            viewString.Append("\r\n            T.MinPrice AS GetItemsListView_MinPrice, \r\n            T.ImagePath");
            viewString.Append(" AS GetItemsListView_ImagePath, \r\n            T.ThumbnailPath AS GetItemsListVie");
            viewString.Append("w_ThumbnailPath, \r\n            T.IconPath AS GetItemsListView_IconPath, \r\n      ");
            viewString.Append("      T.IsEnabled AS GetItemsListView_IsEnabled, \r\n            T.IsSpecialItem A");
            viewString.Append("S GetItemsListView_IsSpecialItem, \r\n            T.IsPopular AS GetItemsListView_");
            viewString.Append("IsPopular, \r\n            T.IsFeatured AS GetItemsListView_IsFeatured, \r\n        ");
            viewString.Append("    T.IsPromotional AS GetItemsListView_IsPromotional, \r\n            T.IsPublish");
            viewString.Append("ed AS GetItemsListView_IsPublished, \r\n            T.ProductType AS GetItemsListV");
            viewString.Append("iew_ProductType, \r\n            T.ProductSpecification AS GetItemsListView_Produc");
            viewString.Append("tSpecification, \r\n            T.CompleteSpecification AS GetItemsListView_Comple");
            viewString.Append("teSpecification, \r\n            T.IsArchived AS GetItemsListView_IsArchived, \r\n  ");
            viewString.Append("          T.SortOrder AS GetItemsListView_SortOrder, \r\n            T.Organisatio");
            viewString.Append("nId AS GetItemsListView_OrganisationId, \r\n            T.WebDescription AS GetIte");
            viewString.Append("msListView_WebDescription, \r\n            T.PriceDiscountPercentage AS GetItemsLi");
            viewString.Append("stView_PriceDiscountPercentage, \r\n            T.DefaultItemTax AS GetItemsListVi");
            viewString.Append("ew_DefaultItemTax, \r\n            T.IsUploadImage AS GetItemsListView_isUploadIma");
            viewString.Append("ge, \r\n            T.CompanyId AS GetItemsListView_CompanyId, \r\n            T.Tem");
            viewString.Append("plateId AS GetItemsListView_TemplateId, \r\n            T.printCropMarks AS GetIte");
            viewString.Append("msListView_printCropMarks, \r\n            T.drawWaterMarkTxt AS GetItemsListView_");
            viewString.Append("drawWaterMarkTxt, \r\n            T.TemplateType AS GetItemsListView_TemplateType,");
            viewString.Append(" \r\n            True AS _from0\r\n        FROM BaseDbContext.GetItemsListViews AS T");
            viewString.Append("\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GetItemsListView", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GetItemsListViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView249()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3460);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetItemsListViews\r\n        [DomainModels.GetI");
            viewString.Append("temsListView](T1.GetItemsListView_ItemId, T1.GetItemsListView_ItemCode, T1.GetIt");
            viewString.Append("emsListView_EstimateId, T1.GetItemsListView_ProductName, T1.GetItemsListView_Pro");
            viewString.Append("ductCode, T1.GetItemsListView_ProductCategoryName, T1.GetItemsListView_MinPrice,");
            viewString.Append(" T1.GetItemsListView_ImagePath, T1.GetItemsListView_ThumbnailPath, T1.GetItemsLi");
            viewString.Append("stView_IconPath, T1.GetItemsListView_IsEnabled, T1.GetItemsListView_IsSpecialIte");
            viewString.Append("m, T1.GetItemsListView_IsPopular, T1.GetItemsListView_IsFeatured, T1.GetItemsLis");
            viewString.Append("tView_IsPromotional, T1.GetItemsListView_IsPublished, T1.GetItemsListView_Produc");
            viewString.Append("tSpecification, T1.GetItemsListView_CompleteSpecification, T1.GetItemsListView_I");
            viewString.Append("sArchived, T1.GetItemsListView_SortOrder, T1.GetItemsListView_IsQtyRanged, T1.Ge");
            viewString.Append("tItemsListView_OrganisationId, T1.GetItemsListView_WebDescription, T1.GetItemsLi");
            viewString.Append("stView_PriceDiscountPercentage, T1.GetItemsListView_DefaultItemTax, T1.GetItemsL");
            viewString.Append("istView_ProductType, T1.GetItemsListView_IsUploadImage, T1.GetItemsListView_Comp");
            viewString.Append("anyId, T1.GetItemsListView_TemplateId, T1.GetItemsListView_printCropMarks, T1.Ge");
            viewString.Append("tItemsListView_drawWaterMarkTxt, T1.GetItemsListView_TemplateType, T1.GetItemsLi");
            viewString.Append("stView_ProductCategoryIds)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId AS");
            viewString.Append(" GetItemsListView_ItemId, \r\n            T.ItemCode AS GetItemsListView_ItemCode,");
            viewString.Append(" \r\n            T.EstimateId AS GetItemsListView_EstimateId, \r\n            T.Prod");
            viewString.Append("uctName AS GetItemsListView_ProductName, \r\n            T.ProductCode AS GetItems");
            viewString.Append("ListView_ProductCode, \r\n            T.ProductCategoryName AS GetItemsListView_Pr");
            viewString.Append("oductCategoryName, \r\n            T.MinPrice AS GetItemsListView_MinPrice, \r\n    ");
            viewString.Append("        T.ImagePath AS GetItemsListView_ImagePath, \r\n            T.ThumbnailPath");
            viewString.Append(" AS GetItemsListView_ThumbnailPath, \r\n            T.IconPath AS GetItemsListView");
            viewString.Append("_IconPath, \r\n            T.IsEnabled AS GetItemsListView_IsEnabled, \r\n          ");
            viewString.Append("  T.IsSpecialItem AS GetItemsListView_IsSpecialItem, \r\n            T.IsPopular A");
            viewString.Append("S GetItemsListView_IsPopular, \r\n            T.IsFeatured AS GetItemsListView_IsF");
            viewString.Append("eatured, \r\n            T.IsPromotional AS GetItemsListView_IsPromotional, \r\n    ");
            viewString.Append("        T.IsPublished AS GetItemsListView_IsPublished, \r\n            T.ProductSp");
            viewString.Append("ecification AS GetItemsListView_ProductSpecification, \r\n            T.CompleteSp");
            viewString.Append("ecification AS GetItemsListView_CompleteSpecification, \r\n            T.IsArchive");
            viewString.Append("d AS GetItemsListView_IsArchived, \r\n            T.SortOrder AS GetItemsListView_");
            viewString.Append("SortOrder, \r\n            T.isQtyRanged AS GetItemsListView_IsQtyRanged, \r\n      ");
            viewString.Append("      T.OrganisationId AS GetItemsListView_OrganisationId, \r\n            T.WebDe");
            viewString.Append("scription AS GetItemsListView_WebDescription, \r\n            T.PriceDiscountPerce");
            viewString.Append("ntage AS GetItemsListView_PriceDiscountPercentage, \r\n            T.DefaultItemTa");
            viewString.Append("x AS GetItemsListView_DefaultItemTax, \r\n            T.ProductType AS GetItemsLis");
            viewString.Append("tView_ProductType, \r\n            T.isUploadImage AS GetItemsListView_IsUploadIma");
            viewString.Append("ge, \r\n            T.CompanyId AS GetItemsListView_CompanyId, \r\n            T.Tem");
            viewString.Append("plateId AS GetItemsListView_TemplateId, \r\n            T.printCropMarks AS GetIte");
            viewString.Append("msListView_printCropMarks, \r\n            T.drawWaterMarkTxt AS GetItemsListView_");
            viewString.Append("drawWaterMarkTxt, \r\n            T.TemplateType AS GetItemsListView_TemplateType,");
            viewString.Append(" \r\n            T.ProductCategoryIds AS GetItemsListView_ProductCategoryIds, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM DomainModelsStoreContainer.GetItemsListVi");
            viewString.Append("ew AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GetItemsListViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CampaignEmailQueue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView250()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2080);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CampaignEmailQueue\r\n        [DomainModels.Sto");
            viewString.Append("re.CampaignEmailQueue](T1.CampaignEmailQueue_EmailQueueId, T1.CampaignEmailQueue");
            viewString.Append("_To, T1.CampaignEmailQueue_Cc, T1.CampaignEmailQueue_EmailFrom, T1.CampaignEmail");
            viewString.Append("Queue_Type, T1.CampaignEmailQueue_Subject, T1.CampaignEmailQueue_Body, T1.Campai");
            viewString.Append("gnEmailQueue_Images, T1.CampaignEmailQueue_SendDateTime, T1.CampaignEmailQueue_I");
            viewString.Append("sDeliverd, T1.CampaignEmailQueue_SMTPUserName, T1.CampaignEmailQueue_SMTPPasswor");
            viewString.Append("d, T1.CampaignEmailQueue_SMTPServer, T1.CampaignEmailQueue_ErrorResponse, T1.Cam");
            viewString.Append("paignEmailQueue_FileAttachment, T1.CampaignEmailQueue_AttemptCount, T1.CampaignE");
            viewString.Append("mailQueue_ToName, T1.CampaignEmailQueue_FromName, T1.CampaignEmailQueue_Campaign");
            viewString.Append("ReportId, T1.CampaignEmailQueue_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n  ");
            viewString.Append("          T.EmailQueueId AS CampaignEmailQueue_EmailQueueId, \r\n            T.To ");
            viewString.Append("AS CampaignEmailQueue_To, \r\n            T.Cc AS CampaignEmailQueue_Cc, \r\n       ");
            viewString.Append("     T.EmailFrom AS CampaignEmailQueue_EmailFrom, \r\n            T.Type AS Campai");
            viewString.Append("gnEmailQueue_Type, \r\n            T.Subject AS CampaignEmailQueue_Subject, \r\n    ");
            viewString.Append("        T.Body AS CampaignEmailQueue_Body, \r\n            T.Images AS CampaignEma");
            viewString.Append("ilQueue_Images, \r\n            T.SendDateTime AS CampaignEmailQueue_SendDateTime,");
            viewString.Append(" \r\n            T.IsDeliverd AS CampaignEmailQueue_IsDeliverd, \r\n            T.SM");
            viewString.Append("TPUserName AS CampaignEmailQueue_SMTPUserName, \r\n            T.SMTPPassword AS C");
            viewString.Append("ampaignEmailQueue_SMTPPassword, \r\n            T.SMTPServer AS CampaignEmailQueue");
            viewString.Append("_SMTPServer, \r\n            T.ErrorResponse AS CampaignEmailQueue_ErrorResponse, ");
            viewString.Append("\r\n            T.FileAttachment AS CampaignEmailQueue_FileAttachment, \r\n         ");
            viewString.Append("   T.AttemptCount AS CampaignEmailQueue_AttemptCount, \r\n            T.ToName AS ");
            viewString.Append("CampaignEmailQueue_ToName, \r\n            T.FromName AS CampaignEmailQueue_FromNa");
            viewString.Append("me, \r\n            T.CampaignReportId AS CampaignEmailQueue_CampaignReportId, \r\n ");
            viewString.Append("           T.OrganisationId AS CampaignEmailQueue_OrganisationId, \r\n            ");
            viewString.Append("True AS _from0\r\n        FROM BaseDbContext.CampaignEmailQueues AS T\r\n    ) AS T1");
            viewString.Append("");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CampaignEmailQueue", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CampaignEmailQueues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView251()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2087);
            viewString.Append("\r\n    SELECT VALUE -- Constructing CampaignEmailQueues\r\n        [DomainModels.Ca");
            viewString.Append("mpaignEmailQueue](T1.CampaignEmailQueue_EmailQueueId, T1.CampaignEmailQueue_To, ");
            viewString.Append("T1.CampaignEmailQueue_Cc, T1.CampaignEmailQueue_EmailFrom, T1.CampaignEmailQueue");
            viewString.Append("_Type, T1.CampaignEmailQueue_Subject, T1.CampaignEmailQueue_Body, T1.CampaignEma");
            viewString.Append("ilQueue_Images, T1.CampaignEmailQueue_SendDateTime, T1.CampaignEmailQueue_IsDeli");
            viewString.Append("verd, T1.CampaignEmailQueue_SMTPUserName, T1.CampaignEmailQueue_SMTPPassword, T1");
            viewString.Append(".CampaignEmailQueue_SMTPServer, T1.CampaignEmailQueue_ErrorResponse, T1.Campaign");
            viewString.Append("EmailQueue_FileAttachment, T1.CampaignEmailQueue_AttemptCount, T1.CampaignEmailQ");
            viewString.Append("ueue_ToName, T1.CampaignEmailQueue_FromName, T1.CampaignEmailQueue_CampaignRepor");
            viewString.Append("tId, T1.CampaignEmailQueue_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n       ");
            viewString.Append("     T.EmailQueueId AS CampaignEmailQueue_EmailQueueId, \r\n            T.To AS Ca");
            viewString.Append("mpaignEmailQueue_To, \r\n            T.Cc AS CampaignEmailQueue_Cc, \r\n            ");
            viewString.Append("T.EmailFrom AS CampaignEmailQueue_EmailFrom, \r\n            T.Type AS CampaignEma");
            viewString.Append("ilQueue_Type, \r\n            T.Subject AS CampaignEmailQueue_Subject, \r\n         ");
            viewString.Append("   T.Body AS CampaignEmailQueue_Body, \r\n            T.Images AS CampaignEmailQue");
            viewString.Append("ue_Images, \r\n            T.SendDateTime AS CampaignEmailQueue_SendDateTime, \r\n  ");
            viewString.Append("          T.IsDeliverd AS CampaignEmailQueue_IsDeliverd, \r\n            T.SMTPUse");
            viewString.Append("rName AS CampaignEmailQueue_SMTPUserName, \r\n            T.SMTPPassword AS Campai");
            viewString.Append("gnEmailQueue_SMTPPassword, \r\n            T.SMTPServer AS CampaignEmailQueue_SMTP");
            viewString.Append("Server, \r\n            T.ErrorResponse AS CampaignEmailQueue_ErrorResponse, \r\n   ");
            viewString.Append("         T.FileAttachment AS CampaignEmailQueue_FileAttachment, \r\n            T.");
            viewString.Append("AttemptCount AS CampaignEmailQueue_AttemptCount, \r\n            T.ToName AS Campa");
            viewString.Append("ignEmailQueue_ToName, \r\n            T.FromName AS CampaignEmailQueue_FromName, \r");
            viewString.Append("\n            T.CampaignReportId AS CampaignEmailQueue_CampaignReportId, \r\n      ");
            viewString.Append("      T.OrganisationId AS CampaignEmailQueue_OrganisationId, \r\n            True ");
            viewString.Append("AS _from0\r\n        FROM DomainModelsStoreContainer.CampaignEmailQueue AS T\r\n    ");
            viewString.Append(") AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CampaignEmailQueues", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.VariableSection
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView252()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.VariableSection", @"
    SELECT VALUE -- Constructing VariableSection
        [DomainModels.Store.VariableSection](T1.VariableSection_VariableSectionId, T1.VariableSection_SectionName, T1.VariableSection_SectionDescription)
    FROM (
        SELECT 
            T.VariableSectionId AS VariableSection_VariableSectionId, 
            T.SectionName AS VariableSection_SectionName, 
            T.SectionDescription AS VariableSection_SectionDescription, 
            True AS _from0
        FROM BaseDbContext.VariableSections AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.VariableSections
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView253()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.VariableSections", @"
    SELECT VALUE -- Constructing VariableSections
        [DomainModels.VariableSection](T1.VariableSection_VariableSectionId, T1.VariableSection_SectionName, T1.VariableSection_SectionDescription)
    FROM (
        SELECT 
            T.VariableSectionId AS VariableSection_VariableSectionId, 
            T.SectionName AS VariableSection_SectionName, 
            T.SectionDescription AS VariableSection_SectionDescription, 
            True AS _from0
        FROM DomainModelsStoreContainer.VariableSection AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.GetCategoryProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView254()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3692);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetCategoryProducts\r\n        [DomainModels.St");
            viewString.Append("ore.GetCategoryProducts](T1.GetCategoryProducts_CompanyId, T1.GetCategoryProduct");
            viewString.Append("s_ItemId, T1.GetCategoryProducts_ItemCode, T1.GetCategoryProducts_isQtyRanged, T");
            viewString.Append("1.GetCategoryProducts_EstimateId, T1.GetCategoryProducts_ProductName, T1.GetCate");
            viewString.Append("goryProducts_ProductCode, T1.GetCategoryProducts_ProductCategoryName, T1.GetCate");
            viewString.Append("goryProducts_MinPrice, T1.GetCategoryProducts_ImagePath, T1.GetCategoryProducts_");
            viewString.Append("ThumbnailPath, T1.GetCategoryProducts_IconPath, T1.GetCategoryProducts_IsEnabled");
            viewString.Append(", T1.GetCategoryProducts_IsSpecialItem, T1.GetCategoryProducts_IsPopular, T1.Get");
            viewString.Append("CategoryProducts_IsFeatured, T1.GetCategoryProducts_IsPromotional, T1.GetCategor");
            viewString.Append("yProducts_IsPublished, T1.GetCategoryProducts_ProductType, T1.GetCategoryProduct");
            viewString.Append("s_ProductSpecification, T1.GetCategoryProducts_CompleteSpecification, T1.GetCate");
            viewString.Append("goryProducts_IsArchived, T1.GetCategoryProducts_SortOrder, T1.GetCategoryProduct");
            viewString.Append("s_OrganisationId, T1.GetCategoryProducts_WebDescription, T1.GetCategoryProducts_");
            viewString.Append("PriceDiscountPercentage, T1.GetCategoryProducts_isTemplateDesignMode, T1.GetCate");
            viewString.Append("goryProducts_DefaultItemTax, T1.GetCategoryProducts_isUploadImage, T1.GetCategor");
            viewString.Append("yProducts_isMarketingBrief, T1.GetCategoryProducts_ProductCategoryId, T1.GetCate");
            viewString.Append("goryProducts_TemplateId, T1.GetCategoryProducts_DesignerCategoryId)\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.CompanyId AS GetCategoryProducts_CompanyId, \r\n  ");
            viewString.Append("          T.ItemId AS GetCategoryProducts_ItemId, \r\n            T.ItemCode AS Ge");
            viewString.Append("tCategoryProducts_ItemCode, \r\n            T.isQtyRanged AS GetCategoryProducts_i");
            viewString.Append("sQtyRanged, \r\n            T.EstimateId AS GetCategoryProducts_EstimateId, \r\n    ");
            viewString.Append("        T.ProductName AS GetCategoryProducts_ProductName, \r\n            T.Produc");
            viewString.Append("tCode AS GetCategoryProducts_ProductCode, \r\n            T.ProductCategoryName AS");
            viewString.Append(" GetCategoryProducts_ProductCategoryName, \r\n            T.MinPrice AS GetCategor");
            viewString.Append("yProducts_MinPrice, \r\n            T.ImagePath AS GetCategoryProducts_ImagePath, ");
            viewString.Append("\r\n            T.ThumbnailPath AS GetCategoryProducts_ThumbnailPath, \r\n          ");
            viewString.Append("  T.IconPath AS GetCategoryProducts_IconPath, \r\n            T.IsEnabled AS GetCa");
            viewString.Append("tegoryProducts_IsEnabled, \r\n            T.IsSpecialItem AS GetCategoryProducts_I");
            viewString.Append("sSpecialItem, \r\n            T.IsPopular AS GetCategoryProducts_IsPopular, \r\n    ");
            viewString.Append("        T.IsFeatured AS GetCategoryProducts_IsFeatured, \r\n            T.IsPromot");
            viewString.Append("ional AS GetCategoryProducts_IsPromotional, \r\n            T.IsPublished AS GetCa");
            viewString.Append("tegoryProducts_IsPublished, \r\n            T.ProductType AS GetCategoryProducts_P");
            viewString.Append("roductType, \r\n            T.ProductSpecification AS GetCategoryProducts_ProductS");
            viewString.Append("pecification, \r\n            T.CompleteSpecification AS GetCategoryProducts_Compl");
            viewString.Append("eteSpecification, \r\n            T.IsArchived AS GetCategoryProducts_IsArchived, ");
            viewString.Append("\r\n            T.SortOrder AS GetCategoryProducts_SortOrder, \r\n            T.Orga");
            viewString.Append("nisationId AS GetCategoryProducts_OrganisationId, \r\n            T.WebDescription");
            viewString.Append(" AS GetCategoryProducts_WebDescription, \r\n            T.PriceDiscountPercentage ");
            viewString.Append("AS GetCategoryProducts_PriceDiscountPercentage, \r\n            T.isTemplateDesign");
            viewString.Append("Mode AS GetCategoryProducts_isTemplateDesignMode, \r\n            T.DefaultItemTax");
            viewString.Append(" AS GetCategoryProducts_DefaultItemTax, \r\n            T.isUploadImage AS GetCate");
            viewString.Append("goryProducts_isUploadImage, \r\n            T.isMarketingBrief AS GetCategoryProdu");
            viewString.Append("cts_isMarketingBrief, \r\n            T.ProductCategoryId AS GetCategoryProducts_P");
            viewString.Append("roductCategoryId, \r\n            T.TemplateId AS GetCategoryProducts_TemplateId, ");
            viewString.Append("\r\n            T.DesignerCategoryId AS GetCategoryProducts_DesignerCategoryId, \r\n");
            viewString.Append("            True AS _from0\r\n        FROM BaseDbContext.GetCategoryProducts AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.GetCategoryProducts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.GetCategoryProducts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView255()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3632);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GetCategoryProducts\r\n        [DomainModels.Ge");
            viewString.Append("tCategoryProduct](T1.GetCategoryProduct_ItemId, T1.GetCategoryProduct_ItemCode, ");
            viewString.Append("T1.GetCategoryProduct_isQtyRanged, T1.GetCategoryProduct_EstimateId, T1.GetCateg");
            viewString.Append("oryProduct_ProductName, T1.GetCategoryProduct_ProductCode, T1.GetCategoryProduct");
            viewString.Append("_ProductCategoryName, T1.GetCategoryProduct_MinPrice, T1.GetCategoryProduct_Imag");
            viewString.Append("ePath, T1.GetCategoryProduct_ThumbnailPath, T1.GetCategoryProduct_IconPath, T1.G");
            viewString.Append("etCategoryProduct_IsEnabled, T1.GetCategoryProduct_IsSpecialItem, T1.GetCategory");
            viewString.Append("Product_IsPopular, T1.GetCategoryProduct_IsFeatured, T1.GetCategoryProduct_IsPro");
            viewString.Append("motional, T1.GetCategoryProduct_IsPublished, T1.GetCategoryProduct_ProductType, ");
            viewString.Append("T1.GetCategoryProduct_ProductSpecification, T1.GetCategoryProduct_CompleteSpecif");
            viewString.Append("ication, T1.GetCategoryProduct_IsArchived, T1.GetCategoryProduct_SortOrder, T1.G");
            viewString.Append("etCategoryProduct_OrganisationId, T1.GetCategoryProduct_WebDescription, T1.GetCa");
            viewString.Append("tegoryProduct_PriceDiscountPercentage, T1.GetCategoryProduct_isTemplateDesignMod");
            viewString.Append("e, T1.GetCategoryProduct_DefaultItemTax, T1.GetCategoryProduct_isUploadImage, T1");
            viewString.Append(".GetCategoryProduct_isMarketingBrief, T1.GetCategoryProduct_ProductCategoryId, T");
            viewString.Append("1.GetCategoryProduct_TemplateId, T1.GetCategoryProduct_DesignerCategoryId, T1.Ge");
            viewString.Append("tCategoryProduct_CompanyId)\r\n    FROM (\r\n        SELECT \r\n            T.ItemId A");
            viewString.Append("S GetCategoryProduct_ItemId, \r\n            T.ItemCode AS GetCategoryProduct_Item");
            viewString.Append("Code, \r\n            T.isQtyRanged AS GetCategoryProduct_isQtyRanged, \r\n         ");
            viewString.Append("   T.EstimateId AS GetCategoryProduct_EstimateId, \r\n            T.ProductName AS");
            viewString.Append(" GetCategoryProduct_ProductName, \r\n            T.ProductCode AS GetCategoryProdu");
            viewString.Append("ct_ProductCode, \r\n            T.ProductCategoryName AS GetCategoryProduct_Produc");
            viewString.Append("tCategoryName, \r\n            T.MinPrice AS GetCategoryProduct_MinPrice, \r\n      ");
            viewString.Append("      T.ImagePath AS GetCategoryProduct_ImagePath, \r\n            T.ThumbnailPath");
            viewString.Append(" AS GetCategoryProduct_ThumbnailPath, \r\n            T.IconPath AS GetCategoryPro");
            viewString.Append("duct_IconPath, \r\n            T.IsEnabled AS GetCategoryProduct_IsEnabled, \r\n    ");
            viewString.Append("        T.IsSpecialItem AS GetCategoryProduct_IsSpecialItem, \r\n            T.IsP");
            viewString.Append("opular AS GetCategoryProduct_IsPopular, \r\n            T.IsFeatured AS GetCategor");
            viewString.Append("yProduct_IsFeatured, \r\n            T.IsPromotional AS GetCategoryProduct_IsPromo");
            viewString.Append("tional, \r\n            T.IsPublished AS GetCategoryProduct_IsPublished, \r\n       ");
            viewString.Append("     T.ProductType AS GetCategoryProduct_ProductType, \r\n            T.ProductSpe");
            viewString.Append("cification AS GetCategoryProduct_ProductSpecification, \r\n            T.CompleteS");
            viewString.Append("pecification AS GetCategoryProduct_CompleteSpecification, \r\n            T.IsArch");
            viewString.Append("ived AS GetCategoryProduct_IsArchived, \r\n            T.SortOrder AS GetCategoryP");
            viewString.Append("roduct_SortOrder, \r\n            T.OrganisationId AS GetCategoryProduct_Organisat");
            viewString.Append("ionId, \r\n            T.WebDescription AS GetCategoryProduct_WebDescription, \r\n  ");
            viewString.Append("          T.PriceDiscountPercentage AS GetCategoryProduct_PriceDiscountPercentag");
            viewString.Append("e, \r\n            T.isTemplateDesignMode AS GetCategoryProduct_isTemplateDesignMo");
            viewString.Append("de, \r\n            T.DefaultItemTax AS GetCategoryProduct_DefaultItemTax, \r\n     ");
            viewString.Append("       T.isUploadImage AS GetCategoryProduct_isUploadImage, \r\n            T.isMa");
            viewString.Append("rketingBrief AS GetCategoryProduct_isMarketingBrief, \r\n            T.ProductCate");
            viewString.Append("goryId AS GetCategoryProduct_ProductCategoryId, \r\n            T.TemplateId AS Ge");
            viewString.Append("tCategoryProduct_TemplateId, \r\n            T.DesignerCategoryId AS GetCategoryPr");
            viewString.Append("oduct_DesignerCategoryId, \r\n            T.CompanyId AS GetCategoryProduct_Compan");
            viewString.Append("yId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.GetCa");
            viewString.Append("tegoryProducts AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.GetCategoryProducts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Role
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView256()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Role", @"
    SELECT VALUE -- Constructing Role
        [DomainModels.Store.Role](T1.Role_RoleId, T1.Role_RoleName, T1.Role_RoleDescription, T1.Role_IsSystemRole, T1.Role_LockedBy, T1.Role_IsCompanyLevel, T1.Role_CompanyId)
    FROM (
        SELECT 
            T.RoleId AS Role_RoleId, 
            T.RoleName AS Role_RoleName, 
            T.RoleDescription AS Role_RoleDescription, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.LockedBy AS Role_LockedBy, 
            T.IsCompanyLevel AS Role_IsCompanyLevel, 
            T.CompanyId AS Role_CompanyId, 
            True AS _from0
        FROM BaseDbContext.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView257()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Roles", @"
    SELECT VALUE -- Constructing Roles
        [DomainModels.Role](T1.Role_RoleId, T1.Role_RoleName, T1.Role_RoleDescription, T1.Role_IsSystemRole, T1.Role_LockedBy, T1.Role_IsCompanyLevel, T1.Role_CompanyId)
    FROM (
        SELECT 
            T.RoleId AS Role_RoleId, 
            T.RoleName AS Role_RoleName, 
            T.RoleDescription AS Role_RoleDescription, 
            T.IsSystemRole AS Role_IsSystemRole, 
            T.LockedBy AS Role_LockedBy, 
            T.IsCompanyLevel AS Role_IsCompanyLevel, 
            T.CompanyId AS Role_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.Role AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategoriesView
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView258()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategoriesView", @"
    SELECT VALUE -- Constructing ProductCategoriesView
        [DomainModels.Store.ProductCategoriesView](T1.ProductCategoriesView_ProductCategoryId, T1.ProductCategoriesView_TemplateDesignerMappedCategoryName, T1.ProductCategoriesView_ItemId, T1.ProductCategoriesView_MinPrice, T1.ProductCategoriesView_CategoryName, T1.ProductCategoriesView_CompanyId, T1.ProductCategoriesView_DefaultItemTax)
    FROM (
        SELECT 
            T.ProductCategoryId AS ProductCategoriesView_ProductCategoryId, 
            T.TemplateDesignerMappedCategoryName AS ProductCategoriesView_TemplateDesignerMappedCategoryName, 
            T.ItemId AS ProductCategoriesView_ItemId, 
            T.MinPrice AS ProductCategoriesView_MinPrice, 
            T.CategoryName AS ProductCategoriesView_CategoryName, 
            T.CompanyId AS ProductCategoriesView_CompanyId, 
            T.DefaultItemTax AS ProductCategoriesView_DefaultItemTax, 
            True AS _from0
        FROM BaseDbContext.ProductCategoriesViews AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategoriesViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView259()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategoriesViews", @"
    SELECT VALUE -- Constructing ProductCategoriesViews
        [DomainModels.ProductCategoriesView](T1.ProductCategoriesView_ProductCategoryId, T1.ProductCategoriesView_TemplateDesignerMappedCategoryName, T1.ProductCategoriesView_ItemId, T1.ProductCategoriesView_MinPrice, T1.ProductCategoriesView_CategoryName, T1.ProductCategoriesView_CompanyId, T1.ProductCategoriesView_DefaultItemTax)
    FROM (
        SELECT 
            T.ProductCategoryId AS ProductCategoriesView_ProductCategoryId, 
            T.TemplateDesignerMappedCategoryName AS ProductCategoriesView_TemplateDesignerMappedCategoryName, 
            T.ItemId AS ProductCategoriesView_ItemId, 
            T.MinPrice AS ProductCategoriesView_MinPrice, 
            T.CategoryName AS ProductCategoriesView_CategoryName, 
            T.CompanyId AS ProductCategoriesView_CompanyId, 
            T.DefaultItemTax AS ProductCategoriesView_DefaultItemTax, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductCategoriesView AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CustomCopy
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView260()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CustomCopy", @"
    SELECT VALUE -- Constructing CustomCopy
        [DomainModels.Store.CustomCopy](T1.CustomCopy_SignboardHeadline, T1.CustomCopy_SignboardDescription, T1.CustomCopy_BrochureHeadline, T1.CustomCopy_BrochureDescription, T1.CustomCopy_BrochureFeature1, T1.CustomCopy_BrochureFeature2, T1.CustomCopy_BrochureFeature3, T1.CustomCopy_BrochureFeature4, T1.CustomCopy_BrochureLifeStyle1, T1.CustomCopy_BrochureLifeStyle2, T1.CustomCopy_BrochureLifeStyle3, T1.CustomCopy_ListingId, T1.CustomCopy_CustomCopyId)
    FROM (
        SELECT 
            T.SignboardHeadline AS CustomCopy_SignboardHeadline, 
            T.SignboardDescription AS CustomCopy_SignboardDescription, 
            T.BrochureHeadline AS CustomCopy_BrochureHeadline, 
            T.BrochureDescription AS CustomCopy_BrochureDescription, 
            T.BrochureFeature1 AS CustomCopy_BrochureFeature1, 
            T.BrochureFeature2 AS CustomCopy_BrochureFeature2, 
            T.BrochureFeature3 AS CustomCopy_BrochureFeature3, 
            T.BrochureFeature4 AS CustomCopy_BrochureFeature4, 
            T.BrochureLifeStyle1 AS CustomCopy_BrochureLifeStyle1, 
            T.BrochureLifeStyle2 AS CustomCopy_BrochureLifeStyle2, 
            T.BrochureLifeStyle3 AS CustomCopy_BrochureLifeStyle3, 
            T.ListingId AS CustomCopy_ListingId, 
            T.CustomCopyId AS CustomCopy_CustomCopyId, 
            True AS _from0
        FROM BaseDbContext.CustomCopies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CustomCopies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView261()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CustomCopies", @"
    SELECT VALUE -- Constructing CustomCopies
        [DomainModels.CustomCopy](T1.CustomCopy_SignboardHeadline, T1.CustomCopy_SignboardDescription, T1.CustomCopy_BrochureHeadline, T1.CustomCopy_BrochureDescription, T1.CustomCopy_BrochureFeature1, T1.CustomCopy_BrochureFeature2, T1.CustomCopy_BrochureFeature3, T1.CustomCopy_BrochureFeature4, T1.CustomCopy_BrochureLifeStyle1, T1.CustomCopy_BrochureLifeStyle2, T1.CustomCopy_BrochureLifeStyle3, T1.CustomCopy_ListingId, T1.CustomCopy_CustomCopyId)
    FROM (
        SELECT 
            T.SignboardHeadline AS CustomCopy_SignboardHeadline, 
            T.SignboardDescription AS CustomCopy_SignboardDescription, 
            T.BrochureHeadline AS CustomCopy_BrochureHeadline, 
            T.BrochureDescription AS CustomCopy_BrochureDescription, 
            T.BrochureFeature1 AS CustomCopy_BrochureFeature1, 
            T.BrochureFeature2 AS CustomCopy_BrochureFeature2, 
            T.BrochureFeature3 AS CustomCopy_BrochureFeature3, 
            T.BrochureFeature4 AS CustomCopy_BrochureFeature4, 
            T.BrochureLifeStyle1 AS CustomCopy_BrochureLifeStyle1, 
            T.BrochureLifeStyle2 AS CustomCopy_BrochureLifeStyle2, 
            T.BrochureLifeStyle3 AS CustomCopy_BrochureLifeStyle3, 
            T.ListingId AS CustomCopy_ListingId, 
            T.CustomCopyId AS CustomCopy_CustomCopyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CustomCopy AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Listing
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView262()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5698);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Listing\r\n        [DomainModels.Store.Listing]");
            viewString.Append("(T1.Listing_ListingId, T1.Listing_WebID, T1.Listing_WebLink, T1.Listing_AddressD");
            viewString.Append("isplay, T1.Listing_StreetAddress, T1.Listing_LevelNumber, T1.Listing_LotNumber, ");
            viewString.Append("T1.Listing_UnitNumber, T1.Listing_StreetNumber, T1.Listing_Street, T1.Listing_Su");
            viewString.Append("burb, T1.Listing_State, T1.Listing_PostCode, T1.Listing_PropertyName, T1.Listing");
            viewString.Append("_PropertyType, T1.Listing_PropertyCategory, T1.Listing_ListingType, T1.Listing_L");
            viewString.Append("istingDate, T1.Listing_ListingExpiryDate, T1.Listing_ListingStatus, T1.Listing_L");
            viewString.Append("istingMethod, T1.Listing_ListingAuthority, T1.Listing_InspectionTypye, T1.Listin");
            viewString.Append("g_AuctionDate, T1.Listing_AutionVenue, T1.Listing_EOIClosingDate, T1.Listing_Dis");
            viewString.Append("playPrice, T1.Listing_SearchPrice, T1.Listing_RendPeriod, T1.Listing_AvailableDa");
            viewString.Append("te, T1.Listing_SoldDate, T1.Listing_SoldPrice, T1.Listing_IsSoldPriceConfidentia");
            viewString.Append("l, T1.Listing_MainHeadLine, T1.Listing_MainDescription, T1.Listing_CustomCopy, T");
            viewString.Append("1.Listing_BedRooms, T1.Listing_BathRooms, T1.Listing_LoungeRooms, T1.Listing_Toi");
            viewString.Append("lets, T1.Listing_Studies, T1.Listing_Pools, T1.Listing_Garages, T1.Listing_Carpo");
            viewString.Append("rts, T1.Listing_CarSpaces, T1.Listing_TotalParking, T1.Listing_LandArea, T1.List");
            viewString.Append("ing_LandAreaUnit, T1.Listing_BuildingAreaSqm, T1.Listing_ExternalAreaSqm, T1.Lis");
            viewString.Append("ting_FrontageM, T1.Listing_Aspect, T1.Listing_YearBuilt, T1.Listing_YearRenovate");
            viewString.Append("d, T1.Listing_Construction, T1.Listing_PropertyCondition, T1.Listing_EnergyRatin");
            viewString.Append("g, T1.Listing_Features, T1.Listing_WaterRates, T1.Listing_LandTax, T1.Listing_Co");
            viewString.Append("unsilRates, T1.Listing_StrataAdmin, T1.Listing_StrataSinking, T1.Listing_OtherOu");
            viewString.Append("tgoings, T1.Listing_LegalDescription, T1.Listing_LegalLot, T1.Listing_LegalDP, T");
            viewString.Append("1.Listing_LegalVol, T1.Listing_LegalFolio, T1.Listing_Zoning, T1.Listing_ClientL");
            viewString.Append("istingId, T1.Listing_TotalOutgoings, T1.Listing_CompanyId)\r\n    FROM (\r\n        ");
            viewString.Append("SELECT \r\n            T.ListingId AS Listing_ListingId, \r\n            T.WebID AS ");
            viewString.Append("Listing_WebID, \r\n            T.WebLink AS Listing_WebLink, \r\n            T.Addre");
            viewString.Append("ssDisplay AS Listing_AddressDisplay, \r\n            T.StreetAddress AS Listing_St");
            viewString.Append("reetAddress, \r\n            T.LevelNumber AS Listing_LevelNumber, \r\n            T");
            viewString.Append(".LotNumber AS Listing_LotNumber, \r\n            T.UnitNumber AS Listing_UnitNumbe");
            viewString.Append("r, \r\n            T.StreetNumber AS Listing_StreetNumber, \r\n            T.Street ");
            viewString.Append("AS Listing_Street, \r\n            T.Suburb AS Listing_Suburb, \r\n            T.Sta");
            viewString.Append("te AS Listing_State, \r\n            T.PostCode AS Listing_PostCode, \r\n           ");
            viewString.Append(" T.PropertyName AS Listing_PropertyName, \r\n            T.PropertyType AS Listing");
            viewString.Append("_PropertyType, \r\n            T.PropertyCategory AS Listing_PropertyCategory, \r\n ");
            viewString.Append("           T.ListingType AS Listing_ListingType, \r\n            T.ListingDate AS ");
            viewString.Append("Listing_ListingDate, \r\n            T.ListingExpiryDate AS Listing_ListingExpiryD");
            viewString.Append("ate, \r\n            T.ListingStatus AS Listing_ListingStatus, \r\n            T.Lis");
            viewString.Append("tingMethod AS Listing_ListingMethod, \r\n            T.ListingAuthority AS Listing");
            viewString.Append("_ListingAuthority, \r\n            T.InspectionTypye AS Listing_InspectionTypye, \r");
            viewString.Append("\n            T.AuctionDate AS Listing_AuctionDate, \r\n            T.AutionVenue A");
            viewString.Append("S Listing_AutionVenue, \r\n            T.EOIClosingDate AS Listing_EOIClosingDate,");
            viewString.Append(" \r\n            T.DisplayPrice AS Listing_DisplayPrice, \r\n            T.SearchPri");
            viewString.Append("ce AS Listing_SearchPrice, \r\n            T.RendPeriod AS Listing_RendPeriod, \r\n ");
            viewString.Append("           T.AvailableDate AS Listing_AvailableDate, \r\n            T.SoldDate AS");
            viewString.Append(" Listing_SoldDate, \r\n            T.SoldPrice AS Listing_SoldPrice, \r\n           ");
            viewString.Append(" T.IsSoldPriceConfidential AS Listing_IsSoldPriceConfidential, \r\n            T.M");
            viewString.Append("ainHeadLine AS Listing_MainHeadLine, \r\n            T.MainDescription AS Listing_");
            viewString.Append("MainDescription, \r\n            T.CustomCopy AS Listing_CustomCopy, \r\n           ");
            viewString.Append(" T.BedRooms AS Listing_BedRooms, \r\n            T.BathRooms AS Listing_BathRooms,");
            viewString.Append(" \r\n            T.LoungeRooms AS Listing_LoungeRooms, \r\n            T.Toilets AS ");
            viewString.Append("Listing_Toilets, \r\n            T.Studies AS Listing_Studies, \r\n            T.Poo");
            viewString.Append("ls AS Listing_Pools, \r\n            T.Garages AS Listing_Garages, \r\n            T");
            viewString.Append(".Carports AS Listing_Carports, \r\n            T.CarSpaces AS Listing_CarSpaces, \r");
            viewString.Append("\n            T.TotalParking AS Listing_TotalParking, \r\n            T.LandArea AS");
            viewString.Append(" Listing_LandArea, \r\n            T.LandAreaUnit AS Listing_LandAreaUnit, \r\n     ");
            viewString.Append("       T.BuildingAreaSqm AS Listing_BuildingAreaSqm, \r\n            T.ExternalAre");
            viewString.Append("aSqm AS Listing_ExternalAreaSqm, \r\n            T.FrontageM AS Listing_FrontageM,");
            viewString.Append(" \r\n            T.Aspect AS Listing_Aspect, \r\n            T.YearBuilt AS Listing_");
            viewString.Append("YearBuilt, \r\n            T.YearRenovated AS Listing_YearRenovated, \r\n           ");
            viewString.Append(" T.Construction AS Listing_Construction, \r\n            T.PropertyCondition AS Li");
            viewString.Append("sting_PropertyCondition, \r\n            T.EnergyRating AS Listing_EnergyRating, \r");
            viewString.Append("\n            T.Features AS Listing_Features, \r\n            T.WaterRates AS Listi");
            viewString.Append("ng_WaterRates, \r\n            T.LandTax AS Listing_LandTax, \r\n            T.Couns");
            viewString.Append("ilRates AS Listing_CounsilRates, \r\n            T.StrataAdmin AS Listing_StrataAd");
            viewString.Append("min, \r\n            T.StrataSinking AS Listing_StrataSinking, \r\n            T.Oth");
            viewString.Append("erOutgoings AS Listing_OtherOutgoings, \r\n            T.LegalDescription AS Listi");
            viewString.Append("ng_LegalDescription, \r\n            T.LegalLot AS Listing_LegalLot, \r\n           ");
            viewString.Append(" T.LegalDP AS Listing_LegalDP, \r\n            T.LegalVol AS Listing_LegalVol, \r\n ");
            viewString.Append("           T.LegalFolio AS Listing_LegalFolio, \r\n            T.Zoning AS Listing");
            viewString.Append("_Zoning, \r\n            T.ClientListingId AS Listing_ClientListingId, \r\n         ");
            viewString.Append("   T.TotalOutgoings AS Listing_TotalOutgoings, \r\n            T.CompanyId AS List");
            viewString.Append("ing_CompanyId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Listings");
            viewString.Append(" AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Listing", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Listings
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView263()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(5705);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Listings\r\n        [DomainModels.Listing](T1.L");
            viewString.Append("isting_ListingId, T1.Listing_WebID, T1.Listing_WebLink, T1.Listing_AddressDispla");
            viewString.Append("y, T1.Listing_StreetAddress, T1.Listing_LevelNumber, T1.Listing_LotNumber, T1.Li");
            viewString.Append("sting_UnitNumber, T1.Listing_StreetNumber, T1.Listing_Street, T1.Listing_Suburb,");
            viewString.Append(" T1.Listing_State, T1.Listing_PostCode, T1.Listing_PropertyName, T1.Listing_Prop");
            viewString.Append("ertyType, T1.Listing_PropertyCategory, T1.Listing_ListingType, T1.Listing_Listin");
            viewString.Append("gDate, T1.Listing_ListingExpiryDate, T1.Listing_ListingStatus, T1.Listing_Listin");
            viewString.Append("gMethod, T1.Listing_ListingAuthority, T1.Listing_InspectionTypye, T1.Listing_Auc");
            viewString.Append("tionDate, T1.Listing_AutionVenue, T1.Listing_EOIClosingDate, T1.Listing_DisplayP");
            viewString.Append("rice, T1.Listing_SearchPrice, T1.Listing_RendPeriod, T1.Listing_AvailableDate, T");
            viewString.Append("1.Listing_SoldDate, T1.Listing_SoldPrice, T1.Listing_IsSoldPriceConfidential, T1");
            viewString.Append(".Listing_MainHeadLine, T1.Listing_MainDescription, T1.Listing_CustomCopy, T1.Lis");
            viewString.Append("ting_BedRooms, T1.Listing_BathRooms, T1.Listing_LoungeRooms, T1.Listing_Toilets,");
            viewString.Append(" T1.Listing_Studies, T1.Listing_Pools, T1.Listing_Garages, T1.Listing_Carports, ");
            viewString.Append("T1.Listing_CarSpaces, T1.Listing_TotalParking, T1.Listing_LandArea, T1.Listing_L");
            viewString.Append("andAreaUnit, T1.Listing_BuildingAreaSqm, T1.Listing_ExternalAreaSqm, T1.Listing_");
            viewString.Append("FrontageM, T1.Listing_Aspect, T1.Listing_YearBuilt, T1.Listing_YearRenovated, T1");
            viewString.Append(".Listing_Construction, T1.Listing_PropertyCondition, T1.Listing_EnergyRating, T1");
            viewString.Append(".Listing_Features, T1.Listing_WaterRates, T1.Listing_LandTax, T1.Listing_Counsil");
            viewString.Append("Rates, T1.Listing_StrataAdmin, T1.Listing_StrataSinking, T1.Listing_OtherOutgoin");
            viewString.Append("gs, T1.Listing_LegalDescription, T1.Listing_LegalLot, T1.Listing_LegalDP, T1.Lis");
            viewString.Append("ting_LegalVol, T1.Listing_LegalFolio, T1.Listing_Zoning, T1.Listing_ClientListin");
            viewString.Append("gId, T1.Listing_TotalOutgoings, T1.Listing_CompanyId)\r\n    FROM (\r\n        SELEC");
            viewString.Append("T \r\n            T.ListingId AS Listing_ListingId, \r\n            T.WebID AS Listi");
            viewString.Append("ng_WebID, \r\n            T.WebLink AS Listing_WebLink, \r\n            T.AddressDis");
            viewString.Append("play AS Listing_AddressDisplay, \r\n            T.StreetAddress AS Listing_StreetA");
            viewString.Append("ddress, \r\n            T.LevelNumber AS Listing_LevelNumber, \r\n            T.LotN");
            viewString.Append("umber AS Listing_LotNumber, \r\n            T.UnitNumber AS Listing_UnitNumber, \r\n");
            viewString.Append("            T.StreetNumber AS Listing_StreetNumber, \r\n            T.Street AS Li");
            viewString.Append("sting_Street, \r\n            T.Suburb AS Listing_Suburb, \r\n            T.State AS");
            viewString.Append(" Listing_State, \r\n            T.PostCode AS Listing_PostCode, \r\n            T.Pr");
            viewString.Append("opertyName AS Listing_PropertyName, \r\n            T.PropertyType AS Listing_Prop");
            viewString.Append("ertyType, \r\n            T.PropertyCategory AS Listing_PropertyCategory, \r\n      ");
            viewString.Append("      T.ListingType AS Listing_ListingType, \r\n            T.ListingDate AS Listi");
            viewString.Append("ng_ListingDate, \r\n            T.ListingExpiryDate AS Listing_ListingExpiryDate, ");
            viewString.Append("\r\n            T.ListingStatus AS Listing_ListingStatus, \r\n            T.ListingM");
            viewString.Append("ethod AS Listing_ListingMethod, \r\n            T.ListingAuthority AS Listing_List");
            viewString.Append("ingAuthority, \r\n            T.InspectionTypye AS Listing_InspectionTypye, \r\n    ");
            viewString.Append("        T.AuctionDate AS Listing_AuctionDate, \r\n            T.AutionVenue AS Lis");
            viewString.Append("ting_AutionVenue, \r\n            T.EOIClosingDate AS Listing_EOIClosingDate, \r\n  ");
            viewString.Append("          T.DisplayPrice AS Listing_DisplayPrice, \r\n            T.SearchPrice AS");
            viewString.Append(" Listing_SearchPrice, \r\n            T.RendPeriod AS Listing_RendPeriod, \r\n      ");
            viewString.Append("      T.AvailableDate AS Listing_AvailableDate, \r\n            T.SoldDate AS List");
            viewString.Append("ing_SoldDate, \r\n            T.SoldPrice AS Listing_SoldPrice, \r\n            T.Is");
            viewString.Append("SoldPriceConfidential AS Listing_IsSoldPriceConfidential, \r\n            T.MainHe");
            viewString.Append("adLine AS Listing_MainHeadLine, \r\n            T.MainDescription AS Listing_MainD");
            viewString.Append("escription, \r\n            T.CustomCopy AS Listing_CustomCopy, \r\n            T.Be");
            viewString.Append("dRooms AS Listing_BedRooms, \r\n            T.BathRooms AS Listing_BathRooms, \r\n  ");
            viewString.Append("          T.LoungeRooms AS Listing_LoungeRooms, \r\n            T.Toilets AS Listi");
            viewString.Append("ng_Toilets, \r\n            T.Studies AS Listing_Studies, \r\n            T.Pools AS");
            viewString.Append(" Listing_Pools, \r\n            T.Garages AS Listing_Garages, \r\n            T.Carp");
            viewString.Append("orts AS Listing_Carports, \r\n            T.CarSpaces AS Listing_CarSpaces, \r\n    ");
            viewString.Append("        T.TotalParking AS Listing_TotalParking, \r\n            T.LandArea AS List");
            viewString.Append("ing_LandArea, \r\n            T.LandAreaUnit AS Listing_LandAreaUnit, \r\n          ");
            viewString.Append("  T.BuildingAreaSqm AS Listing_BuildingAreaSqm, \r\n            T.ExternalAreaSqm ");
            viewString.Append("AS Listing_ExternalAreaSqm, \r\n            T.FrontageM AS Listing_FrontageM, \r\n  ");
            viewString.Append("          T.Aspect AS Listing_Aspect, \r\n            T.YearBuilt AS Listing_YearB");
            viewString.Append("uilt, \r\n            T.YearRenovated AS Listing_YearRenovated, \r\n            T.Co");
            viewString.Append("nstruction AS Listing_Construction, \r\n            T.PropertyCondition AS Listing");
            viewString.Append("_PropertyCondition, \r\n            T.EnergyRating AS Listing_EnergyRating, \r\n    ");
            viewString.Append("        T.Features AS Listing_Features, \r\n            T.WaterRates AS Listing_Wa");
            viewString.Append("terRates, \r\n            T.LandTax AS Listing_LandTax, \r\n            T.CounsilRat");
            viewString.Append("es AS Listing_CounsilRates, \r\n            T.StrataAdmin AS Listing_StrataAdmin, ");
            viewString.Append("\r\n            T.StrataSinking AS Listing_StrataSinking, \r\n            T.OtherOut");
            viewString.Append("goings AS Listing_OtherOutgoings, \r\n            T.LegalDescription AS Listing_Le");
            viewString.Append("galDescription, \r\n            T.LegalLot AS Listing_LegalLot, \r\n            T.Le");
            viewString.Append("galDP AS Listing_LegalDP, \r\n            T.LegalVol AS Listing_LegalVol, \r\n      ");
            viewString.Append("      T.LegalFolio AS Listing_LegalFolio, \r\n            T.Zoning AS Listing_Zoni");
            viewString.Append("ng, \r\n            T.ClientListingId AS Listing_ClientListingId, \r\n            T.");
            viewString.Append("TotalOutgoings AS Listing_TotalOutgoings, \r\n            T.CompanyId AS Listing_C");
            viewString.Append("ompanyId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContainer.");
            viewString.Append("Listing AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Listings", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingAgent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView264()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingAgent", @"
    SELECT VALUE -- Constructing ListingAgent
        [DomainModels.Store.ListingAgent](T1.ListingAgent_AgentId, T1.ListingAgent_MemberId, T1.ListingAgent_AgentOrder, T1.ListingAgent_ListingId, T1.ListingAgent_UserRef, T1.ListingAgent_Name, T1.ListingAgent_Admin, T1.ListingAgent_Email, T1.ListingAgent_Phone, T1.ListingAgent_Phone2, T1.ListingAgent_Mobile, T1.ListingAgent_Deleted)
    FROM (
        SELECT 
            T.AgentId AS ListingAgent_AgentId, 
            T.MemberId AS ListingAgent_MemberId, 
            T.AgentOrder AS ListingAgent_AgentOrder, 
            T.ListingId AS ListingAgent_ListingId, 
            T.UserRef AS ListingAgent_UserRef, 
            T.Name AS ListingAgent_Name, 
            T.Admin AS ListingAgent_Admin, 
            T.Email AS ListingAgent_Email, 
            T.Phone AS ListingAgent_Phone, 
            T.Phone2 AS ListingAgent_Phone2, 
            T.Mobile AS ListingAgent_Mobile, 
            T.Deleted AS ListingAgent_Deleted, 
            True AS _from0
        FROM BaseDbContext.ListingAgents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingAgents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView265()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingAgents", @"
    SELECT VALUE -- Constructing ListingAgents
        [DomainModels.ListingAgent](T1.ListingAgent_AgentId, T1.ListingAgent_MemberId, T1.ListingAgent_AgentOrder, T1.ListingAgent_ListingId, T1.ListingAgent_UserRef, T1.ListingAgent_Name, T1.ListingAgent_Admin, T1.ListingAgent_Email, T1.ListingAgent_Phone, T1.ListingAgent_Phone2, T1.ListingAgent_Mobile, T1.ListingAgent_Deleted)
    FROM (
        SELECT 
            T.AgentId AS ListingAgent_AgentId, 
            T.MemberId AS ListingAgent_MemberId, 
            T.AgentOrder AS ListingAgent_AgentOrder, 
            T.ListingId AS ListingAgent_ListingId, 
            T.UserRef AS ListingAgent_UserRef, 
            T.Name AS ListingAgent_Name, 
            T.Admin AS ListingAgent_Admin, 
            T.Email AS ListingAgent_Email, 
            T.Phone AS ListingAgent_Phone, 
            T.Phone2 AS ListingAgent_Phone2, 
            T.Mobile AS ListingAgent_Mobile, 
            T.Deleted AS ListingAgent_Deleted, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingAgent AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingConjunctionAgent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView266()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingConjunctionAgent", @"
    SELECT VALUE -- Constructing ListingConjunctionAgent
        [DomainModels.Store.ListingConjunctionAgent](T1.ListingConjunctionAgent_ConjunctionAgentId, T1.ListingConjunctionAgent_FirstName, T1.ListingConjunctionAgent_LastName, T1.ListingConjunctionAgent_Company, T1.ListingConjunctionAgent_Email, T1.ListingConjunctionAgent_Mobile, T1.ListingConjunctionAgent_Phone, T1.ListingConjunctionAgent_ListingId)
    FROM (
        SELECT 
            T.ConjunctionAgentId AS ListingConjunctionAgent_ConjunctionAgentId, 
            T.FirstName AS ListingConjunctionAgent_FirstName, 
            T.LastName AS ListingConjunctionAgent_LastName, 
            T.Company AS ListingConjunctionAgent_Company, 
            T.Email AS ListingConjunctionAgent_Email, 
            T.Mobile AS ListingConjunctionAgent_Mobile, 
            T.Phone AS ListingConjunctionAgent_Phone, 
            T.ListingId AS ListingConjunctionAgent_ListingId, 
            True AS _from0
        FROM BaseDbContext.ListingConjunctionAgents AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingConjunctionAgents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView267()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingConjunctionAgents", @"
    SELECT VALUE -- Constructing ListingConjunctionAgents
        [DomainModels.ListingConjunctionAgent](T1.ListingConjunctionAgent_ConjunctionAgentId, T1.ListingConjunctionAgent_FirstName, T1.ListingConjunctionAgent_LastName, T1.ListingConjunctionAgent_Company, T1.ListingConjunctionAgent_Email, T1.ListingConjunctionAgent_Mobile, T1.ListingConjunctionAgent_Phone, T1.ListingConjunctionAgent_ListingId)
    FROM (
        SELECT 
            T.ConjunctionAgentId AS ListingConjunctionAgent_ConjunctionAgentId, 
            T.FirstName AS ListingConjunctionAgent_FirstName, 
            T.LastName AS ListingConjunctionAgent_LastName, 
            T.Company AS ListingConjunctionAgent_Company, 
            T.Email AS ListingConjunctionAgent_Email, 
            T.Mobile AS ListingConjunctionAgent_Mobile, 
            T.Phone AS ListingConjunctionAgent_Phone, 
            T.ListingId AS ListingConjunctionAgent_ListingId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingConjunctionAgent AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingFloorPlan
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView268()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingFloorPlan", @"
    SELECT VALUE -- Constructing ListingFloorPlan
        [DomainModels.Store.ListingFloorPlan](T1.ListingFloorPlan_FloorPlanId, T1.ListingFloorPlan_ListingId, T1.ListingFloorPlan_ImageURL, T1.ListingFloorPlan_PDFURL, T1.ListingFloorPlan_LastMode, T1.ListingFloorPlan_ClientFloorplanID)
    FROM (
        SELECT 
            T.FloorPlanId AS ListingFloorPlan_FloorPlanId, 
            T.ListingId AS ListingFloorPlan_ListingId, 
            T.ImageURL AS ListingFloorPlan_ImageURL, 
            T.PDFURL AS ListingFloorPlan_PDFURL, 
            T.LastMode AS ListingFloorPlan_LastMode, 
            T.ClientFloorplanID AS ListingFloorPlan_ClientFloorplanID, 
            True AS _from0
        FROM BaseDbContext.ListingFloorPlans AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingFloorPlans
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView269()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingFloorPlans", @"
    SELECT VALUE -- Constructing ListingFloorPlans
        [DomainModels.ListingFloorPlan](T1.ListingFloorPlan_FloorPlanId, T1.ListingFloorPlan_ListingId, T1.ListingFloorPlan_ImageURL, T1.ListingFloorPlan_PDFURL, T1.ListingFloorPlan_LastMode, T1.ListingFloorPlan_ClientFloorplanID)
    FROM (
        SELECT 
            T.FloorPlanId AS ListingFloorPlan_FloorPlanId, 
            T.ListingId AS ListingFloorPlan_ListingId, 
            T.ImageURL AS ListingFloorPlan_ImageURL, 
            T.PDFURL AS ListingFloorPlan_PDFURL, 
            T.LastMode AS ListingFloorPlan_LastMode, 
            T.ClientFloorplanID AS ListingFloorPlan_ClientFloorplanID, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingFloorPlan AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingImage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView270()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingImage", @"
    SELECT VALUE -- Constructing ListingImage
        [DomainModels.Store.ListingImage](T1.ListingImage_ListingImageId, T1.ListingImage_ListingId, T1.ListingImage_ImageURL, T1.ListingImage_ImageType, T1.ListingImage_ImageOrder, T1.ListingImage_LastMode, T1.ListingImage_ImageRef, T1.ListingImage_PropertyRef, T1.ListingImage_ClientImageId)
    FROM (
        SELECT 
            T.ListingImageId AS ListingImage_ListingImageId, 
            T.ListingId AS ListingImage_ListingId, 
            T.ImageURL AS ListingImage_ImageURL, 
            T.ImageType AS ListingImage_ImageType, 
            T.ImageOrder AS ListingImage_ImageOrder, 
            T.LastMode AS ListingImage_LastMode, 
            T.ImageRef AS ListingImage_ImageRef, 
            T.PropertyRef AS ListingImage_PropertyRef, 
            T.ClientImageId AS ListingImage_ClientImageId, 
            True AS _from0
        FROM BaseDbContext.ListingImages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingImages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView271()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingImages", @"
    SELECT VALUE -- Constructing ListingImages
        [DomainModels.ListingImage](T1.ListingImage_ListingImageId, T1.ListingImage_ListingId, T1.ListingImage_ImageURL, T1.ListingImage_ImageType, T1.ListingImage_ImageOrder, T1.ListingImage_LastMode, T1.ListingImage_ImageRef, T1.ListingImage_PropertyRef, T1.ListingImage_ClientImageId)
    FROM (
        SELECT 
            T.ListingImageId AS ListingImage_ListingImageId, 
            T.ListingId AS ListingImage_ListingId, 
            T.ImageURL AS ListingImage_ImageURL, 
            T.ImageType AS ListingImage_ImageType, 
            T.ImageOrder AS ListingImage_ImageOrder, 
            T.LastMode AS ListingImage_LastMode, 
            T.ImageRef AS ListingImage_ImageRef, 
            T.PropertyRef AS ListingImage_PropertyRef, 
            T.ClientImageId AS ListingImage_ClientImageId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingImage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingLink
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView272()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingLink", @"
    SELECT VALUE -- Constructing ListingLink
        [DomainModels.Store.ListingLink](T1.ListingLink_LinkType, T1.ListingLink_LinkURL, T1.ListingLink_LinkTitle, T1.ListingLink_ListingId, T1.ListingLink_LinkId)
    FROM (
        SELECT 
            T.LinkType AS ListingLink_LinkType, 
            T.LinkURL AS ListingLink_LinkURL, 
            T.LinkTitle AS ListingLink_LinkTitle, 
            T.ListingId AS ListingLink_ListingId, 
            T.LinkId AS ListingLink_LinkId, 
            True AS _from0
        FROM BaseDbContext.ListingLinks AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingLinks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView273()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingLinks", @"
    SELECT VALUE -- Constructing ListingLinks
        [DomainModels.ListingLink](T1.ListingLink_LinkType, T1.ListingLink_LinkURL, T1.ListingLink_LinkTitle, T1.ListingLink_ListingId, T1.ListingLink_LinkId)
    FROM (
        SELECT 
            T.LinkType AS ListingLink_LinkType, 
            T.LinkURL AS ListingLink_LinkURL, 
            T.LinkTitle AS ListingLink_LinkTitle, 
            T.ListingId AS ListingLink_ListingId, 
            T.LinkId AS ListingLink_LinkId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingLink AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingOFIs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView274()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingOFIs", @"
    SELECT VALUE -- Constructing ListingOFIs
        [DomainModels.Store.ListingOFIs](T1.ListingOFIs_ListingOFIId, T1.ListingOFIs_ListingId, T1.ListingOFIs_StartTime, T1.ListingOFIs_EndTime, T1.ListingOFIs_OFIRef, T1.ListingOFIs_ThirdPartyRef, T1.ListingOFIs_PropertyRef)
    FROM (
        SELECT 
            T.ListingOFIId AS ListingOFIs_ListingOFIId, 
            T.ListingId AS ListingOFIs_ListingId, 
            T.StartTime AS ListingOFIs_StartTime, 
            T.EndTime AS ListingOFIs_EndTime, 
            T.OFIRef AS ListingOFIs_OFIRef, 
            T.ThirdPartyRef AS ListingOFIs_ThirdPartyRef, 
            T.PropertyRef AS ListingOFIs_PropertyRef, 
            True AS _from0
        FROM BaseDbContext.ListingOFIs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingOFIs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView275()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingOFIs", @"
    SELECT VALUE -- Constructing ListingOFIs
        [DomainModels.ListingOFI](T1.ListingOFI_ListingOFIId, T1.ListingOFI_ListingId, T1.ListingOFI_StartTime, T1.ListingOFI_EndTime, T1.ListingOFI_OFIRef, T1.ListingOFI_ThirdPartyRef, T1.ListingOFI_PropertyRef)
    FROM (
        SELECT 
            T.ListingOFIId AS ListingOFI_ListingOFIId, 
            T.ListingId AS ListingOFI_ListingId, 
            T.StartTime AS ListingOFI_StartTime, 
            T.EndTime AS ListingOFI_EndTime, 
            T.OFIRef AS ListingOFI_OFIRef, 
            T.ThirdPartyRef AS ListingOFI_ThirdPartyRef, 
            T.PropertyRef AS ListingOFI_PropertyRef, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingOFIs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ListingVendor
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView276()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ListingVendor", @"
    SELECT VALUE -- Constructing ListingVendor
        [DomainModels.Store.ListingVendor](T1.ListingVendor_VendorId, T1.ListingVendor_FirstName, T1.ListingVendor_LastName, T1.ListingVendor_Solutation, T1.ListingVendor_MailingSolutation, T1.ListingVendor_Company, T1.ListingVendor_Email, T1.ListingVendor_Phone, T1.ListingVendor_Mobile, T1.ListingVendor_ListingId)
    FROM (
        SELECT 
            T.VendorId AS ListingVendor_VendorId, 
            T.FirstName AS ListingVendor_FirstName, 
            T.LastName AS ListingVendor_LastName, 
            T.Solutation AS ListingVendor_Solutation, 
            T.MailingSolutation AS ListingVendor_MailingSolutation, 
            T.Company AS ListingVendor_Company, 
            T.Email AS ListingVendor_Email, 
            T.Phone AS ListingVendor_Phone, 
            T.Mobile AS ListingVendor_Mobile, 
            T.ListingId AS ListingVendor_ListingId, 
            True AS _from0
        FROM BaseDbContext.ListingVendors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ListingVendors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView277()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ListingVendors", @"
    SELECT VALUE -- Constructing ListingVendors
        [DomainModels.ListingVendor](T1.ListingVendor_VendorId, T1.ListingVendor_FirstName, T1.ListingVendor_LastName, T1.ListingVendor_Solutation, T1.ListingVendor_MailingSolutation, T1.ListingVendor_Company, T1.ListingVendor_Email, T1.ListingVendor_Phone, T1.ListingVendor_Mobile, T1.ListingVendor_ListingId)
    FROM (
        SELECT 
            T.VendorId AS ListingVendor_VendorId, 
            T.FirstName AS ListingVendor_FirstName, 
            T.LastName AS ListingVendor_LastName, 
            T.Solutation AS ListingVendor_Solutation, 
            T.MailingSolutation AS ListingVendor_MailingSolutation, 
            T.Company AS ListingVendor_Company, 
            T.Email AS ListingVendor_Email, 
            T.Phone AS ListingVendor_Phone, 
            T.Mobile AS ListingVendor_Mobile, 
            T.ListingId AS ListingVendor_ListingId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ListingVendor AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreAnswer
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView278()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreAnswer", @"
    SELECT VALUE -- Constructing CostCentreAnswer
        [DomainModels.Store.CostCentreAnswer](T1.CostCentreAnswer_Id, T1.CostCentreAnswer_QuestionId, T1.CostCentreAnswer_AnswerString)
    FROM (
        SELECT 
            T.Id AS CostCentreAnswer_Id, 
            T.QuestionId AS CostCentreAnswer_QuestionId, 
            T.AnswerString AS CostCentreAnswer_AnswerString, 
            True AS _from0
        FROM BaseDbContext.CostCentreAnswers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreAnswers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView279()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreAnswers", @"
    SELECT VALUE -- Constructing CostCentreAnswers
        [DomainModels.CostCentreAnswer](T1.CostCentreAnswer_Id, T1.CostCentreAnswer_QuestionId, T1.CostCentreAnswer_AnswerString)
    FROM (
        SELECT 
            T.Id AS CostCentreAnswer_Id, 
            T.QuestionId AS CostCentreAnswer_QuestionId, 
            T.AnswerString AS CostCentreAnswer_AnswerString, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreAnswer AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreMatrix
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView280()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreMatrix", @"
    SELECT VALUE -- Constructing CostCentreMatrix
        [DomainModels.Store.CostCentreMatrix](T1.CostCentreMatrix_MatrixId, T1.CostCentreMatrix_Name, T1.CostCentreMatrix_Description, T1.CostCentreMatrix_RowsCount, T1.CostCentreMatrix_ColumnsCount, T1.CostCentreMatrix_OrganisationId, T1.CostCentreMatrix_SystemSiteId)
    FROM (
        SELECT 
            T.MatrixId AS CostCentreMatrix_MatrixId, 
            T.Name AS CostCentreMatrix_Name, 
            T.Description AS CostCentreMatrix_Description, 
            T.RowsCount AS CostCentreMatrix_RowsCount, 
            T.ColumnsCount AS CostCentreMatrix_ColumnsCount, 
            T.OrganisationId AS CostCentreMatrix_OrganisationId, 
            T.SystemSiteId AS CostCentreMatrix_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.CostCentreMatrices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreMatrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView281()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreMatrices", @"
    SELECT VALUE -- Constructing CostCentreMatrices
        [DomainModels.CostCentreMatrix](T1.CostCentreMatrix_MatrixId, T1.CostCentreMatrix_Name, T1.CostCentreMatrix_Description, T1.CostCentreMatrix_RowsCount, T1.CostCentreMatrix_ColumnsCount, T1.CostCentreMatrix_SystemSiteId, T1.CostCentreMatrix_OrganisationId)
    FROM (
        SELECT 
            T.MatrixId AS CostCentreMatrix_MatrixId, 
            T.Name AS CostCentreMatrix_Name, 
            T.Description AS CostCentreMatrix_Description, 
            T.RowsCount AS CostCentreMatrix_RowsCount, 
            T.ColumnsCount AS CostCentreMatrix_ColumnsCount, 
            T.SystemSiteId AS CostCentreMatrix_SystemSiteId, 
            T.OrganisationId AS CostCentreMatrix_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreMatrix AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreMatrixDetail
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView282()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreMatrixDetail", @"
    SELECT VALUE -- Constructing CostCentreMatrixDetail
        [DomainModels.Store.CostCentreMatrixDetail](T1.CostCentreMatrixDetail_Id, T1.CostCentreMatrixDetail_MatrixId, T1.CostCentreMatrixDetail_Value)
    FROM (
        SELECT 
            T.Id AS CostCentreMatrixDetail_Id, 
            T.MatrixId AS CostCentreMatrixDetail_MatrixId, 
            T.[Value] AS CostCentreMatrixDetail_Value, 
            True AS _from0
        FROM BaseDbContext.CostCentreMatrixDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreMatrixDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView283()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreMatrixDetails", @"
    SELECT VALUE -- Constructing CostCentreMatrixDetails
        [DomainModels.CostCentreMatrixDetail](T1.CostCentreMatrixDetail_Id, T1.CostCentreMatrixDetail_MatrixId, T1.CostCentreMatrixDetail_Value)
    FROM (
        SELECT 
            T.Id AS CostCentreMatrixDetail_Id, 
            T.MatrixId AS CostCentreMatrixDetail_MatrixId, 
            T.[Value] AS CostCentreMatrixDetail_Value, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreMatrixDetail AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreQuestion
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView284()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreQuestion", @"
    SELECT VALUE -- Constructing CostCentreQuestion
        [DomainModels.Store.CostCentreQuestion](T1.CostCentreQuestion_Id, T1.CostCentreQuestion_QuestionString, T1.CostCentreQuestion_Type, T1.CostCentreQuestion_DefaultAnswer, T1.CostCentreQuestion_CompanyId, T1.CostCentreQuestion_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS CostCentreQuestion_Id, 
            T.QuestionString AS CostCentreQuestion_QuestionString, 
            T.Type AS CostCentreQuestion_Type, 
            T.DefaultAnswer AS CostCentreQuestion_DefaultAnswer, 
            T.CompanyId AS CostCentreQuestion_CompanyId, 
            T.SystemSiteId AS CostCentreQuestion_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.CostCentreQuestions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreQuestions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView285()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreQuestions", @"
    SELECT VALUE -- Constructing CostCentreQuestions
        [DomainModels.CostCentreQuestion](T1.CostCentreQuestion_Id, T1.CostCentreQuestion_QuestionString, T1.CostCentreQuestion_Type, T1.CostCentreQuestion_DefaultAnswer, T1.CostCentreQuestion_CompanyId, T1.CostCentreQuestion_SystemSiteId)
    FROM (
        SELECT 
            T.Id AS CostCentreQuestion_Id, 
            T.QuestionString AS CostCentreQuestion_QuestionString, 
            T.Type AS CostCentreQuestion_Type, 
            T.DefaultAnswer AS CostCentreQuestion_DefaultAnswer, 
            T.CompanyId AS CostCentreQuestion_CompanyId, 
            T.SystemSiteId AS CostCentreQuestion_SystemSiteId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreQuestion AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostcentreSystemType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView286()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostcentreSystemType", @"
    SELECT VALUE -- Constructing CostcentreSystemType
        [DomainModels.Store.CostcentreSystemType](T1.CostcentreSystemType_SystemTypeId, T1.CostcentreSystemType_SystemTypeName)
    FROM (
        SELECT 
            T.SystemTypeId AS CostcentreSystemType_SystemTypeId, 
            T.SystemTypeName AS CostcentreSystemType_SystemTypeName, 
            True AS _from0
        FROM BaseDbContext.CostcentreSystemTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostcentreSystemTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView287()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostcentreSystemTypes", @"
    SELECT VALUE -- Constructing CostcentreSystemTypes
        [DomainModels.CostcentreSystemType](T1.CostcentreSystemType_SystemTypeId, T1.CostcentreSystemType_SystemTypeName)
    FROM (
        SELECT 
            T.SystemTypeId AS CostcentreSystemType_SystemTypeId, 
            T.SystemTypeName AS CostcentreSystemType_SystemTypeName, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostcentreSystemType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreTemplate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView288()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreTemplate", @"
    SELECT VALUE -- Constructing CostCentreTemplate
        [DomainModels.Store.CostCentreTemplate](T1.CostCentreTemplate_Id, T1.CostCentreTemplate_Name, T1.CostCentreTemplate_Header, T1.CostCentreTemplate_Footer, T1.CostCentreTemplate_Middle, T1.CostCentreTemplate_Type)
    FROM (
        SELECT 
            T.Id AS CostCentreTemplate_Id, 
            T.Name AS CostCentreTemplate_Name, 
            T.Header AS CostCentreTemplate_Header, 
            T.Footer AS CostCentreTemplate_Footer, 
            T.Middle AS CostCentreTemplate_Middle, 
            T.Type AS CostCentreTemplate_Type, 
            True AS _from0
        FROM BaseDbContext.CostCentreTemplates AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreTemplates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView289()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreTemplates", @"
    SELECT VALUE -- Constructing CostCentreTemplates
        [DomainModels.CostCentreTemplate](T1.CostCentreTemplate_Id, T1.CostCentreTemplate_Name, T1.CostCentreTemplate_Header, T1.CostCentreTemplate_Footer, T1.CostCentreTemplate_Middle, T1.CostCentreTemplate_Type)
    FROM (
        SELECT 
            T.Id AS CostCentreTemplate_Id, 
            T.Name AS CostCentreTemplate_Name, 
            T.Header AS CostCentreTemplate_Header, 
            T.Footer AS CostCentreTemplate_Footer, 
            T.Middle AS CostCentreTemplate_Middle, 
            T.Type AS CostCentreTemplate_Type, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreTemplate AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreVariable
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView290()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreVariable", @"
    SELECT VALUE -- Constructing CostCentreVariable
        [DomainModels.Store.CostCentreVariable](T1.CostCentreVariable_VarId, T1.CostCentreVariable_Name, T1.CostCentreVariable_RefTableName, T1.CostCentreVariable_RefFieldName, T1.CostCentreVariable_CriteriaFieldName, T1.CostCentreVariable_Criteria, T1.CostCentreVariable_CategoryId, T1.CostCentreVariable_IsCriteriaUsed, T1.CostCentreVariable_Type, T1.CostCentreVariable_PropertyType, T1.CostCentreVariable_VariableDescription, T1.CostCentreVariable_VariableValue, T1.CostCentreVariable_SystemSiteId)
    FROM (
        SELECT 
            T.VarId AS CostCentreVariable_VarId, 
            T.Name AS CostCentreVariable_Name, 
            T.RefTableName AS CostCentreVariable_RefTableName, 
            T.RefFieldName AS CostCentreVariable_RefFieldName, 
            T.CriteriaFieldName AS CostCentreVariable_CriteriaFieldName, 
            T.Criteria AS CostCentreVariable_Criteria, 
            T.CategoryId AS CostCentreVariable_CategoryId, 
            T.IsCriteriaUsed AS CostCentreVariable_IsCriteriaUsed, 
            T.Type AS CostCentreVariable_Type, 
            T.PropertyType AS CostCentreVariable_PropertyType, 
            T.VariableDescription AS CostCentreVariable_VariableDescription, 
            T.VariableValue AS CostCentreVariable_VariableValue, 
            T.SystemSiteId AS CostCentreVariable_SystemSiteId, 
            True AS _from0
        FROM BaseDbContext.CostCentreVariables AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreVariables
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView291()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreVariables", "\r\n    SELECT VALUE -- Constructing CostCentreVariables\r\n        [DomainModels.Cos" +
                    "tCentreVariable](T1.CostCentreVariable_VarId, T1.CostCentreVariable_Name, T1.Cos" +
                    "tCentreVariable_RefTableName, T1.CostCentreVariable_RefFieldName, T1.CostCentreV" +
                    "ariable_CriteriaFieldName, T1.CostCentreVariable_Criteria, T1.CostCentreVariable" +
                    "_CategoryId, T1.CostCentreVariable_IsCriteriaUsed, T1.CostCentreVariable_Type, T" +
                    "1.CostCentreVariable_PropertyType, T1.CostCentreVariable_VariableDescription, T1" +
                    ".CostCentreVariable_VariableValue, T1.CostCentreVariable_SystemSiteId)\r\n    FROM" +
                    " (\r\n        SELECT \r\n            T.VarId AS CostCentreVariable_VarId, \r\n        " +
                    "    T.Name AS CostCentreVariable_Name, \r\n            T.RefTableName AS CostCentr" +
                    "eVariable_RefTableName, \r\n            T.RefFieldName AS CostCentreVariable_RefFi" +
                    "eldName, \r\n            T.CriteriaFieldName AS CostCentreVariable_CriteriaFieldNa" +
                    "me, \r\n            T.Criteria AS CostCentreVariable_Criteria, \r\n            T.Cat" +
                    "egoryId AS CostCentreVariable_CategoryId, \r\n            T.IsCriteriaUsed AS Cost" +
                    "CentreVariable_IsCriteriaUsed, \r\n            T.Type AS CostCentreVariable_Type, " +
                    "\r\n            T.PropertyType AS CostCentreVariable_PropertyType, \r\n            T" +
                    ".VariableDescription AS CostCentreVariable_VariableDescription, \r\n            T." +
                    "VariableValue AS CostCentreVariable_VariableValue, \r\n            T.SystemSiteId " +
                    "AS CostCentreVariable_SystemSiteId, \r\n            True AS _from0\r\n        FROM D" +
                    "omainModelsStoreContainer.CostCentreVariable AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCentreVariableType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView292()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCentreVariableType", @"
    SELECT VALUE -- Constructing CostCentreVariableType
        [DomainModels.Store.CostCentreVariableType](T1.CostCentreVariableType_CategoryId, T1.CostCentreVariableType_Name)
    FROM (
        SELECT 
            T.CategoryId AS CostCentreVariableType_CategoryId, 
            T.Name AS CostCentreVariableType_Name, 
            True AS _from0
        FROM BaseDbContext.CostCentreVariableTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCentreVariableTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView293()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCentreVariableTypes", @"
    SELECT VALUE -- Constructing CostCentreVariableTypes
        [DomainModels.CostCentreVariableType](T1.CostCentreVariableType_CategoryId, T1.CostCentreVariableType_Name)
    FROM (
        SELECT 
            T.CategoryId AS CostCentreVariableType_CategoryId, 
            T.Name AS CostCentreVariableType_Name, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCentreVariableType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView294()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineCategory", @"
    SELECT VALUE -- Constructing MachineCategory
        [DomainModels.Store.MachineCategory](T1.MachineCategory_MachineCatId, T1.MachineCategory_MachineCategory, T1.MachineCategory_Fixed)
    FROM (
        SELECT 
            T.MachineCatId AS MachineCategory_MachineCatId, 
            T.MachineCategory1 AS MachineCategory_MachineCategory, 
            T.Fixed AS MachineCategory_Fixed, 
            True AS _from0
        FROM BaseDbContext.MachineCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView295()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineCategories", @"
    SELECT VALUE -- Constructing MachineCategories
        [DomainModels.MachineCategory](T1.MachineCategory_MachineCatId, T1.MachineCategory_MachineCategory1, T1.MachineCategory_Fixed)
    FROM (
        SELECT 
            T.MachineCatId AS MachineCategory_MachineCatId, 
            T.MachineCategory AS MachineCategory_MachineCategory1, 
            T.Fixed AS MachineCategory_Fixed, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Groups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView296()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Groups", @"
    SELECT VALUE -- Constructing Groups
        [DomainModels.Store.Groups](T1.Groups_GroupId, T1.Groups_GroupName, T1.Groups_GroupDescription, T1.Groups_CreationDateTime, T1.Groups_CreatedBy, T1.Groups_LastModifiedDateTime, T1.Groups_LastModifiedBy, T1.Groups_SystemSiteId, T1.Groups_IsPrivate, T1.Groups_Notes)
    FROM (
        SELECT 
            T.GroupId AS Groups_GroupId, 
            T.GroupName AS Groups_GroupName, 
            T.GroupDescription AS Groups_GroupDescription, 
            T.CreationDateTime AS Groups_CreationDateTime, 
            T.CreatedBy AS Groups_CreatedBy, 
            T.LastModifiedDateTime AS Groups_LastModifiedDateTime, 
            T.LastModifiedBy AS Groups_LastModifiedBy, 
            T.SystemSiteId AS Groups_SystemSiteId, 
            T.IsPrivate AS Groups_IsPrivate, 
            T.Notes AS Groups_Notes, 
            True AS _from0
        FROM BaseDbContext.Groups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Groups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView297()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Groups", @"
    SELECT VALUE -- Constructing Groups
        [DomainModels.Group](T1.Group_GroupId, T1.Group_GroupName, T1.Group_GroupDescription, T1.Group_CreationDateTime, T1.Group_CreatedBy, T1.Group_LastModifiedDateTime, T1.Group_LastModifiedBy, T1.Group_SystemSiteId, T1.Group_IsPrivate, T1.Group_Notes)
    FROM (
        SELECT 
            T.GroupId AS Group_GroupId, 
            T.GroupName AS Group_GroupName, 
            T.GroupDescription AS Group_GroupDescription, 
            T.CreationDateTime AS Group_CreationDateTime, 
            T.CreatedBy AS Group_CreatedBy, 
            T.LastModifiedDateTime AS Group_LastModifiedDateTime, 
            T.LastModifiedBy AS Group_LastModifiedBy, 
            T.SystemSiteId AS Group_SystemSiteId, 
            T.IsPrivate AS Group_IsPrivate, 
            T.Notes AS Group_Notes, 
            True AS _from0
        FROM DomainModelsStoreContainer.Groups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CostCenterChoice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView298()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CostCenterChoice", @"
    SELECT VALUE -- Constructing CostCenterChoice
        [DomainModels.Store.CostCenterChoice](T1.CostCenterChoice_CostCenterChoiceId, T1.CostCenterChoice_ChoiceLabel, T1.CostCenterChoice_ChoiceValue, T1.CostCenterChoice_CostCenterId, T1.CostCenterChoice_CostCenterOption)
    FROM (
        SELECT 
            T.CostCenterChoiceId AS CostCenterChoice_CostCenterChoiceId, 
            T.ChoiceLabel AS CostCenterChoice_ChoiceLabel, 
            T.ChoiceValue AS CostCenterChoice_ChoiceValue, 
            T.CostCenterId AS CostCenterChoice_CostCenterId, 
            T.CostCenterOption AS CostCenterChoice_CostCenterOption, 
            True AS _from0
        FROM BaseDbContext.CostCenterChoices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CostCenterChoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView299()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CostCenterChoices", @"
    SELECT VALUE -- Constructing CostCenterChoices
        [DomainModels.CostCenterChoice](T1.CostCenterChoice_CostCenterChoiceId, T1.CostCenterChoice_ChoiceLabel, T1.CostCenterChoice_ChoiceValue, T1.CostCenterChoice_CostCenterId, T1.CostCenterChoice_CostCenterOption)
    FROM (
        SELECT 
            T.CostCenterChoiceId AS CostCenterChoice_CostCenterChoiceId, 
            T.ChoiceLabel AS CostCenterChoice_ChoiceLabel, 
            T.ChoiceValue AS CostCenterChoice_ChoiceValue, 
            T.CostCenterId AS CostCenterChoice_CostCenterId, 
            T.CostCenterOption AS CostCenterChoice_CostCenterOption, 
            True AS _from0
        FROM DomainModelsStoreContainer.CostCenterChoice AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InkCoverageGroup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView300()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InkCoverageGroup", @"
    SELECT VALUE -- Constructing InkCoverageGroup
        [DomainModels.Store.InkCoverageGroup](T1.InkCoverageGroup_CoverageGroupId, T1.InkCoverageGroup_GroupName, T1.InkCoverageGroup_Percentage, T1.InkCoverageGroup_IsFixed, T1.InkCoverageGroup_OrganisationId)
    FROM (
        SELECT 
            T.CoverageGroupId AS InkCoverageGroup_CoverageGroupId, 
            T.GroupName AS InkCoverageGroup_GroupName, 
            T.Percentage AS InkCoverageGroup_Percentage, 
            T.IsFixed AS InkCoverageGroup_IsFixed, 
            T.OrganisationId AS InkCoverageGroup_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.InkCoverageGroups AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InkCoverageGroups
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView301()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InkCoverageGroups", @"
    SELECT VALUE -- Constructing InkCoverageGroups
        [DomainModels.InkCoverageGroup](T1.InkCoverageGroup_CoverageGroupId, T1.InkCoverageGroup_GroupName, T1.InkCoverageGroup_Percentage, T1.InkCoverageGroup_IsFixed, T1.InkCoverageGroup_OrganisationId)
    FROM (
        SELECT 
            T.CoverageGroupId AS InkCoverageGroup_CoverageGroupId, 
            T.GroupName AS InkCoverageGroup_GroupName, 
            T.Percentage AS InkCoverageGroup_Percentage, 
            T.IsFixed AS InkCoverageGroup_IsFixed, 
            T.OrganisationId AS InkCoverageGroup_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.InkCoverageGroup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineSpoilage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView302()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineSpoilage", @"
    SELECT VALUE -- Constructing MachineSpoilage
        [DomainModels.Store.MachineSpoilage](T1.MachineSpoilage_MachineSpoilageId, T1.MachineSpoilage_MachineId, T1.MachineSpoilage_SetupSpoilage, T1.MachineSpoilage_RunningSpoilage, T1.MachineSpoilage_NoOfColors)
    FROM (
        SELECT 
            T.MachineSpoilageId AS MachineSpoilage_MachineSpoilageId, 
            T.MachineId AS MachineSpoilage_MachineId, 
            T.SetupSpoilage AS MachineSpoilage_SetupSpoilage, 
            T.RunningSpoilage AS MachineSpoilage_RunningSpoilage, 
            T.NoOfColors AS MachineSpoilage_NoOfColors, 
            True AS _from0
        FROM BaseDbContext.MachineSpoilages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineSpoilages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView303()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineSpoilages", @"
    SELECT VALUE -- Constructing MachineSpoilages
        [DomainModels.MachineSpoilage](T1.MachineSpoilage_MachineSpoilageId, T1.MachineSpoilage_MachineId, T1.MachineSpoilage_SetupSpoilage, T1.MachineSpoilage_RunningSpoilage, T1.MachineSpoilage_NoOfColors)
    FROM (
        SELECT 
            T.MachineSpoilageId AS MachineSpoilage_MachineSpoilageId, 
            T.MachineId AS MachineSpoilage_MachineId, 
            T.SetupSpoilage AS MachineSpoilage_SetupSpoilage, 
            T.RunningSpoilage AS MachineSpoilage_RunningSpoilage, 
            T.NoOfColors AS MachineSpoilage_NoOfColors, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineSpoilage AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Report
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView304()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Report", "\r\n    SELECT VALUE -- Constructing Report\r\n        [DomainModels.Store.Report](T1" +
                    ".Report_ReportId, T1.Report_Name, T1.Report_Path, T1.Report_FileName, T1.Report_" +
                    "CategoryId, T1.Report_Description, T1.Report_ReportDataSource, T1.Report_NameSpa" +
                    "ce, T1.Report_IsExternal, T1.Report_IsFixed, T1.Report_ReportTemplate, T1.Report" +
                    "_ReportTemplateOriginal, T1.Report_IsEditable, T1.Report_ParentReportId, T1.Repo" +
                    "rt_IsByReflection, T1.Report_CompanyId, T1.Report_IsSystemReport, T1.Report_Repo" +
                    "rtOrder, T1.Report_HasSubReport, T1.Report_SubReportTemplate, T1.Report_SubRepor" +
                    "tDataSource, T1.Report_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.ReportId AS Report_ReportId, \r\n            T.Name AS Report_Name, \r\n         " +
                    "   T.Path AS Report_Path, \r\n            T.FileName AS Report_FileName, \r\n       " +
                    "     T.CategoryId AS Report_CategoryId, \r\n            T.Description AS Report_De" +
                    "scription, \r\n            T.ReportDataSource AS Report_ReportDataSource, \r\n      " +
                    "      T.NameSpace AS Report_NameSpace, \r\n            T.IsExternal AS Report_IsEx" +
                    "ternal, \r\n            T.IsFixed AS Report_IsFixed, \r\n            T.ReportTemplat" +
                    "e AS Report_ReportTemplate, \r\n            T.ReportTemplateOriginal AS Report_Rep" +
                    "ortTemplateOriginal, \r\n            T.IsEditable AS Report_IsEditable, \r\n        " +
                    "    T.ParentReportId AS Report_ParentReportId, \r\n            T.IsByReflection AS" +
                    " Report_IsByReflection, \r\n            T.CompanyId AS Report_CompanyId, \r\n       " +
                    "     T.IsSystemReport AS Report_IsSystemReport, \r\n            T.ReportOrder AS R" +
                    "eport_ReportOrder, \r\n            T.HasSubReport AS Report_HasSubReport, \r\n      " +
                    "      T.SubReportTemplate AS Report_SubReportTemplate, \r\n            T.SubReport" +
                    "DataSource AS Report_SubReportDataSource, \r\n            T.OrganisationId AS Repo" +
                    "rt_OrganisationId, \r\n            True AS _from0\r\n        FROM BaseDbContext.Repo" +
                    "rts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ReportNote
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView305()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ReportNote", @"
    SELECT VALUE -- Constructing ReportNote
        [DomainModels.Store.ReportNote](T1.ReportNote_Id, T1.ReportNote_FootNotes, T1.ReportNote_HeadNotes, T1.ReportNote_AdvertitorialNotes, T1.ReportNote_UserId, T1.ReportNote_ReportCategoryId, T1.ReportNote_SystemSiteId, T1.ReportNote_ReportBanner, T1.ReportNote_ReportTitle, T1.ReportNote_BannerAbsolutePath, T1.ReportNote_isDefault, T1.ReportNote_OrganisationId, T1.ReportNote_CompanyId)
    FROM (
        SELECT 
            T.Id AS ReportNote_Id, 
            T.FootNotes AS ReportNote_FootNotes, 
            T.HeadNotes AS ReportNote_HeadNotes, 
            T.AdvertitorialNotes AS ReportNote_AdvertitorialNotes, 
            T.UserId AS ReportNote_UserId, 
            T.ReportCategoryId AS ReportNote_ReportCategoryId, 
            T.SystemSiteId AS ReportNote_SystemSiteId, 
            T.ReportBanner AS ReportNote_ReportBanner, 
            T.ReportTitle AS ReportNote_ReportTitle, 
            T.BannerAbsolutePath AS ReportNote_BannerAbsolutePath, 
            T.isDefault AS ReportNote_isDefault, 
            T.OrganisationId AS ReportNote_OrganisationId, 
            T.CompanyId AS ReportNote_CompanyId, 
            True AS _from0
        FROM BaseDbContext.ReportNotes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ReportCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView306()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ReportCategory", @"
    SELECT VALUE -- Constructing ReportCategory
        [DomainModels.Store.ReportCategory](T1.ReportCategory_CategoryId, T1.ReportCategory_CategoryName, T1.ReportCategory_Description)
    FROM (
        SELECT 
            T.CategoryId AS ReportCategory_CategoryId, 
            T.CategoryName AS ReportCategory_CategoryName, 
            T.Description AS ReportCategory_Description, 
            True AS _from0
        FROM BaseDbContext.ReportCategories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Reports
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView307()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Reports", "\r\n    SELECT VALUE -- Constructing Reports\r\n        [DomainModels.Report](T1.Repo" +
                    "rt_ReportId, T1.Report_Name, T1.Report_Path, T1.Report_FileName, T1.Report_Categ" +
                    "oryId, T1.Report_Description, T1.Report_ReportDataSource, T1.Report_NameSpace, T" +
                    "1.Report_IsExternal, T1.Report_IsFixed, T1.Report_ReportTemplate, T1.Report_Repo" +
                    "rtTemplateOriginal, T1.Report_IsEditable, T1.Report_ParentReportId, T1.Report_Is" +
                    "ByReflection, T1.Report_CompanyId, T1.Report_IsSystemReport, T1.Report_ReportOrd" +
                    "er, T1.Report_HasSubReport, T1.Report_SubReportTemplate, T1.Report_SubReportData" +
                    "Source, T1.Report_OrganisationId)\r\n    FROM (\r\n        SELECT \r\n            T.Re" +
                    "portId AS Report_ReportId, \r\n            T.Name AS Report_Name, \r\n            T." +
                    "Path AS Report_Path, \r\n            T.FileName AS Report_FileName, \r\n            " +
                    "T.CategoryId AS Report_CategoryId, \r\n            T.Description AS Report_Descrip" +
                    "tion, \r\n            T.ReportDataSource AS Report_ReportDataSource, \r\n           " +
                    " T.NameSpace AS Report_NameSpace, \r\n            T.IsExternal AS Report_IsExterna" +
                    "l, \r\n            T.IsFixed AS Report_IsFixed, \r\n            T.ReportTemplate AS " +
                    "Report_ReportTemplate, \r\n            T.ReportTemplateOriginal AS Report_ReportTe" +
                    "mplateOriginal, \r\n            T.IsEditable AS Report_IsEditable, \r\n            T" +
                    ".ParentReportId AS Report_ParentReportId, \r\n            T.IsByReflection AS Repo" +
                    "rt_IsByReflection, \r\n            T.CompanyId AS Report_CompanyId, \r\n            " +
                    "T.IsSystemReport AS Report_IsSystemReport, \r\n            T.ReportOrder AS Report" +
                    "_ReportOrder, \r\n            T.HasSubReport AS Report_HasSubReport, \r\n           " +
                    " T.SubReportTemplate AS Report_SubReportTemplate, \r\n            T.SubReportDataS" +
                    "ource AS Report_SubReportDataSource, \r\n            T.OrganisationId AS Report_Or" +
                    "ganisationId, \r\n            True AS _from0\r\n        FROM DomainModelsStoreContai" +
                    "ner.Report AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ReportNotes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView308()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ReportNotes", @"
    SELECT VALUE -- Constructing ReportNotes
        [DomainModels.ReportNote](T1.ReportNote_Id, T1.ReportNote_FootNotes, T1.ReportNote_HeadNotes, T1.ReportNote_AdvertitorialNotes, T1.ReportNote_UserId, T1.ReportNote_ReportCategoryId, T1.ReportNote_SystemSiteId, T1.ReportNote_ReportBanner, T1.ReportNote_ReportTitle, T1.ReportNote_BannerAbsolutePath, T1.ReportNote_isDefault, T1.ReportNote_OrganisationId, T1.ReportNote_CompanyId)
    FROM (
        SELECT 
            T.Id AS ReportNote_Id, 
            T.FootNotes AS ReportNote_FootNotes, 
            T.HeadNotes AS ReportNote_HeadNotes, 
            T.AdvertitorialNotes AS ReportNote_AdvertitorialNotes, 
            T.UserId AS ReportNote_UserId, 
            T.ReportCategoryId AS ReportNote_ReportCategoryId, 
            T.SystemSiteId AS ReportNote_SystemSiteId, 
            T.ReportBanner AS ReportNote_ReportBanner, 
            T.ReportTitle AS ReportNote_ReportTitle, 
            T.BannerAbsolutePath AS ReportNote_BannerAbsolutePath, 
            T.isDefault AS ReportNote_isDefault, 
            T.OrganisationId AS ReportNote_OrganisationId, 
            T.CompanyId AS ReportNote_CompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ReportNote AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ReportCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView309()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ReportCategories", @"
    SELECT VALUE -- Constructing ReportCategories
        [DomainModels.ReportCategory](T1.ReportCategory_CategoryId, T1.ReportCategory_CategoryName, T1.ReportCategory_Description)
    FROM (
        SELECT 
            T.CategoryId AS ReportCategory_CategoryId, 
            T.CategoryName AS ReportCategory_CategoryName, 
            T.Description AS ReportCategory_Description, 
            True AS _from0
        FROM DomainModelsStoreContainer.ReportCategory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PipeLineSource
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView310()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PipeLineSource", @"
    SELECT VALUE -- Constructing PipeLineSource
        [DomainModels.Store.PipeLineSource](T1.PipeLineSource_SourceId, T1.PipeLineSource_Description)
    FROM (
        SELECT 
            T.SourceId AS PipeLineSource_SourceId, 
            T.Description AS PipeLineSource_Description, 
            True AS _from0
        FROM BaseDbContext.PipeLineSources AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PipeLineSources
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView311()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PipeLineSources", @"
    SELECT VALUE -- Constructing PipeLineSources
        [DomainModels.PipeLineSource](T1.PipeLineSource_SourceId, T1.PipeLineSource_Description)
    FROM (
        SELECT 
            T.SourceId AS PipeLineSource_SourceId, 
            T.Description AS PipeLineSource_Description, 
            True AS _from0
        FROM DomainModelsStoreContainer.PipeLineSource AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ActivityType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView312()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ActivityType", @"
    SELECT VALUE -- Constructing ActivityType
        [DomainModels.Store.ActivityType](T1.ActivityType_ActivityTypeId, T1.ActivityType_ActivityName, T1.ActivityType_ActivityDescription, T1.ActivityType_ActivityColor)
    FROM (
        SELECT 
            T.ActivityTypeId AS ActivityType_ActivityTypeId, 
            T.ActivityName AS ActivityType_ActivityName, 
            T.ActivityDescription AS ActivityType_ActivityDescription, 
            T.ActivityColor AS ActivityType_ActivityColor, 
            True AS _from0
        FROM BaseDbContext.ActivityTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ActivityTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView313()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ActivityTypes", @"
    SELECT VALUE -- Constructing ActivityTypes
        [DomainModels.ActivityType](T1.ActivityType_ActivityTypeId, T1.ActivityType_ActivityName, T1.ActivityType_ActivityDescription, T1.ActivityType_ActivityColor)
    FROM (
        SELECT 
            T.ActivityTypeId AS ActivityType_ActivityTypeId, 
            T.ActivityName AS ActivityType_ActivityName, 
            T.ActivityDescription AS ActivityType_ActivityDescription, 
            T.ActivityColor AS ActivityType_ActivityColor, 
            True AS _from0
        FROM DomainModelsStoreContainer.ActivityType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DeliveryCarrier
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView314()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DeliveryCarrier", @"
    SELECT VALUE -- Constructing DeliveryCarrier
        [DomainModels.Store.DeliveryCarrier](T1.DeliveryCarrier_CarrierId, T1.DeliveryCarrier_CarrierName, T1.DeliveryCarrier_Url, T1.DeliveryCarrier_ApiKey, T1.DeliveryCarrier_ApiPassword, T1.DeliveryCarrier_isEnable)
    FROM (
        SELECT 
            T.CarrierId AS DeliveryCarrier_CarrierId, 
            T.CarrierName AS DeliveryCarrier_CarrierName, 
            T.Url AS DeliveryCarrier_Url, 
            T.ApiKey AS DeliveryCarrier_ApiKey, 
            T.ApiPassword AS DeliveryCarrier_ApiPassword, 
            T.isEnable AS DeliveryCarrier_isEnable, 
            True AS _from0
        FROM BaseDbContext.DeliveryCarriers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DeliveryCarriers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView315()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DeliveryCarriers", @"
    SELECT VALUE -- Constructing DeliveryCarriers
        [DomainModels.DeliveryCarrier](T1.DeliveryCarrier_CarrierId, T1.DeliveryCarrier_CarrierName, T1.DeliveryCarrier_Url, T1.DeliveryCarrier_ApiKey, T1.DeliveryCarrier_ApiPassword, T1.DeliveryCarrier_isEnable)
    FROM (
        SELECT 
            T.CarrierId AS DeliveryCarrier_CarrierId, 
            T.CarrierName AS DeliveryCarrier_CarrierName, 
            T.Url AS DeliveryCarrier_Url, 
            T.ApiKey AS DeliveryCarrier_ApiKey, 
            T.ApiPassword AS DeliveryCarrier_ApiPassword, 
            T.isEnable AS DeliveryCarrier_isEnable, 
            True AS _from0
        FROM DomainModelsStoreContainer.DeliveryCarrier AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.PaypalPaymentRequest
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView316()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.PaypalPaymentRequest", @"
    SELECT VALUE -- Constructing PaypalPaymentRequest
        [DomainModels.Store.PaypalPaymentRequest](T1.[PaypalPaymentRequest.Request_ID], T1.[PaypalPaymentRequest.Order_ID], T1.PaypalPaymentRequest_ProductID, T1.PaypalPaymentRequest_Price, T1.PaypalPaymentRequest_RequestDate, T1.PaypalPaymentRequest_Status)
    FROM (
        SELECT 
            T.Request_ID AS [PaypalPaymentRequest.Request_ID], 
            T.Order_ID AS [PaypalPaymentRequest.Order_ID], 
            T.ProductID AS PaypalPaymentRequest_ProductID, 
            T.Price AS PaypalPaymentRequest_Price, 
            T.RequestDate AS PaypalPaymentRequest_RequestDate, 
            T.Status AS PaypalPaymentRequest_Status, 
            True AS _from0
        FROM BaseDbContext.PaypalPaymentRequests AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.PaypalPaymentRequests
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView317()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.PaypalPaymentRequests", @"
    SELECT VALUE -- Constructing PaypalPaymentRequests
        [DomainModels.PaypalPaymentRequest](T1.[PaypalPaymentRequest.Request_ID], T1.[PaypalPaymentRequest.Order_ID], T1.PaypalPaymentRequest_ProductID, T1.PaypalPaymentRequest_Price, T1.PaypalPaymentRequest_RequestDate, T1.PaypalPaymentRequest_Status)
    FROM (
        SELECT 
            T.Request_ID AS [PaypalPaymentRequest.Request_ID], 
            T.Order_ID AS [PaypalPaymentRequest.Order_ID], 
            T.ProductID AS PaypalPaymentRequest_ProductID, 
            T.Price AS PaypalPaymentRequest_Price, 
            T.RequestDate AS PaypalPaymentRequest_RequestDate, 
            T.Status AS PaypalPaymentRequest_Status, 
            True AS _from0
        FROM DomainModelsStoreContainer.PaypalPaymentRequest AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.NABTransaction
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView318()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.NABTransaction", @"
    SELECT VALUE -- Constructing NABTransaction
        [DomainModels.Store.NABTransaction](T1.NABTransaction_Id, T1.NABTransaction_EstimateId, T1.NABTransaction_Request, T1.NABTransaction_Response, T1.NABTransaction_datetime)
    FROM (
        SELECT 
            T.Id AS NABTransaction_Id, 
            T.EstimateId AS NABTransaction_EstimateId, 
            T.Request AS NABTransaction_Request, 
            T.Response AS NABTransaction_Response, 
            T.datetime AS NABTransaction_datetime, 
            True AS _from0
        FROM BaseDbContext.NABTransactions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.NABTransactions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView319()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.NABTransactions", @"
    SELECT VALUE -- Constructing NABTransactions
        [DomainModels.NABTransaction](T1.NABTransaction_Id, T1.NABTransaction_EstimateId, T1.NABTransaction_Request, T1.NABTransaction_Response, T1.NABTransaction_datetime)
    FROM (
        SELECT 
            T.Id AS NABTransaction_Id, 
            T.EstimateId AS NABTransaction_EstimateId, 
            T.Request AS NABTransaction_Request, 
            T.Response AS NABTransaction_Response, 
            T.datetime AS NABTransaction_datetime, 
            True AS _from0
        FROM DomainModelsStoreContainer.NABTransaction AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.vw_SaveDesign
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView320()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2069);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_SaveDesign\r\n        [DomainModels.Store.vw");
            viewString.Append("_SaveDesign](T1.[vw_SaveDesign.ItemID], T1.[vw_SaveDesign.AttachmentItemId], T1.");
            viewString.Append("[vw_SaveDesign.AttachmentFileName], T1.[vw_SaveDesign.AttachmentFolderPath], T1.");
            viewString.Append("[vw_SaveDesign.EstimateID], T1.[vw_SaveDesign.ProductName], T1.[vw_SaveDesign.Mi");
            viewString.Append("nPrice], T1.[vw_SaveDesign.IsEnabled], T1.[vw_SaveDesign.IsPublished], T1.[vw_Sa");
            viewString.Append("veDesign.IsArchived], T1.[vw_SaveDesign.InvoiceID], T1.[vw_SaveDesign.ContactID]");
            viewString.Append(", T1.[vw_SaveDesign.CompanyId], T1.[vw_SaveDesign.IsCustomer], T1.[vw_SaveDesign");
            viewString.Append(".RefItemID], T1.[vw_SaveDesign.StatusID], T1.[vw_SaveDesign.StatusName], T1.[vw_");
            viewString.Append("SaveDesign.IsOrderedItem], T1.[vw_SaveDesign.ItemCreationDateTime], T1.[vw_SaveD");
            viewString.Append("esign.TemplateID])\r\n    FROM (\r\n        SELECT \r\n            T.ItemID AS [vw_Sav");
            viewString.Append("eDesign.ItemID], \r\n            T.AttachmentItemId AS [vw_SaveDesign.AttachmentIt");
            viewString.Append("emId], \r\n            T.AttachmentFileName AS [vw_SaveDesign.AttachmentFileName],");
            viewString.Append(" \r\n            T.AttachmentFolderPath AS [vw_SaveDesign.AttachmentFolderPath], \r");
            viewString.Append("\n            T.EstimateID AS [vw_SaveDesign.EstimateID], \r\n            T.Product");
            viewString.Append("Name AS [vw_SaveDesign.ProductName], \r\n            T.MinPrice AS [vw_SaveDesign.");
            viewString.Append("MinPrice], \r\n            T.IsEnabled AS [vw_SaveDesign.IsEnabled], \r\n           ");
            viewString.Append(" T.IsPublished AS [vw_SaveDesign.IsPublished], \r\n            T.IsArchived AS [vw");
            viewString.Append("_SaveDesign.IsArchived], \r\n            T.InvoiceID AS [vw_SaveDesign.InvoiceID],");
            viewString.Append(" \r\n            T.ContactID AS [vw_SaveDesign.ContactID], \r\n            T.Company");
            viewString.Append("Id AS [vw_SaveDesign.CompanyId], \r\n            T.IsCustomer AS [vw_SaveDesign.Is");
            viewString.Append("Customer], \r\n            T.RefItemID AS [vw_SaveDesign.RefItemID], \r\n           ");
            viewString.Append(" T.StatusID AS [vw_SaveDesign.StatusID], \r\n            T.StatusName AS [vw_SaveD");
            viewString.Append("esign.StatusName], \r\n            T.IsOrderedItem AS [vw_SaveDesign.IsOrderedItem");
            viewString.Append("], \r\n            T.ItemCreationDateTime AS [vw_SaveDesign.ItemCreationDateTime],");
            viewString.Append(" \r\n            T.TemplateID AS [vw_SaveDesign.TemplateID], \r\n            True AS");
            viewString.Append(" _from0\r\n        FROM BaseDbContext.SaveDesignViews AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.vw_SaveDesign", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.SaveDesignViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView321()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.SaveDesignViews", "\r\n    SELECT VALUE -- Constructing SaveDesignViews\r\n        [DomainModels.SaveDes" +
                    "ignView](T1.SaveDesignView_ItemID, T1.SaveDesignView_AttachmentItemId, T1.SaveDe" +
                    "signView_AttachmentFileName, T1.SaveDesignView_AttachmentFolderPath, T1.SaveDesi" +
                    "gnView_EstimateID, T1.SaveDesignView_ProductName, T1.SaveDesignView_MinPrice, T1" +
                    ".SaveDesignView_IsEnabled, T1.SaveDesignView_IsPublished, T1.SaveDesignView_IsAr" +
                    "chived, T1.SaveDesignView_InvoiceID, T1.SaveDesignView_ContactID, T1.SaveDesignV" +
                    "iew_CompanyId, T1.SaveDesignView_IsCustomer, T1.SaveDesignView_RefItemID, T1.Sav" +
                    "eDesignView_StatusID, T1.SaveDesignView_StatusName, T1.SaveDesignView_IsOrderedI" +
                    "tem, T1.SaveDesignView_ItemCreationDateTime, T1.SaveDesignView_TemplateID)\r\n    " +
                    "FROM (\r\n        SELECT \r\n            T.ItemID AS SaveDesignView_ItemID, \r\n      " +
                    "      T.AttachmentItemId AS SaveDesignView_AttachmentItemId, \r\n            T.Att" +
                    "achmentFileName AS SaveDesignView_AttachmentFileName, \r\n            T.Attachment" +
                    "FolderPath AS SaveDesignView_AttachmentFolderPath, \r\n            T.EstimateID AS" +
                    " SaveDesignView_EstimateID, \r\n            T.ProductName AS SaveDesignView_Produc" +
                    "tName, \r\n            T.MinPrice AS SaveDesignView_MinPrice, \r\n            T.IsEn" +
                    "abled AS SaveDesignView_IsEnabled, \r\n            T.IsPublished AS SaveDesignView" +
                    "_IsPublished, \r\n            T.IsArchived AS SaveDesignView_IsArchived, \r\n       " +
                    "     T.InvoiceID AS SaveDesignView_InvoiceID, \r\n            T.ContactID AS SaveD" +
                    "esignView_ContactID, \r\n            T.CompanyId AS SaveDesignView_CompanyId, \r\n  " +
                    "          T.IsCustomer AS SaveDesignView_IsCustomer, \r\n            T.RefItemID A" +
                    "S SaveDesignView_RefItemID, \r\n            T.StatusID AS SaveDesignView_StatusID," +
                    " \r\n            T.StatusName AS SaveDesignView_StatusName, \r\n            T.IsOrde" +
                    "redItem AS SaveDesignView_IsOrderedItem, \r\n            T.ItemCreationDateTime AS" +
                    " SaveDesignView_ItemCreationDateTime, \r\n            T.TemplateID AS SaveDesignVi" +
                    "ew_TemplateID, \r\n            True AS _from0\r\n        FROM DomainModelsStoreConta" +
                    "iner.vw_SaveDesign AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MachineGuilotinePtv
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView322()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MachineGuilotinePtv", @"
    SELECT VALUE -- Constructing MachineGuilotinePtv
        [DomainModels.Store.MachineGuilotinePtv](T1.MachineGuilotinePtv_Id, T1.MachineGuilotinePtv_NoofSections, T1.MachineGuilotinePtv_NoofUps, T1.MachineGuilotinePtv_Noofcutswithoutgutters, T1.MachineGuilotinePtv_Noofcutswithgutters, T1.MachineGuilotinePtv_GuilotineId)
    FROM (
        SELECT 
            T.Id AS MachineGuilotinePtv_Id, 
            T.NoofSections AS MachineGuilotinePtv_NoofSections, 
            T.NoofUps AS MachineGuilotinePtv_NoofUps, 
            T.Noofcutswithoutgutters AS MachineGuilotinePtv_Noofcutswithoutgutters, 
            T.Noofcutswithgutters AS MachineGuilotinePtv_Noofcutswithgutters, 
            T.GuilotineId AS MachineGuilotinePtv_GuilotineId, 
            True AS _from0
        FROM BaseDbContext.MachineGuilotinePtvs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MachineGuilotinePtvs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView323()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MachineGuilotinePtvs", @"
    SELECT VALUE -- Constructing MachineGuilotinePtvs
        [DomainModels.MachineGuilotinePtv](T1.MachineGuilotinePtv_Id, T1.MachineGuilotinePtv_NoofSections, T1.MachineGuilotinePtv_NoofUps, T1.MachineGuilotinePtv_Noofcutswithoutgutters, T1.MachineGuilotinePtv_Noofcutswithgutters, T1.MachineGuilotinePtv_GuilotineId)
    FROM (
        SELECT 
            T.Id AS MachineGuilotinePtv_Id, 
            T.NoofSections AS MachineGuilotinePtv_NoofSections, 
            T.NoofUps AS MachineGuilotinePtv_NoofUps, 
            T.Noofcutswithoutgutters AS MachineGuilotinePtv_Noofcutswithoutgutters, 
            T.Noofcutswithgutters AS MachineGuilotinePtv_Noofcutswithgutters, 
            T.GuilotineId AS MachineGuilotinePtv_GuilotineId, 
            True AS _from0
        FROM DomainModelsStoreContainer.MachineGuilotinePtv AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.JobPreference
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView324()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3591);
            viewString.Append("\r\n    SELECT VALUE -- Constructing JobPreference\r\n        [DomainModels.Store.Jo");
            viewString.Append("bPreference](T1.JobPreference_Id, T1.JobPreference_IsDefaultInkColorUsed, T1.Job");
            viewString.Append("Preference_IsDefaultFilmUsed, T1.JobPreference_IsdefaultPlateUsed, T1.JobPrefere");
            viewString.Append("nce_IsDefaultMakereadyUsed, T1.JobPreference_IsDefaultWashupUsed, T1.JobPreferen");
            viewString.Append("ce_IsDefaultPressInstruction, T1.JobPreference_IsWorkingSize, T1.JobPreference_I");
            viewString.Append("sItemSize, T1.JobPreference_IsImpressionCount, T1.JobPreference_IsNumberOfPasses");
            viewString.Append(", T1.JobPreference_IsPrintSheetQty, T1.JobPreference_IsDefaultStockDetail, T1.Jo");
            viewString.Append("bPreference_IsOrderSheetSize, T1.JobPreference_IsSpoilageAllowed, T1.JobPreferen");
            viewString.Append("ce_IsPaperWeight, T1.JobPreference_IsPaperSheetQty, T1.JobPreference_IsDefaultGu");
            viewString.Append("ilotine, T1.JobPreference_IsGuilotineWorkingSize, T1.JobPreference_IsGuilotineIt");
            viewString.Append("emSize, T1.JobPreference_IsNoOfTrims, T1.JobPreference_IsNoOfCuts, T1.JobPrefere");
            viewString.Append("nce_IsInksEstTime, T1.JobPreference_InFilmEstTime, T1.JobPreference_IsPlateEstTi");
            viewString.Append("me, T1.JobPreference_IsWashupEstTime, T1.JobPreference_IsMakereadyEstTime, T1.Jo");
            viewString.Append("bPreference_IsPressEstTime, T1.JobPreference_IsPaperEstTime, T1.JobPreference_Is");
            viewString.Append("GuillotineEstTime, T1.JobPreference_IsReelMakeReady, T1.JobPreference_IsReelMake");
            viewString.Append("ReadyTime, T1.JobPreference_SystemSiteId)\r\n    FROM (\r\n        SELECT \r\n        ");
            viewString.Append("    T.Id AS JobPreference_Id, \r\n            T.IsDefaultInkColorUsed AS JobPrefer");
            viewString.Append("ence_IsDefaultInkColorUsed, \r\n            T.IsDefaultFilmUsed AS JobPreference_I");
            viewString.Append("sDefaultFilmUsed, \r\n            T.IsdefaultPlateUsed AS JobPreference_IsdefaultP");
            viewString.Append("lateUsed, \r\n            T.IsDefaultMakereadyUsed AS JobPreference_IsDefaultMaker");
            viewString.Append("eadyUsed, \r\n            T.IsDefaultWashupUsed AS JobPreference_IsDefaultWashupUs");
            viewString.Append("ed, \r\n            T.IsDefaultPressInstruction AS JobPreference_IsDefaultPressIns");
            viewString.Append("truction, \r\n            T.IsWorkingSize AS JobPreference_IsWorkingSize, \r\n      ");
            viewString.Append("      T.IsItemSize AS JobPreference_IsItemSize, \r\n            T.IsImpressionCoun");
            viewString.Append("t AS JobPreference_IsImpressionCount, \r\n            T.IsNumberOfPasses AS JobPre");
            viewString.Append("ference_IsNumberOfPasses, \r\n            T.IsPrintSheetQty AS JobPreference_IsPri");
            viewString.Append("ntSheetQty, \r\n            T.IsDefaultStockDetail AS JobPreference_IsDefaultStock");
            viewString.Append("Detail, \r\n            T.IsOrderSheetSize AS JobPreference_IsOrderSheetSize, \r\n  ");
            viewString.Append("          T.IsSpoilageAllowed AS JobPreference_IsSpoilageAllowed, \r\n            ");
            viewString.Append("T.IsPaperWeight AS JobPreference_IsPaperWeight, \r\n            T.IsPaperSheetQty ");
            viewString.Append("AS JobPreference_IsPaperSheetQty, \r\n            T.IsDefaultGuilotine AS JobPrefe");
            viewString.Append("rence_IsDefaultGuilotine, \r\n            T.IsGuilotineWorkingSize AS JobPreferenc");
            viewString.Append("e_IsGuilotineWorkingSize, \r\n            T.IsGuilotineItemSize AS JobPreference_I");
            viewString.Append("sGuilotineItemSize, \r\n            T.IsNoOfTrims AS JobPreference_IsNoOfTrims, \r\n");
            viewString.Append("            T.IsNoOfCuts AS JobPreference_IsNoOfCuts, \r\n            T.IsInksEstT");
            viewString.Append("ime AS JobPreference_IsInksEstTime, \r\n            T.InFilmEstTime AS JobPreferen");
            viewString.Append("ce_InFilmEstTime, \r\n            T.IsPlateEstTime AS JobPreference_IsPlateEstTime");
            viewString.Append(", \r\n            T.IsWashupEstTime AS JobPreference_IsWashupEstTime, \r\n          ");
            viewString.Append("  T.IsMakereadyEstTime AS JobPreference_IsMakereadyEstTime, \r\n            T.IsPr");
            viewString.Append("essEstTime AS JobPreference_IsPressEstTime, \r\n            T.IsPaperEstTime AS Jo");
            viewString.Append("bPreference_IsPaperEstTime, \r\n            T.IsGuillotineEstTime AS JobPreference");
            viewString.Append("_IsGuillotineEstTime, \r\n            T.IsReelMakeReady AS JobPreference_IsReelMak");
            viewString.Append("eReady, \r\n            T.IsReelMakeReadyTime AS JobPreference_IsReelMakeReadyTime");
            viewString.Append(", \r\n            T.SystemSiteId AS JobPreference_SystemSiteId, \r\n            True");
            viewString.Append(" AS _from0\r\n        FROM BaseDbContext.JobPreferences AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.JobPreference", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.JobPreferences
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView325()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3598);
            viewString.Append("\r\n    SELECT VALUE -- Constructing JobPreferences\r\n        [DomainModels.JobPref");
            viewString.Append("erence](T1.JobPreference_Id, T1.JobPreference_IsDefaultInkColorUsed, T1.JobPrefe");
            viewString.Append("rence_IsDefaultFilmUsed, T1.JobPreference_IsdefaultPlateUsed, T1.JobPreference_I");
            viewString.Append("sDefaultMakereadyUsed, T1.JobPreference_IsDefaultWashupUsed, T1.JobPreference_Is");
            viewString.Append("DefaultPressInstruction, T1.JobPreference_IsWorkingSize, T1.JobPreference_IsItem");
            viewString.Append("Size, T1.JobPreference_IsImpressionCount, T1.JobPreference_IsNumberOfPasses, T1.");
            viewString.Append("JobPreference_IsPrintSheetQty, T1.JobPreference_IsDefaultStockDetail, T1.JobPref");
            viewString.Append("erence_IsOrderSheetSize, T1.JobPreference_IsSpoilageAllowed, T1.JobPreference_Is");
            viewString.Append("PaperWeight, T1.JobPreference_IsPaperSheetQty, T1.JobPreference_IsDefaultGuiloti");
            viewString.Append("ne, T1.JobPreference_IsGuilotineWorkingSize, T1.JobPreference_IsGuilotineItemSiz");
            viewString.Append("e, T1.JobPreference_IsNoOfTrims, T1.JobPreference_IsNoOfCuts, T1.JobPreference_I");
            viewString.Append("sInksEstTime, T1.JobPreference_InFilmEstTime, T1.JobPreference_IsPlateEstTime, T");
            viewString.Append("1.JobPreference_IsWashupEstTime, T1.JobPreference_IsMakereadyEstTime, T1.JobPref");
            viewString.Append("erence_IsPressEstTime, T1.JobPreference_IsPaperEstTime, T1.JobPreference_IsGuill");
            viewString.Append("otineEstTime, T1.JobPreference_IsReelMakeReady, T1.JobPreference_IsReelMakeReady");
            viewString.Append("Time, T1.JobPreference_SystemSiteId)\r\n    FROM (\r\n        SELECT \r\n            T");
            viewString.Append(".Id AS JobPreference_Id, \r\n            T.IsDefaultInkColorUsed AS JobPreference_");
            viewString.Append("IsDefaultInkColorUsed, \r\n            T.IsDefaultFilmUsed AS JobPreference_IsDefa");
            viewString.Append("ultFilmUsed, \r\n            T.IsdefaultPlateUsed AS JobPreference_IsdefaultPlateU");
            viewString.Append("sed, \r\n            T.IsDefaultMakereadyUsed AS JobPreference_IsDefaultMakereadyU");
            viewString.Append("sed, \r\n            T.IsDefaultWashupUsed AS JobPreference_IsDefaultWashupUsed, \r");
            viewString.Append("\n            T.IsDefaultPressInstruction AS JobPreference_IsDefaultPressInstruct");
            viewString.Append("ion, \r\n            T.IsWorkingSize AS JobPreference_IsWorkingSize, \r\n           ");
            viewString.Append(" T.IsItemSize AS JobPreference_IsItemSize, \r\n            T.IsImpressionCount AS ");
            viewString.Append("JobPreference_IsImpressionCount, \r\n            T.IsNumberOfPasses AS JobPreferen");
            viewString.Append("ce_IsNumberOfPasses, \r\n            T.IsPrintSheetQty AS JobPreference_IsPrintShe");
            viewString.Append("etQty, \r\n            T.IsDefaultStockDetail AS JobPreference_IsDefaultStockDetai");
            viewString.Append("l, \r\n            T.IsOrderSheetSize AS JobPreference_IsOrderSheetSize, \r\n       ");
            viewString.Append("     T.IsSpoilageAllowed AS JobPreference_IsSpoilageAllowed, \r\n            T.IsP");
            viewString.Append("aperWeight AS JobPreference_IsPaperWeight, \r\n            T.IsPaperSheetQty AS Jo");
            viewString.Append("bPreference_IsPaperSheetQty, \r\n            T.IsDefaultGuilotine AS JobPreference");
            viewString.Append("_IsDefaultGuilotine, \r\n            T.IsGuilotineWorkingSize AS JobPreference_IsG");
            viewString.Append("uilotineWorkingSize, \r\n            T.IsGuilotineItemSize AS JobPreference_IsGuil");
            viewString.Append("otineItemSize, \r\n            T.IsNoOfTrims AS JobPreference_IsNoOfTrims, \r\n     ");
            viewString.Append("       T.IsNoOfCuts AS JobPreference_IsNoOfCuts, \r\n            T.IsInksEstTime A");
            viewString.Append("S JobPreference_IsInksEstTime, \r\n            T.InFilmEstTime AS JobPreference_In");
            viewString.Append("FilmEstTime, \r\n            T.IsPlateEstTime AS JobPreference_IsPlateEstTime, \r\n ");
            viewString.Append("           T.IsWashupEstTime AS JobPreference_IsWashupEstTime, \r\n            T.I");
            viewString.Append("sMakereadyEstTime AS JobPreference_IsMakereadyEstTime, \r\n            T.IsPressEs");
            viewString.Append("tTime AS JobPreference_IsPressEstTime, \r\n            T.IsPaperEstTime AS JobPref");
            viewString.Append("erence_IsPaperEstTime, \r\n            T.IsGuillotineEstTime AS JobPreference_IsGu");
            viewString.Append("illotineEstTime, \r\n            T.IsReelMakeReady AS JobPreference_IsReelMakeRead");
            viewString.Append("y, \r\n            T.IsReelMakeReadyTime AS JobPreference_IsReelMakeReadyTime, \r\n ");
            viewString.Append("           T.SystemSiteId AS JobPreference_SystemSiteId, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM DomainModelsStoreContainer.JobPreference AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.JobPreferences", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.InkPlateSide
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView326()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.InkPlateSide", @"
    SELECT VALUE -- Constructing InkPlateSide
        [DomainModels.Store.InkPlateSide](T1.InkPlateSide_PlateInkId, T1.InkPlateSide_InkTitle, T1.InkPlateSide_PlateInkDescription, T1.InkPlateSide_isDoubleSided, T1.InkPlateSide_PlateInkSide1, T1.InkPlateSide_PlateInkSide2)
    FROM (
        SELECT 
            T.PlateInkId AS InkPlateSide_PlateInkId, 
            T.InkTitle AS InkPlateSide_InkTitle, 
            T.PlateInkDescription AS InkPlateSide_PlateInkDescription, 
            T.isDoubleSided AS InkPlateSide_isDoubleSided, 
            T.PlateInkSide1 AS InkPlateSide_PlateInkSide1, 
            T.PlateInkSide2 AS InkPlateSide_PlateInkSide2, 
            True AS _from0
        FROM BaseDbContext.InkPlateSides AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.InkPlateSides
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView327()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.InkPlateSides", @"
    SELECT VALUE -- Constructing InkPlateSides
        [DomainModels.InkPlateSide](T1.InkPlateSide_PlateInkId, T1.InkPlateSide_InkTitle, T1.InkPlateSide_PlateInkDescription, T1.InkPlateSide_isDoubleSided, T1.InkPlateSide_PlateInkSide1, T1.InkPlateSide_PlateInkSide2)
    FROM (
        SELECT 
            T.PlateInkId AS InkPlateSide_PlateInkId, 
            T.InkTitle AS InkPlateSide_InkTitle, 
            T.PlateInkDescription AS InkPlateSide_PlateInkDescription, 
            T.isDoubleSided AS InkPlateSide_isDoubleSided, 
            T.PlateInkSide1 AS InkPlateSide_PlateInkSide1, 
            T.PlateInkSide2 AS InkPlateSide_PlateInkSide2, 
            True AS _from0
        FROM DomainModelsStoreContainer.InkPlateSide AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.vw_JobCardReport
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView328()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7966);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_JobCardReport\r\n        [DomainModels.Store");
            viewString.Append(".vw_JobCardReport](T1.[vw_JobCardReport.EstimateId], T1.[vw_JobCardReport.ItemId");
            viewString.Append("], T1.[vw_JobCardReport.UserNotes], T1.[vw_JobCardReport.ItemCode], T1.[vw_JobCa");
            viewString.Append("rdReport.FirstName], T1.[vw_JobCardReport.ProductCode], T1.[vw_JobCardReport.Job");
            viewString.Append("Description1], T1.[vw_JobCardReport.JobDescription2], T1.[vw_JobCardReport.JobDe");
            viewString.Append("scription3], T1.[vw_JobCardReport.JobDescription4], T1.[vw_JobCardReport.JobDesc");
            viewString.Append("ription5], T1.[vw_JobCardReport.JobDescription6], T1.[vw_JobCardReport.JobDescri");
            viewString.Append("ption7], T1.[vw_JobCardReport.JobDescriptionTitle1], T1.[vw_JobCardReport.JobDes");
            viewString.Append("criptionTitle2], T1.[vw_JobCardReport.JobDescriptionTitle3], T1.[vw_JobCardRepor");
            viewString.Append("t.JobDescriptionTitle4], T1.[vw_JobCardReport.JobDescriptionTitle5], T1.[vw_JobC");
            viewString.Append("ardReport.JobDescriptionTitle6], T1.[vw_JobCardReport.JobDescriptionTitle7], T1.");
            viewString.Append("[vw_JobCardReport.ContactFullName], T1.[vw_JobCardReport.MiddleName], T1.[vw_Job");
            viewString.Append("CardReport.LastName], T1.[vw_JobCardReport.Mobile], T1.[vw_JobCardReport.Company");
            viewString.Append("Name], T1.[vw_JobCardReport.Address1], T1.[vw_JobCardReport.AddressName], T1.[vw");
            viewString.Append("_JobCardReport.Address2], T1.[vw_JobCardReport.Address3], T1.[vw_JobCardReport.C");
            viewString.Append("ity], T1.[vw_JobCardReport.StateId], T1.[vw_JobCardReport.CountryId], T1.[vw_Job");
            viewString.Append("CardReport.PostCode], T1.[vw_JobCardReport.Fax], T1.[vw_JobCardReport.Email], T1");
            viewString.Append(".[vw_JobCardReport.URL], T1.[vw_JobCardReport.Tel1], T1.[vw_JobCardReport.Qty1],");
            viewString.Append(" T1.[vw_JobCardReport.ProductName], T1.[vw_JobCardReport.WebDescription], T1.[vw");
            viewString.Append("_JobCardReport.JobDescription], T1.[vw_JobCardReport.SectionName], T1.[vw_JobCar");
            viewString.Append("dReport.SectionNo], T1.[vw_JobCardReport.BAddress1], T1.[vw_JobCardReport.BAddre");
            viewString.Append("ss2], T1.[vw_JobCardReport.BCity], T1.[vw_JobCardReport.BState], T1.[vw_JobCardR");
            viewString.Append("eport.BEmail], T1.[vw_JobCardReport.FinishDeliveryDate], T1.[vw_JobCardReport.Cr");
            viewString.Append("eationDate], T1.[vw_JobCardReport.StartDeliveryDate], T1.[vw_JobCardReport.Custo");
            viewString.Append("merPO], T1.[vw_JobCardReport.BAddressName], T1.[vw_JobCardReport.FullName], T1.[");
            viewString.Append("vw_JobCardReport.Order_Date], T1.[vw_JobCardReport.Qty1WorkInstructions], T1.[vw");
            viewString.Append("_JobCardReport.CostCenterName], T1.[vw_JobCardReport.ItemNotes], T1.[vw_JobCardR");
            viewString.Append("eport.Qty1NetTotal], T1.[vw_JobCardReport.Qty1Tax1Value], T1.[vw_JobCardReport.G");
            viewString.Append("rossTotal], T1.[vw_JobCardReport.FullProductName], T1.[vw_JobCardReport.BannerPa");
            viewString.Append("th], T1.[vw_JobCardReport.EstimateDescription], T1.[vw_JobCardReport.ReportBanne");
            viewString.Append("r], T1.[vw_JobCardReport.OtherItems], T1.[vw_JobCardReport.BPostCode], T1.[vw_Jo");
            viewString.Append("bCardReport.BCountry], T1.[vw_JobCardReport.AttachmentsList], T1.[vw_JobCardRepo");
            viewString.Append("rt.PressName], T1.[vw_JobCardReport.StockName], T1.[vw_JobCardReport.DirectOrder");
            viewString.Append("Label], T1.[vw_JobCardReport.JobCode], T1.[vw_JobCardReport.PaymentType], T1.[vw");
            viewString.Append("_JobCardReport.PaymentRefNo], T1.[vw_JobCardReport.DeliveryMethod], T1.[vw_JobCa");
            viewString.Append("rdReport.CurrencySymbol], T1.[vw_JobCardReport.StateTaxLabel])\r\n    FROM (\r\n    ");
            viewString.Append("    SELECT \r\n            T.EstimateId AS [vw_JobCardReport.EstimateId], \r\n      ");
            viewString.Append("      T.ItemId AS [vw_JobCardReport.ItemId], \r\n            T.UserNotes AS [vw_Jo");
            viewString.Append("bCardReport.UserNotes], \r\n            T.ItemCode AS [vw_JobCardReport.ItemCode],");
            viewString.Append(" \r\n            T.FirstName AS [vw_JobCardReport.FirstName], \r\n            T.Prod");
            viewString.Append("uctCode AS [vw_JobCardReport.ProductCode], \r\n            T.JobDescription1 AS [v");
            viewString.Append("w_JobCardReport.JobDescription1], \r\n            T.JobDescription2 AS [vw_JobCard");
            viewString.Append("Report.JobDescription2], \r\n            T.JobDescription3 AS [vw_JobCardReport.Jo");
            viewString.Append("bDescription3], \r\n            T.JobDescription4 AS [vw_JobCardReport.JobDescript");
            viewString.Append("ion4], \r\n            T.JobDescription5 AS [vw_JobCardReport.JobDescription5], \r\n");
            viewString.Append("            T.JobDescription6 AS [vw_JobCardReport.JobDescription6], \r\n         ");
            viewString.Append("   T.JobDescription7 AS [vw_JobCardReport.JobDescription7], \r\n            T.JobD");
            viewString.Append("escriptionTitle1 AS [vw_JobCardReport.JobDescriptionTitle1], \r\n            T.Job");
            viewString.Append("DescriptionTitle2 AS [vw_JobCardReport.JobDescriptionTitle2], \r\n            T.Jo");
            viewString.Append("bDescriptionTitle3 AS [vw_JobCardReport.JobDescriptionTitle3], \r\n            T.J");
            viewString.Append("obDescriptionTitle4 AS [vw_JobCardReport.JobDescriptionTitle4], \r\n            T.");
            viewString.Append("JobDescriptionTitle5 AS [vw_JobCardReport.JobDescriptionTitle5], \r\n            T");
            viewString.Append(".JobDescriptionTitle6 AS [vw_JobCardReport.JobDescriptionTitle6], \r\n            ");
            viewString.Append("T.JobDescriptionTitle7 AS [vw_JobCardReport.JobDescriptionTitle7], \r\n           ");
            viewString.Append(" T.ContactFullName AS [vw_JobCardReport.ContactFullName], \r\n            T.Middle");
            viewString.Append("Name AS [vw_JobCardReport.MiddleName], \r\n            T.LastName AS [vw_JobCardRe");
            viewString.Append("port.LastName], \r\n            T.Mobile AS [vw_JobCardReport.Mobile], \r\n         ");
            viewString.Append("   T.CompanyName AS [vw_JobCardReport.CompanyName], \r\n            T.Address1 AS ");
            viewString.Append("[vw_JobCardReport.Address1], \r\n            T.AddressName AS [vw_JobCardReport.Ad");
            viewString.Append("dressName], \r\n            T.Address2 AS [vw_JobCardReport.Address2], \r\n         ");
            viewString.Append("   T.Address3 AS [vw_JobCardReport.Address3], \r\n            T.City AS [vw_JobCar");
            viewString.Append("dReport.City], \r\n            T.StateId AS [vw_JobCardReport.StateId], \r\n        ");
            viewString.Append("    T.CountryId AS [vw_JobCardReport.CountryId], \r\n            T.PostCode AS [vw");
            viewString.Append("_JobCardReport.PostCode], \r\n            T.Fax AS [vw_JobCardReport.Fax], \r\n     ");
            viewString.Append("       T.Email AS [vw_JobCardReport.Email], \r\n            T.URL AS [vw_JobCardRe");
            viewString.Append("port.URL], \r\n            T.Tel1 AS [vw_JobCardReport.Tel1], \r\n            T.Qty1");
            viewString.Append(" AS [vw_JobCardReport.Qty1], \r\n            T.ProductName AS [vw_JobCardReport.Pr");
            viewString.Append("oductName], \r\n            T.WebDescription AS [vw_JobCardReport.WebDescription],");
            viewString.Append(" \r\n            T.JobDescription AS [vw_JobCardReport.JobDescription], \r\n        ");
            viewString.Append("    T.SectionName AS [vw_JobCardReport.SectionName], \r\n            T.SectionNo A");
            viewString.Append("S [vw_JobCardReport.SectionNo], \r\n            T.BAddress1 AS [vw_JobCardReport.B");
            viewString.Append("Address1], \r\n            T.BAddress2 AS [vw_JobCardReport.BAddress2], \r\n        ");
            viewString.Append("    T.BCity AS [vw_JobCardReport.BCity], \r\n            T.BState AS [vw_JobCardRe");
            viewString.Append("port.BState], \r\n            T.BEmail AS [vw_JobCardReport.BEmail], \r\n           ");
            viewString.Append(" T.FinishDeliveryDate AS [vw_JobCardReport.FinishDeliveryDate], \r\n            T.");
            viewString.Append("CreationDate AS [vw_JobCardReport.CreationDate], \r\n            T.StartDeliveryDa");
            viewString.Append("te AS [vw_JobCardReport.StartDeliveryDate], \r\n            T.CustomerPO AS [vw_Jo");
            viewString.Append("bCardReport.CustomerPO], \r\n            T.BAddressName AS [vw_JobCardReport.BAddr");
            viewString.Append("essName], \r\n            T.FullName AS [vw_JobCardReport.FullName], \r\n           ");
            viewString.Append(" T.Order_Date AS [vw_JobCardReport.Order_Date], \r\n            T.Qty1WorkInstruct");
            viewString.Append("ions AS [vw_JobCardReport.Qty1WorkInstructions], \r\n            T.CostCenterName ");
            viewString.Append("AS [vw_JobCardReport.CostCenterName], \r\n            T.ItemNotes AS [vw_JobCardRe");
            viewString.Append("port.ItemNotes], \r\n            T.Qty1NetTotal AS [vw_JobCardReport.Qty1NetTotal]");
            viewString.Append(", \r\n            T.Qty1Tax1Value AS [vw_JobCardReport.Qty1Tax1Value], \r\n         ");
            viewString.Append("   T.GrossTotal AS [vw_JobCardReport.GrossTotal], \r\n            T.FullProductNam");
            viewString.Append("e AS [vw_JobCardReport.FullProductName], \r\n            T.BannerPath AS [vw_JobCa");
            viewString.Append("rdReport.BannerPath], \r\n            T.EstimateDescription AS [vw_JobCardReport.E");
            viewString.Append("stimateDescription], \r\n            T.ReportBanner AS [vw_JobCardReport.ReportBan");
            viewString.Append("ner], \r\n            T.OtherItems AS [vw_JobCardReport.OtherItems], \r\n           ");
            viewString.Append(" T.BPostCode AS [vw_JobCardReport.BPostCode], \r\n            T.BCountry AS [vw_Jo");
            viewString.Append("bCardReport.BCountry], \r\n            T.AttachmentsList AS [vw_JobCardReport.Atta");
            viewString.Append("chmentsList], \r\n            T.PressName AS [vw_JobCardReport.PressName], \r\n     ");
            viewString.Append("       T.StockName AS [vw_JobCardReport.StockName], \r\n            T.DirectOrderL");
            viewString.Append("abel AS [vw_JobCardReport.DirectOrderLabel], \r\n            T.JobCode AS [vw_JobC");
            viewString.Append("ardReport.JobCode], \r\n            T.PaymentType AS [vw_JobCardReport.PaymentType");
            viewString.Append("], \r\n            T.PaymentRefNo AS [vw_JobCardReport.PaymentRefNo], \r\n          ");
            viewString.Append("  T.DeliveryMethod AS [vw_JobCardReport.DeliveryMethod], \r\n            T.Currenc");
            viewString.Append("ySymbol AS [vw_JobCardReport.CurrencySymbol], \r\n            T.StateTaxLabel AS [");
            viewString.Append("vw_JobCardReport.StateTaxLabel], \r\n            True AS _from0\r\n        FROM Base");
            viewString.Append("DbContext.JobCardReportViews AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.vw_JobCardReport", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.JobCardReportViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView329()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7822);
            viewString.Append("\r\n    SELECT VALUE -- Constructing JobCardReportViews\r\n        [DomainModels.Job");
            viewString.Append("CardReportView](T1.JobCardReportView_EstimateId, T1.JobCardReportView_ItemId, T1");
            viewString.Append(".JobCardReportView_UserNotes, T1.JobCardReportView_ItemCode, T1.JobCardReportVie");
            viewString.Append("w_FirstName, T1.JobCardReportView_ProductCode, T1.JobCardReportView_JobDescripti");
            viewString.Append("on1, T1.JobCardReportView_JobDescription2, T1.JobCardReportView_JobDescription3,");
            viewString.Append(" T1.JobCardReportView_JobDescription4, T1.JobCardReportView_JobDescription5, T1.");
            viewString.Append("JobCardReportView_JobDescription6, T1.JobCardReportView_JobDescription7, T1.JobC");
            viewString.Append("ardReportView_JobDescriptionTitle1, T1.JobCardReportView_JobDescriptionTitle2, T");
            viewString.Append("1.JobCardReportView_JobDescriptionTitle3, T1.JobCardReportView_JobDescriptionTit");
            viewString.Append("le4, T1.JobCardReportView_JobDescriptionTitle5, T1.JobCardReportView_JobDescript");
            viewString.Append("ionTitle6, T1.JobCardReportView_JobDescriptionTitle7, T1.JobCardReportView_Conta");
            viewString.Append("ctFullName, T1.JobCardReportView_MiddleName, T1.JobCardReportView_LastName, T1.J");
            viewString.Append("obCardReportView_Mobile, T1.JobCardReportView_CompanyName, T1.JobCardReportView_");
            viewString.Append("Address1, T1.JobCardReportView_AddressName, T1.JobCardReportView_Address2, T1.Jo");
            viewString.Append("bCardReportView_Address3, T1.JobCardReportView_City, T1.JobCardReportView_StateI");
            viewString.Append("d, T1.JobCardReportView_CountryId, T1.JobCardReportView_PostCode, T1.JobCardRepo");
            viewString.Append("rtView_Fax, T1.JobCardReportView_Email, T1.JobCardReportView_URL, T1.JobCardRepo");
            viewString.Append("rtView_Tel1, T1.JobCardReportView_Qty1, T1.JobCardReportView_ProductName, T1.Job");
            viewString.Append("CardReportView_WebDescription, T1.JobCardReportView_JobDescription, T1.JobCardRe");
            viewString.Append("portView_SectionName, T1.JobCardReportView_SectionNo, T1.JobCardReportView_BAddr");
            viewString.Append("ess1, T1.JobCardReportView_BAddress2, T1.JobCardReportView_BCity, T1.JobCardRepo");
            viewString.Append("rtView_BState, T1.JobCardReportView_BEmail, T1.JobCardReportView_FinishDeliveryD");
            viewString.Append("ate, T1.JobCardReportView_CreationDate, T1.JobCardReportView_StartDeliveryDate, ");
            viewString.Append("T1.JobCardReportView_CustomerPO, T1.JobCardReportView_BAddressName, T1.JobCardRe");
            viewString.Append("portView_FullName, T1.[JobCardReportView.Order_Date], T1.JobCardReportView_Qty1W");
            viewString.Append("orkInstructions, T1.JobCardReportView_CostCenterName, T1.JobCardReportView_ItemN");
            viewString.Append("otes, T1.JobCardReportView_Qty1NetTotal, T1.JobCardReportView_Qty1Tax1Value, T1.");
            viewString.Append("JobCardReportView_GrossTotal, T1.JobCardReportView_FullProductName, T1.JobCardRe");
            viewString.Append("portView_BannerPath, T1.JobCardReportView_EstimateDescription, T1.JobCardReportV");
            viewString.Append("iew_ReportBanner, T1.JobCardReportView_OtherItems, T1.JobCardReportView_BPostCod");
            viewString.Append("e, T1.JobCardReportView_BCountry, T1.JobCardReportView_AttachmentsList, T1.JobCa");
            viewString.Append("rdReportView_PressName, T1.JobCardReportView_StockName, T1.JobCardReportView_Dir");
            viewString.Append("ectOrderLabel, T1.JobCardReportView_JobCode, T1.JobCardReportView_PaymentType, T");
            viewString.Append("1.JobCardReportView_PaymentRefNo, T1.JobCardReportView_DeliveryMethod, T1.JobCar");
            viewString.Append("dReportView_CurrencySymbol, T1.JobCardReportView_StateTaxLabel)\r\n    FROM (\r\n   ");
            viewString.Append("     SELECT \r\n            T.EstimateId AS JobCardReportView_EstimateId, \r\n      ");
            viewString.Append("      T.ItemId AS JobCardReportView_ItemId, \r\n            T.UserNotes AS JobCard");
            viewString.Append("ReportView_UserNotes, \r\n            T.ItemCode AS JobCardReportView_ItemCode, \r\n");
            viewString.Append("            T.FirstName AS JobCardReportView_FirstName, \r\n            T.ProductC");
            viewString.Append("ode AS JobCardReportView_ProductCode, \r\n            T.JobDescription1 AS JobCard");
            viewString.Append("ReportView_JobDescription1, \r\n            T.JobDescription2 AS JobCardReportView");
            viewString.Append("_JobDescription2, \r\n            T.JobDescription3 AS JobCardReportView_JobDescri");
            viewString.Append("ption3, \r\n            T.JobDescription4 AS JobCardReportView_JobDescription4, \r\n");
            viewString.Append("            T.JobDescription5 AS JobCardReportView_JobDescription5, \r\n          ");
            viewString.Append("  T.JobDescription6 AS JobCardReportView_JobDescription6, \r\n            T.JobDes");
            viewString.Append("cription7 AS JobCardReportView_JobDescription7, \r\n            T.JobDescriptionTi");
            viewString.Append("tle1 AS JobCardReportView_JobDescriptionTitle1, \r\n            T.JobDescriptionTi");
            viewString.Append("tle2 AS JobCardReportView_JobDescriptionTitle2, \r\n            T.JobDescriptionTi");
            viewString.Append("tle3 AS JobCardReportView_JobDescriptionTitle3, \r\n            T.JobDescriptionTi");
            viewString.Append("tle4 AS JobCardReportView_JobDescriptionTitle4, \r\n            T.JobDescriptionTi");
            viewString.Append("tle5 AS JobCardReportView_JobDescriptionTitle5, \r\n            T.JobDescriptionTi");
            viewString.Append("tle6 AS JobCardReportView_JobDescriptionTitle6, \r\n            T.JobDescriptionTi");
            viewString.Append("tle7 AS JobCardReportView_JobDescriptionTitle7, \r\n            T.ContactFullName ");
            viewString.Append("AS JobCardReportView_ContactFullName, \r\n            T.MiddleName AS JobCardRepor");
            viewString.Append("tView_MiddleName, \r\n            T.LastName AS JobCardReportView_LastName, \r\n    ");
            viewString.Append("        T.Mobile AS JobCardReportView_Mobile, \r\n            T.CompanyName AS Job");
            viewString.Append("CardReportView_CompanyName, \r\n            T.Address1 AS JobCardReportView_Addres");
            viewString.Append("s1, \r\n            T.AddressName AS JobCardReportView_AddressName, \r\n            ");
            viewString.Append("T.Address2 AS JobCardReportView_Address2, \r\n            T.Address3 AS JobCardRep");
            viewString.Append("ortView_Address3, \r\n            T.City AS JobCardReportView_City, \r\n            ");
            viewString.Append("T.StateId AS JobCardReportView_StateId, \r\n            T.CountryId AS JobCardRepo");
            viewString.Append("rtView_CountryId, \r\n            T.PostCode AS JobCardReportView_PostCode, \r\n    ");
            viewString.Append("        T.Fax AS JobCardReportView_Fax, \r\n            T.Email AS JobCardReportVi");
            viewString.Append("ew_Email, \r\n            T.URL AS JobCardReportView_URL, \r\n            T.Tel1 AS ");
            viewString.Append("JobCardReportView_Tel1, \r\n            T.Qty1 AS JobCardReportView_Qty1, \r\n      ");
            viewString.Append("      T.ProductName AS JobCardReportView_ProductName, \r\n            T.WebDescrip");
            viewString.Append("tion AS JobCardReportView_WebDescription, \r\n            T.JobDescription AS JobC");
            viewString.Append("ardReportView_JobDescription, \r\n            T.SectionName AS JobCardReportView_S");
            viewString.Append("ectionName, \r\n            T.SectionNo AS JobCardReportView_SectionNo, \r\n        ");
            viewString.Append("    T.BAddress1 AS JobCardReportView_BAddress1, \r\n            T.BAddress2 AS Job");
            viewString.Append("CardReportView_BAddress2, \r\n            T.BCity AS JobCardReportView_BCity, \r\n  ");
            viewString.Append("          T.BState AS JobCardReportView_BState, \r\n            T.BEmail AS JobCar");
            viewString.Append("dReportView_BEmail, \r\n            T.FinishDeliveryDate AS JobCardReportView_Fini");
            viewString.Append("shDeliveryDate, \r\n            T.CreationDate AS JobCardReportView_CreationDate, ");
            viewString.Append("\r\n            T.StartDeliveryDate AS JobCardReportView_StartDeliveryDate, \r\n    ");
            viewString.Append("        T.CustomerPO AS JobCardReportView_CustomerPO, \r\n            T.BAddressNa");
            viewString.Append("me AS JobCardReportView_BAddressName, \r\n            T.FullName AS JobCardReportV");
            viewString.Append("iew_FullName, \r\n            T.Order_Date AS [JobCardReportView.Order_Date], \r\n  ");
            viewString.Append("          T.Qty1WorkInstructions AS JobCardReportView_Qty1WorkInstructions, \r\n  ");
            viewString.Append("          T.CostCenterName AS JobCardReportView_CostCenterName, \r\n            T.");
            viewString.Append("ItemNotes AS JobCardReportView_ItemNotes, \r\n            T.Qty1NetTotal AS JobCar");
            viewString.Append("dReportView_Qty1NetTotal, \r\n            T.Qty1Tax1Value AS JobCardReportView_Qty");
            viewString.Append("1Tax1Value, \r\n            T.GrossTotal AS JobCardReportView_GrossTotal, \r\n      ");
            viewString.Append("      T.FullProductName AS JobCardReportView_FullProductName, \r\n            T.Ba");
            viewString.Append("nnerPath AS JobCardReportView_BannerPath, \r\n            T.EstimateDescription AS");
            viewString.Append(" JobCardReportView_EstimateDescription, \r\n            T.ReportBanner AS JobCardR");
            viewString.Append("eportView_ReportBanner, \r\n            T.OtherItems AS JobCardReportView_OtherIte");
            viewString.Append("ms, \r\n            T.BPostCode AS JobCardReportView_BPostCode, \r\n            T.BC");
            viewString.Append("ountry AS JobCardReportView_BCountry, \r\n            T.AttachmentsList AS JobCard");
            viewString.Append("ReportView_AttachmentsList, \r\n            T.PressName AS JobCardReportView_Press");
            viewString.Append("Name, \r\n            T.StockName AS JobCardReportView_StockName, \r\n            T.");
            viewString.Append("DirectOrderLabel AS JobCardReportView_DirectOrderLabel, \r\n            T.JobCode ");
            viewString.Append("AS JobCardReportView_JobCode, \r\n            T.PaymentType AS JobCardReportView_P");
            viewString.Append("aymentType, \r\n            T.PaymentRefNo AS JobCardReportView_PaymentRefNo, \r\n  ");
            viewString.Append("          T.DeliveryMethod AS JobCardReportView_DeliveryMethod, \r\n            T.");
            viewString.Append("CurrencySymbol AS JobCardReportView_CurrencySymbol, \r\n            T.StateTaxLabe");
            viewString.Append("l AS JobCardReportView_StateTaxLabel, \r\n            True AS _from0\r\n        FROM");
            viewString.Append(" DomainModelsStoreContainer.vw_JobCardReport AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.JobCardReportViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.vw_OrderReport
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView330()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6991);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_OrderReport\r\n        [DomainModels.Store.v");
            viewString.Append("w_OrderReport](T1.[vw_OrderReport.ItemID], T1.[vw_OrderReport.Title], T1.[vw_Ord");
            viewString.Append("erReport.Qty1], T1.[vw_OrderReport.Qty2], T1.[vw_OrderReport.Qty3], T1.[vw_Order");
            viewString.Append("Report.Qty1NetTotal], T1.[vw_OrderReport.Qty2NetTotal], T1.[vw_OrderReport.Qty3N");
            viewString.Append("etTotal], T1.[vw_OrderReport.ProductCode], T1.[vw_OrderReport.JobDescription1], ");
            viewString.Append("T1.[vw_OrderReport.JobDescription2], T1.[vw_OrderReport.JobDescription3], T1.[vw");
            viewString.Append("_OrderReport.JobDescription4], T1.[vw_OrderReport.JobDescription5], T1.[vw_Order");
            viewString.Append("Report.JobDescription6], T1.[vw_OrderReport.JobDescription7], T1.[vw_OrderReport");
            viewString.Append(".JobDescriptionTitle1], T1.[vw_OrderReport.JobDescriptionTitle2], T1.[vw_OrderRe");
            viewString.Append("port.JobDescriptionTitle3], T1.[vw_OrderReport.JobDescriptionTitle4], T1.[vw_Ord");
            viewString.Append("erReport.JobDescriptionTitle5], T1.[vw_OrderReport.JobDescriptionTitle6], T1.[vw");
            viewString.Append("_OrderReport.JobDescriptionTitle7], T1.[vw_OrderReport.JobDescription], T1.[vw_O");
            viewString.Append("rderReport.Estimate_Name], T1.[vw_OrderReport.Order_Code], T1.[vw_OrderReport.Es");
            viewString.Append("timate_Total], T1.[vw_OrderReport.FootNotes], T1.[vw_OrderReport.HeadNotes], T1.");
            viewString.Append("[vw_OrderReport.Order_Date], T1.[vw_OrderReport.Greeting], T1.[vw_OrderReport.Cu");
            viewString.Append("stomerPO], T1.[vw_OrderReport.AddressName], T1.[vw_OrderReport.Address1], T1.[vw");
            viewString.Append("_OrderReport.Address2], T1.[vw_OrderReport.Address3], T1.[vw_OrderReport.Email],");
            viewString.Append(" T1.[vw_OrderReport.Fax], T1.[vw_OrderReport.Stateid], T1.[vw_OrderReport.City],");
            viewString.Append(" T1.[vw_OrderReport.URL], T1.[vw_OrderReport.Tel1], T1.[vw_OrderReport.AccountNu");
            viewString.Append("mber], T1.[vw_OrderReport.PostCode], T1.[vw_OrderReport.Countryid], T1.[vw_Order");
            viewString.Append("Report.CustomerName], T1.[vw_OrderReport.CustomerURL], T1.[vw_OrderReport.Estima");
            viewString.Append("teID], T1.[vw_OrderReport.ProductName], T1.[vw_OrderReport.ContactName], T1.[vw_");
            viewString.Append("OrderReport.ReportTitle], T1.[vw_OrderReport.ReportBanner], T1.[vw_OrderReport.G");
            viewString.Append("reetings], T1.[vw_OrderReport.FullProductName], T1.[vw_OrderReport.StockName], T");
            viewString.Append("1.[vw_OrderReport.AttachmentsList], T1.[vw_OrderReport.PaymentDate], T1.[vw_Orde");
            viewString.Append("rReport.paymentType], T1.[vw_OrderReport.paymentRefNo], T1.[vw_OrderReport.TaxLa");
            viewString.Append("bel], T1.[vw_OrderReport.BAddressName], T1.[vw_OrderReport.BPostCode], T1.[vw_Or");
            viewString.Append("derReport.BCountry], T1.[vw_OrderReport.BAddress1], T1.[vw_OrderReport.BAddress2");
            viewString.Append("], T1.[vw_OrderReport.BCity], T1.[vw_OrderReport.BState], T1.[vw_OrderReport.Qty");
            viewString.Append("1Tax1Value], T1.[vw_OrderReport.CurrencySymbol], T1.[vw_OrderReport.EstimateCode");
            viewString.Append("Label], T1.[vw_OrderReport.Estimate_Code], T1.[vw_OrderReport.UserNotes])\r\n    F");
            viewString.Append("ROM (\r\n        SELECT \r\n            T.ItemID AS [vw_OrderReport.ItemID], \r\n     ");
            viewString.Append("       T.Title AS [vw_OrderReport.Title], \r\n            T.Qty1 AS [vw_OrderRepor");
            viewString.Append("t.Qty1], \r\n            T.Qty2 AS [vw_OrderReport.Qty2], \r\n            T.Qty3 AS ");
            viewString.Append("[vw_OrderReport.Qty3], \r\n            T.Qty1NetTotal AS [vw_OrderReport.Qty1NetTo");
            viewString.Append("tal], \r\n            T.Qty2NetTotal AS [vw_OrderReport.Qty2NetTotal], \r\n         ");
            viewString.Append("   T.Qty3NetTotal AS [vw_OrderReport.Qty3NetTotal], \r\n            T.ProductCode ");
            viewString.Append("AS [vw_OrderReport.ProductCode], \r\n            T.JobDescription1 AS [vw_OrderRep");
            viewString.Append("ort.JobDescription1], \r\n            T.JobDescription2 AS [vw_OrderReport.JobDesc");
            viewString.Append("ription2], \r\n            T.JobDescription3 AS [vw_OrderReport.JobDescription3], ");
            viewString.Append("\r\n            T.JobDescription4 AS [vw_OrderReport.JobDescription4], \r\n         ");
            viewString.Append("   T.JobDescription5 AS [vw_OrderReport.JobDescription5], \r\n            T.JobDes");
            viewString.Append("cription6 AS [vw_OrderReport.JobDescription6], \r\n            T.JobDescription7 A");
            viewString.Append("S [vw_OrderReport.JobDescription7], \r\n            T.JobDescriptionTitle1 AS [vw_");
            viewString.Append("OrderReport.JobDescriptionTitle1], \r\n            T.JobDescriptionTitle2 AS [vw_O");
            viewString.Append("rderReport.JobDescriptionTitle2], \r\n            T.JobDescriptionTitle3 AS [vw_Or");
            viewString.Append("derReport.JobDescriptionTitle3], \r\n            T.JobDescriptionTitle4 AS [vw_Ord");
            viewString.Append("erReport.JobDescriptionTitle4], \r\n            T.JobDescriptionTitle5 AS [vw_Orde");
            viewString.Append("rReport.JobDescriptionTitle5], \r\n            T.JobDescriptionTitle6 AS [vw_Order");
            viewString.Append("Report.JobDescriptionTitle6], \r\n            T.JobDescriptionTitle7 AS [vw_OrderR");
            viewString.Append("eport.JobDescriptionTitle7], \r\n            T.JobDescription AS [vw_OrderReport.J");
            viewString.Append("obDescription], \r\n            T.Estimate_Name AS [vw_OrderReport.Estimate_Name],");
            viewString.Append(" \r\n            T.Order_Code AS [vw_OrderReport.Order_Code], \r\n            T.Esti");
            viewString.Append("mate_Total AS [vw_OrderReport.Estimate_Total], \r\n            T.FootNotes AS [vw_");
            viewString.Append("OrderReport.FootNotes], \r\n            T.HeadNotes AS [vw_OrderReport.HeadNotes],");
            viewString.Append(" \r\n            T.Order_Date AS [vw_OrderReport.Order_Date], \r\n            T.Gree");
            viewString.Append("ting AS [vw_OrderReport.Greeting], \r\n            T.CustomerPO AS [vw_OrderReport");
            viewString.Append(".CustomerPO], \r\n            T.AddressName AS [vw_OrderReport.AddressName], \r\n   ");
            viewString.Append("         T.Address1 AS [vw_OrderReport.Address1], \r\n            T.Address2 AS [v");
            viewString.Append("w_OrderReport.Address2], \r\n            T.Address3 AS [vw_OrderReport.Address3], ");
            viewString.Append("\r\n            T.Email AS [vw_OrderReport.Email], \r\n            T.Fax AS [vw_Orde");
            viewString.Append("rReport.Fax], \r\n            T.Stateid AS [vw_OrderReport.Stateid], \r\n           ");
            viewString.Append(" T.City AS [vw_OrderReport.City], \r\n            T.URL AS [vw_OrderReport.URL], \r");
            viewString.Append("\n            T.Tel1 AS [vw_OrderReport.Tel1], \r\n            T.AccountNumber AS [");
            viewString.Append("vw_OrderReport.AccountNumber], \r\n            T.PostCode AS [vw_OrderReport.PostC");
            viewString.Append("ode], \r\n            T.Countryid AS [vw_OrderReport.Countryid], \r\n            T.C");
            viewString.Append("ustomerName AS [vw_OrderReport.CustomerName], \r\n            T.CustomerURL AS [vw");
            viewString.Append("_OrderReport.CustomerURL], \r\n            T.EstimateID AS [vw_OrderReport.Estimat");
            viewString.Append("eID], \r\n            T.ProductName AS [vw_OrderReport.ProductName], \r\n           ");
            viewString.Append(" T.ContactName AS [vw_OrderReport.ContactName], \r\n            T.ReportTitle AS [");
            viewString.Append("vw_OrderReport.ReportTitle], \r\n            T.ReportBanner AS [vw_OrderReport.Rep");
            viewString.Append("ortBanner], \r\n            T.Greetings AS [vw_OrderReport.Greetings], \r\n         ");
            viewString.Append("   T.FullProductName AS [vw_OrderReport.FullProductName], \r\n            T.StockN");
            viewString.Append("ame AS [vw_OrderReport.StockName], \r\n            T.AttachmentsList AS [vw_OrderR");
            viewString.Append("eport.AttachmentsList], \r\n            T.PaymentDate AS [vw_OrderReport.PaymentDa");
            viewString.Append("te], \r\n            T.paymentType AS [vw_OrderReport.paymentType], \r\n            ");
            viewString.Append("T.paymentRefNo AS [vw_OrderReport.paymentRefNo], \r\n            T.TaxLabel AS [vw");
            viewString.Append("_OrderReport.TaxLabel], \r\n            T.BAddressName AS [vw_OrderReport.BAddress");
            viewString.Append("Name], \r\n            T.BPostCode AS [vw_OrderReport.BPostCode], \r\n            T.");
            viewString.Append("BCountry AS [vw_OrderReport.BCountry], \r\n            T.BAddress1 AS [vw_OrderRep");
            viewString.Append("ort.BAddress1], \r\n            T.BAddress2 AS [vw_OrderReport.BAddress2], \r\n     ");
            viewString.Append("       T.BCity AS [vw_OrderReport.BCity], \r\n            T.BState AS [vw_OrderRep");
            viewString.Append("ort.BState], \r\n            T.Qty1Tax1Value AS [vw_OrderReport.Qty1Tax1Value], \r\n");
            viewString.Append("            T.CurrencySymbol AS [vw_OrderReport.CurrencySymbol], \r\n            T");
            viewString.Append(".EstimateCodeLabel AS [vw_OrderReport.EstimateCodeLabel], \r\n            T.Estima");
            viewString.Append("te_Code AS [vw_OrderReport.Estimate_Code], \r\n            T.UserNotes AS [vw_Orde");
            viewString.Append("rReport.UserNotes], \r\n            True AS _from0\r\n        FROM BaseDbContext.Ord");
            viewString.Append("erReportViews AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.vw_OrderReport", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.OrderReportViews
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView331()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6875);
            viewString.Append("\r\n    SELECT VALUE -- Constructing OrderReportViews\r\n        [DomainModels.Order");
            viewString.Append("ReportView](T1.OrderReportView_ItemID, T1.OrderReportView_Title, T1.OrderReportV");
            viewString.Append("iew_Qty1, T1.OrderReportView_Qty2, T1.OrderReportView_Qty3, T1.OrderReportView_Q");
            viewString.Append("ty1NetTotal, T1.OrderReportView_Qty2NetTotal, T1.OrderReportView_Qty3NetTotal, T");
            viewString.Append("1.OrderReportView_ProductCode, T1.OrderReportView_JobDescription1, T1.OrderRepor");
            viewString.Append("tView_JobDescription2, T1.OrderReportView_JobDescription3, T1.OrderReportView_Jo");
            viewString.Append("bDescription4, T1.OrderReportView_JobDescription5, T1.OrderReportView_JobDescrip");
            viewString.Append("tion6, T1.OrderReportView_JobDescription7, T1.OrderReportView_JobDescriptionTitl");
            viewString.Append("e1, T1.OrderReportView_JobDescriptionTitle2, T1.OrderReportView_JobDescriptionTi");
            viewString.Append("tle3, T1.OrderReportView_JobDescriptionTitle4, T1.OrderReportView_JobDescription");
            viewString.Append("Title5, T1.OrderReportView_JobDescriptionTitle6, T1.OrderReportView_JobDescripti");
            viewString.Append("onTitle7, T1.OrderReportView_JobDescription, T1.[OrderReportView.Estimate_Name],");
            viewString.Append(" T1.[OrderReportView.Order_Code], T1.[OrderReportView.Estimate_Total], T1.OrderR");
            viewString.Append("eportView_FootNotes, T1.OrderReportView_HeadNotes, T1.[OrderReportView.Order_Dat");
            viewString.Append("e], T1.OrderReportView_Greeting, T1.OrderReportView_CustomerPO, T1.OrderReportVi");
            viewString.Append("ew_AddressName, T1.OrderReportView_Address1, T1.OrderReportView_Address2, T1.Ord");
            viewString.Append("erReportView_Address3, T1.OrderReportView_Email, T1.OrderReportView_Fax, T1.Orde");
            viewString.Append("rReportView_Stateid, T1.OrderReportView_City, T1.OrderReportView_URL, T1.OrderRe");
            viewString.Append("portView_Tel1, T1.OrderReportView_AccountNumber, T1.OrderReportView_PostCode, T1");
            viewString.Append(".OrderReportView_Countryid, T1.OrderReportView_CustomerName, T1.OrderReportView_");
            viewString.Append("CustomerURL, T1.OrderReportView_EstimateID, T1.OrderReportView_ProductName, T1.O");
            viewString.Append("rderReportView_ContactName, T1.OrderReportView_ReportTitle, T1.OrderReportView_R");
            viewString.Append("eportBanner, T1.OrderReportView_Greetings, T1.OrderReportView_FullProductName, T");
            viewString.Append("1.OrderReportView_StockName, T1.OrderReportView_AttachmentsList, T1.OrderReportV");
            viewString.Append("iew_PaymentDate, T1.OrderReportView_paymentType, T1.OrderReportView_paymentRefNo");
            viewString.Append(", T1.OrderReportView_TaxLabel, T1.OrderReportView_BAddressName, T1.OrderReportVi");
            viewString.Append("ew_BPostCode, T1.OrderReportView_BCountry, T1.OrderReportView_BAddress1, T1.Orde");
            viewString.Append("rReportView_BAddress2, T1.OrderReportView_BCity, T1.OrderReportView_BState, T1.O");
            viewString.Append("rderReportView_Qty1Tax1Value, T1.OrderReportView_CurrencySymbol, T1.OrderReportV");
            viewString.Append("iew_EstimateCodeLabel, T1.[OrderReportView.Estimate_Code], T1.OrderReportView_Us");
            viewString.Append("erNotes)\r\n    FROM (\r\n        SELECT \r\n            T.ItemID AS OrderReportView_I");
            viewString.Append("temID, \r\n            T.Title AS OrderReportView_Title, \r\n            T.Qty1 AS O");
            viewString.Append("rderReportView_Qty1, \r\n            T.Qty2 AS OrderReportView_Qty2, \r\n           ");
            viewString.Append(" T.Qty3 AS OrderReportView_Qty3, \r\n            T.Qty1NetTotal AS OrderReportView");
            viewString.Append("_Qty1NetTotal, \r\n            T.Qty2NetTotal AS OrderReportView_Qty2NetTotal, \r\n ");
            viewString.Append("           T.Qty3NetTotal AS OrderReportView_Qty3NetTotal, \r\n            T.Produ");
            viewString.Append("ctCode AS OrderReportView_ProductCode, \r\n            T.JobDescription1 AS OrderR");
            viewString.Append("eportView_JobDescription1, \r\n            T.JobDescription2 AS OrderReportView_Jo");
            viewString.Append("bDescription2, \r\n            T.JobDescription3 AS OrderReportView_JobDescription");
            viewString.Append("3, \r\n            T.JobDescription4 AS OrderReportView_JobDescription4, \r\n       ");
            viewString.Append("     T.JobDescription5 AS OrderReportView_JobDescription5, \r\n            T.JobDe");
            viewString.Append("scription6 AS OrderReportView_JobDescription6, \r\n            T.JobDescription7 A");
            viewString.Append("S OrderReportView_JobDescription7, \r\n            T.JobDescriptionTitle1 AS Order");
            viewString.Append("ReportView_JobDescriptionTitle1, \r\n            T.JobDescriptionTitle2 AS OrderRe");
            viewString.Append("portView_JobDescriptionTitle2, \r\n            T.JobDescriptionTitle3 AS OrderRepo");
            viewString.Append("rtView_JobDescriptionTitle3, \r\n            T.JobDescriptionTitle4 AS OrderReport");
            viewString.Append("View_JobDescriptionTitle4, \r\n            T.JobDescriptionTitle5 AS OrderReportVi");
            viewString.Append("ew_JobDescriptionTitle5, \r\n            T.JobDescriptionTitle6 AS OrderReportView");
            viewString.Append("_JobDescriptionTitle6, \r\n            T.JobDescriptionTitle7 AS OrderReportView_J");
            viewString.Append("obDescriptionTitle7, \r\n            T.JobDescription AS OrderReportView_JobDescri");
            viewString.Append("ption, \r\n            T.Estimate_Name AS [OrderReportView.Estimate_Name], \r\n     ");
            viewString.Append("       T.Order_Code AS [OrderReportView.Order_Code], \r\n            T.Estimate_To");
            viewString.Append("tal AS [OrderReportView.Estimate_Total], \r\n            T.FootNotes AS OrderRepor");
            viewString.Append("tView_FootNotes, \r\n            T.HeadNotes AS OrderReportView_HeadNotes, \r\n     ");
            viewString.Append("       T.Order_Date AS [OrderReportView.Order_Date], \r\n            T.Greeting AS");
            viewString.Append(" OrderReportView_Greeting, \r\n            T.CustomerPO AS OrderReportView_Custome");
            viewString.Append("rPO, \r\n            T.AddressName AS OrderReportView_AddressName, \r\n            T");
            viewString.Append(".Address1 AS OrderReportView_Address1, \r\n            T.Address2 AS OrderReportVi");
            viewString.Append("ew_Address2, \r\n            T.Address3 AS OrderReportView_Address3, \r\n           ");
            viewString.Append(" T.Email AS OrderReportView_Email, \r\n            T.Fax AS OrderReportView_Fax, \r");
            viewString.Append("\n            T.Stateid AS OrderReportView_Stateid, \r\n            T.City AS Order");
            viewString.Append("ReportView_City, \r\n            T.URL AS OrderReportView_URL, \r\n            T.Tel");
            viewString.Append("1 AS OrderReportView_Tel1, \r\n            T.AccountNumber AS OrderReportView_Acco");
            viewString.Append("untNumber, \r\n            T.PostCode AS OrderReportView_PostCode, \r\n            T");
            viewString.Append(".Countryid AS OrderReportView_Countryid, \r\n            T.CustomerName AS OrderRe");
            viewString.Append("portView_CustomerName, \r\n            T.CustomerURL AS OrderReportView_CustomerUR");
            viewString.Append("L, \r\n            T.EstimateID AS OrderReportView_EstimateID, \r\n            T.Pro");
            viewString.Append("ductName AS OrderReportView_ProductName, \r\n            T.ContactName AS OrderRep");
            viewString.Append("ortView_ContactName, \r\n            T.ReportTitle AS OrderReportView_ReportTitle,");
            viewString.Append(" \r\n            T.ReportBanner AS OrderReportView_ReportBanner, \r\n            T.G");
            viewString.Append("reetings AS OrderReportView_Greetings, \r\n            T.FullProductName AS OrderR");
            viewString.Append("eportView_FullProductName, \r\n            T.StockName AS OrderReportView_StockNam");
            viewString.Append("e, \r\n            T.AttachmentsList AS OrderReportView_AttachmentsList, \r\n       ");
            viewString.Append("     T.PaymentDate AS OrderReportView_PaymentDate, \r\n            T.paymentType A");
            viewString.Append("S OrderReportView_paymentType, \r\n            T.paymentRefNo AS OrderReportView_p");
            viewString.Append("aymentRefNo, \r\n            T.TaxLabel AS OrderReportView_TaxLabel, \r\n           ");
            viewString.Append(" T.BAddressName AS OrderReportView_BAddressName, \r\n            T.BPostCode AS Or");
            viewString.Append("derReportView_BPostCode, \r\n            T.BCountry AS OrderReportView_BCountry, \r");
            viewString.Append("\n            T.BAddress1 AS OrderReportView_BAddress1, \r\n            T.BAddress2");
            viewString.Append(" AS OrderReportView_BAddress2, \r\n            T.BCity AS OrderReportView_BCity, \r");
            viewString.Append("\n            T.BState AS OrderReportView_BState, \r\n            T.Qty1Tax1Value A");
            viewString.Append("S OrderReportView_Qty1Tax1Value, \r\n            T.CurrencySymbol AS OrderReportVi");
            viewString.Append("ew_CurrencySymbol, \r\n            T.EstimateCodeLabel AS OrderReportView_Estimate");
            viewString.Append("CodeLabel, \r\n            T.Estimate_Code AS [OrderReportView.Estimate_Code], \r\n ");
            viewString.Append("           T.UserNotes AS OrderReportView_UserNotes, \r\n            True AS _from");
            viewString.Append("0\r\n        FROM DomainModelsStoreContainer.vw_OrderReport AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.OrderReportViews", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.Reportparam
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView332()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.Reportparam", "\r\n    SELECT VALUE -- Constructing Reportparam\r\n        [DomainModels.Store.Repor" +
                    "tparam](T1.Reportparam_ParmId, T1.Reportparam_ParmName, T1.Reportparam_Caption1," +
                    " T1.Reportparam_ReportId, T1.Reportparam_ControlType, T1.Reportparam_ComboTableN" +
                    "ame, T1.Reportparam_ComboIDFieldName, T1.Reportparam_ComboTextFieldName, T1.Repo" +
                    "rtparam_CriteriaFieldName, T1.Reportparam_OrderByFieldName, T1.Reportparam_SameA" +
                    "sPArmId, T1.Reportparam_Caption2, T1.Reportparam_Operator, T1.Reportparam_Logica" +
                    "lOperator, T1.Reportparam_DefaultValue1, T1.Reportparam_DefaultValue2, T1.Report" +
                    "param_MinValue, T1.Reportparam_MaxValue, T1.Reportparam_FilterType, T1.Reportpar" +
                    "am_SortOrder)\r\n    FROM (\r\n        SELECT \r\n            T.ParmId AS Reportparam_" +
                    "ParmId, \r\n            T.ParmName AS Reportparam_ParmName, \r\n            T.Captio" +
                    "n1 AS Reportparam_Caption1, \r\n            T.ReportId AS Reportparam_ReportId, \r\n" +
                    "            T.ControlType AS Reportparam_ControlType, \r\n            T.ComboTable" +
                    "Name AS Reportparam_ComboTableName, \r\n            T.ComboIDFieldName AS Reportpa" +
                    "ram_ComboIDFieldName, \r\n            T.ComboTextFieldName AS Reportparam_ComboTex" +
                    "tFieldName, \r\n            T.CriteriaFieldName AS Reportparam_CriteriaFieldName, " +
                    "\r\n            T.OrderByFieldName AS Reportparam_OrderByFieldName, \r\n            " +
                    "T.SameAsPArmId AS Reportparam_SameAsPArmId, \r\n            T.Caption2 AS Reportpa" +
                    "ram_Caption2, \r\n            T.Operator AS Reportparam_Operator, \r\n            T." +
                    "LogicalOperator AS Reportparam_LogicalOperator, \r\n            T.DefaultValue1 AS" +
                    " Reportparam_DefaultValue1, \r\n            T.DefaultValue2 AS Reportparam_Default" +
                    "Value2, \r\n            T.MinValue AS Reportparam_MinValue, \r\n            T.MaxVal" +
                    "ue AS Reportparam_MaxValue, \r\n            T.FilterType AS Reportparam_FilterType" +
                    ", \r\n            T.SortOrder AS Reportparam_SortOrder, \r\n            True AS _fro" +
                    "m0\r\n        FROM BaseDbContext.Reportparams AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Reportparams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView333()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Reportparams", "\r\n    SELECT VALUE -- Constructing Reportparams\r\n        [DomainModels.Reportpara" +
                    "m](T1.Reportparam_ParmId, T1.Reportparam_ParmName, T1.Reportparam_Caption1, T1.R" +
                    "eportparam_ReportId, T1.Reportparam_ControlType, T1.Reportparam_ComboTableName, " +
                    "T1.Reportparam_ComboIDFieldName, T1.Reportparam_ComboTextFieldName, T1.Reportpar" +
                    "am_CriteriaFieldName, T1.Reportparam_OrderByFieldName, T1.Reportparam_SameAsPArm" +
                    "Id, T1.Reportparam_Caption2, T1.Reportparam_Operator, T1.Reportparam_LogicalOper" +
                    "ator, T1.Reportparam_DefaultValue1, T1.Reportparam_DefaultValue2, T1.Reportparam" +
                    "_MinValue, T1.Reportparam_MaxValue, T1.Reportparam_FilterType, T1.Reportparam_So" +
                    "rtOrder)\r\n    FROM (\r\n        SELECT \r\n            T.ParmId AS Reportparam_ParmI" +
                    "d, \r\n            T.ParmName AS Reportparam_ParmName, \r\n            T.Caption1 AS" +
                    " Reportparam_Caption1, \r\n            T.ReportId AS Reportparam_ReportId, \r\n     " +
                    "       T.ControlType AS Reportparam_ControlType, \r\n            T.ComboTableName " +
                    "AS Reportparam_ComboTableName, \r\n            T.ComboIDFieldName AS Reportparam_C" +
                    "omboIDFieldName, \r\n            T.ComboTextFieldName AS Reportparam_ComboTextFiel" +
                    "dName, \r\n            T.CriteriaFieldName AS Reportparam_CriteriaFieldName, \r\n   " +
                    "         T.OrderByFieldName AS Reportparam_OrderByFieldName, \r\n            T.Sam" +
                    "eAsPArmId AS Reportparam_SameAsPArmId, \r\n            T.Caption2 AS Reportparam_C" +
                    "aption2, \r\n            T.Operator AS Reportparam_Operator, \r\n            T.Logic" +
                    "alOperator AS Reportparam_LogicalOperator, \r\n            T.DefaultValue1 AS Repo" +
                    "rtparam_DefaultValue1, \r\n            T.DefaultValue2 AS Reportparam_DefaultValue" +
                    "2, \r\n            T.MinValue AS Reportparam_MinValue, \r\n            T.MaxValue AS" +
                    " Reportparam_MaxValue, \r\n            T.FilterType AS Reportparam_FilterType, \r\n " +
                    "           T.SortOrder AS Reportparam_SortOrder, \r\n            True AS _from0\r\n " +
                    "       FROM DomainModelsStoreContainer.Reportparam AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.StagingImportCompanyContactAddress
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView334()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8008);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StagingImportCompanyContactAddress\r\n        [");
            viewString.Append("DomainModels.Store.StagingImportCompanyContactAddress](T1.StagingImportCompanyCo");
            viewString.Append("ntactAddress_StagingId, T1.StagingImportCompanyContactAddress_CompanyName, T1.St");
            viewString.Append("agingImportCompanyContactAddress_CompanyId, T1.StagingImportCompanyContactAddres");
            viewString.Append("s_AddressId, T1.StagingImportCompanyContactAddress_AddressName, T1.StagingImport");
            viewString.Append("CompanyContactAddress_Address1, T1.StagingImportCompanyContactAddress_Address2, ");
            viewString.Append("T1.StagingImportCompanyContactAddress_Address3, T1.StagingImportCompanyContactAd");
            viewString.Append("dress_City, T1.StagingImportCompanyContactAddress_State, T1.StagingImportCompany");
            viewString.Append("ContactAddress_StateId, T1.StagingImportCompanyContactAddress_Country, T1.Stagin");
            viewString.Append("gImportCompanyContactAddress_CountryId, T1.StagingImportCompanyContactAddress_Po");
            viewString.Append("stcode, T1.StagingImportCompanyContactAddress_TerritoryId, T1.StagingImportCompa");
            viewString.Append("nyContactAddress_TerritoryName, T1.StagingImportCompanyContactAddress_AddressPho");
            viewString.Append("ne, T1.StagingImportCompanyContactAddress_AddressFax, T1.StagingImportCompanyCon");
            viewString.Append("tactAddress_ContactId, T1.StagingImportCompanyContactAddress_ContactFirstName, T");
            viewString.Append("1.StagingImportCompanyContactAddress_ContactLastName, T1.StagingImportCompanyCon");
            viewString.Append("tactAddress_JobTitle, T1.StagingImportCompanyContactAddress_Email, T1.StagingImp");
            viewString.Append("ortCompanyContactAddress_password, T1.StagingImportCompanyContactAddress_Mobile,");
            viewString.Append(" T1.StagingImportCompanyContactAddress_RoleId, T1.StagingImportCompanyContactAdd");
            viewString.Append("ress_ContactPhone, T1.StagingImportCompanyContactAddress_ContactFax, T1.StagingI");
            viewString.Append("mportCompanyContactAddress_AddInfo1, T1.StagingImportCompanyContactAddress_AddIn");
            viewString.Append("fo2, T1.StagingImportCompanyContactAddress_AddInfo3, T1.StagingImportCompanyCont");
            viewString.Append("actAddress_AddInfo4, T1.StagingImportCompanyContactAddress_AddInfo5, T1.StagingI");
            viewString.Append("mportCompanyContactAddress_OrganisationId, T1.StagingImportCompanyContactAddress");
            viewString.Append("_SkypeId, T1.StagingImportCompanyContactAddress_LinkedInUrl, T1.StagingImportCom");
            viewString.Append("panyContactAddress_FacebookUrl, T1.StagingImportCompanyContactAddress_TwitterUrl");
            viewString.Append(", T1.StagingImportCompanyContactAddress_CanEditProfile, T1.StagingImportCompanyC");
            viewString.Append("ontactAddress_CanPlaceOrderWithoutApproval, T1.StagingImportCompanyContactAddres");
            viewString.Append("s_CanPlaceDirectOrder, T1.StagingImportCompanyContactAddress_CanPayByPersonalCre");
            viewString.Append("ditCard, T1.StagingImportCompanyContactAddress_CanSeePrices, T1.StagingImportCom");
            viewString.Append("panyContactAddress_HasWebAccess, T1.StagingImportCompanyContactAddress_CanPlaceO");
            viewString.Append("rder, T1.StagingImportCompanyContactAddress_DirectLine, T1.StagingImportCompanyC");
            viewString.Append("ontactAddress_CorporateUnit, T1.StagingImportCompanyContactAddress_TradingName, ");
            viewString.Append("T1.StagingImportCompanyContactAddress_BPayCRN, T1.StagingImportCompanyContactAdd");
            viewString.Append("ress_ACN, T1.StagingImportCompanyContactAddress_ContractorName, T1.StagingImport");
            viewString.Append("CompanyContactAddress_ABN, T1.StagingImportCompanyContactAddress_Notes, T1.Stagi");
            viewString.Append("ngImportCompanyContactAddress_CreditLimit, T1.StagingImportCompanyContactAddress");
            viewString.Append("_IsNewsLetterSubscription, T1.StagingImportCompanyContactAddress_IsEmailSubscrip");
            viewString.Append("tion, T1.StagingImportCompanyContactAddress_IsDefaultContact, T1.StagingImportCo");
            viewString.Append("mpanyContactAddress_POAddress, T1.StagingImportCompanyContactAddress_StoreName, ");
            viewString.Append("T1.StagingImportCompanyContactAddress_WebAccessCode)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.StagingId AS StagingImportCompanyContactAddress_StagingId, \r\n  ");
            viewString.Append("          T.CompanyName AS StagingImportCompanyContactAddress_CompanyName, \r\n   ");
            viewString.Append("         T.CompanyId AS StagingImportCompanyContactAddress_CompanyId, \r\n        ");
            viewString.Append("    T.AddressId AS StagingImportCompanyContactAddress_AddressId, \r\n            T");
            viewString.Append(".AddressName AS StagingImportCompanyContactAddress_AddressName, \r\n            T.");
            viewString.Append("Address1 AS StagingImportCompanyContactAddress_Address1, \r\n            T.Address");
            viewString.Append("2 AS StagingImportCompanyContactAddress_Address2, \r\n            T.Address3 AS St");
            viewString.Append("agingImportCompanyContactAddress_Address3, \r\n            T.City AS StagingImport");
            viewString.Append("CompanyContactAddress_City, \r\n            T.State AS StagingImportCompanyContact");
            viewString.Append("Address_State, \r\n            T.StateId AS StagingImportCompanyContactAddress_Sta");
            viewString.Append("teId, \r\n            T.Country AS StagingImportCompanyContactAddress_Country, \r\n ");
            viewString.Append("           T.CountryId AS StagingImportCompanyContactAddress_CountryId, \r\n      ");
            viewString.Append("      T.Postcode AS StagingImportCompanyContactAddress_Postcode, \r\n            T");
            viewString.Append(".TerritoryId AS StagingImportCompanyContactAddress_TerritoryId, \r\n            T.");
            viewString.Append("TerritoryName AS StagingImportCompanyContactAddress_TerritoryName, \r\n           ");
            viewString.Append(" T.AddressPhone AS StagingImportCompanyContactAddress_AddressPhone, \r\n          ");
            viewString.Append("  T.AddressFax AS StagingImportCompanyContactAddress_AddressFax, \r\n            T");
            viewString.Append(".ContactId AS StagingImportCompanyContactAddress_ContactId, \r\n            T.Cont");
            viewString.Append("actFirstName AS StagingImportCompanyContactAddress_ContactFirstName, \r\n         ");
            viewString.Append("   T.ContactLastName AS StagingImportCompanyContactAddress_ContactLastName, \r\n  ");
            viewString.Append("          T.JobTitle AS StagingImportCompanyContactAddress_JobTitle, \r\n         ");
            viewString.Append("   T.Email AS StagingImportCompanyContactAddress_Email, \r\n            T.password");
            viewString.Append(" AS StagingImportCompanyContactAddress_password, \r\n            T.Mobile AS Stagi");
            viewString.Append("ngImportCompanyContactAddress_Mobile, \r\n            T.RoleId AS StagingImportCom");
            viewString.Append("panyContactAddress_RoleId, \r\n            T.ContactPhone AS StagingImportCompanyC");
            viewString.Append("ontactAddress_ContactPhone, \r\n            T.ContactFax AS StagingImportCompanyCo");
            viewString.Append("ntactAddress_ContactFax, \r\n            T.AddInfo1 AS StagingImportCompanyContact");
            viewString.Append("Address_AddInfo1, \r\n            T.AddInfo2 AS StagingImportCompanyContactAddress");
            viewString.Append("_AddInfo2, \r\n            T.AddInfo3 AS StagingImportCompanyContactAddress_AddInf");
            viewString.Append("o3, \r\n            T.AddInfo4 AS StagingImportCompanyContactAddress_AddInfo4, \r\n ");
            viewString.Append("           T.AddInfo5 AS StagingImportCompanyContactAddress_AddInfo5, \r\n        ");
            viewString.Append("    T.OrganisationId AS StagingImportCompanyContactAddress_OrganisationId, \r\n   ");
            viewString.Append("         T.SkypeId AS StagingImportCompanyContactAddress_SkypeId, \r\n            ");
            viewString.Append("T.LinkedInUrl AS StagingImportCompanyContactAddress_LinkedInUrl, \r\n            T");
            viewString.Append(".FacebookUrl AS StagingImportCompanyContactAddress_FacebookUrl, \r\n            T.");
            viewString.Append("TwitterUrl AS StagingImportCompanyContactAddress_TwitterUrl, \r\n            T.Can");
            viewString.Append("EditProfile AS StagingImportCompanyContactAddress_CanEditProfile, \r\n            ");
            viewString.Append("T.CanPlaceOrderWithoutApproval AS StagingImportCompanyContactAddress_CanPlaceOrd");
            viewString.Append("erWithoutApproval, \r\n            T.CanPlaceDirectOrder AS StagingImportCompanyCo");
            viewString.Append("ntactAddress_CanPlaceDirectOrder, \r\n            T.CanPayByPersonalCreditCard AS ");
            viewString.Append("StagingImportCompanyContactAddress_CanPayByPersonalCreditCard, \r\n            T.C");
            viewString.Append("anSeePrices AS StagingImportCompanyContactAddress_CanSeePrices, \r\n            T.");
            viewString.Append("HasWebAccess AS StagingImportCompanyContactAddress_HasWebAccess, \r\n            T");
            viewString.Append(".CanPlaceOrder AS StagingImportCompanyContactAddress_CanPlaceOrder, \r\n          ");
            viewString.Append("  T.DirectLine AS StagingImportCompanyContactAddress_DirectLine, \r\n            T");
            viewString.Append(".CorporateUnit AS StagingImportCompanyContactAddress_CorporateUnit, \r\n          ");
            viewString.Append("  T.TradingName AS StagingImportCompanyContactAddress_TradingName, \r\n           ");
            viewString.Append(" T.BPayCRN AS StagingImportCompanyContactAddress_BPayCRN, \r\n            T.ACN AS");
            viewString.Append(" StagingImportCompanyContactAddress_ACN, \r\n            T.ContractorName AS Stagi");
            viewString.Append("ngImportCompanyContactAddress_ContractorName, \r\n            T.ABN AS StagingImpo");
            viewString.Append("rtCompanyContactAddress_ABN, \r\n            T.Notes AS StagingImportCompanyContac");
            viewString.Append("tAddress_Notes, \r\n            T.CreditLimit AS StagingImportCompanyContactAddres");
            viewString.Append("s_CreditLimit, \r\n            T.IsNewsLetterSubscription AS StagingImportCompanyC");
            viewString.Append("ontactAddress_IsNewsLetterSubscription, \r\n            T.IsEmailSubscription AS S");
            viewString.Append("tagingImportCompanyContactAddress_IsEmailSubscription, \r\n            T.IsDefault");
            viewString.Append("Contact AS StagingImportCompanyContactAddress_IsDefaultContact, \r\n            T.");
            viewString.Append("POAddress AS StagingImportCompanyContactAddress_POAddress, \r\n            T.Store");
            viewString.Append("Name AS StagingImportCompanyContactAddress_StoreName, \r\n            T.WebAccessC");
            viewString.Append("ode AS StagingImportCompanyContactAddress_WebAccessCode, \r\n            True AS _");
            viewString.Append("from0\r\n        FROM BaseDbContext.StagingImportCompanyContactAddresses AS T\r\n   ");
            viewString.Append(" ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.StagingImportCompanyContactAddress", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.StagingImportCompanyContactAddresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView335()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(8015);
            viewString.Append("\r\n    SELECT VALUE -- Constructing StagingImportCompanyContactAddresses\r\n       ");
            viewString.Append(" [DomainModels.StagingImportCompanyContactAddress](T1.StagingImportCompanyContac");
            viewString.Append("tAddress_StagingId, T1.StagingImportCompanyContactAddress_CompanyName, T1.Stagin");
            viewString.Append("gImportCompanyContactAddress_CompanyId, T1.StagingImportCompanyContactAddress_Ad");
            viewString.Append("dressId, T1.StagingImportCompanyContactAddress_AddressName, T1.StagingImportComp");
            viewString.Append("anyContactAddress_Address1, T1.StagingImportCompanyContactAddress_Address2, T1.S");
            viewString.Append("tagingImportCompanyContactAddress_Address3, T1.StagingImportCompanyContactAddres");
            viewString.Append("s_City, T1.StagingImportCompanyContactAddress_State, T1.StagingImportCompanyCont");
            viewString.Append("actAddress_StateId, T1.StagingImportCompanyContactAddress_Country, T1.StagingImp");
            viewString.Append("ortCompanyContactAddress_CountryId, T1.StagingImportCompanyContactAddress_Postco");
            viewString.Append("de, T1.StagingImportCompanyContactAddress_TerritoryId, T1.StagingImportCompanyCo");
            viewString.Append("ntactAddress_TerritoryName, T1.StagingImportCompanyContactAddress_AddressPhone, ");
            viewString.Append("T1.StagingImportCompanyContactAddress_AddressFax, T1.StagingImportCompanyContact");
            viewString.Append("Address_ContactId, T1.StagingImportCompanyContactAddress_ContactFirstName, T1.St");
            viewString.Append("agingImportCompanyContactAddress_ContactLastName, T1.StagingImportCompanyContact");
            viewString.Append("Address_JobTitle, T1.StagingImportCompanyContactAddress_Email, T1.StagingImportC");
            viewString.Append("ompanyContactAddress_password, T1.StagingImportCompanyContactAddress_Mobile, T1.");
            viewString.Append("StagingImportCompanyContactAddress_RoleId, T1.StagingImportCompanyContactAddress");
            viewString.Append("_ContactPhone, T1.StagingImportCompanyContactAddress_ContactFax, T1.StagingImpor");
            viewString.Append("tCompanyContactAddress_AddInfo1, T1.StagingImportCompanyContactAddress_AddInfo2,");
            viewString.Append(" T1.StagingImportCompanyContactAddress_AddInfo3, T1.StagingImportCompanyContactA");
            viewString.Append("ddress_AddInfo4, T1.StagingImportCompanyContactAddress_AddInfo5, T1.StagingImpor");
            viewString.Append("tCompanyContactAddress_OrganisationId, T1.StagingImportCompanyContactAddress_Sky");
            viewString.Append("peId, T1.StagingImportCompanyContactAddress_LinkedInUrl, T1.StagingImportCompany");
            viewString.Append("ContactAddress_FacebookUrl, T1.StagingImportCompanyContactAddress_TwitterUrl, T1");
            viewString.Append(".StagingImportCompanyContactAddress_CanEditProfile, T1.StagingImportCompanyConta");
            viewString.Append("ctAddress_CanPlaceOrderWithoutApproval, T1.StagingImportCompanyContactAddress_Ca");
            viewString.Append("nPlaceDirectOrder, T1.StagingImportCompanyContactAddress_CanPayByPersonalCreditC");
            viewString.Append("ard, T1.StagingImportCompanyContactAddress_CanSeePrices, T1.StagingImportCompany");
            viewString.Append("ContactAddress_HasWebAccess, T1.StagingImportCompanyContactAddress_CanPlaceOrder");
            viewString.Append(", T1.StagingImportCompanyContactAddress_DirectLine, T1.StagingImportCompanyConta");
            viewString.Append("ctAddress_CorporateUnit, T1.StagingImportCompanyContactAddress_TradingName, T1.S");
            viewString.Append("tagingImportCompanyContactAddress_BPayCRN, T1.StagingImportCompanyContactAddress");
            viewString.Append("_ACN, T1.StagingImportCompanyContactAddress_ContractorName, T1.StagingImportComp");
            viewString.Append("anyContactAddress_ABN, T1.StagingImportCompanyContactAddress_Notes, T1.StagingIm");
            viewString.Append("portCompanyContactAddress_CreditLimit, T1.StagingImportCompanyContactAddress_IsN");
            viewString.Append("ewsLetterSubscription, T1.StagingImportCompanyContactAddress_IsEmailSubscription");
            viewString.Append(", T1.StagingImportCompanyContactAddress_IsDefaultContact, T1.StagingImportCompan");
            viewString.Append("yContactAddress_POAddress, T1.StagingImportCompanyContactAddress_StoreName, T1.S");
            viewString.Append("tagingImportCompanyContactAddress_WebAccessCode)\r\n    FROM (\r\n        SELECT \r\n ");
            viewString.Append("           T.StagingId AS StagingImportCompanyContactAddress_StagingId, \r\n      ");
            viewString.Append("      T.CompanyName AS StagingImportCompanyContactAddress_CompanyName, \r\n       ");
            viewString.Append("     T.CompanyId AS StagingImportCompanyContactAddress_CompanyId, \r\n            ");
            viewString.Append("T.AddressId AS StagingImportCompanyContactAddress_AddressId, \r\n            T.Add");
            viewString.Append("ressName AS StagingImportCompanyContactAddress_AddressName, \r\n            T.Addr");
            viewString.Append("ess1 AS StagingImportCompanyContactAddress_Address1, \r\n            T.Address2 AS");
            viewString.Append(" StagingImportCompanyContactAddress_Address2, \r\n            T.Address3 AS Stagin");
            viewString.Append("gImportCompanyContactAddress_Address3, \r\n            T.City AS StagingImportComp");
            viewString.Append("anyContactAddress_City, \r\n            T.State AS StagingImportCompanyContactAddr");
            viewString.Append("ess_State, \r\n            T.StateId AS StagingImportCompanyContactAddress_StateId");
            viewString.Append(", \r\n            T.Country AS StagingImportCompanyContactAddress_Country, \r\n     ");
            viewString.Append("       T.CountryId AS StagingImportCompanyContactAddress_CountryId, \r\n          ");
            viewString.Append("  T.Postcode AS StagingImportCompanyContactAddress_Postcode, \r\n            T.Ter");
            viewString.Append("ritoryId AS StagingImportCompanyContactAddress_TerritoryId, \r\n            T.Terr");
            viewString.Append("itoryName AS StagingImportCompanyContactAddress_TerritoryName, \r\n            T.A");
            viewString.Append("ddressPhone AS StagingImportCompanyContactAddress_AddressPhone, \r\n            T.");
            viewString.Append("AddressFax AS StagingImportCompanyContactAddress_AddressFax, \r\n            T.Con");
            viewString.Append("tactId AS StagingImportCompanyContactAddress_ContactId, \r\n            T.ContactF");
            viewString.Append("irstName AS StagingImportCompanyContactAddress_ContactFirstName, \r\n            T");
            viewString.Append(".ContactLastName AS StagingImportCompanyContactAddress_ContactLastName, \r\n      ");
            viewString.Append("      T.JobTitle AS StagingImportCompanyContactAddress_JobTitle, \r\n            T");
            viewString.Append(".Email AS StagingImportCompanyContactAddress_Email, \r\n            T.password AS ");
            viewString.Append("StagingImportCompanyContactAddress_password, \r\n            T.Mobile AS StagingIm");
            viewString.Append("portCompanyContactAddress_Mobile, \r\n            T.RoleId AS StagingImportCompany");
            viewString.Append("ContactAddress_RoleId, \r\n            T.ContactPhone AS StagingImportCompanyConta");
            viewString.Append("ctAddress_ContactPhone, \r\n            T.ContactFax AS StagingImportCompanyContac");
            viewString.Append("tAddress_ContactFax, \r\n            T.AddInfo1 AS StagingImportCompanyContactAddr");
            viewString.Append("ess_AddInfo1, \r\n            T.AddInfo2 AS StagingImportCompanyContactAddress_Add");
            viewString.Append("Info2, \r\n            T.AddInfo3 AS StagingImportCompanyContactAddress_AddInfo3, ");
            viewString.Append("\r\n            T.AddInfo4 AS StagingImportCompanyContactAddress_AddInfo4, \r\n     ");
            viewString.Append("       T.AddInfo5 AS StagingImportCompanyContactAddress_AddInfo5, \r\n            ");
            viewString.Append("T.OrganisationId AS StagingImportCompanyContactAddress_OrganisationId, \r\n       ");
            viewString.Append("     T.SkypeId AS StagingImportCompanyContactAddress_SkypeId, \r\n            T.Li");
            viewString.Append("nkedInUrl AS StagingImportCompanyContactAddress_LinkedInUrl, \r\n            T.Fac");
            viewString.Append("ebookUrl AS StagingImportCompanyContactAddress_FacebookUrl, \r\n            T.Twit");
            viewString.Append("terUrl AS StagingImportCompanyContactAddress_TwitterUrl, \r\n            T.CanEdit");
            viewString.Append("Profile AS StagingImportCompanyContactAddress_CanEditProfile, \r\n            T.Ca");
            viewString.Append("nPlaceOrderWithoutApproval AS StagingImportCompanyContactAddress_CanPlaceOrderWi");
            viewString.Append("thoutApproval, \r\n            T.CanPlaceDirectOrder AS StagingImportCompanyContac");
            viewString.Append("tAddress_CanPlaceDirectOrder, \r\n            T.CanPayByPersonalCreditCard AS Stag");
            viewString.Append("ingImportCompanyContactAddress_CanPayByPersonalCreditCard, \r\n            T.CanSe");
            viewString.Append("ePrices AS StagingImportCompanyContactAddress_CanSeePrices, \r\n            T.HasW");
            viewString.Append("ebAccess AS StagingImportCompanyContactAddress_HasWebAccess, \r\n            T.Can");
            viewString.Append("PlaceOrder AS StagingImportCompanyContactAddress_CanPlaceOrder, \r\n            T.");
            viewString.Append("DirectLine AS StagingImportCompanyContactAddress_DirectLine, \r\n            T.Cor");
            viewString.Append("porateUnit AS StagingImportCompanyContactAddress_CorporateUnit, \r\n            T.");
            viewString.Append("TradingName AS StagingImportCompanyContactAddress_TradingName, \r\n            T.B");
            viewString.Append("PayCRN AS StagingImportCompanyContactAddress_BPayCRN, \r\n            T.ACN AS Sta");
            viewString.Append("gingImportCompanyContactAddress_ACN, \r\n            T.ContractorName AS StagingIm");
            viewString.Append("portCompanyContactAddress_ContractorName, \r\n            T.ABN AS StagingImportCo");
            viewString.Append("mpanyContactAddress_ABN, \r\n            T.Notes AS StagingImportCompanyContactAdd");
            viewString.Append("ress_Notes, \r\n            T.CreditLimit AS StagingImportCompanyContactAddress_Cr");
            viewString.Append("editLimit, \r\n            T.IsNewsLetterSubscription AS StagingImportCompanyConta");
            viewString.Append("ctAddress_IsNewsLetterSubscription, \r\n            T.IsEmailSubscription AS Stagi");
            viewString.Append("ngImportCompanyContactAddress_IsEmailSubscription, \r\n            T.IsDefaultCont");
            viewString.Append("act AS StagingImportCompanyContactAddress_IsDefaultContact, \r\n            T.POAd");
            viewString.Append("dress AS StagingImportCompanyContactAddress_POAddress, \r\n            T.StoreName");
            viewString.Append(" AS StagingImportCompanyContactAddress_StoreName, \r\n            T.WebAccessCode ");
            viewString.Append("AS StagingImportCompanyContactAddress_WebAccessCode, \r\n            True AS _from");
            viewString.Append("0\r\n        FROM DomainModelsStoreContainer.StagingImportCompanyContactAddress AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.StagingImportCompanyContactAddresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.TemplateVariableExtension
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView336()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.TemplateVariableExtension", @"
    SELECT VALUE -- Constructing TemplateVariableExtension
        [DomainModels.Store.TemplateVariableExtension](T1.TemplateVariableExtension_TemplateVariableExtId, T1.TemplateVariableExtension_TemplateId, T1.TemplateVariableExtension_FieldVariableId, T1.TemplateVariableExtension_HasPrefix, T1.TemplateVariableExtension_HasPostFix)
    FROM (
        SELECT 
            T.TemplateVariableExtId AS TemplateVariableExtension_TemplateVariableExtId, 
            T.TemplateId AS TemplateVariableExtension_TemplateId, 
            T.FieldVariableId AS TemplateVariableExtension_FieldVariableId, 
            T.HasPrefix AS TemplateVariableExtension_HasPrefix, 
            T.HasPostFix AS TemplateVariableExtension_HasPostFix, 
            True AS _from0
        FROM BaseDbContext.TemplateVariableExtensions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TemplateVariableExtensions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView337()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TemplateVariableExtensions", @"
    SELECT VALUE -- Constructing TemplateVariableExtensions
        [DomainModels.TemplateVariableExtension](T1.TemplateVariableExtension_TemplateVariableExtId, T1.TemplateVariableExtension_TemplateId, T1.TemplateVariableExtension_FieldVariableId, T1.TemplateVariableExtension_HasPrefix, T1.TemplateVariableExtension_HasPostFix)
    FROM (
        SELECT 
            T.TemplateVariableExtId AS TemplateVariableExtension_TemplateVariableExtId, 
            T.TemplateId AS TemplateVariableExtension_TemplateId, 
            T.FieldVariableId AS TemplateVariableExtension_FieldVariableId, 
            T.HasPrefix AS TemplateVariableExtension_HasPrefix, 
            T.HasPostFix AS TemplateVariableExtension_HasPostFix, 
            True AS _from0
        FROM DomainModelsStoreContainer.TemplateVariableExtension AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyVoucherRedeem
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView338()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyVoucherRedeem", @"
    SELECT VALUE -- Constructing CompanyVoucherRedeem
        [DomainModels.Store.CompanyVoucherRedeem](T1.CompanyVoucherRedeem_VoucherRedeemId, T1.CompanyVoucherRedeem_CompanyId, T1.CompanyVoucherRedeem_DiscountVoucherId, T1.CompanyVoucherRedeem_RedeemDate, T1.CompanyVoucherRedeem_ContactId)
    FROM (
        SELECT 
            T.VoucherRedeemId AS CompanyVoucherRedeem_VoucherRedeemId, 
            T.CompanyId AS CompanyVoucherRedeem_CompanyId, 
            T.DiscountVoucherId AS CompanyVoucherRedeem_DiscountVoucherId, 
            T.RedeemDate AS CompanyVoucherRedeem_RedeemDate, 
            T.ContactId AS CompanyVoucherRedeem_ContactId, 
            True AS _from0
        FROM BaseDbContext.CompanyVoucherRedeems AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyVoucherRedeems
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView339()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyVoucherRedeems", @"
    SELECT VALUE -- Constructing CompanyVoucherRedeems
        [DomainModels.CompanyVoucherRedeem](T1.CompanyVoucherRedeem_VoucherRedeemId, T1.CompanyVoucherRedeem_CompanyId, T1.CompanyVoucherRedeem_DiscountVoucherId, T1.CompanyVoucherRedeem_RedeemDate, T1.CompanyVoucherRedeem_ContactId)
    FROM (
        SELECT 
            T.VoucherRedeemId AS CompanyVoucherRedeem_VoucherRedeemId, 
            T.CompanyId AS CompanyVoucherRedeem_CompanyId, 
            T.DiscountVoucherId AS CompanyVoucherRedeem_DiscountVoucherId, 
            T.RedeemDate AS CompanyVoucherRedeem_RedeemDate, 
            T.ContactId AS CompanyVoucherRedeem_ContactId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyVoucherRedeem AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.DiscountVoucher
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView340()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2892);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DiscountVoucher\r\n        [DomainModels.Store.");
            viewString.Append("DiscountVoucher](T1.DiscountVoucher_DiscountVoucherId, T1.DiscountVoucher_Vouche");
            viewString.Append("rCode, T1.DiscountVoucher_ValidFromDate, T1.DiscountVoucher_ValidUptoDate, T1.Di");
            viewString.Append("scountVoucher_OrderId, T1.DiscountVoucher_DiscountRate, T1.DiscountVoucher_Consu");
            viewString.Append("medDate, T1.DiscountVoucher_IsEnabled, T1.DiscountVoucher_CreatedDate, T1.Discou");
            viewString.Append("ntVoucher_CompanyId, T1.DiscountVoucher_VoucherName, T1.DiscountVoucher_Discount");
            viewString.Append("Type, T1.DiscountVoucher_HasCoupon, T1.DiscountVoucher_CouponCode, T1.DiscountVo");
            viewString.Append("ucher_CouponUseType, T1.DiscountVoucher_IsUseWithOtherCoupon, T1.DiscountVoucher");
            viewString.Append("_IsTimeLimit, T1.DiscountVoucher_IsQtyRequirement, T1.DiscountVoucher_MinRequire");
            viewString.Append("dQty, T1.DiscountVoucher_MaxRequiredQty, T1.DiscountVoucher_IsOrderPriceRequirem");
            viewString.Append("ent, T1.DiscountVoucher_MinRequiredOrderPrice, T1.DiscountVoucher_MaxRequiredOrd");
            viewString.Append("erPrice, T1.DiscountVoucher_CustomerId, T1.DiscountVoucher_IsSingleUseRedeemed, ");
            viewString.Append("T1.DiscountVoucher_IsQtySpan, T1.DiscountVoucher_OrganisationId)\r\n    FROM (\r\n  ");
            viewString.Append("      SELECT \r\n            T.DiscountVoucherId AS DiscountVoucher_DiscountVouche");
            viewString.Append("rId, \r\n            T.VoucherCode AS DiscountVoucher_VoucherCode, \r\n            T");
            viewString.Append(".ValidFromDate AS DiscountVoucher_ValidFromDate, \r\n            T.ValidUptoDate A");
            viewString.Append("S DiscountVoucher_ValidUptoDate, \r\n            T.OrderId AS DiscountVoucher_Orde");
            viewString.Append("rId, \r\n            T.DiscountRate AS DiscountVoucher_DiscountRate, \r\n           ");
            viewString.Append(" T.ConsumedDate AS DiscountVoucher_ConsumedDate, \r\n            T.IsEnabled AS Di");
            viewString.Append("scountVoucher_IsEnabled, \r\n            T.CreatedDate AS DiscountVoucher_CreatedD");
            viewString.Append("ate, \r\n            T.CompanyId AS DiscountVoucher_CompanyId, \r\n            T.Vou");
            viewString.Append("cherName AS DiscountVoucher_VoucherName, \r\n            T.DiscountType AS Discoun");
            viewString.Append("tVoucher_DiscountType, \r\n            T.HasCoupon AS DiscountVoucher_HasCoupon, \r");
            viewString.Append("\n            T.CouponCode AS DiscountVoucher_CouponCode, \r\n            T.CouponU");
            viewString.Append("seType AS DiscountVoucher_CouponUseType, \r\n            T.IsUseWithOtherCoupon AS");
            viewString.Append(" DiscountVoucher_IsUseWithOtherCoupon, \r\n            T.IsTimeLimit AS DiscountVo");
            viewString.Append("ucher_IsTimeLimit, \r\n            T.IsQtyRequirement AS DiscountVoucher_IsQtyRequ");
            viewString.Append("irement, \r\n            T.MinRequiredQty AS DiscountVoucher_MinRequiredQty, \r\n   ");
            viewString.Append("         T.MaxRequiredQty AS DiscountVoucher_MaxRequiredQty, \r\n            T.IsO");
            viewString.Append("rderPriceRequirement AS DiscountVoucher_IsOrderPriceRequirement, \r\n            T");
            viewString.Append(".MinRequiredOrderPrice AS DiscountVoucher_MinRequiredOrderPrice, \r\n            T");
            viewString.Append(".MaxRequiredOrderPrice AS DiscountVoucher_MaxRequiredOrderPrice, \r\n            T");
            viewString.Append(".CustomerId AS DiscountVoucher_CustomerId, \r\n            T.IsSingleUseRedeemed A");
            viewString.Append("S DiscountVoucher_IsSingleUseRedeemed, \r\n            T.IsQtySpan AS DiscountVouc");
            viewString.Append("her_IsQtySpan, \r\n            T.OrganisationId AS DiscountVoucher_OrganisationId,");
            viewString.Append(" \r\n            True AS _from0\r\n        FROM BaseDbContext.DiscountVouchers AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.DiscountVoucher", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ItemsVoucher
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView341()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ItemsVoucher", @"
    SELECT VALUE -- Constructing ItemsVoucher
        [DomainModels.Store.ItemsVoucher](T1.ItemsVoucher_ItemVoucherId, T1.ItemsVoucher_ItemId, T1.ItemsVoucher_VoucherId)
    FROM (
        SELECT 
            T.ItemVoucherId AS ItemsVoucher_ItemVoucherId, 
            T.ItemId AS ItemsVoucher_ItemId, 
            T.VoucherId AS ItemsVoucher_VoucherId, 
            True AS _from0
        FROM BaseDbContext.ItemsVouchers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.ProductCategoryVoucher
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView342()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.ProductCategoryVoucher", @"
    SELECT VALUE -- Constructing ProductCategoryVoucher
        [DomainModels.Store.ProductCategoryVoucher](T1.ProductCategoryVoucher_CategoryVoucherId, T1.ProductCategoryVoucher_ProductCategoryId, T1.ProductCategoryVoucher_VoucherId)
    FROM (
        SELECT 
            T.CategoryVoucherId AS ProductCategoryVoucher_CategoryVoucherId, 
            T.ProductCategoryId AS ProductCategoryVoucher_ProductCategoryId, 
            T.VoucherId AS ProductCategoryVoucher_VoucherId, 
            True AS _from0
        FROM BaseDbContext.ProductCategoryVouchers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.DiscountVouchers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView343()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2899);
            viewString.Append("\r\n    SELECT VALUE -- Constructing DiscountVouchers\r\n        [DomainModels.Disco");
            viewString.Append("untVoucher](T1.DiscountVoucher_DiscountVoucherId, T1.DiscountVoucher_VoucherCode");
            viewString.Append(", T1.DiscountVoucher_ValidFromDate, T1.DiscountVoucher_ValidUptoDate, T1.Discoun");
            viewString.Append("tVoucher_OrderId, T1.DiscountVoucher_DiscountRate, T1.DiscountVoucher_ConsumedDa");
            viewString.Append("te, T1.DiscountVoucher_IsEnabled, T1.DiscountVoucher_CreatedDate, T1.DiscountVou");
            viewString.Append("cher_CompanyId, T1.DiscountVoucher_VoucherName, T1.DiscountVoucher_DiscountType,");
            viewString.Append(" T1.DiscountVoucher_HasCoupon, T1.DiscountVoucher_CouponCode, T1.DiscountVoucher");
            viewString.Append("_CouponUseType, T1.DiscountVoucher_IsUseWithOtherCoupon, T1.DiscountVoucher_IsTi");
            viewString.Append("meLimit, T1.DiscountVoucher_IsQtyRequirement, T1.DiscountVoucher_MinRequiredQty,");
            viewString.Append(" T1.DiscountVoucher_MaxRequiredQty, T1.DiscountVoucher_IsOrderPriceRequirement, ");
            viewString.Append("T1.DiscountVoucher_MinRequiredOrderPrice, T1.DiscountVoucher_MaxRequiredOrderPri");
            viewString.Append("ce, T1.DiscountVoucher_CustomerId, T1.DiscountVoucher_IsSingleUseRedeemed, T1.Di");
            viewString.Append("scountVoucher_IsQtySpan, T1.DiscountVoucher_OrganisationId)\r\n    FROM (\r\n       ");
            viewString.Append(" SELECT \r\n            T.DiscountVoucherId AS DiscountVoucher_DiscountVoucherId, ");
            viewString.Append("\r\n            T.VoucherCode AS DiscountVoucher_VoucherCode, \r\n            T.Vali");
            viewString.Append("dFromDate AS DiscountVoucher_ValidFromDate, \r\n            T.ValidUptoDate AS Dis");
            viewString.Append("countVoucher_ValidUptoDate, \r\n            T.OrderId AS DiscountVoucher_OrderId, ");
            viewString.Append("\r\n            T.DiscountRate AS DiscountVoucher_DiscountRate, \r\n            T.Co");
            viewString.Append("nsumedDate AS DiscountVoucher_ConsumedDate, \r\n            T.IsEnabled AS Discoun");
            viewString.Append("tVoucher_IsEnabled, \r\n            T.CreatedDate AS DiscountVoucher_CreatedDate, ");
            viewString.Append("\r\n            T.CompanyId AS DiscountVoucher_CompanyId, \r\n            T.VoucherN");
            viewString.Append("ame AS DiscountVoucher_VoucherName, \r\n            T.DiscountType AS DiscountVouc");
            viewString.Append("her_DiscountType, \r\n            T.HasCoupon AS DiscountVoucher_HasCoupon, \r\n    ");
            viewString.Append("        T.CouponCode AS DiscountVoucher_CouponCode, \r\n            T.CouponUseTyp");
            viewString.Append("e AS DiscountVoucher_CouponUseType, \r\n            T.IsUseWithOtherCoupon AS Disc");
            viewString.Append("ountVoucher_IsUseWithOtherCoupon, \r\n            T.IsTimeLimit AS DiscountVoucher");
            viewString.Append("_IsTimeLimit, \r\n            T.IsQtyRequirement AS DiscountVoucher_IsQtyRequireme");
            viewString.Append("nt, \r\n            T.MinRequiredQty AS DiscountVoucher_MinRequiredQty, \r\n        ");
            viewString.Append("    T.MaxRequiredQty AS DiscountVoucher_MaxRequiredQty, \r\n            T.IsOrderP");
            viewString.Append("riceRequirement AS DiscountVoucher_IsOrderPriceRequirement, \r\n            T.MinR");
            viewString.Append("equiredOrderPrice AS DiscountVoucher_MinRequiredOrderPrice, \r\n            T.MaxR");
            viewString.Append("equiredOrderPrice AS DiscountVoucher_MaxRequiredOrderPrice, \r\n            T.Cust");
            viewString.Append("omerId AS DiscountVoucher_CustomerId, \r\n            T.IsSingleUseRedeemed AS Dis");
            viewString.Append("countVoucher_IsSingleUseRedeemed, \r\n            T.IsQtySpan AS DiscountVoucher_I");
            viewString.Append("sQtySpan, \r\n            T.OrganisationId AS DiscountVoucher_OrganisationId, \r\n  ");
            viewString.Append("          True AS _from0\r\n        FROM DomainModelsStoreContainer.DiscountVouche");
            viewString.Append("r AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.DiscountVouchers", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ItemsVouchers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView344()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ItemsVouchers", @"
    SELECT VALUE -- Constructing ItemsVouchers
        [DomainModels.ItemsVoucher](T1.ItemsVoucher_ItemVoucherId, T1.ItemsVoucher_ItemId, T1.ItemsVoucher_VoucherId)
    FROM (
        SELECT 
            T.ItemVoucherId AS ItemsVoucher_ItemVoucherId, 
            T.ItemId AS ItemsVoucher_ItemId, 
            T.VoucherId AS ItemsVoucher_VoucherId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ItemsVoucher AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ProductCategoryVouchers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView345()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ProductCategoryVouchers", @"
    SELECT VALUE -- Constructing ProductCategoryVouchers
        [DomainModels.ProductCategoryVoucher](T1.ProductCategoryVoucher_CategoryVoucherId, T1.ProductCategoryVoucher_ProductCategoryId, T1.ProductCategoryVoucher_VoucherId)
    FROM (
        SELECT 
            T.CategoryVoucherId AS ProductCategoryVoucher_CategoryVoucherId, 
            T.ProductCategoryId AS ProductCategoryVoucher_ProductCategoryId, 
            T.VoucherId AS ProductCategoryVoucher_VoucherId, 
            True AS _from0
        FROM DomainModelsStoreContainer.ProductCategoryVoucher AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.MarketingBriefHistory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView346()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.MarketingBriefHistory", @"
    SELECT VALUE -- Constructing MarketingBriefHistory
        [DomainModels.Store.MarketingBriefHistory](T1.MarketingBriefHistory_MarketingBriefHistoryId, T1.MarketingBriefHistory_HtmlMsg, T1.MarketingBriefHistory_CompanyId, T1.MarketingBriefHistory_OrganisationId, T1.MarketingBriefHistory_ContactId, T1.MarketingBriefHistory_ItemId)
    FROM (
        SELECT 
            T.MarketingBriefHistoryId AS MarketingBriefHistory_MarketingBriefHistoryId, 
            T.HtmlMsg AS MarketingBriefHistory_HtmlMsg, 
            T.CompanyId AS MarketingBriefHistory_CompanyId, 
            T.OrganisationId AS MarketingBriefHistory_OrganisationId, 
            T.ContactId AS MarketingBriefHistory_ContactId, 
            T.ItemId AS MarketingBriefHistory_ItemId, 
            True AS _from0
        FROM BaseDbContext.MarketingBriefHistories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MarketingBriefHistories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView347()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MarketingBriefHistories", @"
    SELECT VALUE -- Constructing MarketingBriefHistories
        [DomainModels.MarketingBriefHistory](T1.MarketingBriefHistory_MarketingBriefHistoryId, T1.MarketingBriefHistory_HtmlMsg, T1.MarketingBriefHistory_CompanyId, T1.MarketingBriefHistory_OrganisationId, T1.MarketingBriefHistory_ContactId, T1.MarketingBriefHistory_ItemId)
    FROM (
        SELECT 
            T.MarketingBriefHistoryId AS MarketingBriefHistory_MarketingBriefHistoryId, 
            T.HtmlMsg AS MarketingBriefHistory_HtmlMsg, 
            T.CompanyId AS MarketingBriefHistory_CompanyId, 
            T.OrganisationId AS MarketingBriefHistory_OrganisationId, 
            T.ContactId AS MarketingBriefHistory_ContactId, 
            T.ItemId AS MarketingBriefHistory_ItemId, 
            True AS _from0
        FROM DomainModelsStoreContainer.MarketingBriefHistory AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.vw_RealEstateProperties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView348()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3055);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_RealEstateProperties\r\n        [DomainModel");
            viewString.Append("s.Store.vw_RealEstateProperties](T1.[vw_RealEstateProperties.ListingID], T1.[vw_");
            viewString.Append("RealEstateProperties.WebLink], T1.[vw_RealEstateProperties.AddressDisplay], T1.[");
            viewString.Append("vw_RealEstateProperties.StreetAddress], T1.[vw_RealEstateProperties.StreetNumber");
            viewString.Append("], T1.[vw_RealEstateProperties.Street], T1.[vw_RealEstateProperties.Suburb], T1.");
            viewString.Append("[vw_RealEstateProperties.State], T1.[vw_RealEstateProperties.PropertyName], T1.[");
            viewString.Append("vw_RealEstateProperties.PropertyType], T1.[vw_RealEstateProperties.PropertyCateg");
            viewString.Append("ory], T1.[vw_RealEstateProperties.DisplayPrice], T1.[vw_RealEstateProperties.Mai");
            viewString.Append("nHeadLine], T1.[vw_RealEstateProperties.MainDescription], T1.[vw_RealEstatePrope");
            viewString.Append("rties.BedRooms], T1.[vw_RealEstateProperties.BathRooms], T1.[vw_RealEstateProper");
            viewString.Append("ties.LoungeRooms], T1.[vw_RealEstateProperties.Toilets], T1.[vw_RealEstateProper");
            viewString.Append("ties.Studies], T1.[vw_RealEstateProperties.Pools], T1.[vw_RealEstateProperties.G");
            viewString.Append("arages], T1.[vw_RealEstateProperties.Carports], T1.[vw_RealEstateProperties.Feat");
            viewString.Append("ures], T1.[vw_RealEstateProperties.CompanyId], T1.[vw_RealEstateProperties.Listi");
            viewString.Append("ngImage], T1.[vw_RealEstateProperties.ListingAgent])\r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.ListingID AS [vw_RealEstateProperties.ListingID], \r\n           ");
            viewString.Append(" T.WebLink AS [vw_RealEstateProperties.WebLink], \r\n            T.AddressDisplay ");
            viewString.Append("AS [vw_RealEstateProperties.AddressDisplay], \r\n            T.StreetAddress AS [v");
            viewString.Append("w_RealEstateProperties.StreetAddress], \r\n            T.StreetNumber AS [vw_RealE");
            viewString.Append("stateProperties.StreetNumber], \r\n            T.Street AS [vw_RealEstatePropertie");
            viewString.Append("s.Street], \r\n            T.Suburb AS [vw_RealEstateProperties.Suburb], \r\n       ");
            viewString.Append("     T.State AS [vw_RealEstateProperties.State], \r\n            T.PropertyName AS");
            viewString.Append(" [vw_RealEstateProperties.PropertyName], \r\n            T.PropertyType AS [vw_Rea");
            viewString.Append("lEstateProperties.PropertyType], \r\n            T.PropertyCategory AS [vw_RealEst");
            viewString.Append("ateProperties.PropertyCategory], \r\n            T.DisplayPrice AS [vw_RealEstateP");
            viewString.Append("roperties.DisplayPrice], \r\n            T.MainHeadLine AS [vw_RealEstatePropertie");
            viewString.Append("s.MainHeadLine], \r\n            T.MainDescription AS [vw_RealEstateProperties.Mai");
            viewString.Append("nDescription], \r\n            T.BedRooms AS [vw_RealEstateProperties.BedRooms], \r");
            viewString.Append("\n            T.BathRooms AS [vw_RealEstateProperties.BathRooms], \r\n            T");
            viewString.Append(".LoungeRooms AS [vw_RealEstateProperties.LoungeRooms], \r\n            T.Toilets A");
            viewString.Append("S [vw_RealEstateProperties.Toilets], \r\n            T.Studies AS [vw_RealEstatePr");
            viewString.Append("operties.Studies], \r\n            T.Pools AS [vw_RealEstateProperties.Pools], \r\n ");
            viewString.Append("           T.Garages AS [vw_RealEstateProperties.Garages], \r\n            T.Carpo");
            viewString.Append("rts AS [vw_RealEstateProperties.Carports], \r\n            T.Features AS [vw_RealE");
            viewString.Append("stateProperties.Features], \r\n            T.CompanyId AS [vw_RealEstateProperties");
            viewString.Append(".CompanyId], \r\n            T.ListingImage AS [vw_RealEstateProperties.ListingIma");
            viewString.Append("ge], \r\n            T.ListingAgent AS [vw_RealEstateProperties.ListingAgent], \r\n ");
            viewString.Append("           True AS _from0\r\n        FROM BaseDbContext.vw_RealEstateProperties AS");
            viewString.Append(" T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.vw_RealEstateProperties", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.vw_RealEstateProperties
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView349()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3062);
            viewString.Append("\r\n    SELECT VALUE -- Constructing vw_RealEstateProperties\r\n        [DomainModel");
            viewString.Append("s.vw_RealEstateProperties](T1.[vw_RealEstateProperties.ListingID], T1.[vw_RealEs");
            viewString.Append("tateProperties.WebLink], T1.[vw_RealEstateProperties.AddressDisplay], T1.[vw_Rea");
            viewString.Append("lEstateProperties.StreetAddress], T1.[vw_RealEstateProperties.StreetNumber], T1.");
            viewString.Append("[vw_RealEstateProperties.Street], T1.[vw_RealEstateProperties.Suburb], T1.[vw_Re");
            viewString.Append("alEstateProperties.State], T1.[vw_RealEstateProperties.PropertyName], T1.[vw_Rea");
            viewString.Append("lEstateProperties.PropertyType], T1.[vw_RealEstateProperties.PropertyCategory], ");
            viewString.Append("T1.[vw_RealEstateProperties.DisplayPrice], T1.[vw_RealEstateProperties.MainHeadL");
            viewString.Append("ine], T1.[vw_RealEstateProperties.MainDescription], T1.[vw_RealEstateProperties.");
            viewString.Append("BedRooms], T1.[vw_RealEstateProperties.BathRooms], T1.[vw_RealEstateProperties.L");
            viewString.Append("oungeRooms], T1.[vw_RealEstateProperties.Toilets], T1.[vw_RealEstateProperties.S");
            viewString.Append("tudies], T1.[vw_RealEstateProperties.Pools], T1.[vw_RealEstateProperties.Garages");
            viewString.Append("], T1.[vw_RealEstateProperties.Carports], T1.[vw_RealEstateProperties.Features],");
            viewString.Append(" T1.[vw_RealEstateProperties.CompanyId], T1.[vw_RealEstateProperties.ListingImag");
            viewString.Append("e], T1.[vw_RealEstateProperties.ListingAgent])\r\n    FROM (\r\n        SELECT \r\n   ");
            viewString.Append("         T.ListingID AS [vw_RealEstateProperties.ListingID], \r\n            T.Web");
            viewString.Append("Link AS [vw_RealEstateProperties.WebLink], \r\n            T.AddressDisplay AS [vw");
            viewString.Append("_RealEstateProperties.AddressDisplay], \r\n            T.StreetAddress AS [vw_Real");
            viewString.Append("EstateProperties.StreetAddress], \r\n            T.StreetNumber AS [vw_RealEstateP");
            viewString.Append("roperties.StreetNumber], \r\n            T.Street AS [vw_RealEstateProperties.Stre");
            viewString.Append("et], \r\n            T.Suburb AS [vw_RealEstateProperties.Suburb], \r\n            T");
            viewString.Append(".State AS [vw_RealEstateProperties.State], \r\n            T.PropertyName AS [vw_R");
            viewString.Append("ealEstateProperties.PropertyName], \r\n            T.PropertyType AS [vw_RealEstat");
            viewString.Append("eProperties.PropertyType], \r\n            T.PropertyCategory AS [vw_RealEstatePro");
            viewString.Append("perties.PropertyCategory], \r\n            T.DisplayPrice AS [vw_RealEstatePropert");
            viewString.Append("ies.DisplayPrice], \r\n            T.MainHeadLine AS [vw_RealEstateProperties.Main");
            viewString.Append("HeadLine], \r\n            T.MainDescription AS [vw_RealEstateProperties.MainDescr");
            viewString.Append("iption], \r\n            T.BedRooms AS [vw_RealEstateProperties.BedRooms], \r\n     ");
            viewString.Append("       T.BathRooms AS [vw_RealEstateProperties.BathRooms], \r\n            T.Loung");
            viewString.Append("eRooms AS [vw_RealEstateProperties.LoungeRooms], \r\n            T.Toilets AS [vw_");
            viewString.Append("RealEstateProperties.Toilets], \r\n            T.Studies AS [vw_RealEstateProperti");
            viewString.Append("es.Studies], \r\n            T.Pools AS [vw_RealEstateProperties.Pools], \r\n       ");
            viewString.Append("     T.Garages AS [vw_RealEstateProperties.Garages], \r\n            T.Carports AS");
            viewString.Append(" [vw_RealEstateProperties.Carports], \r\n            T.Features AS [vw_RealEstateP");
            viewString.Append("roperties.Features], \r\n            T.CompanyId AS [vw_RealEstateProperties.Compa");
            viewString.Append("nyId], \r\n            T.ListingImage AS [vw_RealEstateProperties.ListingImage], \r");
            viewString.Append("\n            T.ListingAgent AS [vw_RealEstateProperties.ListingAgent], \r\n       ");
            viewString.Append("     True AS _from0\r\n        FROM DomainModelsStoreContainer.vw_RealEstateProper");
            viewString.Append("ties AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.vw_RealEstateProperties", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.vw_CompanyVariableIcons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView350()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.vw_CompanyVariableIcons", @"
    SELECT VALUE -- Constructing vw_CompanyVariableIcons
        [DomainModels.Store.vw_CompanyVariableIcons](T1.[vw_CompanyVariableIcons.variableid], T1.[vw_CompanyVariableIcons.variablename], T1.[vw_CompanyVariableIcons.variabletag], T1.[vw_CompanyVariableIcons.CompanyId], T1.[vw_CompanyVariableIcons.OrganisationId], T1.[vw_CompanyVariableIcons.ContactCompanyId], T1.[vw_CompanyVariableIcons.Icon], T1.[vw_CompanyVariableIcons.VariableIconId])
    FROM (
        SELECT 
            T.variableid AS [vw_CompanyVariableIcons.variableid], 
            T.variablename AS [vw_CompanyVariableIcons.variablename], 
            T.variabletag AS [vw_CompanyVariableIcons.variabletag], 
            T.CompanyId AS [vw_CompanyVariableIcons.CompanyId], 
            T.OrganisationId AS [vw_CompanyVariableIcons.OrganisationId], 
            T.ContactCompanyId AS [vw_CompanyVariableIcons.ContactCompanyId], 
            T.Icon AS [vw_CompanyVariableIcons.Icon], 
            T.VariableIconId AS [vw_CompanyVariableIcons.VariableIconId], 
            True AS _from0
        FROM BaseDbContext.vw_CompanyVariableIcons AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.vw_CompanyVariableIcons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView351()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.vw_CompanyVariableIcons", @"
    SELECT VALUE -- Constructing vw_CompanyVariableIcons
        [DomainModels.vw_CompanyVariableIcons](T1.[vw_CompanyVariableIcons.variableid], T1.[vw_CompanyVariableIcons.variablename], T1.[vw_CompanyVariableIcons.variabletag], T1.[vw_CompanyVariableIcons.CompanyId], T1.[vw_CompanyVariableIcons.OrganisationId], T1.[vw_CompanyVariableIcons.ContactCompanyId], T1.[vw_CompanyVariableIcons.Icon], T1.[vw_CompanyVariableIcons.VariableIconId])
    FROM (
        SELECT 
            T.variableid AS [vw_CompanyVariableIcons.variableid], 
            T.variablename AS [vw_CompanyVariableIcons.variablename], 
            T.variabletag AS [vw_CompanyVariableIcons.variabletag], 
            T.CompanyId AS [vw_CompanyVariableIcons.CompanyId], 
            T.OrganisationId AS [vw_CompanyVariableIcons.OrganisationId], 
            T.ContactCompanyId AS [vw_CompanyVariableIcons.ContactCompanyId], 
            T.Icon AS [vw_CompanyVariableIcons.Icon], 
            T.VariableIconId AS [vw_CompanyVariableIcons.VariableIconId], 
            True AS _from0
        FROM DomainModelsStoreContainer.vw_CompanyVariableIcons AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.CompanyVariableIcon
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView352()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.CompanyVariableIcon", @"
    SELECT VALUE -- Constructing CompanyVariableIcon
        [DomainModels.Store.CompanyVariableIcon](T1.CompanyVariableIcon_VariableIconId, T1.CompanyVariableIcon_VariableId, T1.CompanyVariableIcon_Icon, T1.CompanyVariableIcon_ContactCompanyId)
    FROM (
        SELECT 
            T.VariableIconId AS CompanyVariableIcon_VariableIconId, 
            T.VariableId AS CompanyVariableIcon_VariableId, 
            T.Icon AS CompanyVariableIcon_Icon, 
            T.ContactCompanyId AS CompanyVariableIcon_ContactCompanyId, 
            True AS _from0
        FROM BaseDbContext.CompanyVariableIcons AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.CompanyVariableIcons
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView353()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.CompanyVariableIcons", @"
    SELECT VALUE -- Constructing CompanyVariableIcons
        [DomainModels.CompanyVariableIcon](T1.CompanyVariableIcon_VariableIconId, T1.CompanyVariableIcon_VariableId, T1.CompanyVariableIcon_Icon, T1.CompanyVariableIcon_ContactCompanyId)
    FROM (
        SELECT 
            T.VariableIconId AS CompanyVariableIcon_VariableIconId, 
            T.VariableId AS CompanyVariableIcon_VariableId, 
            T.Icon AS CompanyVariableIcon_Icon, 
            T.ContactCompanyId AS CompanyVariableIcon_ContactCompanyId, 
            True AS _from0
        FROM DomainModelsStoreContainer.CompanyVariableIcon AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.UserActionsLog
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView354()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.UserActionsLog", @"
    SELECT VALUE -- Constructing UserActionsLog
        [DomainModels.Store.UserActionsLog](T1.UserActionsLog_LogId, T1.UserActionsLog_Action, T1.UserActionsLog_ActionDate, T1.UserActionsLog_TableName, T1.UserActionsLog_RecordId, T1.UserActionsLog_UserId, T1.UserActionsLog_DomainId, T1.UserActionsLog_Comments, T1.UserActionsLog_OrganisationId)
    FROM (
        SELECT 
            T.LogId AS UserActionsLog_LogId, 
            T.Action AS UserActionsLog_Action, 
            T.ActionDate AS UserActionsLog_ActionDate, 
            T.TableName AS UserActionsLog_TableName, 
            T.RecordId AS UserActionsLog_RecordId, 
            T.UserId AS UserActionsLog_UserId, 
            T.DomainId AS UserActionsLog_DomainId, 
            T.Comments AS UserActionsLog_Comments, 
            T.OrganisationId AS UserActionsLog_OrganisationId, 
            True AS _from0
        FROM BaseDbContext.UserActionsLogs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.UserActionsLogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView355()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.UserActionsLogs", @"
    SELECT VALUE -- Constructing UserActionsLogs
        [DomainModels.UserActionsLog](T1.UserActionsLog_LogId, T1.UserActionsLog_Action, T1.UserActionsLog_ActionDate, T1.UserActionsLog_TableName, T1.UserActionsLog_RecordId, T1.UserActionsLog_UserId, T1.UserActionsLog_DomainId, T1.UserActionsLog_Comments, T1.UserActionsLog_OrganisationId)
    FROM (
        SELECT 
            T.LogId AS UserActionsLog_LogId, 
            T.Action AS UserActionsLog_Action, 
            T.ActionDate AS UserActionsLog_ActionDate, 
            T.TableName AS UserActionsLog_TableName, 
            T.RecordId AS UserActionsLog_RecordId, 
            T.UserId AS UserActionsLog_UserId, 
            T.DomainId AS UserActionsLog_DomainId, 
            T.Comments AS UserActionsLog_Comments, 
            T.OrganisationId AS UserActionsLog_OrganisationId, 
            True AS _from0
        FROM DomainModelsStoreContainer.UserActionsLog AS T
    ) AS T1");
        }
    }
}


