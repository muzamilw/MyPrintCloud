//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets5C9B802AC844FDAB09DF8A61E936F447BAC34F833CCAD202DB6406F8F48AEAC1))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets5C9B802AC844FDAB09DF8A61E936F447BAC34F833CCAD202DB6406F8F48AEAC1 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets5C9B802AC844FDAB09DF8A61E936F447BAC34F833CCAD202DB6406F8F48AEAC1()
        {
            this.EdmEntityContainerName = "BaseDbContext";
            this.StoreEntityContainerName = "DomainModelsStoreContainer";
            this.HashOverMappingClosure = "29e535ea70056cf84a9024aa75663f5cc55ac76ee28eb2f650142a10a38ef3d1";
            this.HashOverAllExtentViews = "464d6582432f1df41e0503498de643e251b0862f9a7c42f579648d73263e59a4";
            this.ViewCount = 8;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_chartofaccount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_chartofaccount", "\r\n    SELECT VALUE -- Constructing tbl_chartofaccount\r\n        [DomainModels.Stor" +
                    "e.tbl_chartofaccount](T1.[tbl_chartofaccount.ID], T1.[tbl_chartofaccount.Account" +
                    "No], T1.[tbl_chartofaccount.Name], T1.[tbl_chartofaccount.OpeningBalance], T1.[t" +
                    "bl_chartofaccount.OpeningBalanceType], T1.[tbl_chartofaccount.TypeID], T1.[tbl_c" +
                    "hartofaccount.SubTypeID], T1.[tbl_chartofaccount.Description], T1.[tbl_chartofac" +
                    "count.Nature], T1.[tbl_chartofaccount.IsActive], T1.[tbl_chartofaccount.IsFixed]" +
                    ", T1.[tbl_chartofaccount.LastActivityDate], T1.[tbl_chartofaccount.IsForReconcil" +
                    "iation], T1.[tbl_chartofaccount.Balance], T1.[tbl_chartofaccount.IsRead], T1.[tb" +
                    "l_chartofaccount.SystemSiteID], T1.[tbl_chartofaccount.UserDomainKey])\r\n    FROM" +
                    " (\r\n        SELECT \r\n            T.Id AS [tbl_chartofaccount.ID], \r\n            " +
                    "T.AccountNo AS [tbl_chartofaccount.AccountNo], \r\n            T.Name AS [tbl_char" +
                    "tofaccount.Name], \r\n            T.OpeningBalance AS [tbl_chartofaccount.OpeningB" +
                    "alance], \r\n            T.OpeningBalanceType AS [tbl_chartofaccount.OpeningBalanc" +
                    "eType], \r\n            T.TypeId AS [tbl_chartofaccount.TypeID], \r\n            T.S" +
                    "ubTypeId AS [tbl_chartofaccount.SubTypeID], \r\n            T.Description AS [tbl_" +
                    "chartofaccount.Description], \r\n            T.Nature AS [tbl_chartofaccount.Natur" +
                    "e], \r\n            T.IsActive AS [tbl_chartofaccount.IsActive], \r\n            T.I" +
                    "sFixed AS [tbl_chartofaccount.IsFixed], \r\n            T.LastActivityDate AS [tbl" +
                    "_chartofaccount.LastActivityDate], \r\n            T.IsForReconciliation AS [tbl_c" +
                    "hartofaccount.IsForReconciliation], \r\n            T.Balance AS [tbl_chartofaccou" +
                    "nt.Balance], \r\n            T.IsRead AS [tbl_chartofaccount.IsRead], \r\n          " +
                    "  T.SystemSiteId AS [tbl_chartofaccount.SystemSiteID], \r\n            T.UserDomai" +
                    "nKey AS [tbl_chartofaccount.UserDomainKey], \r\n            True AS _from0\r\n      " +
                    "  FROM BaseDbContext.ChartOfAccounts AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.ChartOfAccounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.ChartOfAccounts", "\r\n    SELECT VALUE -- Constructing ChartOfAccounts\r\n        [DomainModels.ChartOf" +
                    "Account](T1.ChartOfAccount_Id, T1.ChartOfAccount_AccountNo, T1.ChartOfAccount_Na" +
                    "me, T1.ChartOfAccount_OpeningBalance, T1.ChartOfAccount_OpeningBalanceType, T1.C" +
                    "hartOfAccount_TypeId, T1.ChartOfAccount_SubTypeId, T1.ChartOfAccount_Description" +
                    ", T1.ChartOfAccount_Nature, T1.ChartOfAccount_IsActive, T1.ChartOfAccount_IsFixe" +
                    "d, T1.ChartOfAccount_LastActivityDate, T1.ChartOfAccount_IsForReconciliation, T1" +
                    ".ChartOfAccount_Balance, T1.ChartOfAccount_IsRead, T1.ChartOfAccount_SystemSiteI" +
                    "d, T1.ChartOfAccount_UserDomainKey)\r\n    FROM (\r\n        SELECT \r\n            T." +
                    "ID AS ChartOfAccount_Id, \r\n            T.AccountNo AS ChartOfAccount_AccountNo, " +
                    "\r\n            T.Name AS ChartOfAccount_Name, \r\n            T.OpeningBalance AS C" +
                    "hartOfAccount_OpeningBalance, \r\n            T.OpeningBalanceType AS ChartOfAccou" +
                    "nt_OpeningBalanceType, \r\n            T.TypeID AS ChartOfAccount_TypeId, \r\n      " +
                    "      T.SubTypeID AS ChartOfAccount_SubTypeId, \r\n            T.Description AS Ch" +
                    "artOfAccount_Description, \r\n            T.Nature AS ChartOfAccount_Nature, \r\n   " +
                    "         T.IsActive AS ChartOfAccount_IsActive, \r\n            T.IsFixed AS Chart" +
                    "OfAccount_IsFixed, \r\n            T.LastActivityDate AS ChartOfAccount_LastActivi" +
                    "tyDate, \r\n            T.IsForReconciliation AS ChartOfAccount_IsForReconciliatio" +
                    "n, \r\n            T.Balance AS ChartOfAccount_Balance, \r\n            T.IsRead AS " +
                    "ChartOfAccount_IsRead, \r\n            T.SystemSiteID AS ChartOfAccount_SystemSite" +
                    "Id, \r\n            T.UserDomainKey AS ChartOfAccount_UserDomainKey, \r\n           " +
                    " True AS _from0\r\n        FROM DomainModelsStoreContainer.tbl_chartofaccount AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_company_sites
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4305);
            viewString.Append("\r\n    SELECT VALUE -- Constructing tbl_company_sites\r\n        [DomainModels.Stor");
            viewString.Append("e.tbl_company_sites](T1.[tbl_company_sites.CompanySiteID], T1.[tbl_company_sites");
            viewString.Append(".CompanySiteName], T1.[tbl_company_sites.Address1], T1.[tbl_company_sites.Addres");
            viewString.Append("s2], T1.[tbl_company_sites.Address3], T1.[tbl_company_sites.City], T1.[tbl_compa");
            viewString.Append("ny_sites.State], T1.[tbl_company_sites.Country], T1.[tbl_company_sites.ZipCode],");
            viewString.Append(" T1.[tbl_company_sites.Tel], T1.[tbl_company_sites.Fax], T1.[tbl_company_sites.M");
            viewString.Append("obile], T1.[tbl_company_sites.Email], T1.[tbl_company_sites.URL], T1.[tbl_compan");
            viewString.Append("y_sites.CompanyID], T1.[tbl_company_sites.StateTaxID], T1.[tbl_company_sites.Tax");
            viewString.Append("1], T1.[tbl_company_sites.Tax2], T1.[tbl_company_sites.Tax3], T1.[tbl_company_si");
            viewString.Append("tes.ProductionManagerID], T1.[tbl_company_sites.MarkupID], T1.[tbl_company_sites");
            viewString.Append(".OrderManagerID], T1.[tbl_company_sites.WebsiteLogo], T1.[tbl_company_sites.MISL");
            viewString.Append("ogo], T1.[tbl_company_sites.Tax2ID], T1.[tbl_company_sites.Tax3ID], T1.[tbl_comp");
            viewString.Append("any_sites.TaxRegistrationNo], T1.[tbl_company_sites.PaymentBusinessEmail], T1.[t");
            viewString.Append("bl_company_sites.PaymentIdentityToken], T1.[tbl_company_sites.PaymentGatewayID],");
            viewString.Append(" T1.[tbl_company_sites.LicenseLevel], T1.[tbl_company_sites.CustomerID], T1.[tbl");
            viewString.Append("_company_sites.CustomerAccountNumber], T1.[tbl_company_sites.SmtpServer], T1.[tb");
            viewString.Append("l_company_sites.SmtpUserName], T1.[tbl_company_sites.SmtpPassword], T1.[tbl_comp");
            viewString.Append("any_sites.VATRegNumber], T1.[tbl_company_sites.SystemLengthUnit], T1.[tbl_compan");
            viewString.Append("y_sites.SystemWeightUnit], T1.[tbl_company_sites.CurrencyID], T1.[tbl_company_si");
            viewString.Append("tes.LanguageID], T1.[tbl_company_sites.UserDomainKey])\r\n    FROM (\r\n        SELE");
            viewString.Append("CT \r\n            T.OrganisationId AS [tbl_company_sites.CompanySiteID], \r\n      ");
            viewString.Append("      T.OrganisationName AS [tbl_company_sites.CompanySiteName], \r\n            T");
            viewString.Append(".Address1 AS [tbl_company_sites.Address1], \r\n            T.Address2 AS [tbl_comp");
            viewString.Append("any_sites.Address2], \r\n            T.Address3 AS [tbl_company_sites.Address3], \r");
            viewString.Append("\n            T.City AS [tbl_company_sites.City], \r\n            T.State AS [tbl_c");
            viewString.Append("ompany_sites.State], \r\n            T.Country AS [tbl_company_sites.Country], \r\n ");
            viewString.Append("           T.ZipCode AS [tbl_company_sites.ZipCode], \r\n            T.Tel AS [tbl");
            viewString.Append("_company_sites.Tel], \r\n            T.Fax AS [tbl_company_sites.Fax], \r\n         ");
            viewString.Append("   T.Mobile AS [tbl_company_sites.Mobile], \r\n            T.Email AS [tbl_company");
            viewString.Append("_sites.Email], \r\n            T.Url AS [tbl_company_sites.URL], \r\n            T.C");
            viewString.Append("ompanyId AS [tbl_company_sites.CompanyID], \r\n            T.StateTaxId AS [tbl_co");
            viewString.Append("mpany_sites.StateTaxID], \r\n            T.Tax1 AS [tbl_company_sites.Tax1], \r\n   ");
            viewString.Append("         T.Tax2 AS [tbl_company_sites.Tax2], \r\n            T.Tax3 AS [tbl_compan");
            viewString.Append("y_sites.Tax3], \r\n            T.ProductionManagerId AS [tbl_company_sites.Product");
            viewString.Append("ionManagerID], \r\n            T.MarkupId AS [tbl_company_sites.MarkupID], \r\n     ");
            viewString.Append("       T.OrderManagerId AS [tbl_company_sites.OrderManagerID], \r\n            T.W");
            viewString.Append("ebsiteLogo AS [tbl_company_sites.WebsiteLogo], \r\n            T.MisLogo AS [tbl_c");
            viewString.Append("ompany_sites.MISLogo], \r\n            T.Tax2Id AS [tbl_company_sites.Tax2ID], \r\n ");
            viewString.Append("           T.Tax3Id AS [tbl_company_sites.Tax3ID], \r\n            T.TaxRegistrati");
            viewString.Append("onNo AS [tbl_company_sites.TaxRegistrationNo], \r\n            T.PaymentBusinessEm");
            viewString.Append("ail AS [tbl_company_sites.PaymentBusinessEmail], \r\n            T.PaymentIdentity");
            viewString.Append("Token AS [tbl_company_sites.PaymentIdentityToken], \r\n            T.PaymentGatewa");
            viewString.Append("yId AS [tbl_company_sites.PaymentGatewayID], \r\n            T.LicenseLevel AS [tb");
            viewString.Append("l_company_sites.LicenseLevel], \r\n            T.CustomerId AS [tbl_company_sites.");
            viewString.Append("CustomerID], \r\n            T.CustomerAccountNumber AS [tbl_company_sites.Custome");
            viewString.Append("rAccountNumber], \r\n            T.SmtpServer AS [tbl_company_sites.SmtpServer], \r");
            viewString.Append("\n            T.SmtpUserName AS [tbl_company_sites.SmtpUserName], \r\n            T");
            viewString.Append(".SmtpPassword AS [tbl_company_sites.SmtpPassword], \r\n            T.VatRegNumber ");
            viewString.Append("AS [tbl_company_sites.VATRegNumber], \r\n            T.SystemLengthUnit AS [tbl_co");
            viewString.Append("mpany_sites.SystemLengthUnit], \r\n            T.SystemWeightUnit AS [tbl_company_");
            viewString.Append("sites.SystemWeightUnit], \r\n            T.CurrencyId AS [tbl_company_sites.Curren");
            viewString.Append("cyID], \r\n            T.LanguageId AS [tbl_company_sites.LanguageID], \r\n         ");
            viewString.Append("   T.UserDomainKey AS [tbl_company_sites.UserDomainKey], \r\n            True AS _");
            viewString.Append("from0\r\n        FROM BaseDbContext.Organisations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_company_sites", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for BaseDbContext.Organisations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3721);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Organisations\r\n        [DomainModels.Organisa");
            viewString.Append("tion](T1.Organisation_OrganisationId, T1.Organisation_OrganisationName, T1.Organ");
            viewString.Append("isation_Address1, T1.Organisation_Address2, T1.Organisation_Address3, T1.Organis");
            viewString.Append("ation_City, T1.Organisation_State, T1.Organisation_Country, T1.Organisation_ZipC");
            viewString.Append("ode, T1.Organisation_Tel, T1.Organisation_Fax, T1.Organisation_Mobile, T1.Organi");
            viewString.Append("sation_Email, T1.Organisation_Url, T1.Organisation_CompanyId, T1.Organisation_St");
            viewString.Append("ateTaxId, T1.Organisation_Tax1, T1.Organisation_Tax2, T1.Organisation_Tax3, T1.O");
            viewString.Append("rganisation_ProductionManagerId, T1.Organisation_MarkupId, T1.Organisation_Order");
            viewString.Append("ManagerId, T1.Organisation_WebsiteLogo, T1.Organisation_MisLogo, T1.Organisation");
            viewString.Append("_Tax2Id, T1.Organisation_Tax3Id, T1.Organisation_TaxRegistrationNo, T1.Organisat");
            viewString.Append("ion_PaymentBusinessEmail, T1.Organisation_PaymentIdentityToken, T1.Organisation_");
            viewString.Append("PaymentGatewayId, T1.Organisation_LicenseLevel, T1.Organisation_CustomerId, T1.O");
            viewString.Append("rganisation_CustomerAccountNumber, T1.Organisation_SmtpServer, T1.Organisation_S");
            viewString.Append("mtpUserName, T1.Organisation_SmtpPassword, T1.Organisation_VatRegNumber, T1.Orga");
            viewString.Append("nisation_SystemLengthUnit, T1.Organisation_SystemWeightUnit, T1.Organisation_Cur");
            viewString.Append("rencyId, T1.Organisation_LanguageId, T1.Organisation_UserDomainKey)\r\n    FROM (\r");
            viewString.Append("\n        SELECT \r\n            T.CompanySiteID AS Organisation_OrganisationId, \r\n");
            viewString.Append("            T.CompanySiteName AS Organisation_OrganisationName, \r\n            T.");
            viewString.Append("Address1 AS Organisation_Address1, \r\n            T.Address2 AS Organisation_Addr");
            viewString.Append("ess2, \r\n            T.Address3 AS Organisation_Address3, \r\n            T.City AS");
            viewString.Append(" Organisation_City, \r\n            T.State AS Organisation_State, \r\n            T");
            viewString.Append(".Country AS Organisation_Country, \r\n            T.ZipCode AS Organisation_ZipCod");
            viewString.Append("e, \r\n            T.Tel AS Organisation_Tel, \r\n            T.Fax AS Organisation_");
            viewString.Append("Fax, \r\n            T.Mobile AS Organisation_Mobile, \r\n            T.Email AS Org");
            viewString.Append("anisation_Email, \r\n            T.URL AS Organisation_Url, \r\n            T.Compan");
            viewString.Append("yID AS Organisation_CompanyId, \r\n            T.StateTaxID AS Organisation_StateT");
            viewString.Append("axId, \r\n            T.Tax1 AS Organisation_Tax1, \r\n            T.Tax2 AS Organis");
            viewString.Append("ation_Tax2, \r\n            T.Tax3 AS Organisation_Tax3, \r\n            T.Productio");
            viewString.Append("nManagerID AS Organisation_ProductionManagerId, \r\n            T.MarkupID AS Orga");
            viewString.Append("nisation_MarkupId, \r\n            T.OrderManagerID AS Organisation_OrderManagerId");
            viewString.Append(", \r\n            T.WebsiteLogo AS Organisation_WebsiteLogo, \r\n            T.MISLo");
            viewString.Append("go AS Organisation_MisLogo, \r\n            T.Tax2ID AS Organisation_Tax2Id, \r\n   ");
            viewString.Append("         T.Tax3ID AS Organisation_Tax3Id, \r\n            T.TaxRegistrationNo AS O");
            viewString.Append("rganisation_TaxRegistrationNo, \r\n            T.PaymentBusinessEmail AS Organisat");
            viewString.Append("ion_PaymentBusinessEmail, \r\n            T.PaymentIdentityToken AS Organisation_P");
            viewString.Append("aymentIdentityToken, \r\n            T.PaymentGatewayID AS Organisation_PaymentGat");
            viewString.Append("ewayId, \r\n            T.LicenseLevel AS Organisation_LicenseLevel, \r\n           ");
            viewString.Append(" T.CustomerID AS Organisation_CustomerId, \r\n            T.CustomerAccountNumber ");
            viewString.Append("AS Organisation_CustomerAccountNumber, \r\n            T.SmtpServer AS Organisatio");
            viewString.Append("n_SmtpServer, \r\n            T.SmtpUserName AS Organisation_SmtpUserName, \r\n     ");
            viewString.Append("       T.SmtpPassword AS Organisation_SmtpPassword, \r\n            T.VATRegNumber");
            viewString.Append(" AS Organisation_VatRegNumber, \r\n            T.SystemLengthUnit AS Organisation_");
            viewString.Append("SystemLengthUnit, \r\n            T.SystemWeightUnit AS Organisation_SystemWeightU");
            viewString.Append("nit, \r\n            T.CurrencyID AS Organisation_CurrencyId, \r\n            T.Lang");
            viewString.Append("uageID AS Organisation_LanguageId, \r\n            T.UserDomainKey AS Organisation");
            viewString.Append("_UserDomainKey, \r\n            True AS _from0\r\n        FROM DomainModelsStoreCont");
            viewString.Append("ainer.tbl_company_sites AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.Organisations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_markup
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_markup", @"
    SELECT VALUE -- Constructing tbl_markup
        [DomainModels.Store.tbl_markup](T1.[tbl_markup.MarkUpID], T1.[tbl_markup.MarkUpName], T1.[tbl_markup.MarkUpRate], T1.[tbl_markup.IsFixed], T1.[tbl_markup.SystemSiteID], T1.[tbl_markup.UserDomainKey])
    FROM (
        SELECT 
            T.MarkUpId AS [tbl_markup.MarkUpID], 
            T.MarkUpName AS [tbl_markup.MarkUpName], 
            T.MarkUpRate AS [tbl_markup.MarkUpRate], 
            T.IsFixed AS [tbl_markup.IsFixed], 
            T.SystemSiteId AS [tbl_markup.SystemSiteID], 
            T.UserDomainKey AS [tbl_markup.UserDomainKey], 
            True AS _from0
        FROM BaseDbContext.MarkUps AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.MarkUps
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.MarkUps", @"
    SELECT VALUE -- Constructing MarkUps
        [DomainModels.MarkUp](T1.MarkUp_MarkUpId, T1.MarkUp_MarkUpName, T1.MarkUp_MarkUpRate, T1.MarkUp_IsFixed, T1.MarkUp_SystemSiteId, T1.MarkUp_UserDomainKey)
    FROM (
        SELECT 
            T.MarkUpID AS MarkUp_MarkUpId, 
            T.MarkUpName AS MarkUp_MarkUpName, 
            T.MarkUpRate AS MarkUp_MarkUpRate, 
            T.IsFixed AS MarkUp_IsFixed, 
            T.SystemSiteID AS MarkUp_SystemSiteId, 
            T.UserDomainKey AS MarkUp_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.tbl_markup AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for DomainModelsStoreContainer.tbl_taxrate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("DomainModelsStoreContainer.tbl_taxrate", @"
    SELECT VALUE -- Constructing tbl_taxrate
        [DomainModels.Store.tbl_taxrate](T1.[tbl_taxrate.TaxID], T1.[tbl_taxrate.TaxCode], T1.[tbl_taxrate.TaxName], T1.[tbl_taxrate.SourceStateID], T1.[tbl_taxrate.DestinationStateID], T1.[tbl_taxrate.Tax1], T1.[tbl_taxrate.Tax2], T1.[tbl_taxrate.Tax3], T1.[tbl_taxrate.IsFixed], T1.[tbl_taxrate.UserDomainKey])
    FROM (
        SELECT 
            T.TaxId AS [tbl_taxrate.TaxID], 
            T.TaxCode AS [tbl_taxrate.TaxCode], 
            T.TaxName AS [tbl_taxrate.TaxName], 
            T.SourceStateId AS [tbl_taxrate.SourceStateID], 
            T.DestinationStateId AS [tbl_taxrate.DestinationStateID], 
            T.Tax1 AS [tbl_taxrate.Tax1], 
            T.Tax2 AS [tbl_taxrate.Tax2], 
            T.Tax3 AS [tbl_taxrate.Tax3], 
            T.IsFixed AS [tbl_taxrate.IsFixed], 
            T.UserDomainKey AS [tbl_taxrate.UserDomainKey], 
            True AS _from0
        FROM BaseDbContext.TaxRates AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for BaseDbContext.TaxRates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("BaseDbContext.TaxRates", @"
    SELECT VALUE -- Constructing TaxRates
        [DomainModels.TaxRate](T1.TaxRate_TaxId, T1.TaxRate_TaxCode, T1.TaxRate_TaxName, T1.TaxRate_SourceStateId, T1.TaxRate_DestinationStateId, T1.TaxRate_Tax1, T1.TaxRate_Tax2, T1.TaxRate_Tax3, T1.TaxRate_IsFixed, T1.TaxRate_UserDomainKey)
    FROM (
        SELECT 
            T.TaxID AS TaxRate_TaxId, 
            T.TaxCode AS TaxRate_TaxCode, 
            T.TaxName AS TaxRate_TaxName, 
            T.SourceStateID AS TaxRate_SourceStateId, 
            T.DestinationStateID AS TaxRate_DestinationStateId, 
            T.Tax1 AS TaxRate_Tax1, 
            T.Tax2 AS TaxRate_Tax2, 
            T.Tax3 AS TaxRate_Tax3, 
            T.IsFixed AS TaxRate_IsFixed, 
            T.UserDomainKey AS TaxRate_UserDomainKey, 
            True AS _from0
        FROM DomainModelsStoreContainer.tbl_taxrate AS T
    ) AS T1");
        }
    }
}


